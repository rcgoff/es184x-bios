 = 0001	 	 	 	cp866	 	equ	1	;1 - альтернативная кодировка, 0 - основная
 = 0001	 	 	 	newzagrcw	equ	1	;0 - старый zagrcw, 1 - новый
 	 	 	 	
 	 	 	 	;ASM-файл создан из листинга удалением разбивки на страницы,
 	 	 	 	;удалением пустых строк в начале страниц,
 	 	 	 	;исправлением строк, разбитых в листинге надвое,
 	 	 	 	;удалением пустых строк, оставшихся 
 	 	 	 	;от слишком длинных DB-последовательностей.
 	 	 	 	;Л.Ядренников (RCgoff) 25.04.2020
 	 	 	 	
 	 	 	 	;ESBIOS1 - заданы адреса сегментов (AT address).
 	 	 	 	;в исходном файле сегменты при трансляции включались
 	 	 	 	;в текст программы, а адреса устанавливались специальными
 	 	 	 	;константами, заданными через equ.
 	 	 	 	;Имена были на 1 символ короче имен сегментов (cod,dat,sta..)
 	 	 	 	;Это приводило к раздутию размеров файла и необходимости
 	 	 	 	;пересчета адресов при преобразовании exe2bin.
 	 	 	 	;Теперь оставлена константа только для кодового сегмента.
 	 	 	 	;Остальные убраны,в тексте расставлены ссылки на имена сегментов.
 	 	 	 	;Смещение по DEBUG.exe будет совпадать с реальным.
 	 	 	 	;26.04.20 (19.04.21 - изменения для UTF-8)
 	 	 	 	
 	 	 	 	;ESBIOS2 - условное ассемблирование.
 	 	 	 	;5 имеющися в BIOS текстовых фрагментов транслирутся
 	 	 	 	;в основной (cp866=0) либо альтернативной кодировке.
 	 	 	 	;Транслированный с cp866=0 файл можно шить в ПЗУ,
 	 	 	 	;но он не совпадает с версией 2 (моя реальная машина)
 	 	 	 	;26.04.20 (19.04.21 - изменения для UTF-8)
 	 	 	 	
 	 	 	 	;ESBIOS3 - изменения в файле для того, чтобы он
 	 	 	 	;транслировался в файл, идентичный BIOS версии 2
 	 	 	 	;реальной машины:
 	 	 	 	;	1.Перемещена процедура seek, теперь перед crt_char_ibm
 	 	 	 	;	2.Добавлено в процедуру seek игнорирование ошибок
 	 	 	 	;	  перед второй рекалибровкой и добавлены комментарии
 	 	 	 	;	  (переведенные из IBM-BIOS) для лучшего понимания
 	 	 	 	;	3.Добавлена в тест контроллера прерываний (ТЕСТ.04)
 	 	 	 	;	  загрузка тестовой программы через порт клавиатуры
 	 	 	 	;	4.Добавлена ссылка на адрес начала загруженной
 	 	 	 	;	  через порт клавиатуры программы в сецкию описаний
 	 	 	 	;	5.Пересчитан origin после добавленной в п.3 программы
 	 	 	 	;26.04.20 (23.04.21 - изменения для UTF-8)
 	 	 	 	
 	 	 	 	;ESBIOS4 - первая стадия 866-русификации.
 	 	 	 	;BIOS может быть собран для поддержки основной кодировки
 	 	 	 	;(в этом случае он иденичен реальной версии 2)
 	 	 	 	;или для поддержки кодировки DOS (866 кодовая страница).
 	 	 	 	;Для 866 кодировки:
 	 	 	 	;	1.Заменена таблица crt_char_rus
 	 	 	 	;	  (загружается из внешнего файла CHR866CP.asm)
 	 	 	 	;	2.В таблицах драйвера клавиатуры rust и rust2
 	 	 	 	;	  перекодированы коды русских букв
 	 	 	 	;26.04.20 (28.04.21 - изменения для UTF-8
 	 	 	 	;и в комментах к rust2 сделана таблица для нового caps)
 	 	 	 	 
 	 	 	 	
 	 	 	 	;ESBIOS5 - переделана zagrcw для освобождения места.
 	 	 	 	;Прокомментирован старый обработчик capslock.
 	 	 	 	;30.04.20 (28.04.21 - изменения для UTF-8)
 	 	 	 	
 	 	 	 	
 	 	 	 	;ESBIOS6 - новый обработчик capslock 01.05.2020
 	 	 	 	;сделан с проверками - получился длиннее на 15 байт
 	 	 	 	;съехала dummm_return, но за ней все равно большая дыра
 	 	 	 	;16.08.20 исправлены ошибки
 	 	 	 	;(28.04.21 - изменения для UTF-8)
 	 	 	 	
 	 	 	 	;ESBIOS7 - новый обработчик capslock 01.05.20
 	 	 	 	;с убранными проверками выхода за границу диапазона
 	 	 	 	;букв - уместился на место старого
 	 	 	 	;16.05.20 исправлена ошибка в комменте
 	 	 	 	;(29.04.21 - изменения для UTF-8)
 	 	 	 	
 	 	 	 	
 	 	 	 	;ESBIOS8 - переделка загрузчика таблицы векторов прерываний,
 	 	 	 	;сделано как в PCBIOS v3 и выше. Новая ТВП размещена за 
 	 	 	 	;zagrcw. На ее место обработчик capslock  с проверками
 	 	 	 	;из v.6. Сделан вывод символа номера в русской раскладке
 	 	 	 	;по Shift-3. По включению - латиница (сделаны изменения
 	 	 	 	;и в ПО клавиатуры). Комментарии в обработчике клавиатуры,
 	 	 	 	;реконфигураторе памяти ca0 и тесте памяти e190. 
 	 	 	 	;Завершена работа по перерусификации.
 	 	 	 	;21.09.2020 (01.05.21 - изменения для UTF-8)
 	 	 	 	
 	 	 	 	
 	 	 	 	;2ESBIOS9a - улучшены комментарии в реконфигураторе памяти
 	 	 	 	;29.09.2020 (22.09.21 - изменения для UTF-8)
 	 	 	 	
 	 	 	 	
 	 	 	 	;Microsoft MACRO Assembler  Version 3.00
 	 	 	 	;09-15-88    
 	 	 	 	;___________________	 	 	  	
 	 	 	 	; 8/04/1986 новая клавиатура
 	 	 	 	 PAGE 55,120
 	 	 	 	;  БАЗОВАЯ СИСТЕМА ВВОДА/ВЫВОДА (БСУВВ)
 	 	 	 	;___________________
 = 0060	 	 	 	port_a	equ	60h
 = F000	 	 	 	cod	equ	0f000h
 = 0061	 	 	 	port_b	equ	61h
 = 0062	 	 	 	port_c	equ	62h
 = 0063	 	 	 	cmd_port equ	63h
 = 0020	 	 	 	inta00	equ	20h
 = 0021	 	 	 	inta01	equ	21h
 = 0020	 	 	 	eoi	equ	20h
 = 0040	 	 	 	timer	equ	40h
 = 0043	 	 	 	tim_ctl equ	43h
 = 0040	 	 	 	timero	equ	40h
 = 0001	 	 	 	tmint	equ	01
 = 0008	 	 	 	dma08	equ	08
 = 0000	 	 	 	dma	equ	00
 = 0540	 	 	 	max_period equ	540h
 = 0410	 	 	 	min_period equ	410h
 = 0060	 	 	 	kbd_in	equ	60h
 = 0002	 	 	 	kbdint	equ	02
 = 0060	 	 	 	kb_dat	equ	60h
 = 0061	 	 	 	kb_ctl	equ	61h
 	 	 	 	;_______________
 	 	 	 	;  Расположение прерываний 8086
 	 	 	 	;_________________________
 0000	 	 	 	abs0	segment at 0
 0000	 	 	 	zb	label	byte
 0000	 	 	 	zw	label	word
 0000	 	 	 	stg_loc0 label	byte
 0008	 	 	 	 	org	2*4
 0008	 	 	 	nmi_ptr label	word
 0014	 	 	 	 	org	5*4
 0014	 	 	 	int5_ptr label	word
 0020	 	 	 	 	org	8*4
 0020	 	 	 	int_addr label	word
 0020	 	 	 	int_ptr label	dword
 0034	 	 	 	 	org	0dh*4
 0034	 	 	 	hdisk_int  label  dword
 0040	 	 	 	 	org	10h*4
 0040	 	 	 	video_int label word
 004C	 	 	 	 	org	13h*4
 004C	 	 	 	org_vector  label  dword
 0064	 	 	 	 	org	19h*4
 0064	 	 	 	boot_vec  label  dword
 0074	 	 	 	 	org	1dh*4
 0074	 	 	 	parm_ptr label	dword
 0078	 	 	 	 	org	01eh*4
 0078	 	 	 	disk_pointer label dword
 0078	 	 	 	diskette_parm  label  dword
 007C	 	 	 	 	org	01fh*4
 007C	 	 	 	ext_ptr label	dword
 0100	 	 	 	 	org	040h*4
 0100	 	 	 	disk_vector  label  dword
 0104	 	 	 	 	org	041h*4
 	 	 	 	
 0104	 	 	 	hf_tbl_vec  label  dword
 0410	 	 	 	 	org	410h
 0410	 	 	 	eq_fl	label	byte
 	 	 	 	
 0413	 	 	 	 	org	413h
 0413	 	 	 	mem_siz label	word
 0472	 	 	 	 	org	472h
 0472	 	 	 	res_fl	label	word
 04D0	 	 	 	 	org	4d0h
 04D0	 	 	 	csi	label	word
 04E0	 	 	 	 	org	4e0h
 04E0	 	 	 	tabl1	label	word
 	 	 	 	;RCgoff
 0500	 	 	 	 	org	500h
 0500	 	 	 	mfg_test_rtn label far	;начало кода, загруженного в c21 через порт клавиатуры
 	 	 	 	;RCgoff end
 7C00	 	 	 	 	org	7c00h
 7C00	 	 	 	boot_locn label far
 7C00	 	 	 	abs0	ends
 	 	 	 	
 	 	 	 	;______________________
 	 	 	 	;  Использование стека только во время инициализации
 	 	 	 	;______________________
 0000	 	 	 	stack	segment at 30h
 0000     80 [	 	 	 	dw	128 dup(?)
                ????	 	
                      ]	 	
 	 	 	 	
 	 	 	 	
 0100	 	 	 	tos	label	word
 0100	 	 	 	stack	ends
 	 	 	 	
 	 	 	 	;______________________
 	 	 	 	;  Область данных ПЗУ
 	 	 	 	;____________________
 0000	 	 	 	data segment	at 40h
 0000     04 [	 	 	rs232_base dw 4 dup(?)
                ????	 	
                      ]	 	
 	 	 	 	
 	 	 	 	
 0008     04 [	 	 	printer_base dw 4 dup(?)
                ????	 	
                      ]	 	
 	 	 	 	
 	 	 	 	
 0010  ????	 	 	equip_flag dw ?
 0012  ??	 	 	mfg_tst db	?
 0013  ????	 	 	memory_size dw	?
 0015  ????	 	 	io_ram_size dw	?
 	 	 	 	;_______________
 	 	 	 	;  Область данных клавиатуры
 	 	 	 	;_________________
 0017  ??	 	 	kb_flag db	?
 	 	 	 	
 	 	 	 	;  Размещение флажков в kb_flag
 	 	 	 	
 = 0080	 	 	 	ins_state equ	80h
 = 0040	 	 	 	caps_state equ	40h
 = 0020	 	 	 	num_state equ	20h
 = 0010	 	 	 	scroll_state equ 10h
 = 0008	 	 	 	alt_shift equ	08h
 = 0004	 	 	 	ctl_shift equ	04h
 = 0002	 	 	 	left_shift equ	02h
 = 0001	 	 	 	right_shift equ 01h
 	 	 	 	
 0018  ??	 	 	kb_flag_1 db	?
 	 	 	 	
 = 0080	 	 	 	ins_shift equ	80h
 = 0040	 	 	 	caps_shift equ	40h
 = 0020	 	 	 	num_shift equ	20h
 = 0010	 	 	 	scroll_shift equ 10h
 = 0008	 	 	 	hold_state equ	08h
 = 0004	 	 	 	inv_shift equ	04h                     ;rc флаг=1 при нажатой Р/Л
 = 0002	 	 	 	lat	 	equ	02h             ;rc флаг текущей раскладки, по которой вводится символ
 = 0001	 	 	 	lat_shift	equ	01h 	 	;rc флаг идентичен светодиоду ЛАТ на клавиатуре
 	 	 	 	
 	 	 	 	
 	 	 	 	
 0019  ??	 	 	alt_input db	?
 001A  ????	 	 	buffer_head dw	?
 001C  ????	 	 	buffer_tail dw	?
 001E     10 [	 	 	kb_buffer dw	16 dup(?)
                ????	 	
                      ]	 	
 	 	 	 	
 	 	 	 	
 003E	 	 	 	kb_buffer_end label word
 	 	 	 	
 	 	 	 	;  head=tail указывает на заполнение буфера
 	 	 	 	
 = 0045	 	 	 	num_key equ	69
 = 0046	 	 	 	scroll_key equ	70
 = 0038	 	 	 	alt_key equ	56
 = 001D	 	 	 	ctl_key equ	29
 = 0056	 	 	 	caps_key equ	86
 = 0054	 	 	 	left_key equ	84
 = 0055	 	 	 	right_key equ	85
 = 0052	 	 	 	ins_key equ	82
 = 0053	 	 	 	del_key equ	83
 = 0059	 	 	 	inf_key   equ	89
 = 0058	 	 	 	inv_key_l  equ	88
 = 005A	 	 	 	inv_key_r equ	90
 = 005B	 	 	 	rus_key    equ	91
 = 0057	 	 	 	lat_key equ	87
 	 	 	 	
 	 	 	 	;____________________
 	 	 	 	;  Область данных НГМД
 	 	 	 	;____________________
 003E  ??	 	 	seek_status db	?
 	 	 	 	;
 	 	 	 	;
 = 0080	 	 	 	int_flag equ	080h
 003F  ??	 	 	motor_status db ?
 	 	 	 	;
 	 	 	 	;
 0040  ??	 	 	motor_count db	?
 = 0025	 	 	 	motor_wait equ	37
 	 	 	 	
 	 	 	 	;
 0041  ??	 	 	diskette_status db ?
 = 0080	 	 	 	time_out equ	80h
 = 0040	 	 	 	bad_seek equ	40h
 = 0020	 	 	 	bad_nec  equ	20h
 = 0010	 	 	 	bad_crc  equ	10h
 = 0009	 	 	 	dma_boundary equ 09h
 = 0008	 	 	 	bad_dma  equ	08h
 = 0004	 	 	 	record_not_fnd equ 04h
 = 0003	 	 	 	write_protect equ 03h
 = 0002	 	 	 	bad_addr_mark equ 02h
 = 0001	 	 	 	bad_cmd equ	01h
 	 	 	 	
 0042	 	 	 	cmd_block  label  byte
 0042	 	 	 	hd_error  label  byte
 0042     07 [	 	 	nec_status db	7 dup(?)
                ??	 	
                    ]	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	;_____________________
 	 	 	 	;  Область данных ЭЛИ
 	 	 	 	;_____________________
 0049  ??	 	 	crt_mode db	?
 004A  ????	 	 	crt_cols dw	?
 004C  ????	 	 	crt_len  dw	?
 004E  ????	 	 	crt_start dw	?
 0050     08 [	 	 	cursor_posn dw	8 dup(?)
                ????	 	
                      ]	 	
 	 	 	 	
 	 	 	 	
 0060  ????	 	 	cursor_mode dw	?
 0062  ??	 	 	active_page db	?
 0063  ????	 	 	addr_6845 dw	?
 0065  ??	 	 	crt_mode_set db ?
 0066  ??	 	 	crt_pallette db ?
 	 	 	 	
 	 	 	 	;___________________
 	 	 	 	;  Область данных НМД
 	 	 	 	;___________________
 0067  ????	 	 	io_rom_init dw	?
 0069  ????	 	 	io_rom_seg dw	?
 006B  ??	 	 	last_val db	?
 	 	 	 	
 	 	 	 	;___________________
 	 	 	 	;  Область данных таймера
 	 	 	 	;___________________
 006C  ????	 	 	timer_low dw	?
 006E  ????	 	 	timer_high dw	?
 0070  ??	 	 	timer_ofl db	?
 	 	 	 	;counts_sec equ 18
 	 	 	 	;counts_min equ 1092
 	 	 	 	;counts_hour equ 65543
 	 	 	 	;counts_day equ 1573040 = 1800b0h
 	 	 	 	
 	 	 	 	;___________________
 	 	 	 	;  Область данных системы
 	 	 	 	;___________________
 0071  ??	 	 	bios_break db	?
 0072  ????	 	 	reset_flag dw	?
 0074  ??	 	 	diskw_status  db  ?
 0075  ??	 	 	hf_num	db   ?
 0076  ??	 	 	control_byte  db  ?
 0077  ??	 	 	port_off  db  ?
 007C	 	 	 	 	 	org	7ch
 007C	 	 	 	stat_offset	label	byte ; смещение для хранения состояний модема
 	 	 	 	
 0080	 	 	 	 	org	80h
 0080  ????	 	 	buffer_start	dw	?
 0082  ????	 	 	buffer_end	dw	?
 0090	 	 	 	 	org	0090h
 0090  ????	 	 	idnpol	dw	?
 00E0	 	 	 	 	org	0e0h
 00E0	 	 	 	tabl	label	word
 	 	 	 	;
 00E0	 	 	 	data	ends
 	 	 	 	
 	 	 	 	;___________________
 	 	 	 	;  Область расширения данных
 	 	 	 	;_________________________________
 0000	 	 	 	xxdata segment	at 50h
 0000  ??	 	 	status_byte db	?
 0001	 	 	 	xxdata	ends
 	 	 	 	
 	 	 	 	;_________________
 	 	 	 	;  Буфер ЭЛИ
 	 	 	 	;___________________
 0000	 	 	 	video_ram segment at 0b800h
 0000	 	 	 	regen	label	byte
 0000	 	 	 	regenw	label	word
 0000  4000 [	 	 	 	db	16384 dup(?)
                ??	 	
                    ]	 	
 	 	 	 	
 	 	 	 	
 4000	 	 	 	video_ram ends
 	 	 	 	;____________________
 	 	 	 	;  Основной массив в ПЗУ (сегмент code)
 	 	 	 	;____________________
 	 	 	 	;***************  INT 13  *****************************************
 	 	 	 	;******************************************************************
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;    Программа обслуживания накопителя на магнитном диске
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;	ВВОД
 	 	 	 	;	 	(АН-шестнадцатеричное значение)
 	 	 	 	;    (АН=00) - сброс НМД (DL=80H,81H)/НГМД
 	 	 	 	;	(АН=01) считывание состояния последней операции диска в (AL)
 	 	 	 	;	 	  Замечание: DL<80Н-НГМД,DL>80Н-НМД
 	 	 	 	;	(АН=02) считывание указанных секторов в память
 	 	 	 	;	(АН=03) запись указанных секторов из памяти
 	 	 	 	;	(АН=04) проверка указанных секторов
 	 	 	 	;	(АН=05) форматизация указанной дорожки
 	 	 	 	;	(АН=06) форматизация указанной дорожки
 	 	 	 	;	 	неверного сектора
 	 	 	 	;	(АН=07) форматизация устройства,начиная с указанной дорожки
 	 	 	 	;	(АН=08) возврат текущих параметров устройства
 	 	 	 	;	(АН=09) инициализация характеристик устройства
 	 	 	 	;	 	Прерывание 41H указывает на блок данных
 	 	 	 	;	(АН=0А) длинное считывание
 	 	 	 	;	(АН=0В) длинная запись
 	 	 	 	;	 	Замечание:длинные считывание и запись включают 512 байт +
 	 	 	 	;	 	4 байта ЕСС
 	 	 	 	;	(АН=0С) установка
 	 	 	 	;	(АН=0D) селективный сброс диска
 	 	 	 	;	(АН=0Е) считать буфер сектора
 	 	 	 	;	(АН=0F) записать буфера сектора
 	 	 	 	;	(АН=10) проверить готовность устройства
 	 	 	 	;	(АН=11) рекалибровать
 	 	 	 	;	(АН=12) диагностика памяти контроллера
 	 	 	 	;	(АН=13) диагностика устройства
 	 	 	 	;	(АН=14) внутренняя диагностика контроллера
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;	Регистры,используемые для операций НМД
 	 	 	 	;
 	 	 	 	;	(DL) -номер устройства (80Н-87Н для диска,контр.значение)
 	 	 	 	;	(DH) -номер головки (разрешается 0-7,не контр.значение)
 	 	 	 	;	(СН) -номер цилиндра (0-1023,не контролируемое значение)
 	 	 	 	;	(СL) -номер сектора (1-17,не контролируемое значение)
 	 	 	 	;	 	Замечание:старшие 2 бита номера цилиндра размещены
 	 	 	 	;	 	в двух старших битах регистра CL (всего 10 бит)
 	 	 	 	;	(АL) -число секторов (максимально возможное число 1-80Н,
 	 	 	 	;	      для длинного считывания/записи 1-79H)
 	 	 	 	;	(значение чередования для форматизации 1-16D)
 	 	 	 	;	(ES:BX)-адрес буфера для бит номера цилиндра
 	 	 	 	;	 	(не требуется для проверки)
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;	ВЫВОД
 	 	 	 	;	АН-состояние текущей операции
 	 	 	 	;	   CF=0 -успешная операция (АН=0 при возврате)
 	 	 	 	;	   CF=1 -неверная операция (АН содержит ошибку)
 	 	 	 	;
 	 	 	 	;	Замечание:ошибка 11Н показывает,что считанные данные имеют
 	 	 	 	;	 	  исправляемую ошибку,которая была скорректирована
 	 	 	 	;	 	  алгоритмом ЕСС.Ошибка может не повторяться,если
 	 	 	 	;	 	  данные перезаписаны.(АL) содержит длину пакета.
 	 	 	 	;
 	 	 	 	;	Если были затребованы параметры устройства:
 	 	 	 	;
 	 	 	 	;	DL -количество подключенных устройств(0-2)
 	 	 	 	;	DH -максимальное используемое значение для номера головки
 	 	 	 	;	СН -максимальное используемое значение для номера цилиндра
 	 	 	 	;	CL -максимальное используемое значение для номера сектора и
 	 	 	 	;	    старших бит номера цилиндра
 	 	 	 	;
 	 	 	 	;	Замечание:если ошибка имеет место в коде диска,то диск
 	 	 	 	;	 	  сбрасывается,и операция повторяется
 	 	 	 	;
 	 	 	 	;
 0000	 	 	 	code segment para
 	 	 	 	;
 = 00FF	 	 	 	sense_fail	equ	0ffh	  ;
 = 00BB	 	 	 	undef_err	equ	0bbh
 = 0080	 	 	 	time_out	equ	80h
 = 0040	 	 	 	bad_seek	equ	40h
 = 0020	 	 	 	bad_cntlr	equ	20h
 = 0011	 	 	 	data_corrected	equ	11h
 = 0010	 	 	 	bad_ecc 	equ	10h
 = 000B	 	 	 	bad_track	equ	0bh
 = 0009	 	 	 	dma_boundary	equ	09h
 = 0007	 	 	 	init_fail	equ	07h
 = 0005	 	 	 	bad_reset	equ	05h
 = 0004	 	 	 	record_not_fnd	equ	04h
 = 0002	 	 	 	bad_addr_mark	equ	02h
 = 0001	 	 	 	bad_cmd 	equ	01h
 	 	 	 	;
 	 	 	 	;-------Порт контроллера в/в-------------------------------------
 	 	 	 	;
 	 	 	 	;	 	-считывание из порта:
 	 	 	 	;	HF_PORT+0 -считывание данных(из контроллера в CPU)
 	 	 	 	;	HF_PORT+1 -считывание состояния оборудования контроллера
 	 	 	 	;	HF_PORT+2 -считывание конфигурации переключателей
 	 	 	 	;	HF_PORT+3 -не используется
 	 	 	 	;
 	 	 	 	;	 	-запись в порт:
 	 	 	 	;	HF_PORT+0 -запись данных (из CPU в контроллер)
 	 	 	 	;	HF_PORT+1 -сброс контроллера
 	 	 	 	;	HF_PORT+2 -выработка такта выборки контроллера
 	 	 	 	;	HF_PORT+3 -запись в регистр маски ПДП/прерывания
 	 	 	 	;
 	 	 	 	;----------------------------------------------------------------
 	 	 	 	
 	 	 	 	;
 	 	 	 	;
 	 	 	 	
 = 0320	 	 	 	hf_port 	equ	0320h	    ; порт НМД
 = 0008	 	 	 	r1_busy 	equ	00001000b   ; бит занятости порта 1 диска
 = 0004	 	 	 	r1_bus	 	equ	00000100b   ; бит команда/данные порта 1 диска
 = 0002	 	 	 	r1_iomode	equ	00000010b   ; бит режима порта 1 диска
 = 0001	 	 	 	r1_req	 	equ	00000001b   ; бит запроса порта 1 диска
 	 	 	 	
 = 0047	 	 	 	dma_read	equ	01000111b   ; 3 канал ПДП (при считывании-047Н)
 = 004B	 	 	 	dma_write	equ	01001011b   ; 3 канал ПДП (при записи-04ВН)
 = 0000	 	 	 	dma	 	equ	0	    ; адрес ПДП
 = 0082	 	 	 	dma_high	equ	082h	    ; порт для старших 4бит ПДП
 	 	 	 	
 = 0000	 	 	 	tst_rdy_cmd	equ	00000000b
 = 0001	 	 	 	recal_cmd	equ	00000001b
 = 0003	 	 	 	sense_cmd	equ	00000011b
 = 0004	 	 	 	fmtdrv_cmd	equ	00000100b
 = 0005	 	 	 	chk_trk_cmd	equ	00000101b
 = 0006	 	 	 	fmttrk_cmd	equ	00000110b
 = 0007	 	 	 	fmtbad_cmd	equ	00000111b
 = 0008	 	 	 	read_cmd	equ	00001000b
 = 000A	 	 	 	write_cmd	equ	00001010b
 = 000B	 	 	 	seek_cmd	equ	00001011b
 = 000C	 	 	 	init_drv_cmd	equ	00001100b
 = 000D	 	 	 	rd_ecc_cmd	equ	00001101b
 = 000E	 	 	 	rd_buff_cmd	equ	00001110b
 = 000F	 	 	 	wr_buff_cmd	equ	00001111b
 = 00E0	 	 	 	ram_diag_cmd	equ	11100000b
 = 00E3	 	 	 	chk_drv_cmd	equ	11100011b
 = 00E4	 	 	 	cntlr_diag_cmd	equ	11100100b
 = 00E5	 	 	 	rd_long_cmd	equ	11100101b
 = 00E6	 	 	 	wr_long_cmd	equ	11100110b
 	 	 	 	
 = 0020	 	 	 	int_ctl_port	equ	20h
 = 0020	 	 	 	eoi	 	equ	20h
 	 	 	 	
 = 0008	 	 	 	max_file	equ	8
 = 0002	 	 	 	s_max_file	equ	2
 	 	 	 	
 	 	 	 	 	assume	cs:code
 C000	 	 	 	 	org	0c000h
 	 	 	 	
 C000  55	 	 	 	db	055h
 C001  AA	 	 	 	db	0aah
 C002  10	 	 	 	db	16d
 	 	 	 	
 	 	 	 	;----------------------------------------------------------------
 	 	 	 	;      ТЕСТ НМД
 	 	 	 	;
 	 	 	 	;	-установка векторов для НМД
 	 	 	 	;	-выполнение диагностики по включению электропитания должно
 	 	 	 	;	 отображать информацию об ошибках '1701' на дисплее
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;---------------------------------------------------------------
 	 	 	 	
 C003	 	 	 	disk_setup	proc	near
 C003  EB 1E	 	 	 	jmp	short	l3
 	 	 	 	
 	 	 	 	;RCgoff
 	 	 	 	if	cp866
 	 	 	 	;' БАЗОВАЯ СИСТЕМА ВВОДА/ВЫВОДА ' (cp866)
 C005  20 81 80 87 8E 82	 	db	20h,81h,80h,87h,8Eh,82h,80h,9Fh,20h,91h,88h,91h 
       80 9F 20 91 88 91	
 C011  92 85 8C 80 20 82	 	db	92h,85h,8Ch,80h,20h,82h,82h,8Eh,84h,80h,2Fh,82h
       82 8E 84 80 2F 82	
 C01D  9B 82 8E 84 80 20	 	db	9Bh,82h,8Eh,84h,80h,20h	
 	 	 	 	endif
 	 	 	 	;RCgoff end
 	 	 	 	
 C023	 	 	 	l3:
 	 	 	 	 	assume	ds:abs0
 C023  2B C0	 	 	 	sub	ax,ax
 C025  8E D8	 	 	 	mov	ds,ax	 	    ; установка сегмента DUMMY (0)
 C027  FA	 	 	 	cli	 	; сброс признака разрешения прерывания
 C028  A1 004C R	 	 	mov	ax,word ptr org_vector	; установка вектора НГМД
 C02B  A3 0100 R	 	 	mov	word ptr disk_vector,ax ;     в прерывание 40Н
 C02E  A1 004E R	 	 	mov	ax,word ptr org_vector+2
 C031  A3 0102 R	 	 	mov	word ptr disk_vector+2,ax
 C034  C7 06 004C R C256 R	 	mov	word ptr org_vector,offset disk_io  ; поддержка
 C03A  8C 0E 004E R	 	 	mov	word ptr org_vector+2,cs   ; НМД
 	 	 	 	
 C03E  B8 C760 R	 	 	mov	ax,offset hd_int
 C041  A3 0034 R	 	 	mov	word ptr hdisk_int,ax  ; прерывание НМД
 C044  8C 0E 0036 R	 	 	mov	word ptr hdisk_int+2,cs
 C048  C7 06 0064 R C186 R	 	mov	word ptr boot_vec,offset boot_strapt ; загрузка
 C04E  8C 0E 0066 R	 	 	mov	word ptr boot_vec+2,cs
 C052  C7 06 0104 R C3E7 R	 	mov	word ptr hf_tbl_vec,offset fd_tbl ; таблица параметров
 C058  8C 0E 0106 R	 	 	mov	word ptr hf_tbl_vec+2,cs
 C05C  FB	 	 	 	sti	; установить признак разрешения прерывания
 	 	 	 	
 	 	 	 	 	assume	ds:data
 C05D  B8 ---- R	 	 	mov	ax,data
 C060  8E D8	 	 	 	mov	ds,ax	 	; установка сегмента DATA
 C062  C6 06 0074 R 00	 	 	mov	diskw_status,0	; сброс индикации состояния
 C067  C6 06 0075 R 00	 	 	mov	hf_num,0	; нулевое число устройств
 C06C  C6 06 0043 R 00	 	 	mov	cmd_block+1,0	; нулевое устройство,установить
 	 	 	 	 	 	 	 	; значение в блоке команд
 C071  C6 06 0077 R 00	 	 	mov	port_off,0	; нулевое смещение порта
 	 	 	 	
 C076  B9 0025	 	 	 	mov	cx,25h	 	; число повторений
 C079	 	 	 	l4:
 C079  E8 C16E R	 	 	call	hd_reset_1	; сброс контроллера
 C07C  73 05	 	 	 	jnc	l7
 C07E  E2 F9	 	 	 	loop	l4	; повторный сброс,счетчик повторений = 25Н
 C080  E9 C142 R	 	 	jmp	error_ex
 C083	 	 	 	l7:
 C083  B9 0001	 	 	 	mov	cx,1
 C086  BA 0080	 	 	 	mov	dx,80h
 	 	 	 	
 C089  B8 1200	 	 	 	mov	ax,1200h	; диагностика памяти контроллера
 C08C  CD 13	 	 	 	int	13h
 C08E  73 03	 	 	 	jnc	p7t
 C090  E9 C142 R	 	 	jmp	error_ex
 C093	 	 	 	p7t:
 C093  B8 1400	 	 	 	mov	ax,1400h	; внутренняя диагностика контроллера
 C096  CD 13	 	 	 	int	13h
 C098  73 03	 	 	 	jnc	p9t
 C09A  E9 C142 R	 	 	jmp	error_ex
 C09D	 	 	 	p9t:
 C09D  C7 06 006C R 0000	 	mov	timer_low,0	; обнуление таймера
 C0A3  A1 0072 R	 	 	mov	ax,reset_flag
 C0A6  3D 1234	 	 	 	cmp	ax,1234h	; сброс клавиатуры?
 C0A9  75 06	 	 	 	jne	p8t
 C0AB  C7 06 006C R 019A	 	mov	timer_low,410d
 C0B1	 	 	 	p8t:
 C0B1  E4 21	 	 	 	in	al,021h
 C0B3  24 FE	 	 	 	and	al,0feh 	; таймер доступен
 C0B5  E6 21	 	 	 	out	021h,al 	; запуск таймера
 C0B7	 	 	 	p4t:
 C0B7  E8 C16E R	 	 	call	hd_reset_1	; сброс контроллера
 C0BA  72 07	 	 	 	jc	p10t
 C0BC  B8 1000	 	 	 	mov	ax,1000h	; проверить готовность устройства
 C0BF  CD 13	 	 	 	int	13h
 C0C1  73 0B	 	 	 	jnc	p2t
 C0C3	 	 	 	p10t:
 C0C3  A1 006C R	 	 	mov	ax,timer_low
 C0C6  3D 01BE	 	 	 	cmp	ax,446d 	; 25 секунд
 C0C9  72 EC	 	 	 	jb	p4t
 C0CB  EB 75 90	 	 	 	jmp	error_ex
 C0CE	 	 	 	p2t:
 C0CE  B9 0001	 	 	 	mov	cx,1
 C0D1  BA 0080	 	 	 	mov	dx,80h	 	; DL=80Н - НМД 0
 C0D4  B8 0900	 	 	 	mov	ax,0900h	; установка параметров у-ва
 C0D7  CD 13	 	 	 	int	13h
 C0D9  72 67	 	 	 	jc	error_ex
 	 	 	 	
 C0DB  B8 1100	 	 	 	mov	ax,1100h	; рекалибровка
 C0DE  CD 13	 	 	 	int	13h
 C0E0  72 60	 	 	 	jc	error_ex
 	 	 	 	
 C0E2  B8 FC00	 	 	 	mov	ax,0fc00h
 C0E5  8E C0	 	 	 	mov	es,ax	 	; установка сегмента ES=FC00
 C0E7  2B DB	 	 	 	sub	bx,bx	 	; смещение (ВХ) равно 0
 C0E9  B8 0F00	 	 	 	mov	ax,0f00h	; запись буфера сектора (АН=0F)
 C0EC  CD 13	 	 	 	int	13h
 	 	 	 	
 C0EE  72 52	 	 	 	jc	error_ex
 	 	 	 	
 C0F0  FE 06 0075 R	 	 	inc	hf_num	 	; нулевое устройство опрошено
 	 	 	 	
 C0F4  BA 0213	 	 	 	mov	dx,213h 	; блок расширения
 C0F7  B0 00	 	 	 	mov	al,0
 C0F9  EE	 	 	 	out	dx,al	 	; отключение блока расширения
 C0FA  BA 0321	 	 	 	mov	dx,321h 	; считывание состояния оборудования
 	 	 	 	 	 	 	 	; контроллера.Находится ли контроллер
 	 	 	 	 	 	 	 	; в системном блоке?
 C0FD  EC	 	 	 	in	al,dx
 C0FE  24 0F	 	 	 	and	al,0fh	 	; выделение 4-х младших бит
 C100  3C 0F	 	 	 	cmp	al,0fh
 C102  74 06	 	 	 	je	box_on
 C104  C7 06 006C R 01A4	 	mov	timer_low,420d	; контроллер в системном блоке
 C10A	 	 	 	box_on:
 C10A  BA 0213	 	 	 	mov	dx,213h 	; блок расширения
 C10D  B0 FF	 	 	 	mov	al,0ffh
 C10F  EE	 	 	 	out	dx,al	 	; включение блока расширения
 	 	 	 	
 C110  B9 0001	 	 	 	mov	cx,1
 C113  BA 0081	 	 	 	mov	dx,081h 	; DL=81 - НМД 1
 C116	 	 	 	p3t:
 C116  2B C0	 	 	 	sub	ax,ax	 	; сброс диска (АН=00)
 C118  CD 13	 	 	 	int	13h
 C11A  72 40	 	 	 	jc	pod_done
 C11C  B8 1100	 	 	 	mov	ax,01100h	; рекалибровка (АН=11)
 C11F  CD 13	 	 	 	int	13h
 C121  73 0B	 	 	 	jnc	p5t
 C123  A1 006C R	 	 	mov	ax,timer_low
 C126  3D 01BE	 	 	 	cmp	ax,446d 	; 25 секунд
 C129  72 EB	 	 	 	jb	p3t
 C12B  EB 2F 90	 	 	 	jmp	pod_done
 C12E	 	 	 	p5t:
 C12E  B8 0900	 	 	 	mov	ax,0900h	; инициализация характеристик устройства
 C131  CD 13	 	 	 	int	13h
 C133  72 27	 	 	 	jc	pod_done
 C135  FE 06 0075 R	 	 	inc	hf_num	 	; увеличение числа устройств
 C139  81 FA 0081	 	 	cmp	dx,[80h + s_max_file - 1]
 C13D  73 1D	 	 	 	jae	pod_done
 C13F  42	 	 	 	inc	dx	 	; увеличение номера устройства
 C140  EB D4	 	 	 	jmp	p3t
 	 	 	 	
 	 	 	 	;------Ошибки POD
 	 	 	 	
 C142	 	 	 	error_ex:
 C142  BD 000F	 	 	 	mov	bp,0fh	 	; флажки ошибок POD
 C145  2B C0	 	 	 	sub	ax,ax
 C147  8B F0	 	 	 	mov	si,ax	 	; счетчик равен 0
 C149  B9 0006 90	 	 	mov	cx,f17tl	; сообщение числа символов (6 байт)
 C14D  B7 00	 	 	 	mov	bh,0	 	; обнуление страницы
 C14F	 	 	 	out_ch:
 C14F  2E: 8A 84 C168 R	 	 	mov	al,cs:f17t[si]	; получение байта
 C154  B4 0E	 	 	 	mov	ah,14d	 	; ЭЛИ
 C156  CD 10	 	 	 	int	10h	 	; отображение символа
 C158  46	 	 	 	inc	si	 	; следующий символ
 C159  E2 F4	 	 	 	loop	out_ch
 C15B  F9	 	 	 	stc	; установка признака переноса
 C15C	 	 	 	pod_done:
 C15C  FA	 	 	 	cli	; сброс признака разрешения прерывания
 C15D  E4 21	 	 	 	in	al,021h
 C15F  0C 01	 	 	 	or	al,01h	 	; таймер неработоспособен
 C161  E6 21	 	 	 	out	021h,al
 C163  FB	 	 	 	sti	; установить признак разрешения прерывания
 C164  E8 C20C R	 	 	call	dsbl	 	; сброс маски прерывания
 C167  C3	 	 	 	ret
 	 	 	 	
 C168  31 37 30 31 0D 0A	f17t	db	'1701',0dh,0ah  ;    1701
 	 	 	 	
 = 0006	 	 	 	f17tl	equ	$-f17t
 	 	 	 	
 C16E	 	 	 	hd_reset_1	proc	near	; сброс контроллера
 C16E  51	 	 	 	push	cx	 	; сохранение регистров
 C16F  52	 	 	 	push	dx
 C170  F8	 	 	 	clc	 	 	; сброс переноса
 C171  B9 0100	 	 	 	mov	cx,0100h	; счетчик повторений
 C174	 	 	 	l6:
 C174  E8 C77E R	 	 	call	port_1
 C177  EE	 	 	 	out	dx,al	 	; сброс контроллера
 C178  E8 C77E R	 	 	call	port_1
 C17B  EC	 	 	 	in	al,dx	 	; считывание состояния
 C17C  24 02	 	 	 	and	al,2	 	; проверка сброса бита 1(ввод/вывод)
 C17E  74 03	 	 	 	jz	r3t
 C180  E2 F2	 	 	 	loop	l6	 	; повторение сброса,счетчик = 100Н
 C182  F9	 	 	 	stc	; установить признак переноса при неудачном сбросе
 C183	 	 	 	r3t:
 C183  5A	 	 	 	pop	dx	 	; восстановление регистров
 C184  59	 	 	 	pop	cx
 C185  C3	 	 	 	ret
 C186	 	 	 	hd_reset_1	endp
 	 	 	 	
 C186	 	 	 	disk_setup	endp
 	 	 	 	
 	 	 	 	;-----------INT 19---------------------------------------
 	 	 	 	;
 	 	 	 	;    Прерывание 19H загрузки системы
 	 	 	 	;    -БСУВВ НМД размещает в прерывании 19H вектор
 	 	 	 	;     первоначальной загрузки с указателем на эту программу загрузки
 	 	 	 	;    -сброс векторов параметров неверного НМД  или НГМД
 	 	 	 	;    -программа загрузки будет прочитана из цилиндра 0 сектора 1
 	 	 	 	;    -последовательность загрузки:
 	 	 	 	;	  -попытка загрузить систему с НГМД в ячейку BOOT_LOCN
 	 	 	 	;	   (0000/7C00)
 	 	 	 	;	  -если НГМД отсутствует, НМД используется
 	 	 	 	;	   как действительный блок загрузки.Действительный блок
 	 	 	 	;	   загрузки на НМД содержит байты 055Н 0ААН,
 	 	 	 	;	   как последние два байта блока
 	 	 	 	;	  -если отсутствуют и НГМД, и НМД, то устанавливается преры-
 	 	 	 	;	вание типа INT 18H, которое вызывает выполнение программ
 	 	 	 	;	тестирования и инициализации системы
 	 	 	 	;----------------------------------------------------------------------
 	 	 	 	
 C186	 	 	 	boot_strapt:
 	 	 	 	 	assume	ds:abs0,es:abs0
 C186  2B C0	 	 	 	sub	ax,ax
 C188  8E D8	 	 	 	mov	ds,ax	 	; установка сегмента DUMMY (0)
 	 	 	 	
 	 	 	 	;-----Установка параметров векторов---------------------------
 	 	 	 	
 C18A  FA	 	 	 	cli	; сброс признака разрешения прерывания
 C18B  C7 06 0104 R C3E7 R	 	mov	word ptr hf_tbl_vec,offset fd_tbl
 C191  8C 0E 0106 R	 	 	mov	word ptr hf_tbl_vec+2,cs
 C195  C7 06 0078 R C201 R	 	mov	word ptr diskette_parm,offset diskette_tbl
 C19B  8C 0E 007A R	 	 	mov	word ptr diskette_parm+2,cs
 C19F  FB	 	 	 	sti	; установка признака разрешения прерывания
 	 	 	 	
 	 	 	 	;-------Попытка загрузки с НГМД----------------------------------
 	 	 	 	
 C1A0  B9 0003	 	 	 	mov	cx,3	 	; установить счетчик повторений
 C1A3	 	 	 	h1t:
 C1A3  51	 	 	 	push	cx	 	; запомнить счетчик повторений
 C1A4  2B D2	 	 	 	sub	dx,dx	 	; обнуление номера устройства
 C1A6  2B C0	 	 	 	sub	ax,ax	 	; сброс НГМД
 C1A8  CD 13	 	 	 	int	13h
 C1AA  72 0F	 	 	 	jc	h2t	 	; если ошибка,еще попытка
 C1AC  B8 0201	 	 	 	mov	ax,0201h	; считывание одного сектора
 	 	 	 	
 C1AF  2B D2	 	 	 	sub	dx,dx
 C1B1  8E C2	 	 	 	mov	es,dx	 	; установка сегмента
 C1B3  BB 7C00 R	 	 	mov	bx,offset boot_locn ; начальный адрес блока загрузки
 	 	 	 	
 C1B6  B9 0001	 	 	 	mov	cx,1	 	; сектор 1,дорожка 0
 C1B9  CD 13	 	 	 	int	13h
 C1BB  59	 	 	h2t:	pop	cx	 	; восстановление числа повторений
 C1BC  73 0A	 	 	 	jnc	h4t	 	; при неудачном считывании CF=1
 C1BE  80 FC 80	 	 	 	cmp	ah,80h	; если time-out,нет повторения
 C1C1  74 0A	 	 	 	jz	h5	; попытка загрузки с НГМД
 C1C3  E2 DE	 	 	 	loop	h1t	; проделать загрузку с НГМД для нужного
 	 	 	 	 	 	 	; числа повторений
 C1C5  EB 06 90	 	 	 	jmp	h5	; невозможность загрузки программы с НГМД
 C1C8	 	 	 	h4t:	 	 	 	; загрузка была успешной
 C1C8  EA 00 7C 00 00	 	 	db	0eah,00h,7ch,0,0   ; JMP     BOOT_LOCN
 	 	 	 	
 	 	 	 	;-------Попытка загрузки с НГМД---------------------------------------
 	 	 	 	
 C1CD	 	 	 	h5:
 C1CD  2B C0	 	 	 	sub	ax,ax	 	; сброс НГМД (АН=0)
 C1CF  2B D2	 	 	 	sub	dx,dx
 C1D1  CD 13	 	 	 	int	13h
 C1D3  B9 0003	 	 	 	mov	cx,3	 	; установить счетчик повторений
 C1D6	 	 	 	h6:	 	 	 	; IPL_SYSTEM
 C1D6  51	 	 	 	push	cx	 	; запомнить счетчик повторений
 C1D7  BA 0080	 	 	 	mov	dx,0080h	; нулевой НМД
 C1DA  2B C0	 	 	 	sub	ax,ax	 	; сброс диска (АН=0)
 C1DC  CD 13	 	 	 	int	13h
 C1DE  72 12	 	 	 	jc	h7	 	; если ошибка,еще попытка
 C1E0  B8 0201	 	 	 	mov	ax,0201h	; считывание одного сектора
 C1E3  2B DB	 	 	 	sub	bx,bx
 C1E5  8E C3	 	 	 	mov	es,bx	 	; установка сегмента
 C1E7  BB 7C00 R	 	 	mov	bx,offset boot_locn ; начальный адрес блока загрузки
 C1EA  BA 0080	 	 	 	mov	dx,80h	 	; НМД 0
 C1ED  B9 0001	 	 	 	mov	cx,1	 	; сектор 1, дорожка 0
 C1F0  CD 13	 	 	 	int	13h
 C1F2  59	 	 	h7:	pop	cx	 	; восстановить счетчик повторений
 C1F3  72 08	 	 	 	jc	h8
 C1F5  A1 7DFE R	 	 	mov	ax,word ptr boot_locn+510d  ; считываются последние
 	 	 	 	 	 	 	 	 	    ; 2 байта блока загрузки
 C1F8  3D AA55	 	 	 	cmp	ax,0aa55h	; тест для генерации BOOT (последние
 	 	 	 	 	 	 	 	; 2 байта блока должны быть равны АА55Н)
 C1FB  74 CB	 	 	 	jz	h4t	 	; загрузка была успешной
 C1FD	 	 	 	h8:
 C1FD  E2 D7	 	 	 	loop	h6  ;проделать загрузку для нужного числа повторений
 	 	 	 	
 	 	 	 	;----Невозможность загрузки с НГМД или с НМД--------------------
 	 	 	 	
 C1FF  CD 18	 	 	 	int	18h	 	; RESTART
 	 	 	 	;-------Таблица параметров НГМД-------------------------------------
 C201	 	 	 	diskette_tbl:
 C201  CF	 	 	 	db	11001111b	; SRT=C,HD UNLOAD=0F-первый байт
 C202  02	 	 	 	db	2	 	; HD LOAD=1,MODE=DMA-второй байт
 C203  25	 	 	 	db	25h	 	; ожидание после выключения мотора
 C204  02	 	 	 	db	2	 	; 512 байт на сектор
 C205  08	 	 	 	db	8	 	; ЕОТ (последний сектор на дорожке)
 C206  2A	 	 	 	db	02ah	 	; длина пробела
 C207  FF	 	 	 	db	0ffh	 	; DTL
 C208  50	 	 	 	db	050h	 	; длина пробела для форматизации
 C209  F6	 	 	 	db	0f6h	 	; полный байт для форматизации
 C20A  19	 	 	 	db	25	 	; время установки головки (мсек)
 C20B  04	 	 	 	db	4	 	; время запуска мотора (1/8 сек)
 	 	 	 	
 	 	 	 	;
 	 	 	 	
 C20C	 	 	 	dsbl	proc	near
 	 	 	 	 	assume	ds:data
 C20C  1E	 	 	 	push	ds	 	; запомнить сегмент
 C20D  B8 ---- R	 	 	mov	ax,data
 C210  8E D8	 	 	 	mov	ds,ax	 	; установка сегмента DATA
 	 	 	 	
 C212  8A 26 0077 R	 	 	mov	ah,port_off
 C216  50	 	 	 	push	ax	 	; запомнить смещение порта
 	 	 	 	
 C217  C6 06 0077 R 00	 	 	mov	port_off,0h	; смещение равно 0Н
 C21C  E8 C788 R	 	 	call	port_3	 	; порт 323
 C21F  2A C0	 	 	 	sub	al,al
 C221  EE	 	 	 	out	dx,al	 	; сброс маски INT/DMA (в порт 323
 	 	 	 	 	 	 	 	; записывается нулевой байт)
 C222  C6 06 0077 R 04	 	 	mov	port_off,4h	; смещение равно 4Н
 C227  E8 C788 R	 	 	call	port_3	 	; порт 327
 C22A  2A C0	 	 	 	sub	al,al
 C22C  EE	 	 	 	out	dx,al	 	; сброс маски INT/DMA
 C22D  C6 06 0077 R 08	 	 	mov	port_off,8h	; смещение равно 8Н
 C232  E8 C788 R	 	 	call	port_3	 	; порт 32В
 C235  2A C0	 	 	 	sub	al,al
 C237  EE	 	 	 	out	dx,al	 	; сброс маски INT/DMA
 C238  C6 06 0077 R 0C	 	 	mov	port_off,0ch	; смещение равно 0СН
 C23D  E8 C788 R	 	 	call	port_3	 	; порт 32F
 C240  2A C0	 	 	 	sub	al,al
 C242  EE	 	 	 	out	dx,al	 	; сброс маски INT/DMA
 C243  B0 07	 	 	 	mov	al,07h
 C245  E6 0A	 	 	 	out	dma+10,al	; установить режим ПДП невозможным
 C247  FA	 	 	 	cli
 C248  E4 21	 	 	 	in	al,021h
 C24A  0C 20	 	 	 	or	al,020h
 C24C  E6 21	 	 	 	out	021h,al 	; невозможность прерывания 5
 C24E  FB	 	 	 	sti	; установить признак разрешения прерывания
 C24F  58	 	 	 	pop	ax	 	; восстановить смещение порта
 C250  88 26 0077 R	 	 	mov	port_off,ah
 C254  1F	 	 	 	pop	ds	 	; восстановить сегмент
 C255  C3	 	 	 	ret
 C256	 	 	 	dsbl	endp
 	 	 	 	
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	;-------Точка входа в БСУВВ НМД---------------------------------------
 	 	 	 	;----------------------------------------------------------------------
 	 	 	 	
 C256	 	 	 	disk_io proc	far
 	 	 	 	 	assume	ds:nothing,es:nothing
 C256  80 FA 80	 	 	 	cmp	dl,80h	 	; проверка наличия НМД
 C259  73 05	 	 	 	jae	hard_disk	; есть НМД
 C25B  CD 40	 	 	 	int	40h	 	; НГМД
 C25D	 	 	 	ret_2:
 C25D  CA 0002	 	 	 	ret	2
 C260	 	 	 	hard_disk:
 	 	 	 	 	assume	ds:data
 C260  FB	 	 	 	sti	 	     ; установка признака разрешения прерывания
 C261  0A E4	 	 	 	or	ah,ah
 C263  75 09	 	 	 	jnz	a3
 C265  CD 40	 	 	 	int	40h	 	; сброс НГМД
 C267  2A E4	 	 	 	sub	ah,ah
 C269  80 FA 81	 	 	 	cmp	dl,[80h + s_max_file - 1] ; устройство 80 и 81
 C26C  77 EF	 	 	 	ja	ret_2	 	; если номер устройства больше
 	 	 	 	 	 	 	 	; максимального,то на выход
 C26E	 	 	 	a3:
 C26E  80 FC 08	 	 	 	cmp	ah,08	 	; возврат параметров
 C271  75 03	 	 	 	jnz	a2
 C273  E9 C390 R	 	 	jmp	get_parmt_n	; возврат параметров устройства
 C276	 	 	 	a2:
 C276  53	 	 	 	push	bx	 	; запомнить регистры
 C277  51	 	 	 	push	cx
 C278  52	 	 	 	push	dx
 C279  1E	 	 	 	push	ds
 C27A  06	 	 	 	push	es
 C27B  56	 	 	 	push	si
 C27C  57	 	 	 	push	di
 	 	 	 	
 C27D  E8 C2EA R	 	 	call	disk_io_cont	; выполнение операции
 	 	 	 	
 C280  50	 	 	 	push	ax
 C281  E8 C20C R	 	 	call	dsbl	 	; убедиться,что все сброшено
 C284  B8 ---- R	 	 	mov	ax,data
 C287  8E D8	 	 	 	mov	ds,ax	 	; установить сегмент DATA
 C289  58	 	 	 	pop	ax
 C28A  8A 26 0074 R	 	 	mov	ah,diskw_status ; получить состояние операции
 C28E  80 FC 01	 	 	 	cmp	ah,1	 	; установить флажок переноса для
 	 	 	 	 	 	 	 	; индикации неуспешной операции
 C291  F5	 	 	 	cmc	; заменить значение CF на противоположное
 C292  5F	 	 	 	pop	di	 	; восстановление регистров
 C293  5E	 	 	 	pop	si
 C294  07	 	 	 	pop	es
 C295  1F	 	 	 	pop	ds
 C296  5A	 	 	 	pop	dx
 C297  59	 	 	 	pop	cx
 C298  5B	 	 	 	pop	bx
 C299  CA 0002	 	 	 	ret	2
 C29C	 	 	 	disk_io endp
 	 	 	 	;-------Таблица переходов по АН--------------------------------------
 C29C	 	 	 	m1t	label	word
 C29C  C338 R	 	 	 	dw	disk_resett	; 000h
 C29E  C34D R	 	 	 	dw	return_status	; 001h
 C2A0  C356 R	 	 	 	dw	disk_readt	; 002h
 C2A2  C360 R	 	 	 	dw	disk_writet	; 003h
 C2A4  C36A R	 	 	 	dw	disk_verft	; 004h
 C2A6  C372 R	 	 	 	dw	fmt_trk 	; 005h
 C2A8  C379 R	 	 	 	dw	fmt_bad 	; 006h
 C2AA  C380 R	 	 	 	dw	fmt_drv 	; 007h
 C2AC  C330 R	 	 	 	dw	bad_command	; 008h
 C2AE  C427 R	 	 	 	dw	init_drv	; 009h
 C2B0  C4CF R	 	 	 	dw	rd_long 	; 00ah
 C2B2  C4DD R	 	 	 	dw	wr_long 	; 00bh
 C2B4  C4F2 R	 	 	 	dw	disk_seek	; 00ch
 C2B6  C338 R	 	 	 	dw	disk_resett	; 00dh
 C2B8  C4F9 R	 	 	 	dw	rd_buff 	; 00eh
 C2BA  C507 R	 	 	 	dw	wr_buff 	; 00fh
 C2BC  C515 R	 	 	 	dw	tst_rdy 	; 010h
 C2BE  C51C R	 	 	 	dw	hdisk_recal	; 011h
 C2C0  C523 R	 	 	 	dw	ram_diag	; 012h
 C2C2  C52A R	 	 	 	dw	chk_drv 	; 013h
 C2C4  C531 R	 	 	 	dw	cntlr_diag	; 014h
 = 002A	 	 	 	m1tl	equ	$-m1t
 	 	 	 	;-------Формирование 1-го байта управляющего блока(устр.+головка)-----
 C2C6	 	 	 	setup_a proc	near
 C2C6  C6 06 0074 R 00	 	 	mov	diskw_status,0	; сброс индикации состояния
 C2CB  51	 	 	 	push	cx	 	; запомнить СХ
 	 	 	 	
 	 	 	 	;-------Вычисление сдвига порта (PORT_OFF)---------------------------
 	 	 	 	
 C2CC  8A EA	 	 	 	mov	ch,dl	 	; запомнить номер устройства в СН
 C2CE  80 CA 01	 	 	 	or	dl,1	 	; установка младшего разряда в 1
 C2D1  FE CA	 	 	 	dec	dl	 	; уменьшить номер устройства на 1
 C2D3  D0 E2	 	 	 	shl	dl,1  ; выработка сдвига для пары 0-1(2-3,4-5,6-7)
 C2D5  88 16 0077 R	 	 	mov	port_off,dl	; запись сдвига
 C2D9  8A D5	 	 	 	mov	dl,ch	 	; восстановление номера устройства
 C2DB  80 E2 01	 	 	 	and	dl,1	 	; выделение младшего разряда
 	 	 	 	
 C2DE  B1 05	 	 	 	mov	cl,5	 	; счетчик сдвига
 C2E0  D2 E2	 	 	 	shl	dl,cl ; номер устройства сдвигается на 5 разрядов влево
 C2E2  0A D6	 	 	 	or	dl,dh	; номер головки + сдвинутый номер устройства
 C2E4  88 16 0043 R	 	 	mov	cmd_block+1,dl	; формирование 1-го байта упр.слова
 C2E8  59	 	 	 	pop	cx	 	; восстанавливаем СХ
 C2E9  C3	 	 	 	ret
 C2EA	 	 	 	setup_a endp
 	 	 	 	
 C2EA	 	 	 	disk_io_cont	proc	near	; выполнение операции
 C2EA  50	 	 	 	push	ax
 C2EB  B8 ---- R	 	 	mov	ax,data
 C2EE  8E D8	 	 	 	mov	ds,ax	 	; установка сегмента DATA
 C2F0  58	 	 	 	pop	ax
 C2F1  80 FC 01	 	 	 	cmp	ah,01h	 	; проверяется возврат состояния (АН=1)
 C2F4  75 03	 	 	 	jnz	a4
 C2F6  EB 55 90	 	 	 	jmp	return_status	; переход на возврат состояния
 C2F9	 	 	 	a4:
 C2F9  80 EA 80	 	 	 	sub	dl,80h	 	; номер устройства начинается с 0
 C2FC  80 FA 08	 	 	 	cmp	dl,max_file	; проверка номера устройства
 C2FF  73 2F	 	 	 	jae	bad_command
 	 	 	 	
 C301  E8 C2C6 R	 	 	call	setup_a 	  ; формирование 1-го байта упр.блока
 	 	 	 	
 	 	 	 	;-------Формирование блока команд---------------------------------
 	 	 	 	
 C304  FE C9	 	 	 	dec	cl	; сектора 0-16 для контроллера
 C306  C6 06 0042 R 00	 	 	mov	cmd_block+0,0
 C30B  88 0E 0044 R	 	 	mov	cmd_block+2,cl	; сектор и старшие 2 бита цилиндра
 C30F  88 2E 0045 R	 	 	mov	cmd_block+3,ch	; цилиндр
 C313  A2 0046 R	 	 	mov	cmd_block+4,al	; чередование/число блоков
 C316  A0 0076 R	 	 	mov	al,control_byte
 C319  A2 0047 R	 	 	mov	cmd_block+5,al	; управляющий байт
 C31C  50	 	 	 	push	ax	 	; запомнить АХ
 C31D  8A C4	 	 	 	mov	al,ah	 	; получить в AL код операции
 C31F  32 E4	 	 	 	xor	ah,ah	 	; нулевой старший байт
 C321  D1 E0	 	 	 	sal	ax,1 ; сдвиг на 2 разряда влево для получения смещения
 C323  8B F0	 	 	 	mov	si,ax	; смещение получить в SI для ветвления
 C325  3D 002A	 	 	 	cmp	ax,m1tl ; смещение в пределах заданной области?
 C328  58	 	 	 	pop	ax	 	; восстановление АХ
 C329  73 05	 	 	 	jnb	bad_command
 C32B  2E: FF A4 C29C R	 	 	jmp	word ptr cs:[si + offset m1t ] ; переход по смещению
 C330	 	 	 	bad_command:
 C330  C6 06 0074 R 01	 	 	mov	diskw_status,bad_cmd	; ошибка в команде
 C335  B0 00	 	 	 	mov	al,0
 C337  C3	 	 	 	ret
 C338	 	 	 	disk_io_cont	endp
 	 	 	 	
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	;	Сброс диска (АН=00Н)
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	
 C338	 	 	 	disk_resett	proc	near
 C338  E8 C77E R	 	 	call	port_1	 	; порт сброса
 C33B  EE	 	 	 	out	dx,al	 	; сброс контроллера
 C33C  E8 C77E R	 	 	call	port_1
 C33F  EC	 	 	 	in	al,dx	 	; получить состояние
 C340  24 02	 	 	 	and	al,2	 	; проверка сброса бита 1 (ввод/вывод)
 C342  74 06	 	 	 	jz	dr1
 C344  C6 06 0074 R 05	 	 	mov	diskw_status,bad_reset	; неудачный сброс
 C349  C3	 	 	 	ret
 C34A	 	 	 	dr1:
 C34A  E9 C427 R	 	 	jmp	init_drv	; инициализация параметров устройства
 C34D	 	 	 	disk_resett	endp
 	 	 	 	
 	 	 	 	;----------------------------------------------------------------------
 	 	 	 	;	Программа состояния диска (АН=001)
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	
 C34D	 	 	 	return_status	proc	near
 C34D  A0 0074 R	 	 	mov	al,diskw_status ; получение предыдущего состояния
 C350  C6 06 0074 R 00	 	 	mov	diskw_status,0	; сброс состояния
 C355  C3	 	 	 	ret
 C356	 	 	 	return_status	endp
 	 	 	 	
 	 	 	 	;-----------------------------------------------------------------------
 	 	 	 	;	Программа считывания диска (АН=002Н)
 	 	 	 	;-----------------------------------------------------------------------
 	 	 	 	
 C356	 	 	 	disk_readt	proc	near
 C356  B0 47	 	 	 	mov	al,dma_read	; байт режима для чтения ПДП
 C358  C6 06 0042 R 08	 	 	mov	cmd_block+0,read_cmd	; код операции
 C35D  E9 C545 R	 	 	jmp	dma_opn
 C360	 	 	 	disk_readt	endp
 	 	 	 	
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	;	Программа записи диска (АН=003Н)
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	
 C360	 	 	 	disk_writet	proc	near
 C360  B0 4B	 	 	 	mov	al,dma_write	; байт режима для записи ПДП (3 канал)
 C362  C6 06 0042 R 0A	 	 	mov	cmd_block+0,write_cmd
 C367  E9 C545 R	 	 	jmp	dma_opn
 C36A	 	 	 	disk_writet	endp
 	 	 	 	
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	;	Проверка диска (АН=004Н)
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	
 C36A	 	 	 	disk_verft	proc	near
 C36A  C6 06 0042 R 05	 	 	mov	cmd_block+0,chk_trk_cmd
 C36F  E9 C536 R	 	 	jmp	ndma_opn
 C372	 	 	 	disk_verft	endp
 	 	 	 	
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	;	Форматизация (АН=005Н,006Н,007Н)
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	
 C372	 	 	 	fmt_trk proc	near	 	; форматизация дорожки (АН=005Н)
 C372  C6 06 0042 R 06	 	 	mov	cmd_block,fmttrk_cmd
 C377  EB 0C	 	 	 	jmp	short	fmt_cont
 C379	 	 	 	fmt_trk endp
 	 	 	 	
 C379	 	 	 	fmt_bad proc	near	    ; форматизация неверной дорожки (АН=006Н)
 C379  C6 06 0042 R 07	 	 	mov	cmd_block,fmtbad_cmd
 C37E  EB 05	 	 	 	jmp	short	fmt_cont
 C380	 	 	 	fmt_bad endp
 	 	 	 	
 C380	 	 	 	fmt_drv proc	near	 	; форматизация устройства (АН=007Н)
 C380  C6 06 0042 R 04	 	 	mov	cmd_block,fmtdrv_cmd
 C385	 	 	 	fmt_drv endp
 	 	 	 	
 C385	 	 	 	fmt_cont:
 C385  A0 0044 R	 	 	mov	al,cmd_block+2
 C388  24 C0	 	 	 	and	al,11000000b	; обнуление поля сектора
 C38A  A2 0044 R	 	 	mov	cmd_block+2,al
 C38D  E9 C536 R	 	 	jmp	ndma_opn
 	 	 	 	
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	;	Получение параметров устройства (АН=008Н)
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	
 C390	 	 	 	get_parmt_n	label	near
 C390	 	 	 	get_parmt	proc	far
 C390  1E	 	 	 	push	ds	 	; сохранение регистров
 C391  06	 	 	 	push	es
 C392  53	 	 	 	push	bx
 	 	 	 	
 	 	 	 	 	assume	ds:abs0
 C393  2B C0	 	 	 	sub	ax,ax
 C395  8E D8	 	 	 	mov	ds,ax	 	; установка сегмента
 C397  C4 1E 0104 R	 	 	les	bx,hf_tbl_vec	; адрес таблицы параметров FD_TBL
 	 	 	 	 	assume	ds:data
 C39B  B8 ---- R	 	 	mov	ax,data
 C39E  8E D8	 	 	 	mov	ds,ax	 	; установка сегмента DATA
 	 	 	 	
 C3A0  80 EA 80	 	 	 	sub	dl,80h
 C3A3  80 FA 08	 	 	 	cmp	dl,max_file	; проверка номера устройства
 C3A6  73 2F	 	 	 	jae	g4t
 	 	 	 	
 C3A8  E8 C2C6 R	 	 	call	setup_a  ; формирование 1-го байта упр. блока
 	 	 	 	
 C3AB  E8 C78D R	 	 	call	sw2_offs ; формирование смещения для таблицы параметров
 C3AE  72 27	 	 	 	jc	g4t
 C3B0  03 D8	 	 	 	add	bx,ax	; адрес таблицы параметров
 	 	 	 	
 C3B2  26: 8B 07	 	 	mov	ax,es:[bx]	; максимальный номер цилиндра
 C3B5  2D 0002	 	 	 	sub	ax,2	; установить номер 0-N и зарезервировать
 	 	 	 	 	 	 	; последнюю дорожку для диагностики
 C3B8  8A E8	 	 	 	mov	ch,al	; мл.разряды номера цилиндра в СН
 C3BA  25 0300	 	 	 	and	ax,0300h	; старшие 2 бита цилиндра
 C3BD  D1 E8	 	 	 	shr	ax,1
 C3BF  D1 E8	 	 	 	shr	ax,1	; сдвиг на 2 разряда вправо (из АН в AL)
 C3C1  0C 11	 	 	 	or	al,011h 	; максимальное число секторов
 C3C3  8A C8	 	 	 	mov	cl,al	; в CL-ст.разряды номера цилиндра+число секторов
 	 	 	 	
 C3C5  26: 8A 77 02	 	 	mov	dh,es:[bx][2]	; максимальный номер головки
 C3C9  FE CE	 	 	 	dec	dh	 	; номер головки начинается с 0
 C3CB  8A 16 0075 R	 	 	mov	dl,hf_num	; число устройств
 C3CF  2B C0	 	 	 	sub	ax,ax
 C3D1	 	 	 	g5t:
 C3D1  5B	 	 	 	pop	bx	 	; сохранить регистры
 C3D2  07	 	 	 	pop	es
 C3D3  1F	 	 	 	pop	ds
 C3D4  CA 0002	 	 	 	ret	2
 C3D7	 	 	 	g4t:
 C3D7  C6 06 0074 R 07	 	 	mov	diskw_status,init_fail	; неверная операция
 C3DC  B4 07	 	 	 	mov	ah,init_fail	 	; код ошибки в АН
 C3DE  2A C0	 	 	 	sub	al,al	 	 	; нулевые параметры
 C3E0  2B D2	 	 	 	sub	dx,dx
 C3E2  2B C9	 	 	 	sub	cx,cx
 C3E4  F9	 	 	 	stc	 	 	 	; установить флажок ошибки
 C3E5  EB EA	 	 	 	jmp	g5t
 C3E7	 	 	 	get_parmt	endp
 	 	 	 	
 	 	 	 	;----------------------------------------------------------------------
 	 	 	 	;	Инициализация характеристик устройства
 	 	 	 	;----------------------------------------------------------------------
 	 	 	 	;	Таблица параметров НМД
 	 	 	 	;	Таблица составлена из следующих блоков:
 	 	 	 	;	(1 слово)-максимальное число цилиндров
 	 	 	 	;	(1 байт) -максимальное число головок
 	 	 	 	;	(1 слово)- начальный цилиндр уменьшения тока записи
 	 	 	 	;	(1 слово)- начальный цилиндр предкомпенсации
 	 	 	 	;	(1 байт) -максимальная длина блока данных ЕСС
 	 	 	 	;	(1 байт) -байт управления
 	 	 	 	;	 	бит 7-невозможность повторения доступа к диску
 	 	 	 	;	 	бит 6-невозможность повторения ЕСС
 	 	 	 	;	 	биты  5-3-нули
 	 	 	 	;	 	биты 2-0 -выбор устройства
 	 	 	 	;	(1 байт) -стандартное значение time_out
 	 	 	 	;	(1 байт) -значение time_out для форматизации устройства
 	 	 	 	;	(1 байт) -значение time_out для проверки устройства
 	 	 	 	;	(4 байта)-резерв для последующего использования
 	 	 	 	;
 	 	 	 	;	-чтобы определить набор параметров,строится таблица значений
 	 	 	 	;	 и помещается соответствующий вектор в прерывание 41H
 	 	 	 	;
 	 	 	 	
 	 	 	 	;	Установка переключателей на плате
 	 	 	 	;
 	 	 	 	;	 	 	устройство 0	устройство 1
 	 	 	 	;	 	   ------------------------------------
 	 	 	 	;	включен    :	 	      / 	      :
 	 	 	 	;	 	   :   -1-    -2-     /   -3-	-4-   :
 	 	 	 	;	выключен   :	 	      / 	      :
 	 	 	 	;	 	   ------------------------------------
 	 	 	 	;
 	 	 	 	;	Таблица расшифровки:
 	 	 	 	;
 	 	 	 	;	 	1/3	2/4	вход таблицы
 	 	 	 	;	      -------------------------------
 	 	 	 	;	       вкл   : вкл   :	    0
 	 	 	 	;	       вкл   : выкл  :	    1
 	 	 	 	;	       выкл  : вкл   :	    2
 	 	 	 	;	       выкл  : выкл  :	    3
 	 	 	 	;	      -------------------------------
 	 	 	 	
 C3E7	 	 	 	fd_tbl:
 	 	 	 	
 	 	 	 	;-------Тип устройства 00 ( 10 Mb, г.Пенза )------------------------
 	 	 	 	
 C3E7  00CD	 	 	 	dw	0cdh
 C3E9  06	 	 	 	db	06d
 C3EA  0080	 	 	 	dw	080h
 C3EC  0000	 	 	 	dw	0000d
 C3EE  0B	 	 	 	db	0bh
 C3EF  05	 	 	 	db	05h
 C3F0  0C	 	 	 	db	0ch
 C3F1  B4	 	 	 	db	0b4h
 C3F2  28	 	 	 	db	028h
 C3F3  00 00 00 00	 	 	db	0,0,0,0
 	 	 	 	
 	 	 	 	;-------Тип устройства 01 ( 20 Мб,615 цилиндров )-------------------
 	 	 	 	
 C3F7  0267	 	 	 	dw	0267h
 C3F9  04	 	 	 	db	04d
 C3FA  0267	 	 	 	dw	0267h
 C3FC  012C	 	 	 	dw	0300d
 C3FE  0B	 	 	 	db	0bh
 C3FF  05	 	 	 	db	05h
 C400  28	 	 	 	db	028h
 C401  E0	 	 	 	db	0e0h
 C402  42	 	 	 	db	042h
 C403  00 00 00 00	 	 	db	0,0,0,0
 	 	 	 	
 	 	 	 	;-------Тип устройства 02 ( 20 Мб, 612 цилиндров )-----------------
 	 	 	 	
 C407  0264	 	 	 	dw	0612d
 C409  04	 	 	 	db	04d
 C40A  0264	 	 	 	dw	0612d
 C40C  0000	 	 	 	dw	0
 C40E  0B	 	 	 	db	0bh
 C40F  05	 	 	 	db	05h
 C410  28	 	 	 	db	028h
 C411  E0	 	 	 	db	0e0h
 C412  42	 	 	 	db	042h
 C413  00 00 00 00	 	 	db	0,0,0,0
 	 	 	 	
 	 	 	 	;-------Тип устройства 03 --------------------------------------------
 	 	 	 	
 C417  0132	 	 	 	dw	0306d
 C419  04	 	 	 	db	04d
 C41A  0132	 	 	 	dw	0306d
 C41C  0000	 	 	 	dw	0000d
 C41E  0B	 	 	 	db	0bh
 C41F  05	 	 	 	db	05h
 C420  0C	 	 	 	db	0ch
 C421  B4	 	 	 	db	0b4h
 C422  28	 	 	 	db	028h
 C423  00 00 00 00	 	 	db	0,0,0,0
 	 	 	 	
 C427	 	 	 	init_drv	proc	near	; инициализация устройства
 	 	 	 	
 	 	 	 	;------Для нулевого устройства---------------------------------------
 	 	 	 	
 C427  C6 06 0042 R 0C	 	 	mov	cmd_block+0,init_drv_cmd	; код операции
 C42C  C6 06 0043 R 00	 	 	mov	cmd_block+1,0	; устройство 0,головка 0
 C431  E8 C444 R	 	 	call	init_drv_r ; считываем 8 байт из таблицы параметров
 C434  72 0D	 	 	 	jc	init_drv_out
 	 	 	 	
 	 	 	 	;-------Для первого устройства -------------------------------------
 	 	 	 	
 C436  C6 06 0042 R 0C	 	 	mov	cmd_block+0,init_drv_cmd	; код операции
 C43B  C6 06 0043 R 20	 	 	mov	cmd_block+1,00100000b	; устройство 1,головка 0
 C440  E8 C444 R	 	 	call	init_drv_r  ; считываем 8 байт из таблицы параметров
 C443	 	 	 	init_drv_out:
 C443  C3	 	 	 	ret
 C444	 	 	 	init_drv	endp
 	 	 	 	;------Считываем 8 байт из таблицы параметров-----------------------
 C444	 	 	 	init_drv_r	proc	near
 	 	 	 	 	assume	es:code
 C444  2A C0	 	 	 	sub	al,al
 C446  E8 C562 R	 	 	call	command 	; выдача команды (6 байт)
 C449  73 01	 	 	 	jnc	b1t
 C44B  C3	 	 	 	ret
 C44C	 	 	 	b1t:
 C44C  1E	 	 	 	push	ds
 	 	 	 	 	assume	ds:abs0
 C44D  2B C0	 	 	 	sub	ax,ax
 C44F  8E D8	 	 	 	mov	ds,ax	 	; установка сегмента
 C451  C4 1E 0104 R	 	 	les	bx,hf_tbl_vec	; адрес таблицы параметров FD_TBL
 C455  1F	 	 	 	pop	ds
 	 	 	 	 	assume	ds:data
 C456  E8 C78D R	 	 	call	sw2_offs	; сдвиг таблицы параметров
 C459  72 57	 	 	 	jc	b3t
 C45B  03 D8	 	 	 	add	bx,ax	 	; сдвиг начального адреса таблицы
 	 	 	 	
 	 	 	 	;----Получение параметров устройства----------------------------
 	 	 	 	
 C45D  BF 0001	 	 	 	mov	di,1
 C460  E8 C4C2 R	 	 	call	init_drv_s	;запись первого байта из таблицы
 	 	 	 	 	 	 	 	;параметров (адрес BX+DI)-старший байт
 	 	 	 	 	 	 	 	;максимального номера цилиндра
 C463  72 4D	 	 	 	jc	b3t
 	 	 	 	
 C465  BF 0000	 	 	 	mov	di,0	 	; 0 байт из таблицы
 C468  E8 C4C2 R	 	 	call	init_drv_s	; младший байт номера цилиндра
 C46B  72 45	 	 	 	jc	b3t
 	 	 	 	
 C46D  BF 0002	 	 	 	mov	di,2	 	; 2 байт из таблицы
 C470  E8 C4C2 R	 	 	call	init_drv_s	; максимальное число головок
 C473  72 3D	 	 	 	jc	b3t
 	 	 	 	
 C475  BF 0004	 	 	 	mov	di,4	 	; 4 байт из таблицы
 C478  E8 C4C2 R	 	 	call	init_drv_s	; ст.байт записи текущего цилиндра
 C47B  72 35	 	 	 	jc	b3t
 	 	 	 	
 C47D  BF 0003	 	 	 	mov	di,3	 	; 3 байт из таблицы
 C480  E8 C4C2 R	 	 	call	init_drv_s	; мл.байт записи текущего цилиндра
 C483  72 2D	 	 	 	jc	b3t
 	 	 	 	
 C485  BF 0006	 	 	 	mov	di,6	 	; 6 байт из таблицы
 C488  E8 C4C2 R	 	 	call	init_drv_s	; ст.байт записи с предкомпенсацией
 C48B  72 25	 	 	 	jc	b3t
 	 	 	 	
 C48D  BF 0005	 	 	 	mov	di,5	 	; 5 байт из таблицы
 C490  E8 C4C2 R	 	 	call	init_drv_s	;мл.байт записи с предкомпенсацией
 C493  72 1D	 	 	 	jc	b3t
 	 	 	 	
 C495  BF 0007	 	 	 	mov	di,7	 	; 7 байт из таблицы
 C498  E8 C4C2 R	 	 	call	init_drv_s	; максимальная длина блока данных ЕСС
 C49B  72 15	 	 	 	jc	b3t
 	 	 	 	
 C49D  BF 0008	 	 	 	mov	di,8	 	; 8 байт из таблицы
 C4A0  26: 8A 01	 	 	mov	al,es:[bx + di] ; байт управления
 C4A3  A2 0076 R	 	 	mov	control_byte,al
 	 	 	 	
 C4A6  2B C9	 	 	 	sub	cx,cx
 C4A8	 	 	 	b5t:
 C4A8  E8 C77E R	 	 	call	port_1
 C4AB  EC	 	 	 	in	al,dx	 	; считывание состояния
 C4AC  A8 02	 	 	 	test	al,r1_iomode	; проверка режима ввода
 C4AE  75 09	 	 	 	jnz	b6t
 C4B0  E2 F6	 	 	 	loop	b5t
 C4B2	 	 	 	b3t:
 C4B2  C6 06 0074 R 07	 	 	mov	diskw_status,init_fail	; неверная операция
 C4B7  F9	 	 	 	stc	 	 	 	; установить перенос
 C4B8  C3	 	 	 	ret
 C4B9	 	 	 	b6t:
 C4B9  E8 C771 R	 	 	call	port_0	 	 	; порт данных
 C4BC  EC	 	 	 	in	al,dx	 	 	; считывание байта состояния
 C4BD  24 02	 	 	 	and	al,2	 	 	; проверяется бит ошибки
 C4BF  75 F1	 	 	 	jnz	b3t	 	 	; переход по ошибке
 C4C1  C3	 	 	 	ret
 	 	 	 	 	assume	es:nothing
 C4C2	 	 	 	init_drv_r	endp
 	 	 	 	
 	 	 	 	;-------Послать байт в контроллер------------------------------------
 	 	 	 	
 C4C2	 	 	 	init_drv_s	proc	near
 C4C2  E8 C68A R	 	 	call	hd_wait_req	; ожидание установки запроса
 C4C5  72 07	 	 	 	jc	d1t	 	; нет запроса
 C4C7  E8 C771 R	 	 	call	port_0	 	; порт данных
 C4CA  26: 8A 01	 	 	mov	al,es:[bx + di] ; считывание байта из таблицы
 C4CD  EE	 	 	 	out	dx,al	 	; запись байта в контроллер
 C4CE	 	 	 	d1t:
 C4CE  C3	 	 	 	ret
 C4CF	 	 	 	init_drv_s	endp
 	 	 	 	
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	;	Длинное считывание (АН=0АН)
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	
 C4CF	 	 	 	rd_long 	proc	near
 C4CF  E8 C4EB R	 	 	call	chk_long	; проверка длины блока
 C4D2  72 6B	 	 	 	jc	g8t
 C4D4  C6 06 0042 R E5	 	 	mov	cmd_block+0,rd_long_cmd ; код операции
 C4D9  B0 47	 	 	 	mov	al,dma_read	 	; 3 канал ПДП
 C4DB  EB 68	 	 	 	jmp	short	dma_opn
 C4DD	 	 	 	rd_long 	endp
 	 	 	 	
 	 	 	 	;----------------------------------------------------------------------
 	 	 	 	;	Длинная запись (АН=0ВН)
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	
 C4DD	 	 	 	wr_long 	proc	near
 C4DD  E8 C4EB R	 	 	call	chk_long	; проверка длины блока
 C4E0  72 5D	 	 	 	jc	g8t
 C4E2  C6 06 0042 R E6	 	 	mov	cmd_block+0,wr_long_cmd ; код операции
 C4E7  B0 4B	 	 	 	mov	al,dma_write	; 3 канал ПДП
 C4E9  EB 5A	 	 	 	jmp	short	dma_opn
 C4EB	 	 	 	wr_long 	endp
 	 	 	 	
 C4EB	 	 	 	chk_long	proc	near	; проверка длины блока
 C4EB  A0 0046 R	 	 	mov	al,cmd_block+4	; счетчик
 C4EE  3C 80	 	 	 	cmp	al,080h 	; длинные считывание и запись от 1 до 79Н
 C4F0  F5	 	 	 	cmc	; заменяет значение переноса на противоположное
 C4F1  C3	 	 	 	ret
 C4F2	 	 	 	chk_long	endp
 	 	 	 	
 	 	 	 	;-------------------------------------------------------------------
 	 	 	 	;	Установка (АН=0СН)
 	 	 	 	;-------------------------------------------------------------------
 	 	 	 	
 C4F2	 	 	 	disk_seek	proc	near
 C4F2  C6 06 0042 R 0B	 	 	mov	cmd_block,seek_cmd	; код операции
 C4F7  EB 3D	 	 	 	jmp	short	ndma_opn
 C4F9	 	 	 	disk_seek	endp
 	 	 	 	
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	;	Считывание буфера сектора (АН=0ЕН)
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	
 C4F9	 	 	 	rd_buff proc	near
 C4F9  C6 06 0042 R 0E	 	 	mov	cmd_block+0,rd_buff_cmd ; код операции
 C4FE  C6 06 0046 R 01	 	 	mov	cmd_block+4,1	 	; один сектор
 C503  B0 47	 	 	 	mov	al,dma_read	 	; 3 канал ПДП
 C505  EB 3E	 	 	 	jmp	short	dma_opn
 C507	 	 	 	rd_buff endp
 	 	 	 	
 	 	 	 	;-------------------------------------------------------------------
 	 	 	 	;	Запись буфера сектора (АН=0FH)
 	 	 	 	;-------------------------------------------------------------------
 	 	 	 	
 C507	 	 	 	wr_buff proc	near
 C507  C6 06 0042 R 0F	 	 	mov	cmd_block+0,wr_buff_cmd ; код операции
 C50C  C6 06 0046 R 01	 	 	mov	cmd_block+4,1	 	; один сектор
 C511  B0 4B	 	 	 	mov	al,dma_write	 	; 3 канал ПДП
 C513  EB 30	 	 	 	jmp	short	dma_opn
 C515	 	 	 	wr_buff endp
 	 	 	 	
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	;	Проверка готовности диска (АН=010Н)
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	
 C515	 	 	 	tst_rdy proc	near
 C515  C6 06 0042 R 00	 	 	mov	cmd_block+0,tst_rdy_cmd ; код операции
 C51A  EB 1A	 	 	 	jmp	short	ndma_opn
 C51C	 	 	 	tst_rdy endp
 	 	 	 	
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	;	Рекалибровка (АН=011Н)
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	
 C51C	 	 	 	hdisk_recal	proc	near
 C51C  C6 06 0042 R 01	 	 	mov	cmd_block+0,recal_cmd	; код операции
 C521  EB 13	 	 	 	jmp	short	ndma_opn
 C523	 	 	 	hdisk_recal	endp
 	 	 	 	
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	;	Диагностика памяти контроллера (АН=012Н)
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	
 C523	 	 	 	ram_diag	proc	near
 C523  C6 06 0042 R E0	 	 	mov	cmd_block+0,ram_diag_cmd
 C528  EB 0C	 	 	 	jmp	short	ndma_opn
 C52A	 	 	 	ram_diag	endp
 	 	 	 	
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	;	Диагностика устройства (АН=013Н)
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	
 C52A	 	 	 	chk_drv proc	near
 C52A  C6 06 0042 R E3	 	 	mov	cmd_block+0,chk_drv_cmd
 C52F  EB 05	 	 	 	jmp	short	ndma_opn
 C531	 	 	 	chk_drv endp
 	 	 	 	
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	;	Внутренняя диагностика контроллера (АН=014Н)
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	
 C531	 	 	 	cntlr_diag	proc	near
 C531  C6 06 0042 R E4	 	 	mov	cmd_block+0,cntlr_diag_cmd
 C536	 	 	 	cntlr_diag	endp
 	 	 	 	
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	;	Программы поддержки
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	
 C536	 	 	 	ndma_opn:
 C536  B0 02	 	 	 	mov	al,02h
 C538  E8 C562 R	 	 	call	command 	; получение команды
 C53B  72 21	 	 	 	jc	g11
 C53D  EB 16	 	 	 	jmp	short	g3t
 C53F	 	 	 	g8t:
 C53F  C6 06 0074 R 09	 	 	mov	diskw_status,dma_boundary	; нарушение границы
 C544  C3	 	 	 	ret
 C545	 	 	 	dma_opn:
 C545  E8 C69F R	 	 	call	dma_setupt	; установка операции ПДП
 C548  72 F5	 	 	 	jc	g8t
 C54A  B0 03	 	 	 	mov	al,03h
 C54C  E8 C562 R	 	 	call	command 	; получение команды
 C54F  72 0D	 	 	 	jc	g11
 C551  B0 03	 	 	 	mov	al,03h
 C553  E6 0A	 	 	 	out	dma+10,al	; инициализация каналов
 C555	 	 	 	g3t:
 C555  E4 21	 	 	 	in	al,021h
 C557  24 DF	 	 	 	and	al,0dfh 	; разрешение прерываний диска
 C559  E6 21	 	 	 	out	021h,al
 C55B  E8 C708 R	 	 	call	wait_intt	; ожидание прерывания
 C55E	 	 	 	g11:
 C55E  E8 C59C R	 	 	call	error_chk	; обработка ошибок
 C561  C3	 	 	 	ret
 	 	 	 	
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	;	 	КОМАНДА
 	 	 	 	;	Посылает управляющий блок в контроллер
 	 	 	 	;	ВВОД
 	 	 	 	;
 	 	 	 	;	AL=маска регистра DMA/INT
 	 	 	 	;
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	
 C562	 	 	 	command proc	near
 C562  BE 0042 R	 	 	mov	si,offset cmd_block ; начальный адрес для считывания
 	 	 	 	 	 	 	 	    ; блока команд
 C565  E8 C783 R	 	 	call	port_2
 C568  EE	 	 	 	out	dx,al	; выработка сигнала выборки контроллера
 C569  E8 C788 R	 	 	call	port_3
 C56C  EE	 	 	 	out	dx,al	; установка маски DMA/INT
 C56D  2B C9	 	 	 	sub	cx,cx	; счетчик ожидания
 C56F  E8 C77E R	 	 	call	port_1
 C572	 	 	 	wait_busy:
 C572  EC	 	 	 	in	al,dx	; получение состояния контроллера
 C573  24 0F	 	 	 	and	al,0fh	; выделение младших бит
 C575  3C 0D	 	 	 	cmp	al,r1_busy or r1_bus or r1_req	; проверка наличия
 	 	 	 	 	 	 	 	; сигналов от контроллера:
 	 	 	 	 	 	 	 	;	бит 3-занято
 	 	 	 	 	 	 	 	;	бит 2-команда/данные
 	 	 	 	 	 	 	 	;	бит 0-запрос
 C577  74 09	 	 	 	je	c1t
 C579  E2 F7	 	 	 	loop	wait_busy	; ожидание установки бит
 C57B  C6 06 0074 R 80	 	 	mov	diskw_status,time_out
 C580  F9	 	 	 	stc	 	 	; установка флажка по ошибке
 C581  C3	 	 	 	ret
 C582	 	 	 	c1t:
 C582  FC	 	 	 	cld	 	 	; сброс признака направления
 C583  B9 0006	 	 	 	mov	cx,6	 	; счетчик байт команды
 C586	 	 	 	cm3:	 	; получение 6 байт управляющего блока
 C586  E8 C771 R	 	 	call	port_0	 	; порт данных
 C589  AC	 	 	 	lodsb	 	 	; получение байта команды
 C58A  EE	 	 	 	out	dx,al	 	; запись данных из CPU в контроллер
 C58B  E2 F9	 	 	 	loop	cm3	 	; счетчик повторения равен 6
 	 	 	 	
 C58D  E8 C77E R	 	 	call	port_1	 	; порт состояния
 C590  EC	 	 	 	in	al,dx	 	; считывание состояния контроллера
 C591  A8 01	 	 	 	test	al,r1_req	; проверка бита запроса (R1_REQ)
 C593  74 06	 	 	 	jz	cm7
 C595  C6 06 0074 R 20	 	 	mov	diskw_status,bad_cntlr	; сбой контроллера
 C59A  F9	 	 	 	stc	 	 	; установить флажок переноса
 C59B	 	 	 	cm7:
 C59B  C3	 	 	 	ret
 C59C	 	 	 	command endp
 	 	 	 	
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	;	Считывание байт уточненного состояния
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	;
 	 	 	 	;	Байт 0
 	 	 	 	;
 	 	 	 	;	бит  7	-адрес действителен,когда бит установлен
 	 	 	 	;	бит  6	-резерв,устанавливается в 0
 	 	 	 	;	биты 5-4-тип ошибки
 	 	 	 	;	биты 3-0-код ошибки
 	 	 	 	;
 	 	 	 	;	Байт 1
 	 	 	 	;
 	 	 	 	;	биты 7-6-нули
 	 	 	 	;	бит  5	-устройство (0-1)
 	 	 	 	;	биты 4-0-номер головки
 	 	 	 	;
 	 	 	 	;	Байт 2
 	 	 	 	;
 	 	 	 	;	биты 7-5-старшие 2 бита номера цилиндра
 	 	 	 	;	биты 4-0-номер сектора
 	 	 	 	;
 	 	 	 	;	Байт 3
 	 	 	 	;
 	 	 	 	;	биты 7-0-младшие биты номера цилиндра
 	 	 	 	;
 	 	 	 	;-------------------------------------------------------------------
 	 	 	 	
 C59C	 	 	 	error_chk	proc	near	; обработка ошибок
 	 	 	 	 	assume	es:data
 C59C  A0 0074 R	 	 	mov	al,diskw_status ; состояние операции в AL
 C59F  0A C0	 	 	 	or	al,al	 	; проверить наличие ошибок
 C5A1  75 01	 	 	 	jnz	g21	 	; переход по ошибке
 C5A3  C3	 	 	 	ret	 	 	; нет ошибок
 	 	 	 	
 	 	 	 	;-------Считывание уточненного состояния----------------------------
 	 	 	 	
 C5A4	 	 	 	g21:
 C5A4  B8 ---- R	 	 	mov	ax,data
 C5A7  8E C0	 	 	 	mov	es,ax	 	; установка сегмента
 C5A9  2B C0	 	 	 	sub	ax,ax
 C5AB  8B F8	 	 	 	mov	di,ax	 	; смещение для нулевого байта
 C5AD  C6 06 0042 R 03	 	 	mov	cmd_block+0,sense_cmd	; код операции
 C5B2  2A C0	 	 	 	sub	al,al
 C5B4  E8 C562 R	 	 	call	command 	; выдача команды считывания состояния
 C5B7  72 23	 	 	 	jc	sense_abort	; переход по ошибке
 C5B9  B9 0004	 	 	 	mov	cx,4	 	; счетчик равен 4
 C5BC	 	 	 	g22:
 C5BC  E8 C68A R	 	 	call	hd_wait_req	; ожидание запроса
 C5BF  72 20	 	 	 	jc	g24
 C5C1  E8 C771 R	 	 	call	port_0	 	; порт данных
 C5C4  EC	 	 	 	in	al,dx	 	; считывание байта состояния
 C5C5  26 88 45 42	 	 	db 26h,88h,45h,42h	; mov	es:hd_error[di],al
 C5C9  47	 	 	 	inc	di	 	; смещение для следующего байта
 C5CA  E8 C77E R	 	 	call	port_1
 C5CD  E2 ED	 	 	 	loop	g22	 	; счетчик повторения равен 4
 C5CF  E8 C68A R	 	 	call	hd_wait_req	; ожидание запроса
 C5D2  72 0D	 	 	 	jc	g24	 	; нет запроса
 C5D4  E8 C771 R	 	 	call	port_0	 	; порт данных
 C5D7  EC	 	 	 	in	al,dx	 	; байт состояния
 C5D8  A8 02	 	 	 	test	al,2	 	; проверка бита ошибки
 C5DA  74 0F	 	 	 	jz	stat_err	; нет ошибок при считывании б/с
 C5DC	 	 	 	sense_abort:
 C5DC  C6 06 0074 R FF	 	 	mov	diskw_status,sense_fail ; ошибки при считывании б/с
 C5E1	 	 	 	g24:
 C5E1  F9	 	 	 	stc	 	 	; установить флажок переноса
 C5E2  C3	 	 	 	ret
 C5E3	 	 	 	error_chk	endp
 	 	 	 	
 C5E3  C61A R	 	 	t_0	dw	type_0
 C5E5  C627 R	 	 	t_1	dw	type_1
 C5E7  C66A R	 	 	t_2	dw	type_2
 C5E9  C677 R	 	 	t_3	dw	type_3
 	 	 	 	
 C5EB	 	 	 	stat_err:
 C5EB  26: 8A 1E 0042 R	 	 	mov	bl,es:hd_error	; получение байта ошибки
 C5F0  8A C3	 	 	 	mov	al,bl
 C5F2  24 0F	 	 	 	and	al,0fh	 	; выделение кода ошибки(0-3 разр)
 C5F4  80 E3 30	 	 	 	and	bl,00110000b	; выделение типа ошибки(4-5 разр)
 C5F7  2A FF	 	 	 	sub	bh,bh	 	; обнулить ВН
 C5F9  B1 03	 	 	 	mov	cl,3	 	; счетчик сдвига равен 3
 C5FB  D3 EB	 	 	 	shr	bx,cl	 	; сдвинуть вправо тип ошибки
 C5FD  2E: FF A7 C5E3 R	 	 	jmp	word ptr cs:[bx + offset t_0]	; переход по типу
 	 	 	 	 	 	 	 	; ошибки:  000-тип 0
 	 	 	 	 	 	 	 	;	   010-тип 1
 	 	 	 	 	 	 	 	;	   100-тип 2
 	 	 	 	 	 	 	 	;	   110-тип 3
 	 	 	 	 	assume	es:nothing
 	 	 	 	
 C602	 	 	 	type0_table	label	byte
 C602  00 20 40 20 80 00	 	db	0,bad_cntlr,bad_seek,bad_cntlr,time_out,0,bad_cntlr
       20	 	 	
 C609  00 40	 	 	 	db	0,bad_seek
 = 0009	 	 	 	type0_len	equ	$-type0_table
 C60B	 	 	 	type1_table	label	byte
 C60B  10 10 02 00 04	 	 	db	bad_ecc,bad_ecc,bad_addr_mark,0,record_not_fnd
 C610  40 00 00 11 0B	 	 	db	bad_seek,0,0,data_corrected,bad_track
 = 000A	 	 	 	type1_len	equ	$-type1_table
 C615	 	 	 	type2_table	label	byte
 C615  01 02	 	 	 	db	bad_cmd,bad_addr_mark
 = 0002	 	 	 	type2_len	equ	$-type2_table
 C617	 	 	 	type3_table	label	byte
 C617  20 20 10	 	 	 	db	bad_cntlr,bad_cntlr,bad_ecc
 = 0003	 	 	 	type3_len	equ	$-type3_table
 	 	 	 	
 	 	 	 	;-------Ошибки типа 0-----------------------------------------------
 	 	 	 	
 C61A	 	 	 	type_0:
 C61A  BB C602 R	 	 	mov	bx,offset type0_table	; адрес таблицы ошибок типа 0
 C61D  3C 09	 	 	 	cmp	al,type0_len	; проверить,определяется ли ошибка
 C61F  73 63	 	 	 	jae	undef_err_l	; неопределяемая ошибка
 C621  2E: D7	 	 	 	xlat	cs:type0_table	; поиск таблицы
 C623  A2 0074 R	 	 	mov	diskw_status,al ; установить код ошибки
 C626  C3	 	 	 	ret
 	 	 	 	
 	 	 	 	;-------Ошибки типа 1----------------------------------------------
 	 	 	 	
 C627	 	 	 	type_1:
 C627  BB C60B R	 	 	mov	bx,offset type1_table	; адрес таблицы ошибок типа 1
 C62A  8B C8	 	 	 	mov	cx,ax	 	; сохранить код ошибки
 C62C  3C 0A	 	 	 	cmp	al,type1_len	; проверить,определяется ли ошибка
 C62E  73 54	 	 	 	jae	undef_err_l	; неопределяемая ошибка
 C630  2E: D7	 	 	 	xlat	cs:type1_table	; поиск таблицы
 C632  A2 0074 R	 	 	mov	diskw_status,al ; установить код ошибки
 C635  80 E1 08	 	 	 	and	cl,08h	 	; выделить 3 бит
 C638  80 F9 08	 	 	 	cmp	cl,08h	 	; коррекция ЕСС?
 C63B  75 2A	 	 	 	jnz	g3t0
 	 	 	 	
 	 	 	 	;-------Получение длины пакета ошибок ЕСС----------------------------
 	 	 	 	
 C63D  C6 06 0042 R 0D	 	 	mov	cmd_block+0,rd_ecc_cmd	; код операции
 C642  2A C0	 	 	 	sub	al,al
 C644  E8 C562 R	 	 	call	command 	; получение 6 байт команды
 C647  72 1E	 	 	 	jc	g3t0
 C649  E8 C68A R	 	 	call	hd_wait_req	; ожидание запроса
 C64C  72 19	 	 	 	jc	g3t0
 C64E  E8 C771 R	 	 	call	port_0	 	; порт данных
 C651  EC	 	 	 	in	al,dx	 	; получить байт состояния
 C652  8A C8	 	 	 	mov	cl,al	 	; запомнить б/с в CL
 C654  E8 C68A R	 	 	call	hd_wait_req	; ожидание запроса
 C657  72 0E	 	 	 	jc	g3t0
 C659  E8 C771 R	 	 	call	port_0	 	; порт данных
 C65C  EC	 	 	 	in	al,dx	 	; получить байт состояния
 C65D  A8 01	 	 	 	test	al,01h	 	; проверить 0 бит
 C65F  74 06	 	 	 	jz	g3t0	 	; 0 бит равен 1-ошибка
 C661  C6 06 0074 R 20	 	 	mov	diskw_status,bad_cntlr	; сбой контроллера
 C666  F9	 	 	 	stc	 	 	; установить флажок переноса
 C667	 	 	 	g3t0:
 C667  8A C1	 	 	 	mov	al,cl	 	; получить байт состояния в AL
 C669  C3	 	 	 	ret
 	 	 	 	
 	 	 	 	;-------Ошибки типа 2------------------------------------------------
 	 	 	 	
 C66A	 	 	 	type_2:
 C66A  BB C615 R	 	 	mov	bx,offset type2_table	; адрес таблицы ошибок типа 2
 C66D  3C 02	 	 	 	cmp	al,type2_len	; проверить,определяется ли ошибка
 C66F  73 13	 	 	 	jae	undef_err_l	 	; неопределяемая ошибка
 C671  2E: D7	 	 	 	xlat	cs:type2_table	 	; поиск таблицы
 C673  A2 0074 R	 	 	mov	diskw_status,al 	; установить код ошибки
 C676  C3	 	 	 	ret
 	 	 	 	
 	 	 	 	;-------Ошибки типа 3------------------------------------------------
 	 	 	 	
 C677	 	 	 	type_3:
 C677  BB C617 R	 	 	mov	bx,offset type3_table	; адрес таблицы ошибок типа 3
 C67A  3C 03	 	 	 	cmp	al,type3_len	; проверить,определяется ли ошибка
 C67C  73 06	 	 	 	jae	undef_err_l	 	; неопределяемая ошибка
 C67E  2E: D7	 	 	 	xlat	cs:type3_table	 	; поиск таблицы
 C680  A2 0074 R	 	 	mov	diskw_status,al 	; установить код ошибки
 C683  C3	 	 	 	ret
 	 	 	 	
 C684	 	 	 	undef_err_l:
 C684  C6 06 0074 R BB	 	 	mov	diskw_status,undef_err	; наличие неопределяемой ошибки
 C689  C3	 	 	 	ret
 	 	 	 	
 C68A	 	 	 	hd_wait_req	proc	near	; ожидание установки запроса
 C68A  51	 	 	 	push	cx
 C68B  2B C9	 	 	 	sub	cx,cx	 	; установить счетчик
 C68D  E8 C77E R	 	 	call	port_1
 C690	 	 	 	l1:
 C690  EC	 	 	 	in	al,dx	 	; считывание состояния оборудования
 C691  A8 01	 	 	 	test	al,r1_req	; проверка наличия запроса
 C693  75 08	 	 	 	jnz	l2	 	; бит запроса установлен
 C695  E2 F9	 	 	 	loop	l1	 	; ожидание запроса
 C697  C6 06 0074 R 80	 	 	mov	diskw_status,time_out	; запрос не установлен
 C69C  F9	 	 	 	stc	 	 	; установить флажок переноса
 C69D	 	 	 	l2:
 C69D  59	 	 	 	pop	cx
 C69E  C3	 	 	 	ret
 C69F	 	 	 	hd_wait_req	endp
 	 	 	 	
 	 	 	 	;-------------------------------------------------------------------
 	 	 	 	;	Установка ПДП
 	 	 	 	;------------------------------------------------------------------
 	 	 	 	;
 	 	 	 	;	ВВОД
 	 	 	 	;
 	 	 	 	;	(AL)   -байт режима для ПДП
 	 	 	 	;	(ES:BX)-адрес для данных считывания/записи
 	 	 	 	;----------------------------------------------------------------------
 C69F	 	 	 	dma_setupt	proc	near
 C69F  50	 	 	 	push	ax	; сохраняем байт режима для ПДП
 C6A0  A0 0046 R	 	 	mov	al,cmd_block+4	; получаем значение счетчика
 C6A3  3C 81	 	 	 	cmp	al,81h	 	; 80Н-максимальное число секторов
 C6A5  58	 	 	 	pop	ax	 	; байт режима
 C6A6  72 02	 	 	 	jb	j1t
 C6A8  F9	 	 	 	stc	 	; устанавливаем флажок переноса по ошибке
 C6A9  C3	 	 	 	ret
 C6AA	 	 	 	j1t:
 C6AA  51	 	 	 	push	cx
 C6AB  FA	 	 	 	cli
 C6AC  E6 0C	 	 	 	out	dma+12,al
 C6AE  50	 	 	 	push	ax
 C6AF  58	 	 	 	pop	ax
 C6B0  E6 0B	 	 	 	out	dma+11,al	; вывод байта режима в порт 0В ПДП
 	 	 	 	
 	 	 	 	;-------Генерация физического адреса----------------------------------
 	 	 	 	
 C6B2  8C C0	 	 	 	mov	ax,es	 	; получить значение ES
 C6B4  B1 04	 	 	 	mov	cl,4	 	; установить счетчик сдвига
 C6B6  D3 C0	 	 	 	rol	ax,cl	; циклически сдвинуть на 4 разр. содержимое АХ
 C6B8  8A E8	 	 	 	mov	ch,al	; получить старшую часть ES в СН(4 ст.бита)
 C6BA  24 F0	 	 	 	and	al,0f0h 	; обнулить младшие разряды AL
 C6BC  03 C3	 	 	 	add	ax,bx	; сложить значение смещения(ВХ) со сдвинутым
 	 	 	 	 	 	 	; значением сегментного регистра
 C6BE  73 02	 	 	 	jnc	j33t	; проверка наличия переноса
 C6C0  FE C5	 	 	 	inc	ch	; перенос означает,что 4 ст.бита должны быть
 	 	 	 	 	 	 	; увеличены на 1
 C6C2	 	 	 	j33t:
 C6C2  50	 	 	 	push	ax	; сохранить физический адрес
 C6C3  E6 06	 	 	 	out	dma+6,al    ; вывод первого байта адреса в порт 06 ПДП
 C6C5  8A C4	 	 	 	mov	al,ah	    ; получить второй байт адреса
 C6C7  E6 06	 	 	 	out	dma+6,al    ; вывод второго байта адреса в порт 06 ПДП
 C6C9  8A C5	 	 	 	mov	al,ch	    ; получить 4 старших бита адреса
 C6CB  24 0F	 	 	 	and	al,0fh	    ; выделение младших бит AL
 C6CD  E6 82	 	 	 	out	dma_high,al ; вывод 4 ст.битов в регистр страницы
 	 	 	 	
 	 	 	 	;-------Определение счетчика-----------------------------------------
 	 	 	 	
 C6CF  A0 0046 R	 	 	mov	al,cmd_block+4	; получение числа блоков
 C6D2  D0 E0	 	 	 	shl	al,1
 C6D4  FE C8	 	 	 	dec	al
 C6D6  8A E0	 	 	 	mov	ah,al
 C6D8  B0 FF	 	 	 	mov	al,0ffh
 	 	 	 	
 	 	 	 	;-------Длинное считывание и длинная запись-----------------------------
 	 	 	 	
 C6DA  50	 	 	 	push	ax	 	; сохранить счетчик байт
 C6DB  A0 0042 R	 	 	mov	al,cmd_block+0	; получение кода операции
 C6DE  3C E5	 	 	 	cmp	al,rd_long_cmd	; длинное считывание ?
 C6E0  74 07	 	 	 	je	add4
 C6E2  3C E6	 	 	 	cmp	al,wr_long_cmd	; длинная запись?
 C6E4  74 03	 	 	 	je	add4
 C6E6  58	 	 	 	pop	ax	 	; восстановление счетчика
 C6E7  EB 11	 	 	 	jmp	short	j20t
 C6E9	 	 	 	add4:
 C6E9  58	 	 	 	pop	ax	 	; восстановление счетчика
 C6EA  B8 0204	 	 	 	mov	ax,516d 	; 512 байтов + 4 байта ЕСС
 C6ED  53	 	 	 	push	bx	 	; сохранить регистр
 C6EE  2A FF	 	 	 	sub	bh,bh
 C6F0  8A 1E 0046 R	 	 	mov	bl,cmd_block+4	; получение числа блоков
 C6F4  52	 	 	 	push	dx
 C6F5  F7 E3	 	 	 	mul	bx	 	; вычисление количества байт
 C6F7  5A	 	 	 	pop	dx
 C6F8  5B	 	 	 	pop	bx
 C6F9  48	 	 	 	dec	ax	 	; счет от 0 до N
 C6FA	 	 	 	j20t:
 C6FA  50	 	 	 	push	ax	 	; сохранить значение счетчика
 C6FB  E6 07	 	 	 	out	dma+7,al	; вывод мл.байта счетчика в порт 07 ПДП
 C6FD  8A C4	 	 	 	mov	al,ah	 	; получить старший байт счетчика
 C6FF  E6 07	 	 	 	out	dma+7,al	; вывод ст.байта счетчика в порт 07 ПДП
 C701  FB	 	 	 	sti	 	; установить признак разрешения прерывания
 C702  59	 	 	 	pop	cx	 	; восстановить значение счетчика
 C703  58	 	 	 	pop	ax	 	; восстановить значение адреса
 C704  03 C1	 	 	 	add	ax,cx	 	; проверка границы области 64К
 C706  59	 	 	 	pop	cx
 C707  C3	 	 	 	ret
 C708	 	 	 	dma_setupt	endp
 	 	 	 	
 	 	 	 	;---------------------------------------------------------------------
 	 	 	 	;	Ожидание прерывания
 	 	 	 	;--------------------------------------------------------------------
 	 	 	 	
 C708	 	 	 	wait_intt	proc	near
 C708  FB	 	 	 	sti	 	; установить признак разрешения прерывания
 C709  53	 	 	 	push	bx	; сохранить регистры
 C70A  51	 	 	 	push	cx
 C70B  06	 	 	 	push	es
 C70C  56	 	 	 	push	si
 C70D  1E	 	 	 	push	ds
 	 	 	 	 	assume	ds:abs0
 C70E  2B C0	 	 	 	sub	ax,ax
 C710  8E D8	 	 	 	mov	ds,ax	 	; установка сегмента
 C712  C4 36 0104 R	 	 	les	si,hf_tbl_vec	; адрес таблицы параметров FD_TBL в SI
 	 	 	 	 	assume	ds:data
 C716  1F	 	 	 	pop	ds	 	; восстановление сегмента DATA
 	 	 	 	
 	 	 	 	;-------Установка времени ожидания (time_out)-------------------------
 	 	 	 	
 C717  2A FF	 	 	 	sub	bh,bh
 C719  26: 8A 5C 09	 	 	mov	bl,byte ptr es:[si][9]	; стандартный time_out из FD_TBL
 C71D  8A 26 0042 R	 	 	mov	ah,cmd_block	 	; код операции в АН
 C721  80 FC 04	 	 	 	cmp	ah,fmtdrv_cmd	 	; форматизация устройства?
 C724  75 06	 	 	 	jnz	w5
 C726  26: 8A 5C 0A	 	 	mov	bl,byte ptr es:[si][0ah]  ; time_out для форматизации
 C72A  EB 09	 	 	 	jmp	short	w4
 C72C	 	 	 	w5:
 C72C  80 FC E3	 	 	 	cmp	ah,chk_drv_cmd	 	; проверка устройства?
 C72F  75 04	 	 	 	jnz	w4
 C731  26: 8A 5C 0B	 	 	mov	bl,byte ptr es:[si][0bh]  ; time_out для проверки
 C735	 	 	 	w4:
 C735  2B C9	 	 	 	sub	cx,cx	 	; установка счетчика
 	 	 	 	
 	 	 	 	;-------Ожидание прерывания------------------------------------------
 	 	 	 	
 C737	 	 	 	w1:
 C737  E8 C77E R	 	 	call	port_1	 	; порт состояния
 C73A  EC	 	 	 	in	al,dx	 	; считывание состояния контроллера
 C73B  24 20	 	 	 	and	al,020h 	; 5 бит -запрос на прерывание
 C73D  3C 20	 	 	 	cmp	al,020h 	; 5 бит установлен?
 C73F  74 0A	 	 	 	jz	w2
 C741  E2 F4	 	 	 	loop	w1	 	; счетчик ожидания равен 64К
 C743  4B	 	 	 	dec	bx
 C744  75 F1	 	 	 	jnz	w1
 C746  C6 06 0074 R 80	 	 	mov	diskw_status,time_out
 C74B	 	 	 	w2:
 C74B  E8 C771 R	 	 	call	port_0	 	; порт данных
 C74E  EC	 	 	 	in	al,dx	 	; считывание байта состояния
 C74F  24 02	 	 	 	and	al,2	 	; выделение бита ошибки
 C751  08 06 0074 R	 	 	or	diskw_status,al ; сохранить ошибку
 C755  E8 C788 R	 	 	call	port_3
 C758  32 C0	 	 	 	xor	al,al
 C75A  EE	 	 	 	out	dx,al	 	; сброс маски прерывания
 C75B  5E	 	 	 	pop	si	 	; восстановление регистров
 C75C  07	 	 	 	pop	es
 C75D  59	 	 	 	pop	cx
 C75E  5B	 	 	 	pop	bx
 C75F  C3	 	 	 	ret
 C760	 	 	 	wait_intt	endp
 	 	 	 	
 C760	 	 	 	hd_int	proc	near	 	; прерывание НМД
 C760  50	 	 	 	push	ax
 C761  B0 20	 	 	 	mov	al,eoi	 	; конец прерывания
 C763  E6 20	 	 	 	out	int_ctl_port,al
 C765  B0 07	 	 	 	mov	al,07h	 	; установить режим ПДП неработоспособным
 C767  E6 0A	 	 	 	out	dma+10,al	; запись в порт 10 ПДП
 C769  E4 21	 	 	 	in	al,021h
 C76B  0C 20	 	 	 	or	al,020h
 C76D  E6 21	 	 	 	out	021h,al
 C76F  58	 	 	 	pop	ax
 C770  CF	 	 	 	iret
 C771	 	 	 	hd_int	endp
 	 	 	 	
 	 	 	 	;----------------------------------------------------------------------
 	 	 	 	;	Порты: выработка значений портов по значению сдвига порта
 	 	 	 	;----------------------------------------------------------------------
 	 	 	 	
 C771	 	 	 	port_0	proc	near
 C771  BA 0320	 	 	 	mov	dx,hf_port	; базовое значение порта (320Н)
 C774  50	 	 	 	push	ax
 C775  2A E4	 	 	 	sub	ah,ah
 C777  A0 0077 R	 	 	mov	al,port_off	; значение сдвига адреса порта
 C77A  03 D0	 	 	 	add	dx,ax	 	; формирование адреса порта
 C77C  58	 	 	 	pop	ax
 C77D  C3	 	 	 	ret
 C77E	 	 	 	port_0	endp
 	 	 	 	
 C77E	 	 	 	port_1	proc	near
 C77E  E8 C771 R	 	 	call	port_0
 C781  42	 	 	 	inc	dx
 C782  C3	 	 	 	ret
 C783	 	 	 	port_1	endp
 	 	 	 	
 C783	 	 	 	port_2	proc	near
 C783  E8 C77E R	 	 	call	port_1
 C786  42	 	 	 	inc	dx
 C787  C3	 	 	 	ret
 C788	 	 	 	port_2	endp
 	 	 	 	
 C788	 	 	 	port_3	proc	near
 C788  E8 C783 R	 	 	call	port_2
 C78B  42	 	 	 	inc	dx
 C78C  C3	 	 	 	ret
 C78D	 	 	 	port_3	endp
 	 	 	 	
 	 	 	 	;-------------------------------------------------------------------
 	 	 	 	;-------Определить сдвиг таблицы параметров----------------------------
 	 	 	 	
 C78D	 	 	 	sw2_offs	proc	near
 C78D  E8 C783 R	 	 	call	port_2
 C790  EC	 	 	 	in	al,dx	; считывание конфигурации переключателей
 C791  50	 	 	 	push	ax	; запомнить переключатели
 C792  E8 C77E R	 	 	call	port_1	; порт состояния
 C795  EC	 	 	 	in	al,dx	; считывание состояния контроллера
 C796  24 02	 	 	 	and	al,2	; проверяется бит 1
 C798  58	 	 	 	pop	ax	; восстановление переключателей
 C799  75 16	 	 	 	jnz	sw2_offs_err
 C79B  8A 26 0043 R	 	 	mov	ah,cmd_block+1	; устройство + головка
 C79F  80 E4 20	 	 	 	and	ah,00100000b	; устройство 0 или 1
 C7A2  75 04	 	 	 	jnz	sw2_and
 C7A4  D0 E8	 	 	 	shr	al,1	 	; в AL -конфигурация переключателей
 C7A6  D0 E8	 	 	 	shr	al,1	 	; сдвиг на 2 разряда вправо
 C7A8	 	 	 	sw2_and:
 C7A8  24 03	 	 	 	and	al,011b 	; сохранить 2 младших разряда
 C7AA  B1 04	 	 	 	mov	cl,4	 	; установка счетчика сдвига
 C7AC  D2 E0	 	 	 	shl	al,cl	 	; сдвиг на 4 разр.-определение смещения
 	 	 	 	 	 	 	 	;	00Н-тип 0
 	 	 	 	 	 	 	 	;	10Н-тип 1
 	 	 	 	 	 	 	 	;	20Н-тип 2
 	 	 	 	 	 	 	 	;	30Н-тип 3
 C7AE  2A E4	 	 	 	sub	ah,ah
 C7B0  C3	 	 	 	ret
 C7B1	 	 	 	sw2_offs_err:
 C7B1  F9	 	 	 	stc	 	; установить флажок переноса по ошибке
 C7B2  C3	 	 	 	ret
 C7B3	 	 	 	sw2_offs	endp
 	 	 	 	
 C7B3  30 38 2F 31 36 2F	 	db	'08/16/82'
       38 32	 	 	
 	 	 	 	
 C7BB	 	 	 	end_address	label	byte
 	 	 	 	;   Изменения для НМД
 	 	 	 	
 	 	 	 	 	assume cs:code,ss:code,es:abs0,ds:data
 	 	 	 	
 C7BB	 	 	 	rom_check	proc	near
 C7BB  B8 ---- R	 	 	mov	ax,data
 C7BE  8E C0	 	 	 	mov	es,ax
 C7C0  2A E4	 	 	 	sub	ah,ah
 C7C2  8A 47 02	 	 	 	mov	al,[bx+2]
 C7C5  B1 09	 	 	 	mov	cl,09h
 C7C7  D3 E0	 	 	 	shl	ax,cl
 C7C9  8B C8	 	 	 	mov	cx,ax
 C7CB  51	 	 	 	push	cx
 C7CC  B9 0004	 	 	 	mov	cx,4
 C7CF  D3 E8	 	 	 	shr	ax,cl
 C7D1  03 D0	 	 	 	add	dx,ax
 C7D3  59	 	 	 	pop	cx
 C7D4  E8 C854 R	 	 	call	ros_checksum_cnt
 C7D7  74 06	 	 	 	jz	rom_check_1
 C7D9  E8 C7F3 R	 	 	call	rom_err
 C7DC  EB 14 90	 	 	 	jmp	rom_check_end
 C7DF	 	 	 	rom_check_1:
 C7DF  52	 	 	 	push	dx
 	 	 	 	 	assume es:data
 C7E0  26: C7 06 0067 R 0003	 	mov	es:io_rom_init,0003h
 C7E7  26: 8C 1E 0069 R	 	 	mov	es:io_rom_seg,ds
 C7EC  26: FF 1E 0067 R	 	 	call	dword ptr es:io_rom_init
 	 	 	 	 	assume es:abs0
 C7F1  5A	 	 	 	pop	dx
 C7F2	 	 	 	rom_check_end:
 C7F2  C3	 	 	 	ret
 C7F3	 	 	 	rom_check	endp
 	 	 	 	
 	 	 	 	
 	 	 	 	
 C7F3	 	 	 	rom_err   proc	near
 C7F3  52	 	 	 	push	dx
 C7F4  50	 	 	 	push	ax
 C7F5  8C DA	 	 	 	mov	dx,ds
 C7F7  81 FA C800	 	 	cmp	dx,0c800h
 C7FB  7C 0C	 	 	 	jl	rom_err_beep
 C7FD  E8 C816 R	 	 	call	prt_seg
 C800  BE C811 R	 	 	mov	si,offset f3a
 C803  E8 C840 R	 	 	call	e_msg
 C806	 	 	 	rom_err_end:
 C806  58	 	 	 	pop	ax
 C807  5A	 	 	 	pop	dx
 C808  C3	 	 	 	ret
 C809	 	 	 	rom_err_beep:
 C809  BA 0102	 	 	 	mov	dx,0102h
 C80C  E8 E5A0 R	 	 	call	err_beep
 C80F  EB F5	 	 	 	jmp	short rom_err_end
 C811	 	 	 	rom_err endp
 	 	 	 	
 	 	 	 	
 	 	 	 	
 C811  52 4F 4D 0D 0A	 	f3a	db	'ROM',13,10
 	 	 	 	
 	 	 	 	
 C816	 	 	 	prt_seg proc	near
 C816  8A C6	 	 	 	mov	al,dh
 C818  E8 C82B R	 	 	call	xpc_byte
 C81B  8A C2	 	 	 	mov	al,dl
 C81D  E8 C82B R	 	 	call	xpc_byte
 C820  B0 30	 	 	 	mov	al,'0'
 C822  E8 D1B4 R	 	 	call	prt_hex
 C825  B0 20	 	 	 	mov	al,' '
 C827  E8 D1B4 R	 	 	call	prt_hex
 C82A  C3	 	 	 	ret
 C82B	 	 	 	prt_seg endp
 	 	 	 	
 	 	 	 	
 C82B	 	 	 	xpc_byte  proc	near
 C82B  50	 	 	 	push	ax
 C82C  B1 04	 	 	 	mov	cl,4
 C82E  D2 E8	 	 	 	shr	al,cl
 C830  E8 C836 R	 	 	call	xlat_pr
 C833  58	 	 	 	pop	ax
 C834  24 0F	 	 	 	and	al,0fh
 	 	 	 	
 	 	 	 	
 C836	 	 	 	xlat_pr proc	near
 C836  04 90	 	 	 	add	al,090h
 C838  27	 	 	 	daa
 C839  14 40	 	 	 	adc	al,040h
 C83B  27	 	 	 	daa
 C83C  E8 D1B4 R	 	 	call	prt_hex
 C83F  C3	 	 	 	ret
 C840	 	 	 	xlat_pr endp
 C840	 	 	 	xpc_byte endp
 	 	 	 	
 	 	 	 	
 	 	 	 	
 C840	 	 	 	e_msg	proc	near
 C840  8B EE	 	 	 	mov	bp,si
 C842  E8 C846 R	 	 	call	p_msg1
 C845  C3	 	 	 	ret
 C846	 	 	 	e_msg	endp
 	 	 	 	
 	 	 	 	
 	 	 	 	
 C846	 	 	 	p_msg1	proc	near
 C846	 	 	 	g12a:
 C846  2E: 8A 04	 	 	mov	al,cs:[si]
 C849  46	 	 	 	inc	si
 C84A  50	 	 	 	push	ax
 C84B  E8 D1B4 R	 	 	call	prt_hex
 C84E  58	 	 	 	pop	ax
 C84F  3C 0A	 	 	 	cmp	al,10
 C851  75 F3	 	 	 	jne	g12a
 C853  C3	 	 	 	ret
 C854	 	 	 	p_msg1	endp
 	 	 	 	
 	 	 	 	
 C854	 	 	 	ros_checksum_cnt  proc	near
 C854  32 C0	 	 	 	xor	al,al
 C856	 	 	 	c26k:
 C856  02 07	 	 	 	add	al,ds:[bx]
 C858  43	 	 	 	inc	bx
 C859  E2 FB	 	 	 	loop	c26k
 C85B  0A C0	 	 	 	or	al,al
 C85D  C3	 	 	 	ret
 C85E	 	 	 	ros_checksum_cnt  endp
 	 	 	 	;-----------------------------------------------------------
 	 	 	 	;
 	 	 	 	;     INT 10  (AH=13H)
 	 	 	 	;
 	 	 	 	;     Пересылка цепочки символов
 	 	 	 	;
 	 	 	 	;     ES:BP  - начальный адрес цепочки символов
 	 	 	 	;     CX     - количество символов
 	 	 	 	;     DH,DL  - строка и колонка для начала записи
 	 	 	 	;     BH     - номер страницы
 	 	 	 	;
 	 	 	 	;     AL=0:
 	 	 	 	;	       цепочка = (символ,символ,символ,...)
 	 	 	 	;	       BL = атрибут
 	 	 	 	;	       курсор не движется
 	 	 	 	;     AL = 1:
 	 	 	 	;	       цепочка = (символ,символ,символ,...)
 	 	 	 	;	       BL = атрибут
 	 	 	 	;	       курсор движется
 	 	 	 	;     AL =2:
 	 	 	 	;	       цепочка = (символ,атрибут,символ,атрибут,...)
 	 	 	 	;	       курсор не движется
 	 	 	 	;     AL = 3:
 	 	 	 	;	       цепочка = (символ,атрибут,символ,атрибут,...)
 	 	 	 	;	       курсор движется
 	 	 	 	;
 	 	 	 	;-----------------------------------------------------
 C85E  E9 C8F0 R	 	byxod1: jmp	byxod
 C861	 	 	 	ah13:
 	 	 	 	
 	 	 	 	
 C861  55	 	 	 	push	bp
 C862  3C 04	 	 	 	cmp	al,04
 C864  73 F8	 	 	 	jnb	byxod1
 C866  83 F9 00	 	 	 	cmp	cx,0
 C869  74 F3	 	 	 	je	byxod1
 C86B  53	 	 	 	push	bx
 C86C  8A DF	 	 	 	mov	bl,bh	; номер страницы
 C86E  2A FF	 	 	 	sub	bh,bh
 C870  D1 E3	 	 	 	shl	bx,1
 C872  8B B7 0050 R	 	 	mov	si,word ptr [bx + offset cursor_posn]	; si=позиция
 	 	 	 	 	 	 	; курсора для заданной страницы
 C876  5B	 	 	 	pop	bx
 C877  56	 	 	 	push	si
 C878  50	 	 	 	push	ax
 C879  B8 0200	 	 	 	mov	ax,200h ; установить позицию курсора
 C87C  CD 10	 	 	 	int	10h
 C87E  58	 	 	 	pop	ax
 C87F  51	 	 	rdcimb: push	cx
 C880  53	 	 	 	push	bx	; номер активной страницы
 C881  50	 	 	 	push	ax
 C882  86 C4	 	 	 	xchg	al,ah
 C884  26: 8A 46 00	 	 	mov	al,es:[bp+0]	; считать в AL символ строки
 C888  45	 	 	 	inc	bp
 C889  3C 0D	 	 	 	cmp	al,0dh	; возврат каретки
 C88B  74 2A	 	 	 	jz	zaptel
 C88D  3C 0A	 	 	 	cmp	al,0ah	; граница поля
 C88F  74 26	 	 	 	jz	zaptel
 C891  3C 08	 	 	 	cmp	al,08	; возврат на одну позицию
 C893  74 22	 	 	 	jz	zaptel
 C895  3C 07	 	 	 	cmp	al,07	; звуковой сигнал
 C897  74 1E	 	 	 	jz	zaptel
 C899  B9 0001	 	 	 	mov	cx,0001
 C89C  80 FC 02	 	 	 	cmp	ah,2
 C89F  73 0F	 	 	 	jnb	picat
 C8A1  B4 09	 	 	piczn:	mov	ah,09	; писать знак/атрибут
 C8A3  CD 10	 	 	 	int	10h
 C8A5  FE C2	 	 	 	inc	dl	; колонка
 C8A7  3A 16 004A R	 	 	cmp	dl,byte ptr crt_cols
 C8AB  73 1B	 	 	 	jnb	pockol
 C8AD  EB 29 90	 	 	 	jmp	ustkur
 C8B0  26: 8A 5E 00	 	picat:	mov	bl,es:[bp+0]
 C8B4  45	 	 	 	inc	bp
 C8B5  EB EA	 	 	 	jmp	piczn
 C8B7  B4 0E	 	 	zaptel: mov	ah,0eh	; запись телетайпа
 C8B9  CD 10	 	 	 	int	10h
 C8BB  8A DF	 	 	 	mov	bl,bh
 C8BD  2A FF	 	 	 	sub	bh,bh
 C8BF  D1 E3	 	 	 	shl	bx,1
 C8C1  8B 97 0050 R	 	 	mov	dx,word ptr [bx + offset cursor_posn]
 C8C5  EB 16 90	 	 	 	jmp	bozin
 C8C8  80 FE 24	 	 	pockol: cmp	dh,24h	; последняя строка ?
 C8CB  75 07	 	 	 	jnz	nepocl
 C8CD  B8 0E0A	 	 	 	mov	ax,0e0ah	; перевод строки
 C8D0  CD 10	 	 	 	int	10h
 C8D2  FE CE	 	 	 	dec	dh
 C8D4  FE C6	 	 	nepocl: inc	dh
 C8D6  2A D2	 	 	 	sub	dl,dl
 C8D8  B8 0200	 	 	ustkur: mov	ax,200h ; установить курсор
 C8DB  CD 10	 	 	 	int	10h
 C8DD  58	 	 	bozin:	pop	ax
 C8DE  5B	 	 	 	pop	bx
 C8DF  59	 	 	 	pop	cx
 C8E0  E2 9D	 	 	 	loop	rdcimb
 C8E2  5A	 	 	 	pop	dx
 C8E3  3C 01	 	 	 	cmp	al,01
 C8E5  74 09	 	 	 	jz	byxod
 C8E7  3C 03	 	 	 	cmp	al,03
 C8E9  74 05	 	 	 	jz	byxod
 C8EB  B8 0200	 	 	 	mov	ax,200h
 C8EE  CD 10	 	 	 	int	10h	; установить	старую позицию курсора
 C8F0  5D	 	 	byxod:	pop	bp
 C8F1  E9 F1DC R	 	 	jmp	video_return
 C8F4  CF	 	 	 	iret
 	 	 	 	
 	 	 	 	;=============================================================
 	 	 	 	; ПОДДЕРЖКА АДАПТЕРОВ СТЫКА С2 В АСИНХРОННОМ РЕЖИМЕ ПО ОПРОСУ
 	 	 	 	; МОДУЛЬ ПОЛУЧАЕТ УПРАВЛЕНИЕ ПО КОМАНДЕ  INT  14H
 	 	 	 	;=============================================================
 	 	 	 	;  (AH) = 00h - инициализировать адаптер
 	 	 	 	;	(AL) - параметры:
 	 	 	 	;	   7	 6	5      4      3       2      1	   0
 	 	 	 	;	   ---скорость---      контроль    стоп-бит  -длина-
 	 	 	 	;	   000 - 110	       Х0-нет	    0 - 1    10 - 7 бит
 	 	 	 	;	   001 - 150	       01-нечет     1 - 2    11 - 8 бит
 	 	 	 	;	   010 - 300	       11-чет
 	 	 	 	;	   011 - 600
 	 	 	 	;	   100 - 1200
 	 	 	 	;	   101 - 2400
 	 	 	 	;	   110 - 4800
 	 	 	 	;	   111 - 9600
 	 	 	 	;	(DX) - номер адаптера стыка С2 (0,1)
 	 	 	 	;     ВЫХОД:
 	 	 	 	;	 ----------- (AH) ------------
 	 	 	 	;	 7   6	 5   4	 3   2	 1   0
 	 	 	 	;	 |   |	 |   |	 |   |	 |   |___ приемник содержит данные
 	 	 	 	;	 |   |	 |   |	 |   |	 |_______ переполнение
 	 	 	 	;	 |   |	 |   |	 |   |___________ ошибка четности
 	 	 	 	;	 |   |	 |   |	 |_______________ ошибка стоп-бита
 	 	 	 	;	 |   |	 |   |___________________ пауза
 	 	 	 	;	 |   |	 |_______________________ адаптер готов к передаче
 	 	 	 	;	 |   |___________________________ передатчик пуст
 	 	 	 	;	 |_______________________________ тайм-аут
 	 	 	 	;
 	 	 	 	;	 ------------- (AL) ----------
 	 	 	 	;	 7   6	 5   4	 3   2	 1   0
 	 	 	 	;	 |   |	 |   |	 0   0	 0   0
 	 	 	 	;	 |   |	 |   |	 |   |	 |   |___ изменен бит 4
 	 	 	 	;	 |   |	 |   |	 |   |	 |_______ изменен бит 5
 	 	 	 	;	 |   |	 |   |	 |   |___________ изменен бит 6
 	 	 	 	;	 |   |	 |   |	 |_______________ изменен бит 7
 	 	 	 	;	 |   |	 |   |___________________ готов к передаче (цепь 106 вкл)
 	 	 	 	;	 |   |	 |_______________________ аппаратура передачи данных готова
 	 	 	 	;	 |   |	 	 	 	  (цепь 107 вкл)
 	 	 	 	;	 |   |___________________________ индикатор вызова (цепь 125 вкл)
 	 	 	 	;	 |_______________________________ детектор линейного
 	 	 	 	;	 	 	 	 	  сигнала (цепь 109 вкл)
 	 	 	 	;	 ЗАМЕЧАНИЕ: Если бит 7 в AH равен 1, значение остальных бит в AH
 	 	 	 	;	 	    непредсказуемо
 	 	 	 	;  (AH) = 01h - передать символ
 	 	 	 	;	(AL) - символ для передачи
 	 	 	 	;	(DX) - номер адаптера стыка С2 (0,1)
 	 	 	 	;     ВЫХОД:
 	 	 	 	;	(AL) сохраняется
 	 	 	 	;	(AH) - как при инициализации ((AH) = 0)
 	 	 	 	;  (AH) = 02h - принять символ из канала связи
 	 	 	 	;	(DX) - номер адаптера стыка С2 (0,1)
 	 	 	 	;     ВЫХОД:
 	 	 	 	;	(AL) - принятый символ
 	 	 	 	;	(AH) - как при инициализации ((AH) = 0)
 	 	 	 	;  (AH) = 03h - уточнить состояние
 	 	 	 	;	(DX) - номер адаптера стыка С2 (0,1)
 	 	 	 	;     ВЫХОД:
 	 	 	 	;	(AL) и (AH) - как при инициализации ((AH) = 0)
 	 	 	 	;  (AH) = FFh - расширенная инициализация адаптера стыка С2
 	 	 	 	;	-------------- (CL) ---------------
 	 	 	 	;	7    6	  5    4    3	 2    1   0
 	 	 	 	;	0    0	  0    0    ----скорость----
 	 	 	 	;	 	 	 	 0-50
 	 	 	 	;	 	 	 	 1-75
 	 	 	 	;	 	 	 	 2-100
 	 	 	 	;	 	 	 	 3-110
 	 	 	 	;	 	 	 	 4-150
 	 	 	 	;	 	 	 	 5-200
 	 	 	 	;	 	 	 	 6-300
 	 	 	 	;	 	 	 	 7-600
 	 	 	 	;	 	 	 	 8-1200
 	 	 	 	;	 	 	 	 9-2400
 	 	 	 	;	 	 	 	 A-4800
 	 	 	 	;	 	 	 	 B-6400
 	 	 	 	;	 	 	 	 C-9600
 	 	 	 	;	 	 	 	 D-19200
 	 	 	 	;	------------------- (AL) -----------------------
 	 	 	 	;	7     6     5	   4	  3	  2	 1     0
 	 	 	 	;	стоп-бит    контроль	  --длина--	 1     0
 	 	 	 	;	 01-1	    Х0 - нет	  00 - 5 бит
 	 	 	 	;	 10-1.5     01 - нечет	  01 - 6 бит
 	 	 	 	;	 11-2	    11 - чет	  10 - 7 бит
 	 	 	 	;	 	 	 	  11 - 8 бит
 	 	 	 	;	(DX) - номер адаптера стыка С2 (0,1)
 	 	 	 	;     ВЫХОД:
 	 	 	 	;	(AL) и (AH) - как при инициализации ((AH) = 0)
 	 	 	 	;	 ЗАМЕЧАНИЕ: Эта функция используется только для ЕС1840, ЕС1841
 	 	 	 	;	 	    для адаптеров стыка С2 в модуле ЕС1840.0004
 	 	 	 	 	assume	cs:code,ds:data
 C8F5	 	 	 	rs232_io	proc	far
 C8F5  FB	 	 	 	STI
 C8F6  1E	 	 	 	push	ds
 C8F7  53	 	 	 	push	bx
 C8F8  51	 	 	 	push	cx
 C8F9  52	 	 	 	push	dx
 C8FA  56	 	 	 	push	si
 C8FB  80 FC 00	 	 	 	cmp	ah,0	; проверить вид инициализации (если есть)
 C8FE  75 2F	 	 	 	jne	v0ok	; обойти преобразование
 	 	 	 	;------- преобразовать (AX) к виду как при (AH) = FFh -----------
 	 	 	 	;------ постоянные значения
 C900  B4 4A	 	 	 	mov	ah,01001010b
 	 	 	 	;------ длина
 C902  A8 01	 	 	 	test	al,1
 C904  74 03	 	 	 	jz	v0p1
 C906  80 CC 04	 	 	 	or	ah,00000100b
 	 	 	 	;------стоп-биты
 C909	 	 	 	v0p1:
 C909  A8 04	 	 	 	test	al,4
 C90B  74 03	 	 	 	jz	v0p2
 C90D  80 CC 80	 	 	 	or	ah,80h
 	 	 	 	;------ контроль
 C910	 	 	 	v0p2:
 C910  A8 08	 	 	 	test	al,00001000b
 C912  74 0A	 	 	 	jz	v0p3
 C914  80 CC 10	 	 	 	or	ah,00010000b
 C917  A8 10	 	 	 	test	al,00010000b
 C919  74 03	 	 	 	jz	v0p3
 C91B  80 CC 20	 	 	 	or	ah,00100000b
 	 	 	 	;------ скорость и номер функции
 C91E	 	 	 	v0p3:
 C91E  B1 05	 	 	 	mov	cl,5
 C920  D2 E8	 	 	 	shr	al,cl
 C922  2A FF	 	 	 	sub	bh,bh
 C924  8A D8	 	 	 	mov	bl,al
 C926  2E: 8A 8F CADB R	 	 	mov	cl,cs: z0b[bx]
 C92B  8A C4	 	 	 	mov	al,ah
 C92D  B4 FF	 	 	 	mov	ah,0ffh
 	 	 	 	;========================================================
 C92F	 	 	 	v0ok:
 	 	 	 	;-------- загрузить базовый адрес адаптера -------------
 C92F  8B F2	 	 	 	mov	si,dx
 C931  D1 E6	 	 	 	shl	si,1
 C933  BA ---- R	 	 	mov	dx,data
 C936  8E DA	 	 	 	mov	ds,dx
 C938  8B 14	 	 	 	mov	dx,[si]
 C93A  0B D2	 	 	 	or	dx,dx
 C93C  75 03	 	 	 	jnz	v00
 C93E  E9 CA0F R	 	 	jmp	v0to	; недействительный адаптер
 	 	 	 	;------ выбрать функцию --------------------------------
 C941	 	 	 	v00:
 C941  FE CC	 	 	 	dec	ah
 C943  75 03	 	 	 	jnz	$+5
 C945  E9 C9E6 R	 	 	jmp	v0b	; передать символ
 C948  FE CC	 	 	 	dec	ah
 C94A  75 03	 	 	 	jnz	$+5
 C94C  E9 CA1B R	 	 	jmp	v0c	; принять символ
 C94F  FE CC	 	 	 	dec	ah
 C951  75 03	 	 	 	jnz	$+5
 C953  E9 CA45 R	 	 	jmp	v0d	; уточнить состояние
 C956  80 FC FC	 	 	 	cmp	ah,0fch
 C959  74 03	 	 	 	je	v0a	; расширенная инициализация
 C95B  E9 CA0F R	 	 	jmp	v0to	; недействительная функция
 	 	 	 	;============================================================
 	 	 	 	;------ функция FFh - расширенная инициализация ---------
 C95E	 	 	 	v0a:
 C95E  50	 	 	 	push	ax
 	 	 	 	;------ записать управляющее слово адаптера
 C95F  83 C2 07	 	 	 	add	dx,7
 C962  B0 8A	 	 	 	mov	al,8ah
 C964  EE	 	 	 	out	dx,al	;упр. слово --> 2/3ff
 	 	 	 	;----- замаскировать все прерывания адаптера
 C965  4A	 	 	 	dec	dx
 C966  B0 08	 	 	 	mov	al,8
 C968  EE	 	 	 	out	dx,al	;маски запрета прерываний --> 2/3fe
 	 	 	 	;------ выбрать таймер
 C969  83 EA 02	 	 	 	sub	dx,2
 C96C  8B DA	 	 	 	mov	bx,dx
 C96E  B0 80	 	 	 	mov	al,80h
 C970  B6 03	 	 	 	mov	dh,3
 C972  FA	 	 	 	CLI
 C973  EE	 	 	 	out	dx,al	;выбор таймера --> 3fc
 C974  8B D3	 	 	 	mov	dx,bx
 	 	 	 	;------ определить смещение делителя скорости
 C976  D0 E1	 	 	 	shl	cl,1
 C978  2A ED	 	 	 	sub	ch,ch
 C97A  8B D9	 	 	 	mov	bx,cx
 	 	 	 	;----- записать управляющее слово таймера
 C97C  8B CA	 	 	 	mov	cx,dx
 C97E  BA 03FB	 	 	 	mov	dx,3fbh
 C981  B0 36	 	 	 	mov	al,36h
 C983  80 FD 03	 	 	 	cmp	ch,3
 C986  74 02	 	 	 	je	v0a1
 C988  B0 76	 	 	 	mov	al,76h
 C98A	 	 	 	v0a1:
 C98A  EE	 	 	 	out	dx,al	;упр. слово --> 3fb
 	 	 	 	;------ записать делитель скорости
 C98B  83 EA 03	 	 	 	sub	dx,3
 C98E  80 FD 03	 	 	 	cmp	ch,3
 C991  74 01	 	 	 	je	v0a2
 C993  42	 	 	 	inc	dx
 C994	 	 	 	v0a2:
 C994  2E: 8B 87 CABF R	 	 	mov	ax,cs: z0a[bx]
 C999  EE	 	 	 	out	dx,al	;младший байт делителя --> 3f8/3f9
 C99A  E8 CABE R	 	 	call	v0z	;задержка
 C99D  8A C4	 	 	 	mov	al,ah
 C99F  EE	 	 	 	out	dx,al	;старший байт делителя --> 3f8/3f9
 C9A0  8B D1	 	 	 	mov	dx,cx
 C9A2  80 FE 03	 	 	 	cmp	dh,3
 C9A5  74 07	 	 	 	je	v0a3
 	 	 	 	;------ восстановить режим адаптера в 3fc
 C9A7  B6 03	 	 	 	mov	dh,3
 C9A9  B0 08	 	 	 	mov	al,8
 C9AB  EE	 	 	 	out	dx,al	;режим --> 3fc
 C9AC  B6 02	 	 	 	mov	dh,2
 C9AE	 	 	 	v0a3:
 	 	 	 	;------ установить контроллер прерываний
 C9AE  B0 A4	 	 	 	mov	al,0A4h
 C9B0  E4 21	 	 	 	in	al,21h
 C9B2  8A E0	 	 	 	mov	ah,al
 C9B4  B0 A4	 	 	 	mov	al,0a4h
 C9B6  E6 21	 	 	 	out	21h,al	; открыть маски IRQ3,IRQ4
 C9B8  B0 0C	 	 	 	mov	al,0ch
 C9BA  E6 20	 	 	 	out	20h,al	; уст. режим POLL
 C9BC  90	 	 	 	nop
 C9BD  90	 	 	 	nop
 C9BE  90	 	 	 	nop
 C9BF  E4 20	 	 	 	in	al,20h	; сбр. режима POLL
 C9C1  90	 	 	 	nop
 C9C2  90	 	 	 	nop
 C9C3  90	 	 	 	nop
 C9C4  B0 20	 	 	 	mov	al,20h	; СБРОС ложного прерывания
 C9C6  E6 20	 	 	 	out	20h,al
 C9C8  8A C4	 	 	 	mov	al,ah
 C9CA  E6 21	 	 	 	out	21h,al
 C9CC  FB	 	 	 	STI
 	 	 	 	;------ сбросить контроллер адаптера
 C9CD  B0 40	 	 	 	mov	al,40h
 C9CF  EE	 	 	 	out	dx,al	;сброс --> 2/3fc
 	 	 	 	;------ записать режим адаптера
 C9D0  E8 CABE R	 	 	call	v0z	;задержка
 C9D3  B0 08	 	 	 	mov	al,8
 C9D5  EE	 	 	 	out	dx,al	;режим --> 2/3fc
 	 	 	 	;------ загрузить режим в передающую микросхему
 C9D6  83 EA 03	 	 	 	sub	dx,3
 C9D9  58	 	 	 	pop	ax
 C9DA  EE	 	 	 	out	dx,al	;режим --> 2/3f9
 	 	 	 	;------ записать команду ПЕРЕДАЧА + ПРИЁМ
 C9DB  E8 CABE R	 	 	call	v0z	;задержка
 C9DE  B0 05	 	 	 	mov	al,00000101b
 C9E0  EE	 	 	 	out	dx,al
 	 	 	 	;------ выход
 C9E1  2A E4	 	 	 	sub	ah,ah
 C9E3  EB 60 90	 	 	 	jmp	v0d	;уточнить состояние
 	 	 	 	;=================================================================
 	 	 	 	;------ функция 1 - передать символ ------------------------------
 C9E6	 	 	 	v0b:
 C9E6  2A E4	 	 	 	sub	ah,ah
 C9E8  50	 	 	 	push	ax
 	 	 	 	;------ записать команду ВКЛ. Ц.108 + ВКЛ. Ц.105 + ПЕРЕДАЧА + ПРИЁМ
 C9E9  42	 	 	 	inc	dx
 C9EA  B0 27	 	 	 	mov	al,00100111b
 C9EC  EE	 	 	 	out	dx,al
 	 	 	 	;------ проверить готовность адаптера к передаче + ВКЛ.Ц.107 + ВКЛ.Ц.106
 C9ED  2B C9	 	 	 	sub	cx,cx
 C9EF  E8 CABE R	 	 	call	v0z	;задержка
 C9F2	 	 	 	v0b1:
 C9F2  EC	 	 	 	in	al,dx	;баит состояния 1 <-- 2/3f9
 C9F3  24 81	 	 	 	and	al,81h
 C9F5  8A D8	 	 	 	mov	bl,al
 C9F7  42	 	 	 	inc	dx
 C9F8  EC	 	 	 	in	al,dx	;байт состояния 2 <-- 2/3fa
 C9F9  24 01	 	 	 	and	al,01h
 C9FB  D0 E0	 	 	 	shl	al,1
 C9FD  0A C3	 	 	 	or	al,bl
 C9FF  3C 81	 	 	 	cmp	al,81h
 CA01  74 06	 	 	 	je	v0b2
 CA03  4A	 	 	 	dec	dx
 CA04  E2 EC	 	 	 	loop	v0b1
 	 	 	 	 	 	 	;условия(е) не выполнены(о)
 CA06  58	 	 	 	pop	ax
 CA07  EB 06	 	 	 	jmp	short	v0to
 	 	 	 	;------ передать байт
 CA09	 	 	 	v0b2:
 CA09  4A	 	 	 	dec	dx
 CA0A  4A	 	 	 	dec	dx
 CA0B  58	 	 	 	pop	ax
 CA0C  EE	 	 	 	out	dx,al	;байт данных --> 2/3f8
 	 	 	 	;------ выход
 CA0D  EB 03	 	 	 	jmp	short	v0end
 	 	 	 	;==============================================================
 	 	 	 	; передача управления вызывающей программе
 	 	 	 	;------ выход по тайм-ауту
 CA0F	 	 	 	v0to:
 CA0F  80 CC 80	 	 	 	or	ah,80h
 	 	 	 	;------ все другие выходы, кроме приема
 CA12	 	 	 	v0end:
 CA12  E8 CA7E R	 	 	call	v0e	; уточнить состояние адаптера
 CA15	 	 	 	v0end1: 	 	; выход из функции приема
 CA15  5E	 	 	 	pop	si
 CA16  5A	 	 	 	pop	dx
 CA17  59	 	 	 	pop	cx
 CA18  5B	 	 	 	pop	bx
 CA19  1F	 	 	 	pop	ds
 CA1A  CF	 	 	 	iret
 	 	 	 	;==============================================================
 	 	 	 	;------ функция 2 - принять символ ----------------------------
 CA1B	 	 	 	v0c:
 CA1B  2A E4	 	 	 	sub	ah,ah
 	 	 	 	;------ записать команду ВКЛ. Ц.108 + ПЕРЕДАЧА + ПРИЁМ
 CA1D  42	 	 	 	inc	dx
 CA1E  B0 07	 	 	 	mov	al,00000111b
 CA20  EE	 	 	 	out	dx,al
 	 	 	 	;------ проверить готовность приемника + ВКЛ. Ц.107
 CA21  2B C9	 	 	 	sub	cx,cx
 CA23  E8 CABE R	 	 	call	v0z	;задержка
 CA26	 	 	 	v0c1:
 CA26  EC	 	 	 	in	al,dx	;байт состояния 1 <-- 2/3f9
 CA27  24 82	 	 	 	and	al,82h
 CA29  3C 82	 	 	 	cmp	al,82h
 CA2B  74 06	 	 	 	je     v0c2
 CA2D  E2 F7	 	 	 	loop	v0c1
 	 	 	 	 	 	 	;условия(е) не выплнены(о)
 CA2F  2A C0	 	 	 	sub	al,al
 CA31  EB DC	 	 	 	jmp	short	v0to
 	 	 	 	;------ прочитать байт из приемника
 CA33	 	 	 	v0c2:
 CA33  4A	 	 	 	dec	dx
 CA34  EC	 	 	 	in	al,dx	;2/3f8 <-- байт из приемникa
 	 	 	 	;------ уточнить состояние адаптера
 CA35  E8 CA7E R	 	 	call	v0e
 CA38  80 E4 1E	 	 	 	and	ah,00011110b
 	 	 	 	;------ сбросить триггеры ошибок приема
 CA3B  42	 	 	 	inc	dx
 CA3C  8A C8	 	 	 	mov	cl,al
 CA3E  B0 16	 	 	 	mov	al,00010110b
 CA40  EE	 	 	 	out	dx,al	;команда --> 2/3f9
 CA41  8A C1	 	 	 	mov	al,cl
 	 	 	 	;------ выход
 CA43  EB D0	 	 	 	jmp	short	v0end1
 	 	 	 	;=============================================================
 	 	 	 	;------ уточнить состояние ---------------------------------
 CA45	 	 	 	v0d:
 	 	 	 	;------ прочитать состояние модема в AL
 CA45  2A E4	 	 	 	sub	ah,ah
 CA47  8B 14	 	 	 	mov	dx,[si] ; база адаптера
 CA49  42	 	 	 	inc	dx
 CA4A  EC	 	 	 	in	al,dx	;байт состояния 1 <-- 2/3f9
 CA4B  A8 80	 	 	 	test	al,10000000b
 CA4D  74 03	 	 	 	jz	$+5
 CA4F  80 CC 20	 	 	 	or	ah,00100000b	; цепь 107 вкл.
 CA52  42	 	 	 	inc	dx
 CA53  EC	 	 	 	in	al,dx	;байт состояния 2 <-- 2/3fa
 CA54  EE	 	 	 	out	dx,al	;сбросить бит 3
 CA55  A8 01	 	 	 	test	al,00000001b
 CA57  75 03	 	 	 	jnz	$+5
 CA59  80 CC 10	 	 	 	or	ah,00010000b	; цепь 106 вкл.
 CA5C  A8 02	 	 	 	test	al,00000010b
 CA5E  75 03	 	 	 	jnz	$+5
 CA60  80 CC 80	 	 	 	or	ah,10000000b	; цепь 109 вкл.
 CA63  A8 08	 	 	 	test	al,00001000b
 CA65  74 03	 	 	 	jz	$+5
 CA67  80 CC 40	 	 	 	or	ah,01000000b	; цепь 125 вкл.
 	 	 	 	;------ установить биты изменения
 CA6A  8B 14	 	 	 	mov	dx,[si] ; база адаптера
 CA6C  8A C4	 	 	 	mov	al,ah
 CA6E  86 84 007C R	 	 	xchg	al,stat_offset[si]
 CA72  32 C4	 	 	 	xor	al,ah
 CA74  B1 04	 	 	 	mov	cl,4
 CA76  D2 E8	 	 	 	shr	al,cl
 CA78  0A C4	 	 	 	or	al,ah
 	 	 	 	;------ выход
 CA7A  2A E4	 	 	 	sub	ah,ah
 CA7C  EB 94	 	 	 	jmp	short	v0end
 	 	 	 	;=============================================================
 	 	 	 	;------ прочитать состояние адаптера в AH --------------------
 CA7E	 	 	 	v0e	proc	near
 CA7E  52	 	 	 	push	dx
 CA7F  50	 	 	 	push	ax
 CA80  2A E4	 	 	 	sub	ah,ah
 CA82  8B 14	 	 	 	mov	dx,[si] ; база адаптера
 CA84  42	 	 	 	inc	dx
 CA85  EC	 	 	 	in	al,dx	;байт состояния 1 <-- 2/3f9
 CA86  A8 01	 	 	 	test	al,00000001b
 CA88  74 03	 	 	 	jz	$+5
 CA8A  80 CC 20	 	 	 	or	ah,00100000b	; передатчик пуст
 CA8D  A8 02	 	 	 	test	al,00000010b
 CA8F  74 03	 	 	 	jz	$+5
 CA91  80 CC 01	 	 	 	or	ah,00000001b	; приемник содержит данные
 CA94  A8 04	 	 	 	test	al,00000100b
 CA96  74 03	 	 	 	jz	$+5
 CA98  80 CC 40	 	 	 	or	ah,01000000b	; адаптер пуст
 CA9B  A8 08	 	 	 	test	al,00001000b
 CA9D  74 03	 	 	 	jz	$+5
 CA9F  80 CC 04	 	 	 	or	ah,00000100b	; ошибка четности
 CAA2  A8 10	 	 	 	test	al,00010000b
 CAA4  74 03	 	 	 	jz	$+5
 CAA6  80 CC 02	 	 	 	or	ah,00000010b	; переполнение
 CAA9  A8 20	 	 	 	test	al,00100000b
 CAAB  74 03	 	 	 	jz	$+5
 CAAD  80 CC 08	 	 	 	or	ah,00001000b	; ошибка стоп-бита
 CAB0  A8 40	 	 	 	test	al,01000000b
 CAB2  74 03	 	 	 	jz	$+5
 CAB4  80 CC 10	 	 	 	or	ah,00010000b	; пауза
 CAB7  5A	 	 	 	pop	dx
 CAB8  0A E6	 	 	 	or	ah,dh	 	; тайм-аут
 CABA  8A C2	 	 	 	mov	al,dl	 	; восстановить AL
 CABC  5A	 	 	 	pop	dx
 CABD  C3	 	 	 	ret
 CABE	 	 	 	v0e	endp
 	 	 	 	;=============================================================
 	 	 	 	;------ подпрограмма задержки процессора ---------------------
 CABE	 	 	 	v0z	proc	near
 CABE  C3	 	 	 	ret
 CABF	 	 	 	v0z	endp
 	 	 	 	;=============================================================
 	 	 	 	;------ делители скорости
 CABF  0600 0400 0300 02BA	z0a	dw	1536,1024,768,698,512,384,256,128,64,32,16,12,8,4
       0200 0180 0100 0080	
       0040 0020 0010 000C	
       0008 0004	 	
 	 	 	 	;------ для преобразования форматов
 CADB  03 04 06 07 08 09	z0b	db	3h,4h,6h,7h,8h,9h,0Ah,0Ch
       0A 0C	 	 	
 CAE3	 	 	 	rs232_io	endp
 	 	 	 	     assume cs:code,ds:data
 	 	 	 	;------------------------------------------------------
 	 	 	 	;
 	 	 	 	;      Загрузить знакогенератор пользователя  (INT 10H, AH=11H)
 	 	 	 	;
 	 	 	 	;  На входе:
 	 	 	 	;
 	 	 	 	;	ES:BP  -  адрес таблицы, сформированной пользователем
 	 	 	 	;	CX     -  количество передаваемых символов
 	 	 	 	;	DL     -  код символа, начиная с которого загружается
 	 	 	 	;	 	  таблица пользователя
 	 	 	 	;	BH     -  количество байт на знакоместо
 	 	 	 	;	DH     -  идентификатор таблицы пользователя
 	 	 	 	;	AL     -  режим
 	 	 	 	;	 	  AL=0	 -  загрузить знакогенератор
 	 	 	 	;	 	  AL=1	 -  выдать идентификатор таблицы
 	 	 	 	;
 	 	 	 	;	 	  AL=3	 -  загрузить вторую половину знакогенератора:
 	 	 	 	;	 	 	    BL=0 - загрузить вторую половину знакогене-
 	 	 	 	;	 	 	    ратора из ПЗУ кодовой таблицы с русским
 	 	 	 	;	 	 	    алфавитом,
 	 	 	 	;	 	 	    BL=1 - загрузить вторую половину знакогене-
 	 	 	 	;	 	 	    ратора из ПЗУ стандартной кодовой таблицей
 	 	 	 	;	 	 	    ASCII (USA)
 	 	 	 	;
 	 	 	 	;   На выходе:
 	 	 	 	;
 	 	 	 	;	AH   -	количество байт на знакоместо
 	 	 	 	;	AL   -	идентификатор таблицы пользователя
 	 	 	 	;
 	 	 	 	;	CF=1   -   операция завершена успешно
 	 	 	 	;
 	 	 	 	;--------------------------------------------------
 	 	 	 	;RCgoff исправлены 2 ошибки в описании функции
 CAE3	 	 	 	   znak:
 CAE3  86 D6	 	 	 	xchg	dl,dh
 CAE5  86 DE	 	 	 	xchg	bl,dh
 CAE7  55	 	 	 	push	bp
 CAE8  3C 00	 	 	 	cmp	al,0
 CAEA  B8 ---- R	 	 	mov	ax,data
 CAED  8E D8	 	 	 	mov	ds,ax
 CAEF  75 42	 	 	 	jnz	wid
 CAF1  8A F7	 	 	 	mov	dh,bh
 CAF3  89 16 0090 R	 	 	mov	idnpol,dx
 CAF7  51	 	 	 	push	cx
 CAF8  80 FF 08	 	 	 	cmp	bh,8
 CAFB  76 3E	 	 	 	jbe	zagr8
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;      Загрузка знакогенератора черно-белого дисплея
 	 	 	 	;
 	 	 	 	;
 CAFD  B8 DC00	 	 	 	mov	ax,0dc00h
 CB00  8E D8	 	 	 	mov	ds,ax	; база знакогенератора
 CB02  B1 05	 	 	 	mov	cl,5
 CB04  BA 03B8	 	 	 	mov	dx,3b8h
 CB07	 	 	 	zgr:
 	 	 	 	
 CB07  B0 00	 	 	 	mov	al,0
 CB09  EE	 	 	 	out	dx,al
 CB0A  B8 0000	 	 	 	mov	ax,0	; смещение в знакогенераторе
 CB0D  8A C3	 	 	 	mov	al,bl
 CB0F  D3 E0	 	 	 	shl	ax,cl
 CB11  8B F8	 	 	 	mov	di,ax
 CB13  59	 	 	 	pop	cx
 CB14  8A DF	 	 	kolby:	mov	bl,bh	; число байт на знакоместо
 CB16  26: 8A 46 00	 	zapby:	mov	al,es:[bp]    ; считывание байта из таблицы
 CB1A  88 05	 	 	 	mov	byte ptr [di],al   ; запись байта в знакогенератор
 CB1C  47	 	 	 	inc	di
 CB1D  45	 	 	 	inc	bp
 CB1E  FE CB	 	 	 	dec	bl
 CB20  75 F4	 	 	 	jnz	zapby
 CB22  E2 F0	 	 	 	loop	kolby
 CB24  B8 ---- R	 	 	mov	ax,data
 CB27  8E D8	 	 	 	mov	ds,ax
 CB29  80 FF 08	 	 	 	cmp	bh,8
 CB2C  76 1F	 	 	 	jbe	gr8
 CB2E  B4 29	 	 	 	mov	ah,29h
 CB30  8A C4	 	 	weport: mov	al,ah
 CB32  EE	 	 	 	out	dx,al
 CB33	 	 	 	wid:
 	 	 	 	
 CB33  A1 0090 R	 	 	mov	ax,idnpol
 CB36  5D	 	 	 	pop	bp
 CB37  F9	 	 	 	stc
 CB38  E9 F1DC R	 	 	jmp	video_return
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;    Загрузка знакогенератора цветного дисплея
 	 	 	 	;
 	 	 	 	;
 CB3B  B8 B800	 	 	zagr8:	mov	ax,0b800h
 CB3E  8E D8	 	 	 	mov	ds,ax	; база знакогенератора
 CB40  B1 03	 	 	 	mov	cl,3
 CB42  BA 03DF	 	 	 	mov	dx,3dfh
 CB45  B0 01	 	 	 	mov	al,01
 CB47  EE	 	 	 	out	dx,al
 CB48  BA 03D8	 	 	 	mov	dx,3d8h
 CB4B  EB BA	 	 	 	jmp	zgr
 CB4D  BA 03DF	 	 	gr8:	mov	dx,3dfh
 CB50  B0 00	 	 	 	mov	al,0
 CB52  EE	 	 	 	out	dx,al
 CB53  BA 03D8	 	 	 	mov	dx,3d8h
 CB56  8A 1E 0049 R	 	 	mov	bl,crt_mode
 CB5A  B7 00	 	 	 	mov	bh,0
 CB5C  2E: 8A A7 F109 R	 	 	mov	ah,cs:[bx+offset m7]
 CB61  EB CD	 	 	 	jmp	weport
 	 	 	 	
 	 	 	 	;
 	 	 	 	;__________________________________
 	 	 	 	;
 	 	 	 	;   Загрузка знакогенератора цветного дисплея
 	 	 	 	;
 	 	 	 	;__________________________________
 	 	 	 	;
 CB63	 	 	 	zagrcw:
 	 	 	 	if newzagrcw
 	 	 	 	;RCgoff новая программа основана на int10,ah11
 CB63  55	 	 	 	push	bp	 	;bp используется как хранитель ошибок POST,
 	 	 	 	 	 	 	 	;не надо его портить (хотя раньше этой он не используется)
 CB64  B8 1103	 	 	 	mov	ax,1103h	;функция загрузки верхней половины знакогенератора
 CB67  BB 0800	 	 	 	mov	bx,0800h	;8 байт/символ, русская таблица
 CB6A  CD 10	 	 	 	int	10h
 	 	 	 	 	 	 	 	;после возврата в AL=0, в AH - 08h
 	 	 	 	 	 	 	 	;из анализа кода int10 при возврате в BH - 0,в BL - crt_mode
 	 	 	 	 	           	 	;теперь нижний знакогенератор
 CB6C  8C CB	 	 	 	mov	bx,cs
 CB6E  8E C3	 	 	 	mov	es,bx
 CB70  BD FA6E R	 	 	mov	bp,offset crt_char_gen
 	 	 	 	 	 	 	 	;ES:BP указывают на знакогенер 128 нижних ASCII	
 	 	 	 	 	 	
 CB73  B9 0080	 	 	 	mov	cx,80h	 	;128 cимволов
 CB76  33 D2	 	 	 	xor	dx,dx           ;начальный код 0, id таблицы 0
 CB78  B7 08	 	 	 	mov 	bh,08h	 	;8 байт/символ
 CB7A  B4 11	 	 	 	mov	ah,11h	 	;функция 11,подфункция 0 - загрузка знакогенератора
 	 	 	 	 	 	 	 	;0 сохранился в AL после первого вызова int10, экономим 1 байт
 CB7C  CD 10	 	 	 	int	10h
 CB7E  5D	 	 	        pop 	bp
 	 	 	 	endif
 CB7F  E9 F8A6 R	 	 	jmp	kzagr
 	 	 	 	
 	 	 	 	;---------------------------------
 	 	 	 	;
 	 	 	 	;   Эти вектора передаются в область прерывания 8086 во время
 	 	 	 	; включения питания.
 	 	 	 	;
 	 	 	 	;---------------------------------
 CB82	 	 	 	vector_table	label	word	; таблица векторов прерываний
 	 	 	 	
 CB82  FEA5 R	 	 	 	dw	offset timer_int	; прерывание 8
 CB84  E987 R	 	 	 	dw	offset kb_int	 	; прерывание 9
 CB86  FF53 R	 	 	 	dw	offset dummy_return	; прерывание А
 CB88  F938 R	 	 	 	dw	offset dummm_return	; прерывание B
 CB8A  F938 R	 	 	 	dw	offset dummm_return	; прерывание C
 CB8C  FF53 R	 	 	 	dw	offset dummy_return	; прерывание D
 CB8E  EF57 R	 	 	 	dw	offset disk_int 	; прерывание E
 CB90  FF53 R	 	 	 	dw	offset dummy_return	; прерывание F
 CB92  F06D R	 	 	 	dw	offset video_io 	; прерывание 10H
 CB94  F85A R	 	 	 	dw	offset equipment	; прерывание 11H
 CB96  F84E R	 	 	 	dw	offset memory_size_determine	; прерывание 12H
 CB98  EC59 R	 	 	 	dw	offset diskette_io	; прерывание 13H
 CB9A  C8F5 R	 	 	 	dw	offset rs232_io 	; прерывание  14H
 CB9C  D1F1 R	 	 	 	dw	offset ex_memory	; int 15h
 CB9E  E82E R	 	 	 	dw	offset keyboard_io	; прерывание 16H
 CBA0  EFD2 R	 	 	 	dw	offset printer_io	; прерывание 17H
 CBA2  E05B R	 	 	 	dw	offset start	 	; прерывание 18H RESTART
 CBA4  C186 R	 	 	 	dw	offset boot_strapt	; прерывание 19H 
 CBA6  FE6E R	 	 	 	dw	time_of_day	; прерывание 1АH - время суток
 CBA8  FF53 R	 	 	 	dw	dummy_return	; прерывание 1BH - прерывание клавиатуры
 CBAA  FF53 R	 	 	 	dw	dummy_return	; прерывание 1C - прерывание таймера
 CBAC  F0B9 R	 	 	 	dw	video_parms	; прерывание 1D - параметры видео
 CBAE  EFC7 R	 	 	 	dw	offset	disk_base   ;прерывание 1EH - параметры НГМД
 CBB0  CBB2 R	 	 	 	dw	offset crt_char_rus	; 1FH - адрес таблицы пользовательского дополнительного знакогенератора
 	 	 	 	
 CBB2	 	 	 	org	0cbb2h	 	   ;чтобы не съезжали последующие программы
 	 	 	 	;RCgoff end
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;*************************************************
 	 	 	 	;   Знакогенератор графический русский
 	 	 	 	;************************************************
 	 	 	 	
 	 	 	 	
 CBB2	 	 	 	crt_char_rus	label	byte
 	 	 	 	;RCgoff
 	 	 	 	if cp866
                             C	include chr866cp.asm
                             C	;╨Т╨╡╤А╤Е╨╜╨╕╨╡ 128 ╤Б╨╕╨╝╨▓╨╛╨╗╨╛╨▓ ╤И╤А╨╕╤Д╤В╨░ 8x8 ╨▓ ╨║╨╛╨┤╨╕╤А╨╛╨▓╨║╨╡ DOS (cp866)
                             C	;╨а╨░╤Б╨┐╨╛╨╗╨╛╨╢╨╡╨╜╨╕╨╡ ╤Б╨╕╨╝╨▓╨╛╨╗╨╛╨▓ ╨┐╨╛╨╗╨╜╨╛╤Б╤В╤М╤О ╤Б╨╛╨╛╤В╨▓╨╡╤В╤Б╤В╨▓╤Г╨╡╤В ╨║╨╛╨┤╨╛╨▓╨╛╨╣ ╤Б╤В╤А╨░╨╜╨╕╤Ж╨╡ 866.
                             C	;
                             C	;╨в╨░╨▒╨╗╨╕╤Ж╨░ ╨┐╨╛╨╗╤Г╤З╨╡╨╜╨░ ╨╕╨╖ ╤В╨░╨▒╨╗╨╕╤Ж╤Л crt_char_rus ╨╕╨╖ ╨╗╨╕╤Б╤В╨╕╨╜╨│╨░
                             C	;BIOS ╨Х╨б1841 ╨┐╤Г╤В╨╡╨╝ ╨┐╨╡╤А╨╡╤В╨░╤Б╨╛╨▓╨║╨╕ 8-╨▒╨░╨╣╤В╨╛╨▓╤Л╤Е ╨┐╨╛╤Б╨╗╨╡╨┤╨╛╨▓╨░╤В╨╡╨╗╤М╨╜╨╛╤Б╤В╨╡╨╣,
                             C	;╤Б╨╛╨╛╤В╨▓╨╡╤В╤Б╤В╨▓╤Г╤О╤Й╨╕╤Е ╤Б╨╕╨╝╨▓╨╛╨╗╨░╨╝, ╨╖╨░ ╨╕╤Б╨║╨╗╤О╤З╨╡╨╜╨╕╨╡╨╝: 
                             C	;	-╨б╨╕╨╝╨▓╨╛╨╗╤Л ╤Б ╨║╨╛╨┤╨░╨╝╨╕ 0xE0..0xF1 ╨╛╤Б╤В╨░╨▓╨╗╨╡╨╜╤Л ╨╜╨╡╨╕╨╖╨╝╨╡╨╜╨╜╤Л╨╝╨╕
                             C	;	-╨б╨╕╨╝╨▓╨╛╨╗╤Л ╤Б ╨║╨╛╨┤╨░╨╝╨╕ 0xF2..0xFB, 0xFD...0xFF ╨▓╨╖╤П╤В╤Л ╨╕╨╖ ╤Д╨░╨╣╨╗╨░ ega.cpi
                             C	;	 (8x8, ╨║╨╛╨┤╨╛╨▓╨░╤П ╤Б╤В╤А╨░╨╜╨╕╤Ж╨░ 866) Windows 7
                             C	;	-╨б╨╕╨╝╨▓╨╛╨╗ ╨╜╨╛╨╝╨╡╤А╨░ ╤Б ╨║╨╛╨┤╨╛╨╝ 0xFC ╨▓╨╖╤П╤В ╨╕╨╖ ╤И╤А╨╕╤Д╤В╨░ ╨▓ ╨║╨╜╨╕╨│╨╡ ╨д╤А╨╛╨╗╨╛╨▓╤Л╤Е
                             C	;	 "╨Я╤А╨╛╨│╤А╨░╨╝╨╝╨╕╤А╨╛╨▓╨░╨╜╨╕╨╡ ╨▓╨╕╨┤╨╡╨╛╨░╨┤╨░╨┐╤В╨╡╤А╨╛╨▓ CGA/EGA/VGA", ╤В.╨║. ╨║╤А╨░╤Б╨╕╨▓╤Л╨╣
                             C	;	-╨б╨╕╨╝╨▓╨╛╨╗╤Л ╤Б ╨║╨╛╨┤╨░╨╝╨╕ 0xB0..0xB2 ╨▓╨╖╤П╤В╤Л ╨╕╨╖ ╤В╨░╨▒╨╗╨╕╤Ж╤Л crt_char_ibm,
                             C	;	 ╤В.╨║. ╤В╨░╨╝ ╨╛╨╜╨╕ ╤Б╤Г╤Й╨╡╤Б╤В╨▓╨╡╨╜╨╜╨╛ ╨╗╤Г╤З╤И╨╡, ╤З╨╡╨╝ ╨▒╤Л╨╗╨╕ ╨▓ crt_char_rus
                             C	;
                             C	;
                             C	;╨Ы.╨п╨┤╤А╨╡╨╜╨╜╨╕╨║╨╛╨▓ (RCgoff),17.04.20, 13.08.20,29.09.20 (03.05.21 - UTF-8)
                             C	
 CBB2  1E 36 66 66 7E 66     C	 	db	01eh,036h,066h,066h,07eh,066h,066h,000h    ;80
       66 00                 C	
 CBBA  7C 60 60 7C 66 66     C	 	db	07ch,060h,060h,07ch,066h,066h,07ch,000h    ;81
       7C 00                 C	
 CBC2  7C 66 66 7C 66 66     C	 	db	07ch,066h,066h,07ch,066h,066h,07ch,000h    ;82
       7C 00                 C	
 CBCA  7E 60 60 60 60 60     C	 	db	07eh,060h,060h,060h,060h,060h,060h,000h    ;83
       60 00                 C	
 CBD2  38 6C 6C 6C 6C 6C     C	 	db	038h,06ch,06ch,06ch,06ch,06ch,0feh,0c6h    ;84
       FE C6                 C	
 CBDA  7E 60 60 7C 60 60     C	 	db	07eh,060h,060h,07ch,060h,060h,07eh,000h    ;85
       7E 00                 C	
 CBE2  DB DB 7E 3C 7E DB     C	 	db	0dbh,0dbh,07eh,03ch,07eh,0dbh,0dbh,000h    ;86
       DB 00                 C	
 CBEA  3C 66 06 1C 06 66     C	 	db	03ch,066h,006h,01ch,006h,066h,03ch,000h    ;87
       3C 00                 C	
 CBF2  66 66 6E 7E 76 66     C	 	db	066h,066h,06eh,07eh,076h,066h,066h,000h    ;88
       66 00                 C	
 CBFA  3C 66 6E 7E 76 66     C	 	db	03ch,066h,06eh,07eh,076h,066h,066h,000h    ;89
       66 00                 C	
 CC02  66 6C 78 70 78 6C     C	 	db	066h,06ch,078h,070h,078h,06ch,066h,000h    ;8a
       66 00                 C	
 CC0A  1E 36 66 66 66 66     C	 	db	01eh,036h,066h,066h,066h,066h,066h,000h    ;8b
       66 00                 C	
 CC12  C6 EE FE FE D6 C6     C	 	db	0c6h,0eeh,0feh,0feh,0d6h,0c6h,0c6h,000h    ;8c
       C6 00                 C	
 CC1A  66 66 66 7E 66 66     C	 	db	066h,066h,066h,07eh,066h,066h,066h,000h    ;8d
       66 00                 C	
 CC22  3C 66 66 66 66 66     C	 	db	03ch,066h,066h,066h,066h,066h,03ch,000h    ;8e
       3C 00                 C	
 CC2A  7E 66 66 66 66 66     C	 	db	07eh,066h,066h,066h,066h,066h,066h,000h    ;8f
       66 00                 C	
 CC32  7C 66 66 66 7C 60     C	 	db	07ch,066h,066h,066h,07ch,060h,060h,000h    ;90
       60 00                 C	
 CC3A  3C 66 60 60 60 66     C	 	db	03ch,066h,060h,060h,060h,066h,03ch,000h    ;91
       3C 00                 C	
 CC42  7E 18 18 18 18 18     C	 	db	07eh,018h,018h,018h,018h,018h,018h,000h    ;92
       18 00                 C	
 CC4A  66 66 66 3E 06 66     C	 	db	066h,066h,066h,03eh,006h,066h,03ch,000h    ;93
       3C 00                 C	
 CC52  7E DB DB DB 7E 18     C	 	db	07eh,0dbh,0dbh,0dbh,07eh,018h,018h,000h    ;94
       18 00                 C	
 CC5A  66 66 3C 18 3C 66     C	 	db	066h,066h,03ch,018h,03ch,066h,066h,000h    ;95
       66 00                 C	
 CC62  66 66 66 66 66 66     C	 	db	066h,066h,066h,066h,066h,066h,07fh,003h    ;96
       7F 03                 C	
 CC6A  66 66 66 3E 06 06     C	 	db	066h,066h,066h,03eh,006h,006h,006h,000h    ;97
       06 00                 C	
 CC72  DB DB DB DB DB DB     C	 	db	0dbh,0dbh,0dbh,0dbh,0dbh,0dbh,0ffh,000h    ;98
       FF 00                 C	
 CC7A  DB DB DB DB DB DB     C	 	db	0dbh,0dbh,0dbh,0dbh,0dbh,0dbh,0ffh,003h    ;99
       FF 03                 C	
 CC82  E0 60 60 7C 66 66     C	 	db	0e0h,060h,060h,07ch,066h,066h,07ch,000h    ;9a
       7C 00                 C	
 CC8A  C6 C6 C6 F6 DE DE     C	 	db	0c6h,0c6h,0c6h,0f6h,0deh,0deh,0f6h,000h    ;9b
       F6 00                 C	
 CC92  60 60 60 7C 66 66     C	 	db	060h,060h,060h,07ch,066h,066h,07ch,000h    ;9c
       7C 00                 C	
 CC9A  78 0C 06 3E 06 0C     C	 	db	078h,00ch,006h,03eh,006h,00ch,078h,000h    ;9d
       78 00                 C	
 CCA2  CE DB DB FB DB DB     C	 	db	0ceh,0dbh,0dbh,0fbh,0dbh,0dbh,0ceh,000h    ;9e
       CE 00                 C	
 CCAA  3E 66 66 66 3E 36     C	 	db	03eh,066h,066h,066h,03eh,036h,066h,000h    ;9f
       66 00                 C	
 CCB2  00 00 78 0C 7C CC     C	 	db	000h,000h,078h,00ch,07ch,0cch,076h,000h    ;a0
       76 00                 C	
 CCBA  00 3C 60 3C 66 66     C	 	db	000h,03ch,060h,03ch,066h,066h,03ch,000h    ;a1
       3C 00                 C	
 CCC2  00 3C 66 7C 66 66     C	 	db	000h,03ch,066h,07ch,066h,066h,07ch,000h    ;a2
       7C 00                 C	
 CCCA  00 00 7E 60 60 60     C	 	db	000h,000h,07eh,060h,060h,060h,060h,000h    ;a3
       60 00                 C	
 CCD2  00 00 3C 6C 6C 6C     C	 	db	000h,000h,03ch,06ch,06ch,06ch,0feh,0c6h    ;a4
       FE C6                 C	
 CCDA  00 00 3C 66 7E 60     C	 	db	000h,000h,03ch,066h,07eh,060h,03ch,000h    ;a5
       3C 00                 C	
 CCE2  00 00 DB 7E 3C 7E     C	 	db	000h,000h,0dbh,07eh,03ch,07eh,0dbh,000h    ;a6
       DB 00                 C	
 CCEA  00 00 3C 66 0C 66     C	 	db	000h,000h,03ch,066h,00ch,066h,03ch,000h    ;a7
       3C 00                 C	
 CCF2  00 00 66 6E 7E 76     C	 	db	000h,000h,066h,06eh,07eh,076h,066h,000h    ;a8
       66 00                 C	
 CCFA  00 18 66 6E 7E 76     C	 	db	000h,018h,066h,06eh,07eh,076h,066h,000h    ;a9
       66 00                 C	
 CD02  00 00 66 6C 78 6C     C	 	db	000h,000h,066h,06ch,078h,06ch,066h,000h    ;aa
       66 00                 C	
 CD0A  00 00 1E 36 66 66     C	 	db	000h,000h,01eh,036h,066h,066h,066h,000h    ;ab
       66 00                 C	
 CD12  00 00 C6 FE FE D6     C	 	db	000h,000h,0c6h,0feh,0feh,0d6h,0c6h,000h    ;ac
       C6 00                 C	
 CD1A  00 00 66 66 7E 66     C	 	db	000h,000h,066h,066h,07eh,066h,066h,000h    ;ad
       66 00                 C	
 CD22  00 00 3C 66 66 66     C	 	db	000h,000h,03ch,066h,066h,066h,03ch,000h    ;ae
       3C 00                 C	
 CD2A  00 00 7E 66 66 66     C	 	db	000h,000h,07eh,066h,066h,066h,066h,000h    ;af
       66 00                 C	
                             C	;	db	092h,000h,092h,000h,092h,000h,092h,000h    ;b0_es_old
 CD32  22 88 22 88 22 88     C	 	db	022H,088H,022H,088H,022H,088H,022H,088H    ;b0_ibm
       22 88                 C	
                             C	;	db	092h,049h,092h,049h,092h,049h,092h,000h    ;b1_es_old
 CD3A  55 AA 55 AA 55 AA     C	 	db      055H,0AAH,055H,0AAH,055H,0AAH,055H,0AAH    ;b1_ibm
       55 AA                 C	
                             C	;	db	0aah,055h,0aah,055h,0aah,055h,0aah,000h    ;b2_es_old
 CD42  DB 77 DB EE DB 77     C	 	db	0DBH,077H,0DBH,0EEH,0DBH,077H,0DBH,0EEH    ;b2_ibm	
       DB EE                 C	
 CD4A  18 18 18 18 18 18     C	 	db	018h,018h,018h,018h,018h,018h,018h,018h    ;b3
       18 18                 C	
 CD52  18 18 18 F8 18 18     C	 	db	018h,018h,018h,0f8h,018h,018h,018h,018h    ;b4
       18 18                 C	
 CD5A  18 18 F8 18 F8 18     C	 	db	018h,018h,0f8h,018h,0f8h,018h,018h,018h    ;b5
       18 18                 C	
 CD62  6C 6C 6C EC 6C 6C     C	 	db	06ch,06ch,06ch,0ech,06ch,06ch,06ch,06ch    ;b6
       6C 6C                 C	
 CD6A  00 00 00 FC 6C 6C     C	 	db	000h,000h,000h,0fch,06ch,06ch,06ch,06ch    ;b7
       6C 6C                 C	
 CD72  00 00 F8 18 F8 18     C	 	db	000h,000h,0f8h,018h,0f8h,018h,018h,018h    ;b8
       18 18                 C	
 CD7A  6C 6C EC 0C EC 6C     C	 	db	06ch,06ch,0ech,00ch,0ech,06ch,06ch,06ch    ;b9
       6C 6C                 C	
 CD82  6C 6C 6C 6C 6C 6C     C	 	db	06ch,06ch,06ch,06ch,06ch,06ch,06ch,06ch    ;ba
       6C 6C                 C	
 CD8A  00 00 FC 0C EC 6C     C	 	db	000h,000h,0fch,00ch,0ech,06ch,06ch,06ch    ;bb
       6C 6C                 C	
 CD92  6C 6C EC 0C FC 00     C	 	db	06ch,06ch,0ech,00ch,0fch,000h,000h,000h    ;bc
       00 00                 C	
 CD9A  6C 6C 6C FC 00 00     C	 	db	06ch,06ch,06ch,0fch,000h,000h,000h,000h    ;bd
       00 00                 C	
 CDA2  18 18 F8 18 F8 00     C	 	db	018h,018h,0f8h,018h,0f8h,000h,000h,000h    ;be
       00 00                 C	
 CDAA  00 00 00 F8 18 18     C	 	db	000h,000h,000h,0f8h,018h,018h,018h,018h    ;bf
       18 18                 C	
 CDB2  18 18 18 1F 00 00     C	 	db	018h,018h,018h,01fh,000h,000h,000h,000h    ;c0
       00 00                 C	
 CDBA  18 18 18 FF 00 00     C	 	db	018h,018h,018h,0ffh,000h,000h,000h,000h    ;c1
       00 00                 C	
 CDC2  00 00 00 FF 18 18     C	 	db	000h,000h,000h,0ffh,018h,018h,018h,018h    ;c2
       18 18                 C	
 CDCA  18 18 18 1F 18 18     C	 	db	018h,018h,018h,01fh,018h,018h,018h,018h    ;c3
       18 18                 C	
 CDD2  00 00 00 FF 00 00     C	 	db	000h,000h,000h,0ffh,000h,000h,000h,000h    ;c4
       00 00                 C	
 CDDA  18 18 18 FF 18 18     C	 	db	018h,018h,018h,0ffh,018h,018h,018h,018h    ;c5
       18 18                 C	
 CDE2  18 18 1F 18 1F 18     C	 	db	018h,018h,01fh,018h,01fh,018h,018h,018h    ;c6
       18 18                 C	
 CDEA  6C 6C 6C 6F 6C 6C     C	 	db	06ch,06ch,06ch,06fh,06ch,06ch,06ch,06ch    ;c7
       6C 6C                 C	
 CDF2  6C 6C 6F 60 7F 00     C	 	db	06ch,06ch,06fh,060h,07fh,000h,000h,000h    ;c8
       00 00                 C	
 CDFA  00 00 7F 60 6F 6C     C	 	db	000h,000h,07fh,060h,06fh,06ch,06ch,06ch    ;c9
       6C 6C                 C	
 CE02  6C 6C EF 00 FF 00     C	 	db	06ch,06ch,0efh,000h,0ffh,000h,000h,000h    ;ca
       00 00                 C	
 CE0A  00 00 FF 00 EF 6C     C	 	db	000h,000h,0ffh,000h,0efh,06ch,06ch,06ch    ;cb
       6C 6C                 C	
 CE12  6C 6C 6F 60 6F 6C     C	 	db	06ch,06ch,06fh,060h,06fh,06ch,06ch,06ch    ;cc
       6C 6C                 C	
 CE1A  00 00 FF 00 FF 00     C	 	db	000h,000h,0ffh,000h,0ffh,000h,000h,000h    ;cd
       00 00                 C	
 CE22  6C 6C EF 00 EF 6C     C	 	db	06ch,06ch,0efh,000h,0efh,06ch,06ch,06ch    ;ce
       6C 6C                 C	
 CE2A  18 18 FF 00 FF 00     C	 	db	018h,018h,0ffh,000h,0ffh,000h,000h,000h    ;cf
       00 00                 C	
 CE32  6C 6C 6C FF 00 00     C	 	db	06ch,06ch,06ch,0ffh,000h,000h,000h,000h    ;d0
       00 00                 C	
 CE3A  00 00 FF 00 FF 18     C	 	db	000h,000h,0ffh,000h,0ffh,018h,018h,018h    ;d1
       18 18                 C	
 CE42  00 00 00 FF 6C 6C     C	 	db	000h,000h,000h,0ffh,06ch,06ch,06ch,06ch    ;d2
       6C 6C                 C	
 CE4A  6C 6C 6C 7F 00 00     C	 	db	06ch,06ch,06ch,07fh,000h,000h,000h,000h    ;d3
       00 00                 C	
 CE52  18 18 1F 18 1F 00     C	 	db	018h,018h,01fh,018h,01fh,000h,000h,000h    ;d4
       00 00                 C	
 CE5A  00 00 1F 18 1F 18     C	 	db	000h,000h,01fh,018h,01fh,018h,018h,018h    ;d5
       18 18                 C	
 CE62  00 00 00 7F 6C 6C     C	 	db	000h,000h,000h,07fh,06ch,06ch,06ch,06ch    ;d6
       6C 6C                 C	
 CE6A  6C 6C 6C EF 6C 6C     C	 	db	06ch,06ch,06ch,0efh,06ch,06ch,06ch,06ch    ;d7
       6C 6C                 C	
 CE72  18 18 FF 00 FF 18     C	 	db	018h,018h,0ffh,000h,0ffh,018h,018h,018h    ;d8
       18 18                 C	
 CE7A  18 18 18 F8 00 00     C	 	db	018h,018h,018h,0f8h,000h,000h,000h,000h    ;d9
       00 00                 C	
 CE82  00 00 00 1F 18 18     C	 	db	000h,000h,000h,01fh,018h,018h,018h,018h    ;da
       18 18                 C	
 CE8A  FF FF FF FF FF FF     C	 	db	0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh    ;db
       FF FF                 C	
 CE92  00 00 00 00 FF FF     C	 	db	000h,000h,000h,000h,0ffh,0ffh,0ffh,0ffh    ;dc
       FF FF                 C	
 CE9A  F0 F0 F0 F0 F0 F0     C	 	db	0f0h,0f0h,0f0h,0f0h,0f0h,0f0h,0f0h,0f0h    ;dd
       F0 F0                 C	
 CEA2  0F 0F 0F 0F 0F 0F     C	 	db	00fh,00fh,00fh,00fh,00fh,00fh,00fh,00fh    ;de
       0F 0F                 C	
 CEAA  FF FF FF FF 00 00     C	 	db	0ffh,0ffh,0ffh,0ffh,000h,000h,000h,000h    ;df
       00 00                 C	
                             C	
                             C	;╨Ф╨░╨╗╨╡╨╡ ╨╜╨╡╨╕╨╖╨╝╨╡╨╜╨╜╤Л╨╡ ╤Б╤В╨╛╨╗╨▒╤Ж╤Л E,F ╨╕╨╖ ╨Х╨б-╨╗╨╕╤Б╤В╨╕╨╜╨│╨░
 CEB2  00 00 7C 66 66 7C     C	 	db 000h,000h,07ch,066h,066h,07ch,060h,000h         ;e0
       60 00                 C	
 CEBA  00 00 3C 66 60 66     C	 	db 000h,000h,03ch,066h,060h,066h,03ch,000h         ;e1
       3C 00                 C	
 CEC2  00 00 7E 18 18 18     C	 	db 000h,000h,07eh,018h,018h,018h,018h,000h         ;e2
       18 00                 C	
 CECA  00 00 66 66 3E 06     C	 	db 000h,000h,066h,066h,03eh,006h,03ch,000h         ;e3
       3C 00                 C	
 CED2  00 00 7E DB DB 7E     C	 	db 000h,000h,07eh,0dbh,0dbh,07eh,018h,000h         ;e4
       18 00                 C	
 CEDA  00 00 66 3C 18 3C     C	 	db 000h,000h,066h,03ch,018h,03ch,066h,000h         ;e5
       66 00                 C	
 CEE2  00 00 66 66 66 66     C	 	db 000h,000h,066h,066h,066h,066h,07fh,003h         ;e6
       7F 03                 C	
 CEEA  00 00 66 66 3E 06     C	 	db 000h,000h,066h,066h,03eh,006h,006h,000h         ;e7
       06 00                 C	
 CEF2  00 00 DB DB DB DB     C	 	db 000h,000h,0dbh,0dbh,0dbh,0dbh,0ffh,000h         ;e8
       FF 00                 C	
 CEFA  00 00 DB DB DB DB     C	 	db 000h,000h,0dbh,0dbh,0dbh,0dbh,0ffh,003h         ;e9
       FF 03                 C	
 CF02  00 00 E0 60 7C 66     C	 	db 000h,000h,0e0h,060h,07ch,066h,07ch,000h         ;ea
       7C 00                 C	
 CF0A  00 00 C6 C6 F6 DE     C	 	db 000h,000h,0c6h,0c6h,0f6h,0deh,0f6h,000h         ;eb
       F6 00                 C	
 CF12  00 00 60 60 7C 66     C	 	db 000h,000h,060h,060h,07ch,066h,07ch,000h         ;ec
       7C 00                 C	
 CF1A  00 00 7C 06 3E 06     C	 	db 000h,000h,07ch,006h,03eh,006h,07ch,000h         ;ed
       7C 00                 C	
 CF22  00 00 CE DB FB DB     C	 	db 000h,000h,0ceh,0dbh,0fbh,0dbh,0ceh,000h         ;ee
       CE 00                 C	
 CF2A  00 00 3E 66 3E 36     C	 	db 000h,000h,03eh,066h,03eh,036h,066h,000h         ;ef
       66 00                 C	
 CF32  66 7E 60 7C 60 60     C	 	db 066h,07eh,060h,07ch,060h,060h,07eh,000h         ;f0
       7E 00                 C	
 CF3A  00 66 3C 66 7E 60     C	 	db 000h,066h,03ch,066h,07eh,060h,03ch,000h         ;f1
       3C 00                 C	
                             C	
                             C	;╨Ш╨╖ ╤И╤А╨╕╤Д╤В╨░ 8x8 ╨║╨╛╨┤╨╛╨▓╨╛╨╣ ╤Б╤В╤А╨░╨╜╨╕╤Ж╤Л 866 ╤Д╨░╨╣╨╗╨░ ega.cpi Windows 7
                             C	
 CF42  3C 66 C0 F8 C0 66     C	 	cp866_code_0f2h	db	03Ch, 066h, 0C0h, 0F8h, 0C0h, 066h, 03Ch, 000h	  	;╤Г╨║╤А ╨н ╨Ю╨С╨а╨Р╨в╨Э╨Ю╨Х
       3C 00                 C	
 CF4A  00 00 3E 63 78 63     C	        cp866_code_0f3h	db	000h, 000h, 03Eh, 063h, 078h, 063h, 03Eh, 000h          ;╤Г╨║╤А ╤Н ╨╛╨▒╤А╨░╤В╨╜╨╛╨╡
       3E 00                 C	
 CF52  48 78 30 30 30 30     C	        cp866_code_0f4h	db	048h, 078h, 030h, 030h, 030h, 030h, 078h, 000h          ;╤Г╨║╤А ╨Ш ╨б ╨Ф╨Т╨г╨Ь╨п ╨в╨Ю╨з╨Ъ╨Р╨Ь╨Ш
       78 00                 C	
 CF5A  CC 00 30 30 30 30     C	        cp866_code_0f5h	db	0CCh, 000h, 030h, 030h, 030h, 030h, 078h, 000h          ;╤Г╨║╤А ╨╕ ╤Б ╨┤╨▓╤Г╨╝╤П ╤В╨╛╤З╨║╨░╨╝╨╕
       78 00                 C	
 CF62  38 C6 C6 7E 06 C6     C	 	cp866_code_0f6h	db	038h, 0C6h, 0C6h, 07Eh, 006h, 0C6h, 07Ch, 000h          ;╨▒╨╡╨╗ ╨г ╨б ╨Ф╨Т╨г╨Ь╨п ╨в╨Ю╨з╨Ъ╨Р╨Ь╨Ш
       7C 00                 C	
 CF6A  6C 38 C6 C6 C6 7E     C	 	cp866_code_0f7h	db	06Ch, 038h, 0C6h, 0C6h, 0C6h, 07Eh, 006h, 07Ch          ;╨▒╨╡╨╗ ╤Г ╤Б ╨┤╨▓╤Г╨╝╤П ╤В╨╛╤З╨║╨░╨╝╨╕
       06 7C                 C	
 CF72  38 6C 6C 38 00 00     C	 	cp866_code_0f8h	db	038h, 06Ch, 06Ch, 038h, 000h, 000h, 000h, 000h          ;╨│╤А╨░╨┤╤Г╤Б
       00 00                 C	
 CF7A  00 00 00 18 18 00     C	 	cp866_code_0f9h	db	000h, 000h, 000h, 018h, 018h, 000h, 000h, 000h	  	;╨▒╨╛╨╗╤М╤И╨╛╨╣ ╨┐╤А╤П╨╝╨╛╤Г╨│╨╛╨╗╤М╨╜╨╕╨║	
       00 00                 C	
 CF82  00 00 00 00 18 00     C	 	cp866_code_0fah	db      000h, 000h, 000h, 000h, 018h, 000h, 000h, 000h          ;╨╝╨░╨╗╨╡╨╜╤М╨║╨╕╨╣ ╨┐╤А╤П╨╝╨╛╤Г╨│╨╛╨╗╤М╨╜╨╕╨║
       00 00                 C	
 CF8A  0E 0C 0C 0C 6C 3C     C	        cp866_code_0fbh	db	00Eh, 00Ch, 00Ch, 00Ch, 06Ch, 03Ch, 01Ch, 000h          ;╨║╨╛╤А╨╡╨╜╤М
       1C 00                 C	
                             C	
                             C	;╨╕╨╖ ╨║╨╜╨╕╨│╨╕ ╨▒╤А╨░╤В╤М╨╡╨▓ ╨д╤А╨╛╨╗╨╛╨▓╤Л╤Е
                             C	
 CF92  06 08 CB 6B 68 5B     C	 	frol_252_fc   DB   006h,008h,0CBh,06Bh,068h,05Bh,058h,08Ch      ;╨╜╨╛╨╝╨╡╤А (╨║╤А╨░╤Б╨╕╨▓╤Л╨╣!=cp866)
       58 8C                 C	
                             C	
                             C	;╨Ш╨╖ ╤И╤А╨╕╤Д╤В╨░ 8x8 ╨║╨╛╨┤╨╛╨▓╨╛╨╣ ╤Б╤В╤А╨░╨╜╨╕╤Ж╤Л 866 ╤Д╨░╨╣╨╗╨░ ega.cpi Windows 7
                             C	
 CF9A  00 C6 7C C6 C6 7C     C	 	cp866_code_0fdh	db	000h, 0C6h, 07Ch, 0C6h, 0C6h, 07Ch, 0C6h, 000h          ;╨╛╤В╨▒╨╕╨▓╨║╨░
       C6 00                 C	
 CFA2  00 00 3C 3C 3C 3C     C	 	cp866_code_0feh	db	000h, 000h, 03Ch, 03Ch, 03Ch, 03Ch, 000h, 000h          ;╤Б╨╛╨▓╤Б╨╡╨╝ ╨▒╨╛╨╗╤М╤И╨╛╨╣ ╨┐╤А╤П╨╝╨╛╤Г╨│╨╛╨╗╤М╨╜╨╕╨║
       00 00                 C	
 CFAA  00 00 00 00 00 00     C	 	cp866_code_0ffh	db	000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
       00 00                 C	
 	 	 	 	endif
 	 	 	 	;RCgoff end
 	 	 	 	
 	 	 	 	;rc программа реконфигурации памяти и определения кол-ва памяти во всех подключенных платах памяти типа 1841
 	 	 	 	;rc выполняется тест блоками по 16k записью 0xaa55 и считывание (без проверки четности). При успехе (совпадении)  
 	 	 	 	;rc 16k блок заполняется нулями и снова происходит считывание и проверка. 
 	 	 	 	;rc В случае ошибки в адресах 0..384k происходит реконфигурация.
 	 	 	 	;rc В случае ошибки в первых 16k платы 2b0 после реконфигурации или при отсутствии порта 2b0 система останавливается.
 	 	 	 	;rc В случае ошибки в 384...640k объем памяти сокращается без реконфигурации.
 	 	 	 	;rc  По итогам проверки в обл данных BIOS заполняется таблица tabl1 в формате:
 	 	 	 	;rc номер порта платы (2 байта), число исправных килобайт на плате (кратно 16k) (2 байта)
 	 	 	 	;rc число исправных килобайт на плате 2b0 заносится также в mem_siz в области данных BIOS.
 	 	 	 	;rc этим значением воспользуется ОС. 
 	 	 	 	;rc Интервал 512..640 разделяется всеми платами, т.е. если 2 платы по 512 типа 1841 и одна плата 128 типа 1840,
 	 	 	 	;rc то в tabl1 будет стоять 640k у обоих плат.
 	 	 	 	
 	 	 	 	;rc тестирование памяти здесь неполное (aa55 и нули). Основная плата 2b0 полностью тестируется дальше в e190
 	 	 	 	;rc IBM-ской программой stgtst. Дополнительные платы остаются нетестированными в полной мере. 
 	 	 	 	
 	 	 	 	 	assume	ds:abs0
 CFB2	 	 	 	ca0:                	 	 
 CFB2  E4 61	 	 	 	in	al,port_b
 CFB4  24 CF	 	 	 	and	al,0cfh	 	;rc 0b1100.1111	clear bit5 (i/o ch err off), bit4 (ram err off)
 CFB6  E6 61	 	 	 	out	port_b,al
 CFB8  33 C0	 	 	 	xor	ax,ax
 CFBA  8E D8	 	 	 	mov	ds,ax
 CFBC  8E C0	 	 	 	mov	es,ax
 CFBE  BA 0213	 	 	 	mov	dx,213h
 CFC1  B0 01	 	 	 	mov	al,01
 CFC3  EE	 	 	 	out	dx,al	   ; активизировать плату расширения rc установить сигнал EXT, как и в IBM
 CFC4  BB 0000	 	 	 	mov	bx,0
 CFC7  BA 02B0	 	 	 	mov	dx,2b0h
 CFCA  EC	 	 	 	in	al,dx      	;rc читать регистр главной платы памяти 2b0
 CFCB  24 0C	 	 	 	and	al,0ch
 CFCD  3C 0C	 	 	 	cmp	al,0ch          ;rc все 1?
 CFCF  74 04	 	 	 	jz	ca1      
 CFD1  8B 1E 0472 R	 	 	mov	bx,res_fl
 CFD5  B0 0A	 	 	ca1:	mov	al,0ah
 CFD7  EE	 	 	 	out	dx,al           ;rc 0b0000.1010 - проверочный паттерн
 CFD8  EC	 	 	 	in	al,dx           ;rc читать порт обратно
 CFD9  24 0F	 	 	 	and	al,0fh          ;rc 0b0000.1111 только младшая тетрада
 CFDB  3C 0A	 	 	 	cmp	al,0ah          ;rc сравниваем с записаным
 CFDD  75 31	 	 	 	jnz	oshp	   ; нет платы 2B0 rc если не совпало (случай модуля ЕС1840, не только отсутствия 2b0!)
 CFDF  B0 0C	 	 	 	mov	al,0ch
 CFE1  EE	 	 	 	out	dx,al           ;rc 0b0000.1100 разрешить запись и чтение
 CFE2  32 C0	 	 	 	xor	al,al  ; сброс активности остальных плат памяти rc в цикле пишется 00 (выкл зп/чт)...
 CFE4  42	 	 	ca2:	inc	dx               
 CFE5  EE	 	 	 	out	dx,al
 CFE6  80 FA B3	 	 	 	cmp	dl,0b3h         ;rc ...в порты 2b1...2b3.
 CFE9  75 F9	 	 	 	jnz	ca2             ;rc конец цикла
 CFEB  8B 1E 0472 R	 	ca22:	mov	bx,res_fl
 CFEF  B9 2000	 	 	 	mov	cx,2000h        ;rc счетчик для проверки 8к слов - 16кб
 CFF2  81 FB 1234	 	 	cmp	bx,1234h        ;rc есть признак горячей перезагрузки?
 CFF6  74 2F	 	 	 	jz	ca8
 CFF8  B8 F000	 	 	 	mov	ax,0f000h
 CFFB  8E D0	 	 	 	mov	ss,ax           ;rc как бы стек в ПЗУ
 CFFD  BC E018 R	 	ca7a:	mov	sp,offset caw   ;rc адрес возврата для stgtst_cnt будет ca3
 D000  E9 D460 R	 	ca7:	jmp	stgtst_cnt      ;rc проверка 16кб и их очистка
 D003  B9 2000	 	 	ca3:	mov	cx,2000h
 D006  74 1F	 	 	 	je	ca8             ;rc нет ошибки?->ca8
 D008  BA 02B0	 	 	 	mov	dx,2b0h    ; сбой в первых 16К основной платы
 D00B  EC	 	 	 	in	al,dx	   ; памяти
 D00C  A8 03	 	 	 	test	al,03	   ; реконфигурация была? rc0b0000.0011
 D00E  74 12	 	 	 	jz	ca6        ;rc 00 в младших разрядах означает, что реконфига не было
 	 	 	 	
 	 	 	 	;--------------rc случай ошибки в первых 16k 2b0, если реконфиг уже был - неустранимый
 D010	 	 	 	oshp:                      ; была реконфигурация  rc или вообще нет платы 2b0 или память 1840
 D010  8A D8	 	 	 	mov	bl,al
 D012  B0 89	 	 	 	mov	al,89h     ;rc 0b1000.1001 установить порты A,B на вывод, порт C на ввод
 D014  E6 63	 	 	 	out	cmd_port,al
 D016  B0 04	 	 	 	mov	al,04      ;rc 0b0000.0100
 D018  E6 60	 	 	ca5:	out	port_a,al  ;rc вывод в порт A!! чего никогда не бывает в IBM
 D01A  33 C9	 	 	 	xor	cx,cx
 D01C  E2 FE	 	 	ca4:	loop	ca4	   ;rc бесконечный цикл с выводом в порт A кода реконфиг (если сбой 16k) и 04h... 
 	 	 	 	 	 	 	   ;rc ...или прочтенного по 2b0 (если нет платы) и 04h
 D01E  86 D8	 	 	 	xchg	bl,al
 D020  EB F6	 	 	 	jmp	ca5
 	 	 	 	;--------------rc конец ошибки
 	 	 	 	
 D022  0C 03	 	 	ca6:	or	al,3       ;rc реконфига не было и ошибка первых 16k: ставим отказ банка 0
 D024  EE	 	 	 	out	dx,al
 D025  EB D6	 	 	 	jmp	ca7a       ;rc и возвращаемся на тест первых 16k
 	 	 	 	
 	 	 	 	 	 	 	;rc сюда после горячей перезагрузки или отсутствия ошибки первых 16k
 	 	 	 	 	 	 	;rc cx в обоих случаях содержит 2000h
 D027  33 C0	 	 	ca8:	xor	ax,ax
 D029  FC	 	 	 	cld
 D02A  33 F6	 	 	 	xor	si,si
 D02C  33 FF	 	 	 	xor	di,di
 D02E  BD 02B0	 	 	 	mov	bp,2b0h
 D031  F3/ AB	 	 	 	rep	stosw       ;rc очистка первых 16k нулями
 D033  89 1E 0472 R	 	 	mov	res_fl,bx
 D037  BA 0400	 	 	ca9:	mov	dx,0400h    ;rc сегмент, следующий за первыми 16k
 D03A  BB 0010	 	 	 	mov	bx,16       ;rc инициализировать счетчик исправных килобайт (будет писаться в tabl1 и mem_siz)
 	 	 	 	
 	 	 	 	 	 	 	;rc основной цикл-тест платы
 D03D  8E C2	 	 	ca10:	mov	es,dx       ;rc очередной сегмент для stos
 D03F  33 FF	 	 	 	xor	di,di
 D041  B8 AA55	 	 	 	mov	ax,0aa55h
 D044  8B C8	 	 	 	mov	cx,ax
 D046  26: 89 05	 	 	mov	es:[di],ax  ; проверка наличия очередных 16К памяти rc: пишем aa55...
 D049  B0 0F	 	 	 	mov	al,0fh      ;rc зачем???? затрется же сразу
 D04B  26: 8B 05	 	 	mov	ax,es:[di]  ;rc ...и сразу читаем
 D04E  33 C1	 	 	 	xor	ax,cx       ;rc сравниваем с эталоном
 D050  75 1F	 	 	 	jnz	ca11        ;rc разночтение->нет памяти или ошибка->ca11
 D052  B9 2000	 	 	 	mov	cx,2000h
 D055  F3/ AB	 	 	 	rep	stosw       ;rc есть память->затрем очередные 16k нулями (ax=00 будет при идентичности с эталоном)
 D057  B9 2000	 	 	 	mov	cx,2000h
 D05A  33 FF	 	 	 	xor	di,di
 D05C  F3/ AF	 	 	 	repz	scasw	   ; есть сбойные адреса в порции 16К? rc сканирование на отличные от нуля в затертом массиве
 D05E  0B C8	 	 	 	or	cx,ax      ;rc определим факт сбоя, если его не было, cx=0. or, чтобы на флаги повлияло  
 D060  75 0F	 	 	 	jnz	ca11	   ; да
 D062  81 C2 0400	 	 	add	dx,0400h   ; нет rc следующий сегмент (след 16k массив)
 D066  83 C3 10	 	 	 	add	bx,16      ;rc увеличим счетчик исправных килобайт на только что проверенные
 D069  80 FE A0	 	 	 	cmp	dh,0a0h    ;rc достигнута граница 640k?
 D06C  75 CF	 	 	 	jnz	ca10       ;rc нет - продолжить цикл-тест
 D06E  EB 24 90	 	 	 	jmp	ca12       ;rc да
 	 	 	 	
 	 	 	 	 	 	 	;rc здесь мы в случае отсутствия очередных 16k или обнаружения сбоя в очередных 16k
 D071  80 FE 60	 	 	ca11:	cmp	dh,60h     ;rc сравниваем адрес сегмента с 384K
 D074  73 1E	 	 	 	jnb	ca12       ;rc адрес >=384 ->ca12
 D076  8B D5	 	 	 	mov	dx,bp	   ; адрес меньше 512К  rc ошибка в заводском комментарии!! должно было стоять меньше 384k
 D078  EC	 	 	 	in	al,dx      ;rc читаем порт платы
 D079  A8 03	 	 	 	test	al,03      ;rc была реконфигурация?
 D07B  75 17	 	 	 	jnz	ca12       ;rc если реконфигурация была или порт отсутствует ->ca12
 	 	 	 	 	 	 	;rc если не было - надо реконфигурировать
 D07D  8C C2	 	 	 	mov	dx,es      ;rc восстанавливаем сегмент в dx
 D07F  80 E6 60	 	 	 	and	dh,60h     ;rc выделяем из него адрес банка
 D082  80 F6 60	 	 	 	xor	dh,60h     ;rc инвертируем адрес банка
 D085  B1 05	 	 	 	mov	cl,5
 D087  D2 EE	 	 	 	shr	dh,cl      ;rc смещаем в младшие разряды - получили код реконфигурации
 D089  0A C6	 	 	 	or	al,dh      ;rc сочетаем с кодами зп/чт модуля
 D08B  8B D5	 	 	 	mov	dx,bp
 D08D  EE	 	 	 	out	dx,al      ;rc записали в порт модуля
 D08E  33 D2	 	 	 	xor	dx,dx
 D090  33 DB	 	 	 	xor	bx,bx
 D092  EB A9	 	 	 	jmp	ca10       ;rc возвращаемся на тестирование модуля с самого начала
 	 	 	 	
 	 	 	 	 	 	 	;rc здесь мы если:
 	 	 	 	 	 	 	;rc а)ошибка возникла при первом проходе в 384k...640k
 	 	 	 	 	 	 	;rc б)ошибка возникла при втором проходе в 384k...512k - перенесенная старая 
 	 	 	 	 	 	 	;rc в)ошибка возникла в 16k..384k уже после реконфигурации
 	 	 	 	 	 	 	;rc во всех этих случаях, если мы на 2b0, память будет сокращена
 	 	 	 	 	 	 	;rc до последнего безошибочного 16-кб блока, т.е. до текущего bx.
 	 	 	 	 	 	 	;rc г)достигнута граница 640k без ошибок
 	 	 	 	 	 	 	;rc если текущая плата реально есть, текущий bx будет записан в tabl1.
 	 	 	 	
 D094	 	 	 	ca12:	 	 	   ; сброс активности текущего модуля памяти
 D094  8B D5	 	 	 	mov	dx,bp
 D096  EC	 	 	 	in	al,dx
 D097  24 F3	 	 	 	and	al,0f3h    ;rc 0b1111.0011 - отключить чт/зп
 D099  EE	 	 	 	out	dx,al
 D09A  BA 02B0	 	 	 	mov	dx,2b0h    ; возврат на плату памяти 2B0 rc(т.к. таблица tabl1 находится в ней)
 D09D  EC	 	 	 	in	al,dx
 D09E  0C 0C	 	 	 	or	al,0ch     ;rc 0b0000.1100 - включаем чт/зп у 2b0
 D0A0  EE	 	 	 	out	dx,al
 D0A1  F7 C5 0003	 	 	test	bp,3       ;rc текущая плата была 2b0?
 D0A5  75 31	 	 	 	jnz	ca14       ;rc нет->проверить bx на 0 (была ли плата)
 D0A7  89 1E 0413 R	 	 	mov	mem_siz,bx ;rc да - сокращаем память DOS до последнего безошибочного блока
 D0AB	 	 	 	ca15:
 D0AB  8B 36 04D0 R	 	 	mov	si,csi	   ;rc csi - указатель в tabl1, при первом проходе csi=0
 D0AF  89 AC 04E0 R	 	 	mov	tabl1[si],bp     ;rc пишем в tabl1 номер порта текущей платы
 D0B3  89 9C 04E2 R	 	 	mov	tabl1[si+2],bx   ;rc и число исправных кб
 D0B7  45	 	 	 	inc	bp               ;rc следующая плата
 D0B8  83 06 04D0 R 04	 	 	add	csi,4            ;rc указатель на следующий элемент в таблице tabl1
 D0BD  81 FD 02B4	 	ca16:	cmp	bp,2b4h          ;rc все платы перебраны?
 D0C1  73 1D	 	 	 	jnb	ca13             ;rc да->выход и продолжение POST
 D0C3  BB 0000	 	 	 	mov	bx,0             ;rc иначе переход на тест след платы: обнулить счетчик кб,
 D0C6  B0 0C	 	 	 	mov	al,0ch
 D0C8  8B D5	 	 	 	mov	dx,bp            
 D0CA  EE	 	 	 	out	dx,al            ;rc вкл чт/зп и сбросить реконфиг след платы 
 D0CB  BA 02B0	 	 	 	mov	dx,2b0h 	; сброс активности 2b0
 D0CE  EC	 	 	 	in	al,dx
 D0CF  24 F3	 	 	 	and	al,0f3h          ;rc т.е. откл чт/зп 2b0, реконфиг ост как есть
 D0D1  EE	 	 	 	out	dx,al
 D0D2  BA 0000	 	 	 	mov	dx,0             ;rc начальный сегмент для новой платы
 D0D5  E9 D03D R	 	 	jmp	ca10             ;rc переход на тест новой платы
 	 	 	 	
 D0D8  83 FB 00	 	 	ca14:	cmp	bx,0             ;rc платы 2b1..2b3 не было или сбой в первых 16k?
 D0DB  75 CE	 	 	 	jnz	ca15             ;rc нет ->пишем в таблицу, как обычно
 D0DD  45	 	 	 	inc	bp               ;rc иначе новая плата сразу
 D0DE  EB DD	 	 	 	jmp	ca16
 D0E0	 	 	 	ca13:                            ;rc мероприятия по выходу
 D0E0  B8 ---- R	 	 	mov	ax,data          
 D0E3  8E D8	 	 	 	mov	ds,ax            ;rc восст ds на обл данных BIOS
 D0E5  BD 0000	 	 	 	mov	bp,0
 D0E8  E9 E15C R	 	 	jmp	c21              ;продолжение теста
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;-------rc программа ниже частично основана на IBM-ской e19, причем от XTBIOS.ASM (с печатью)
 	 	 	 	;	взял оттуда комментарии. Обработка ошибки (реконфигурация, ea1) - оригинальная минская.
 	 	 	 	;
 	 	 	 	 	assume cs:code,ds:data
 D0EB  1E	 	 	e190:	push	ds
 D0EC  B8 0010	 	 	 	mov	ax,16
 D0EF  81 3E 0072 R 1234	 	cmp	reset_flag,1234h
 D0F5  75 03	 	 	 	jnz	e20a
 D0F7  E9 E3BB R	 	 	jmp	e22	 	 	;rc при горячей перезарузке просто выход (пропуск теста)
 D0FA  B8 0010	 	 	e20a:	mov	ax,16                   ; STARTING AMT. OF MEMORY OK   
 D0FD  EB 25	 	 	 	jmp	short prt_siz           ; POST MESSAGE                 
 D0FF  8B 1E 0013 R	 	e20b:	mov	bx,memory_size          ; GET MEM. SIZE WORD    
 D103  83 EB 10	 	 	 	sub	bx,16                   ; 1ST 16K ALREADY DONE  
 D106  B1 04	 	 	 	mov	cl,4
 D108  D3 EB	 	 	 	shr	bx,cl                   ; DIVIDE BY 16                
 D10A  8B CB	 	 	 	mov	cx,bx                   ; SAVE COUNT OF 16K BLOCKS    
 D10C  BB 0400	 	 	 	mov	bx,0400h                ; SET PTR. TO RAM SEGMENT>16K 
 D10F  8E DB	 	 	e20c:	mov	ds,bx                   ; SET SEG. REG      
 D111  8E C3	 	 	 	mov	es,bx                                       
 D113  81 C3 0400	 	 	add	bx,0400h                ; POINT TO NEXT 16K 
 D117  52	 	 	 	push	dx                                          
 D118  51	 	 	 	push	cx                      ; SAVE WORK REGS    
 D119  53	 	 	 	push	bx
 D11A  50	 	 	 	push	ax
 D11B  E8 D45D R	 	 	call	stgtst
 D11E  75 41	 	 	 	jnz	e21a                    ; GO PRINT ERROR           
 D120  58	 	 	 	pop	ax                      ; RECOVER TESTED MEM NUMBER
 D121  05 0010	 	 	 	add	ax,16
 D124	 	 	 	prt_siz:
 D124  50	 	 	 	push	ax
 D125  BB 000A	 	 	 	mov	bx,10                   ; SET UP FOR DECIMAL CONVERT    
 D128  B9 0003	 	 	 	mov	cx,3                    ; OF 3 NIBBLES                  
 D12B	 	 	 	decimal_loop:
 D12B  33 D2	 	 	 	xor	dx,dx
 D12D  F7 F3	 	 	 	div	bx                      ; DIVIDE BY 10   
 D12F  80 CA 30	 	 	 	or	dl,30h                  ; MAKE INTO ASCII
 D132  52	 	 	 	push	dx                      ; SAVE           
 D133  E2 F6	 	 	 	loop	decimal_loop
 D135  B9 0003	 	 	 	mov	cx,3
 D138	 	 	 	prt_dec_loop:
 D138  58	 	 	 	pop	ax                      ; RECOVER A NUMBER
 D139  E8 D1B4 R	 	 	call	prt_hex
 D13C  E2 FA	 	 	 	loop	prt_dec_loop
 D13E  B9 0016	 	 	 	mov	cx,22
 D141  BE D1BB R	 	 	mov	si,offset e300
 D144  2E: 8A 04	 	kb_ok:	mov	al,byte ptr cs:[si]
 D147  46	 	 	 	inc	si
 D148  E8 D1B4 R	 	 	call	prt_hex
 D14B  E2 F7	 	 	 	loop	kb_ok	 	 	;rc вывод строки e300 (kb объем памяти) - 22 символа, посимвольно
 D14D  58	 	 	 	pop	ax                      ; RECOVER WORK REGS   
 D14E  3D 0010	 	 	 	cmp	ax,16                   ; FIRST PASS?         
 D151  74 AC	 	 	 	je	e20b                    
 D153  5B	 	 	 	pop	bx                      ; RESTORE REGS              
 D154  59	 	 	 	pop	cx                                                  
 D155  5A	 	 	 	pop	dx                                                  
 D156  E2 B7	 	 	 	loop	e20c                    ; LOOP TILL ALL MEM. CHECKED -----rc в XT e21
 D158  B0 0A	 	 	 	mov	al,10
 D15A  E8 D1B4 R	 	 	call	prt_hex                 ; LINE FEED 
 D15D  1F	 	 	 	pop	ds
 D15E  E9 E3BB R	 	 	jmp	e22  	 	 	;rc это выход
 D161	 	 	 	e21a:                                   ;rc ошибка при stgtst
 D161  5B	 	 	 	pop	bx
 D162  83 C4 06	 	 	 	add	sp,6
 D165  8C DA	 	 	 	mov	dx,ds
 D167  1F	 	 	 	pop	ds
 D168  1E	 	 	 	push	ds
 D169  53	 	 	 	push	bx
 D16A  8B DA	 	 	 	mov	bx,dx
 D16C  50	 	 	 	push	ax
 D16D  80 FE 60	 	 	 	cmp	dh,60h	 	 	;rc ошибка в 512k-640k?
 D170  73 2C	 	 	 	jnb	ea1                     ;rc да->ea1 (неустранимая ошибка)
 D172  BA 02B0	 	 	 	mov	dx,2b0h
 D175  EC	 	 	 	in	al,dx
 D176  A8 03	 	 	 	test	al,3	 	 	;rc была реконфигурация платы 2b0?
 D178  75 24	 	 	 	jnz	ea1                     ;rc да->ea1 (неустранимая ошибка)
 D17A  50	 	 	 	push	ax                      ;rc иначе инициализируем экран,
 D17B  A0 0049 R	 	 	mov	al,crt_mode
 D17E  B4 00	 	 	 	mov	ah,0
 D180  CD 10	 	 	 	int	10h
 D182  58	 	 	 	pop	ax
 D183  8B D3	 	 	 	mov	dx,bx                   ;rc получаем из текущего адреса код реконфигурации,
 D185  80 E6 60	 	 	 	and	dh,60h
 D188  80 F6 60	 	 	 	xor	dh,60h
 D18B  B1 05	 	 	 	mov	cl,5
 D18D  D2 EE	 	 	 	shr	dh,cl
 D18F  0A C6	 	 	 	or	al,dh
 D191  BA 02B0	 	 	 	mov	dx,2b0h 	 	 
 D194  EE	 	 	 	out	dx,al                   ;rc устраиваем реконфигурацию...
 D195  33 C0	 	 	 	xor	ax,ax
 D197  8E C0	 	 	 	mov	es,ax
 D199  8E D8	 	 	 	mov	ds,ax
 D19B  E9 CFEB R	 	 	jmp	ca22	 	 	;rc ...и возвращаемся в тело ca0 на начало проверки
 	 	 	 	
 D19E  58	 	 	ea1:	pop	ax      	 	;rc случай неустранимой ошибки
 D19F  8B D3	 	 	 	mov	dx,bx
 D1A1  5B	 	 	 	pop	bx
 D1A2  89 1E 00E2 R	 	 	mov	tabl+2,bx	 	;rc записываем новое число исправных кб платы 2b0 в таблицу tabl
 D1A6  89 1E 0013 R	 	 	mov	memory_size,bx	 	;rc сокращаем память, доступную ОС
 	 	 	 	;rc------------------rc tabl и tabl1, так же как и mem_siz и memory_size, указывают на одни и те же места в ОЗУ, 
 	 	 	 	;rc------------------rc просто tabl и memory_size в сегменте обл данных BIOS (40h), а tabl1 и mem_siz в сегменте 0h
 D1AA  50	 	 	 	push	ax
 D1AB  B0 0A	 	 	 	mov	al,10 	 	 	;rc печатаем перевод строки
 D1AD  E8 D1B4 R	 	 	call	prt_hex
 D1B0  58	 	 	 	pop	ax
 D1B1  E9 E37E R	 	 	jmp	osh
 D1B4	 	 	 	prt_hex proc	near
 D1B4  B4 0E	 	 	 	mov	ah,14
 D1B6  B7 00	 	 	 	mov	bh,0
 D1B8  CD 10	 	 	 	int	10h
 D1BA  C3	 	 	 	ret
 D1BB	 	 	 	prt_hex endp
 	 	 	 	;RCgoff заменил Е на Ё для cp866
 	 	 	 	if	cp866
 	 	 	 	;'  Kb ОБЪЁМ ПАМЯТИ (С)',0dh  (cp866)
 D1BB  20 20 4B 62 20 8E	e300	db	20h,20h,4Bh,62h,20h,8Eh,81h,9Ah,0F0h,8Ch,20h,8Fh
       81 9A F0 8C 20 8F	
 D1C7  80 8C 9F 92 88 20	 	db	80h,8Ch,9Fh,92h,88h,20h,28h,91h,29h,0Dh
       28 91 29 0D	 	
 	 	 	 	
 	 	 	 	;'  ОШИБКА  ( НАЖМИ КЛАВИШУ "Ф1" )' (cp866) 	
 D1D1  20 20 8E 98 88 81	f39	db	20h,20h,8Eh,98h,88h,81h,8Ah,80h,20h,20h,28h,20h 
       8A 80 20 20 28 20	
 D1DD  8D 80 86 8C 88 20	 	db	8Dh,80h,86h,8Ch,88h,20h,8Ah,8Bh,80h,82h,88h,98h
       8A 8B 80 82 88 98	
 D1E9  93 20 22 94 31 22	 	db      93h,20h,22h,94h,31h,22h,20h,29h	 	 	
       20 29	 	 	
 	 	 	 	endif
 	 	 	 	;RCgoff end
 	 	 	 	
 	 	 	 	
 	 	 	 	;-------int 15--------------------------
 	 	 	 	;
 	 	 	 	;   Программа поддержки расширенной памяти
 	 	 	 	;
 	 	 	 	;   AH = 87H
 	 	 	 	;	  Переслать блок, параметры которого указаны в таблице GDT
 	 	 	 	;
 	 	 	 	;   На входе
 	 	 	 	;	  ES:SI - адрес таблицы
 	 	 	 	;	  CX	- количество пересылаемых слов
 	 	 	 	;
 	 	 	 	;   AH = 88H
 	 	 	 	;	   Определить об'ем расширенной памяти
 	 	 	 	;
 	 	 	 	;   На выходе
 	 	 	 	;	  AX - об'ем расширенной памяти
 	 	 	 	;	  CF = 0, если расширенная память присутствует
 	 	 	 	;	  CF = 1, если расширенная память отсутствует
 	 	 	 	;
 	 	 	 	;   AH = C7H
 	 	 	 	;	  Переслать блок в соответствии с указанными параметрами
 	 	 	 	;
 	 	 	 	;   На входе
 	 	 	 	;	  CX - количество пересылаемых слов
 	 	 	 	;	  DS:SI - адрес источника
 	 	 	 	;	  ES:DI - адрес приемника
 	 	 	 	;	  BL	- логический номер платы источника
 	 	 	 	;	  BH	- логический номер платы приемника
 	 	 	 	;
 	 	 	 	;   AH = C8H
 	 	 	 	;	  Определить об'ем памяти платы, логический номер которой
 	 	 	 	;	  указан в AL
 	 	 	 	;
 	 	 	 	;   На выходе
 	 	 	 	;	  AX  - об'ем памяти выбранной платы
 	 	 	 	;	  CF = 0, если плата присутствует
 	 	 	 	;	     CF = 1, если плата отсутствует
 	 	 	 	;---------------------------------------
 	 	 	 	 	assume cs:code
 D1F1	 	 	 	ex_memory proc far
 	 	 	 	;
 D1F1  FB	 	 	 	sti
 	 	 	 	;
 D1F2  80 FC C7	 	 	 	cmp ah,0c7h	; анализ операций
 D1F5  74 21	 	 	 	je move_mem_block_1    ; переход по AH=C7
 	 	 	 	;
 D1F7  1E	 	 	 	push ds
 D1F8  53	 	 	 	push bx
 	 	 	 	;
 D1F9  80 FC 87	 	 	 	cmp ah,87h
 D1FC  74 3B	 	 	 	je move 	; переход по AH=87
 	 	 	 	;
 D1FE  BB 0040	 	 	 	mov bx,40h	; установить базовый адрес для об'ема памяти
 D201  8E DB	 	 	 	mov ds,bx	; 40:Е2
 D203  BB 00E2	 	 	 	mov bx,0e2h
 	 	 	 	;
 D206  80 FC 88	 	 	 	cmp ah,88h
 D209  74 10	 	 	 	je ex_mem_size	; переход по AH=88
 	 	 	 	;
 D20B  80 FC C8	 	 	 	cmp ah,0c8h
 D20E  74 16	 	 	 	je mem_block	; переход по AH=C8
 	 	 	 	;
 D210  5B	 	 	 	pop bx
 D211  1F	 	 	 	pop ds
 D212  B4 86	 	 	 	mov ah,86h	; выход. Заданный код операции не обрабатывается
 D214  F9	 	 	 	stc
 D215  CA 0002	 	 	 	ret 2
 	 	 	 	;
 	 	 	 	;
 D218	 	 	 	move_mem_block_1:
 D218  EB 7B 90	 	 	 	jmp move_mem_block
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;
 D21B	 	 	 	ex_mem_size:	 	    ; AH=88
 D21B  8B 47 04	 	 	 	mov ax,[bx+4]	; прочитать об'ем первого расширенного блока
 	 	 	 	 	 	 	; памяти (40:Е6)
 D21E  03 47 08	 	 	 	add ax,[bx+8]	; добавить об'ем второго расширенного блока
 	 	 	 	 	 	 	; памяти (40:ЕА)
 D221  03 47 0C	 	 	 	add ax,[bx+12]	; добавить об'ем третьего расширенного блока
 	 	 	 	 	 	 	; памяти (40:ЕЕ)
 D224  EB 0B	 	 	 	jmp short mem_inf
 	 	 	 	;
 	 	 	 	;
 D226	 	 	 	mem_block:	 	    ; AH=C8
 D226  25 0003	 	 	 	and ax,3	; преобразовать логический номер платы
 D229  02 C0	 	 	 	add al,al
 D22B  02 C0	 	 	 	add al,al	; определить величину смещения
 D22D  03 D8	 	 	 	add bx,ax
 D22F  8B 07	 	 	 	mov ax,[bx]	; прочитать об'ем заданного блока памяти
 D231	 	 	 	mem_inf:
 D231  3D 0001	 	 	 	cmp ax,1	; определить существует ли запрашиваемая память
 D234  5B	 	 	 	pop bx
 D235  1F	 	 	 	pop ds
 D236  CA 0002	 	 	 	ret 2	 	; выход
 	 	 	 	;
 	 	 	 	;
 D239	 	 	 	move:	 	 	     ; AH=87
 D239  06	 	 	 	push es 	; сохранить регистры
 D23A  52	 	 	 	push dx
 D23B  56	 	 	 	push si
 D23C  57	 	 	 	push di
 D23D  51	 	 	 	push cx
 D23E  83 C6 10	 	 	 	add si,16	; получить смещение в таблице GDT
 D241  26: 8A 64 04	 	 	mov ah,es:[si+4]  ; получить старший байт адреса источника
 D245  26: 8A 44 0C	 	 	mov al,es:[si+12] ; получить старший байт адреса назначения
 D249  25 F0F0	 	 	 	and ax,0f0f0h
 D24C  3D 0000	 	 	 	cmp ax,0
 D24F  74 2C	 	 	 	je main_mem	; источник и назначение осуществляется
 	 	 	 	 	 	 	; в основную память
 D251  80 FC 00	 	 	 	cmp ah,0
 D254  74 13	 	 	 	je in_mem	; пересылка из основной памяти в расширенную
 D256  3C 00	 	 	 	cmp al,0
 D258  74 14	 	 	 	je out_mem	; пересылка из расширенной памяти в основную
 	 	 	 	;   источник и назначение в расширенной памяти
 D25A  E8 D306 R	 	 	call ext	; определить реальный адрес источника
 	 	 	 	 	 	 	; расширенной памяти
 D25D	 	 	 	ext_mem:
 D25D  8A DF	 	 	 	mov bl,bh  ; сохранить номер платы источника расширенной памяти
 D25F  1E	 	 	 	push ds
 D260  57	 	 	 	push di
 D261  83 C6 08	 	 	 	add si,8  ; установить адрес назначения в таблице GDT
 D264  E8 D306 R	 	 	call ext  ; определить реальный адрес назначения расширенной
 	 	 	 	 	 	  ; памяти
 D267  EB 19	 	 	 	jmp short move_block
 	 	 	 	;
 D269	 	 	 	in_mem:
 D269  E8 D2D7 R	 	 	call main  ; определить реальный адрес источника основной
 	 	 	 	 	 	   ; памяти
 D26C  EB EF	 	 	 	jmp short ext_mem
 	 	 	 	;
 D26E	 	 	 	out_mem:
 D26E  E8 D306 R	 	 	call ext ; определить реальный адрес источника из расширенной
 	 	 	 	 	 	 ; памяти
 D271	 	 	 	ext_mem_1:
 D271  8A DF	 	 	 	mov bl,bh ; сохранить номер платы источника расширенной памяти
 D273  1E	 	 	 	push ds
 D274  57	 	 	 	push di
 D275  83 C6 08	 	 	 	add si,8 ; установить адрес назначения в таблице GDT
 D278  E8 D2D7 R	 	 	call main ; определить реальный адрес назначения из основной
 	 	 	 	 	 	  ; памяти
 D27B  EB 05	 	 	 	jmp short move_block
 	 	 	 	;
 D27D	 	 	 	main_mem:
 D27D  E8 D2D7 R	 	 	call main ; определить реальный адрес источника из основной
 	 	 	 	 	 	  ; памяти
 D280  EB EF	 	 	 	jmp short ext_mem_1
 	 	 	 	;
 	 	 	 	;
 D282	 	 	 	move_block:
 D282  1E	 	 	 	push ds ; установить DS:SI - адрес источника
 D283  07	 	 	 	pop es	;	     ES:DI - адрес назначения
 D284  5E	 	 	 	pop si
 D285  1F	 	 	 	pop ds
 	 	 	 	;
 D286  E8 D367 R	 	 	call go 	; переслать
 	 	 	 	;
 	 	 	 	;
 D289  33 C0	 	 	 	xor ax,ax	; установить CF=0
 D28B  59	 	 	 	pop cx	 	; восстановить регистры
 D28C  5F	 	 	 	pop di
 D28D  5E	 	 	 	pop si
 D28E  5A	 	 	 	pop dx
 D28F  07	 	 	 	pop es
 D290  5B	 	 	 	pop bx
 D291  1F	 	 	 	pop ds
 D292  CA 0002	 	 	 	ret 2	; выход
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;
 D295	 	 	 	move_mem_block: 	 ; AH=C7
 D295  1E	 	 	 	push ds
 D296  56	 	 	 	push si
 D297  57	 	 	 	push di
 D298  B8 0040	 	 	 	mov ax,40h
 D29B  8E D8	 	 	 	mov ds,ax
 D29D  81 E3 0303	 	 	and bx,303h  ; определить смещение для определения параметров
 D2A1  03 DB	 	 	 	add bx,bx    ; платы источника и платы назначения
 D2A3  03 DB	 	 	 	add bx,bx
 D2A5  81 CB E0E0	 	 	or bx,0e0e0h
 D2A9  8B F3	 	 	 	mov si,bx
 D2AB  86 FB	 	 	 	xchg bh,bl
 D2AD  8B FB	 	 	 	mov di,bx
 D2AF  81 E6 00FF	 	 	and si,0ffh  ; уст адрес смещения для параметров источника
 D2B3  81 E7 00FF	 	 	and di,0ffh  ; уст адрес смещения для параметров приемника
 D2B7  8B 1C	 	 	 	mov bx,[si]  ; прочитать параметры источника
 D2B9  8B 05	 	 	 	mov ax,[di]  ; прочитать параметры приемника
 D2BB  8A F8	 	 	 	mov bh,al    ; сохранить адрес платы источника в BL
 D2BD  5F	 	 	 	pop di	     ; сохранить адрес платы приемника в BH
 D2BE  5E	 	 	 	pop si
 D2BF  1F	 	 	 	pop ds
 	 	 	 	;
 D2C0  E8 D367 R	 	 	call go 	; переслать
 	 	 	 	;
 D2C3  33 C0	 	 	 	xor ax,ax	; установить CF=0
 D2C5  CA 0002	 	 	 	ret 2	 	; выход
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;
 D2C8	 	 	 	main_port proc near   ; прочитать адрес порта основной памяти
 	 	 	 	 	 	      ; в AH (40:E0)
 D2C8  1E	 	 	 	push ds
 D2C9  53	 	 	 	push bx
 D2CA  B8 0040	 	 	 	mov ax,40h
 D2CD  8E D8	 	 	 	mov ds,ax
 D2CF  BB 00E0	 	 	 	mov bx,0e0h
 D2D2  8A 27	 	 	 	mov ah,[bx]
 D2D4  5B	 	 	 	pop bx
 D2D5  1F	 	 	 	pop ds
 D2D6  C3	 	 	 	ret
 D2D7	 	 	 	main_port endp
 	 	 	 	;
 	 	 	 	;
 D2D7	 	 	 	main proc near	; определить реальный адрес основной памяти в DS:DI
 D2D7  50	 	 	 	push ax
 D2D8  E8 D2C8 R	 	 	call main_port	; определить адрес порта основной памяти
 D2DB  8A FC	 	 	 	mov bh,ah  ; сохранить адрес порта основной памяти в BH
 D2DD  26: 8B 44 02	 	 	mov ax,es:[si+2]
 D2E1  50	 	 	 	push ax
 D2E2  5F	 	 	 	pop di
 D2E3  81 E7 000F	 	 	and di,0fh   ; определение адреса обращения (DI)
 D2E7  D1 E8	 	 	 	shr ax,1     ; определение базового адреса (DS)
 D2E9  D1 E8	 	 	 	shr ax,1
 D2EB  D1 E8	 	 	 	shr ax,1
 D2ED  D1 E8	 	 	 	shr ax,1
 D2EF  25 0FFF	 	 	 	and ax,0fffh
 D2F2  53	 	 	 	push bx
 D2F3  26: 8A 5C 04	 	 	mov bl, es:[si+4]
 D2F7  02 DB	 	 	 	add bl,bl
 D2F9  02 DB	 	 	 	add bl,bl
 D2FB  02 DB	 	 	 	add bl,bl
 D2FD  02 DB	 	 	 	add bl,bl
 D2FF  0A E3	 	 	 	or ah,bl
 D301  5B	 	 	 	pop bx
 D302  8E D8	 	 	 	mov ds,ax
 D304  58	 	 	 	pop ax
 D305  C3	 	 	 	ret
 D306	 	 	 	main endp
 	 	 	 	;
 	 	 	 	;
 D306	 	 	 	ext proc near
 D306  50	 	 	 	push ax
 D307  52	 	 	 	push dx
 D308  1E	 	 	 	push ds
 D309  53	 	 	 	push bx
 D30A  B8 0040	 	 	 	mov ax,40h
 D30D  8E D8	 	 	 	mov ds,ax
 D30F  26: 8B 44 03	 	 	mov ax,es:[si+3] ;уменьшить адрес расширенной памяти на 100000H
 D313  80 EC 10	 	 	 	sub ah,10h
 D316  BB 00E0	 	 	 	mov bx,0e0h
 	 	 	 	;
 D319	 	 	 	scanirov:
 D319  E8 D35B R	 	 	call mem_2   ; определить адрес порта расширенной памяти
 D31C  3B C2	 	 	 	cmp ax,dx
 D31E  72 0A	 	 	 	jc find
 D320  2B C2	 	 	 	sub ax,dx
 D322  81 FB 00F0	 	 	cmp bx,0f0h
 D326  74 3E	 	 	 	je error_ext
 D328  EB EF	 	 	 	jmp short scanirov
 	 	 	 	;
 D32A	 	 	 	find:	; определить диапазон адресов выбранной зоны расширенной памяти
 	 	 	 	;
 D32A  8B D0	 	 	 	mov dx,ax
 D32C  8A 27	 	 	 	mov ah,[bx]
 D32E  5B	 	 	 	pop bx
 D32F  1F	 	 	 	pop ds
 D330  8A FC	 	 	 	mov bh,ah  ; сохранить адрес порта выбранной памяти в BH
 D332  03 D2	 	 	 	add dx,dx  ; определение базового адреса (DS)
 D334  03 D2	 	 	 	add dx,dx
 D336  03 D2	 	 	 	add dx,dx
 D338  03 D2	 	 	 	add dx,dx
 D33A  81 E2 FFF0	 	 	and dx,0fff0h
 D33E  26: 8B 44 02	 	 	mov ax,es:[si+2]
 D342  D1 E8	 	 	 	shr ax,1
 D344  D1 E8	 	 	 	shr ax,1
 D346  D1 E8	 	 	 	shr ax,1
 D348  D1 E8	 	 	 	shr ax,1
 D34A  24 0F	 	 	 	and al,0fh
 D34C  0A D0	 	 	 	or dl,al
 D34E  8E DA	 	 	 	mov ds,dx
 D350  26: 8B 7C 02	 	 	mov di,es:[si+2]  ; определить адрес обращения (DI)
 D354  81 E7 000F	 	 	and di,0fh
 D358  5A	 	 	 	pop dx
 D359  58	 	 	 	pop ax
 D35A  C3	 	 	 	ret
 	 	 	 	;
 D35B	 	 	 	ext endp
 	 	 	 	;
 	 	 	 	;
 D35B	 	 	 	mem_2 proc near
 D35B  83 C3 04	 	 	 	add bx,4
 D35E  8B 57 02	 	 	 	mov dx,[bx+2]
 D361  03 D2	 	 	 	add dx,dx
 D363  03 D2	 	 	 	add dx,dx
 D365  C3	 	 	 	ret
 D366	 	 	 	mem_2 endp
 	 	 	 	;
 D366	 	 	 	error_ext:
 D366  90	 	 	 	nop
 	 	 	 	;
 	 	 	 	;
 D367	 	 	 	go proc near
 	 	 	 	;
 D367  E8 D2C8 R	 	 	call main_port	; сохранить адрес порта основной памяти в AH
 	 	 	 	;
 	 	 	 	;
 D36A  FA	 	 	 	cli	 	; закрыть прерывание
 D36B  BA 0200	 	 	 	mov dx,200h	; уст адрес порта платы основной памяти
 D36E  8A D4	 	 	 	mov dl,ah
 D370  EC	 	 	 	in al,dx
 D371  24 F3	 	 	 	and al,0f3h ;*** reset r&w
 D373  EE	 	 	 	out dx,al ; выключить режим чтения/записи для основной памяти
 	 	 	 	;
 	 	 	 	;
 D374  8A D3	 	 	 	mov dl,bl ; уст адрес порта платы источника
 D376  EC	 	 	 	in al,dx
 D377  24 F3	 	 	 	and al,0f3h   ; выключить режим чтения/записи
 D379  0C 04	 	 	 	or al,4     ; включить режим чтения для источника
 D37B  EE	 	 	 	out dx,al
 	 	 	 	;
 	 	 	 	;
 D37C  8A D7	 	 	 	mov dl,bh	; установить адрес порта платы назначения
 D37E  EC	 	 	 	in al,dx
 D37F  24 F3	 	 	 	and al,0f3h	; выключить режим чтения/записи
 D381  0C 08	 	 	 	or al,8 	; включить режим записи для приемника
 D383  EE	 	 	 	out dx,al
 	 	 	 	;
 D384  FC	 	 	 	cld	 	; переслать по счетчику
 D385  F3/ A5	 	 	 	rep movsw
 	 	 	 	;
 D387  EC	 	 	 	in al,dx  ; выключить режим чтения/записи для платы приемника
 D388  24 F3	 	 	 	and al,0f3h
 D38A  EE	 	 	 	out dx,al
 D38B  8A D3	 	 	 	mov dl,bl  ; выключить режим чтения/записи для платы источника
 D38D  EC	 	 	 	in al,dx
 D38E  24 F3	 	 	 	and al,0f3h
 D390  EE	 	 	 	out dx,al
 	 	 	 	;
 D391  8A D4	 	 	 	mov dl,ah	; установить адрес порта основной памяти
 D393  EC	 	 	 	in al,dx
 D394  0C 0C	 	 	 	or al,0ch      ; включить режим чтения/записи
 D396  EE	 	 	 	out dx,al  ; перевести основную память в режим чтения/записи
 	 	 	 	;
 D397  FB	 	 	 	sti	   ; включить прерывания
 D398  C3	 	 	 	ret
 D399	 	 	 	go endp
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;
 D399	 	 	 	ex_memory endp
 	 	 	 	;
 D399	 	 	 	pmsg	proc	near
 D399  B8 ---- R	 	 	mov	ax,data
 D39C  8E D8	 	 	 	mov	ds,ax
 D39E  8B EE	 	 	 	mov	bp,si
 D3A0	 	 	 	gr12:
 D3A0  2E: 8A 04	 	 	mov	al,cs:[si]
 D3A3  46	 	 	 	inc	si
 D3A4  B7 00	 	 	 	mov	bh,0
 D3A6  B4 0E	 	 	 	mov	ah,14
 D3A8  CD 10	 	 	 	int	10h
 D3AA  E2 F4	 	 	 	loop	gr12
 D3AC  C3	 	 	 	ret
 D3AD	 	 	 	pmsg	endp
 	 	 	 	
 	 	 	 	
 	 	 	 	;----------------------------------------
 	 	 	 	;
 	 	 	 	;   Записать телетайп (INT 10H, AH=14)
 	 	 	 	;
 	 	 	 	;   Эта программа выводит символ в буфер ЭЛИ с одновременной уста-
 	 	 	 	; новкой позиции курсора и передвижением курсора на экране.
 	 	 	 	;   После записи символа в последнюю позицию строки выполняется ав-
 	 	 	 	; томатический переход на новую строку. Если страница экрана за-
 	 	 	 	; полнена (позиция курсора 24,79/39), выполняется перемещение экрана
 	 	 	 	; на одну строку вверх. Освободившаяся строка заполняется значением
 	 	 	 	; атрибута символа (для алфавитно-цифрового режима). Для графики цвет=00
 	 	 	 	; После записи очередного символа курсор установлен в следующую позицию.
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   AL - код выводимого символа,
 	 	 	 	;	   BL - цвет переднего плана для графики.
 	 	 	 	;
 	 	 	 	;----------------------------------------
 	 	 	 	
 	 	 	 	 	assume	cs:code,ds:data
 D3AD	 	 	 	write_tty	proc	near
 D3AD  50	 	 	 	push	ax	 	; сохранить регистры
 D3AE  50	 	 	 	push	ax
 D3AF  B4 03	 	 	 	mov	ah,3
 D3B1  8A 3E 0062 R	 	 	mov	bh,active_page
 D3B5  CD 10	 	 	 	int	10h	 	; считать положение текущего курсора
 D3B7  58	 	 	 	pop	ax	 	; восстановить символ
 	 	 	 	
 	 	 	 	;   DX содержит текущую позицию курсора
 	 	 	 	
 D3B8  3C 08	 	 	 	cmp	al,8	 	; есть возврат на одну позицию ?
 D3BA  74 59	 	 	 	je	u8	 	; возврат на одну позицию
 D3BC  3C 0D	 	 	 	cmp	al,0dh	 	; есть возврат каретки ?
 D3BE  74 5E	 	 	 	je	u9	 	; возврат каретки
 D3C0  3C 0A	 	 	 	cmp	al,0ah	 	; есть граница поля ?
 D3C2  74 5E	 	 	 	je	u10	 	; граница поля
 D3C4  3C 07	 	 	 	cmp	al,07h	 	; звуковой сигнал ?
 D3C6  74 61	 	 	 	je	u11	 	; звуковой сигнал
 	 	 	 	
 	 	 	 	;   Запись символа на экран
 	 	 	 	
 D3C8  8A 3E 0062 R	 	 	mov	bh,active_page
 D3CC  B4 0A	 	 	 	mov	ah,10	 	; запись символа без атрибута
 D3CE  B9 0001	 	 	 	mov	cx,1
 D3D1  CD 10	 	 	 	int	10h
 	 	 	 	
 	 	 	 	;   Положение курсора для следующего символа
 	 	 	 	
 D3D3  FE C2	 	 	 	inc	dl
 D3D5  3A 16 004A R	 	 	cmp	dl,byte ptr crt_cols
 D3D9  75 36	 	 	 	jnz	u7	 	; переход к установке курсора
 D3DB  B2 00	 	 	 	mov	dl,0
 D3DD  80 FE 18	 	 	 	cmp	dh,24	 	; проверка граничной строки
 D3E0  75 2D	 	 	 	jnz	u6	 	; установить курсор
 	 	 	 	
 	 	 	 	;   Сдвиг экрана
 D3E2	 	 	 	u1:
 	 	 	 	
 D3E2  B4 02	 	 	 	mov	ah,2
 D3E4  B7 00	 	 	 	mov	bh,0
 D3E6  CD 10	 	 	 	int	10h	 	; установить курсор
 	 	 	 	
 	 	 	 	
 D3E8  A0 0049 R	 	 	mov	al,crt_mode	; получить текущий режим
 D3EB  3C 04	 	 	 	cmp	al,4
 D3ED  72 06	 	 	 	jc	u2	 	; считывание курсора
 D3EF  3C 07	 	 	 	cmp	al,7
 D3F1  B7 00	 	 	 	mov	bh,0	 	; цвет заднего плана
 D3F3  75 06	 	 	 	jne	u3
 	 	 	 	
 D3F5	 	 	 	u2:	 	 	 	; считывание курсора
 D3F5  B4 08	 	 	 	mov	ah,8
 D3F7  CD 10	 	 	 	int	10h	   ; считать символ/атрибут текущего курсора
 D3F9  8A FC	 	 	 	mov	bh,ah	 	; запомнить в BH
 	 	 	 	
 	 	 	 	;   Перемещение экрана на одну строку вверх
 	 	 	 	
 D3FB	 	 	 	u3:
 D3FB  B8 0601	 	 	 	mov	ax,601h
 D3FE  B9 0000	 	 	 	mov	cx,0	 	; верхний левый угол
 D401  B6 18	 	 	 	mov	dh,24	 	; координаты нижнего правого
 D403  8A 16 004A R	 	 	mov	dl,byte ptr crt_cols	; угла
 D407  FE CA	 	 	 	dec	dl
 D409	 	 	 	u4:
 D409  CD 10	 	 	 	int	10h
 	 	 	 	
 	 	 	 	;   Выход из прерывания
 	 	 	 	
 D40B	 	 	 	u5:
 D40B  58	 	 	 	pop	ax	 	; восстановить символ
 D40C  E9 F1DC R	 	 	jmp	video_return	; возврат к программе
 	 	 	 	
 D40F	 	 	 	u6:	 	 	 	; установить курсор
 D40F  FE C6	 	 	 	inc	dh	 	; следующая строка
 D411	 	 	 	u7:	 	 	 	; установить курсор
 D411  B4 02	 	 	 	mov	ah,2
 D413  EB F4	 	 	 	jmp	short u4	; установить новый курсор
 	 	 	 	
 	 	 	 	;   Сдвиг курсора на одну позицию влево
 	 	 	 	
 D415	 	 	 	u8:
 D415  80 FA 00	 	 	 	cmp	dl,0
 D418  74 F7	 	 	 	je	u7	 	; установить курсор
 D41A  FE CA	 	 	 	dec	dl	 	; нет - снова его передать
 D41C  EB F3	 	 	 	jmp	short u7
 	 	 	 	
 	 	 	 	;   Перемещение курсора в начало строки
 	 	 	 	
 D41E	 	 	 	u9:
 D41E  B2 00	 	 	 	mov	dl,0
 D420  EB EF	 	 	 	jmp	short u7	; установить курсор
 	 	 	 	
 	 	 	 	;   Перемещение курсора на следующую строку
 	 	 	 	
 D422	 	 	 	u10:
 D422  80 FE 18	 	 	 	cmp	dh,24	 	; последняя строка экрана
 D425  75 E8	 	 	 	jne	u6	 	; да - сдвиг экрана
 D427  EB B9	 	 	 	jmp	short u1	; нет - снова установить курсор
 	 	 	 	
 	 	 	 	;   Звуковой сигнал
 	 	 	 	
 D429	 	 	 	u11:
 D429  B3 02	 	 	 	mov	bl,2	 	; уст длительность звукового сигнала
 D42B  E8 E5C9 R	 	 	call	beep	 	; звук
 D42E  EB DB	 	 	 	jmp	short u5	; возврат
 D430	 	 	 	write_tty	endp
 	 	 	 	
 D430	 	 	 	ah12:
 D430  3C 03	 	 	 	cmp	al,3
 D432  75 26	 	 	 	jnz	ah121
 D434  53	 	 	 	push	bx
 D435  8C C8	 	 	 	mov	ax,cs
 D437  8E C0	 	 	 	mov	es,ax
 D439  B9 0080	 	 	 	mov	cx,80h
 D43C  BA 0080	 	 	 	mov	dx,80h
 D43F  5B	 	 	 	pop	bx
 D440  BD CBB2 R	 	 	mov	bp,offset crt_char_rus
 D443  80 FB 00	 	 	 	cmp	bl,0
 D446  BB 0800	 	 	 	mov	bx,0800h
 D449  74 03	 	 	 	jz	rav
 D44B  BD DC00 R	 	 	mov	bp,offset crt_char_ibm
 D44E	 	 	 	rav:
 D44E  B8 1100	 	 	 	mov	ax,1100h
 D451  50	 	 	 	push	ax
 D452  CD 10	 	 	 	int	10h
 D454  58	 	 	 	pop	ax
 D455  CD 10	 	 	 	int	10h
 D457  E9 F1DC R	 	 	jmp	video_return
 D45A	 	 	 	ah121:
 D45A  E9 CAE3 R	 	 	jmp	znak
 	 	 	 	
 	 	 	 	;rc- коммент взят из PCBIOSv1, но версия отличается: тест памяти идет СЛОВАМИ, а не байтами
 	 	 	 	;rc поэтому число в CX - кол-во слов, а не байт, и оно вдвое меньше, чем в РС и в 1840
 	 	 	 	;rc программа соответственно вдвое быстрее
 	 	 	 	;--------------------------------------------
 	 	 	 	;	THIS SUBROUTINE PERFORMS A READ/WRITE STORAGE TEST ON A 16K BLOCK
 	 	 	 	;	OF STORAGE.
 	 	 	 	;ENTRY REQUIREMENTS:
 	 	 	 	;	ES = ADDRESS OF STORAGE SEGMENT BEING TESTED
 	 	 	 	;	DS = ADDRESS OF STORAGE SEGMENT BEING TESTED
 	 	 	 	;	WHEN ENTERING AT STGTST_CNT, CX MUST BE LOADED WITH THE BYTE COUNT.
 	 	 	 	;EXIT PARAMETERS:
 	 	 	 	;	ZERO FLAG = 0 IF STORAGE ERROR (DATA COMPARE OR PARITY CHECK.  AL=0
 	 	 	 	;	 	    DENOTES A PARITY CHECK. ELSE AL=XOR'ED BIT PATTERN OF THE
 	 	 	 	;	 	    EXPECTED DATA PATTERN VS THE ACTUAL DATA READ.
 	 	 	 	;	AX,BX,CX,DX,DI, AND SI ARE ALL DESTROYED.
 	 	 	 	;--------------------------------------------
 D45D	 	 	 	stgtst:
 D45D  B9 2000	 	 	 	 	mov	cx,2000h
 	 	 	 	
 D460	 	 	 	stgtst_cnt	proc	near
 D460  8B D9	 	 	 	 	mov	bx,cx
 D462  FC	 	 	 	 	cld
 D463  2B FF	 	 	 	 	sub	di,di
 D465  2B C0	 	 	 	 	sub	ax,ax
 D467	 	 	 	c2_1:
 D467  88 05	 	 	 	 	mov	[di],al
 D469  8A 05	 	 	 	 	mov	al,[di]
 D46B  32 C4	 	 	 	 	xor	al,ah
 D46D  75 79	 	 	 	 	jnz	c7
 D46F  FE C4	 	 	 	 	inc	ah
 D471  8A C4	 	 	 	 	mov	al,ah
 D473  75 F2	 	 	 	 	jnz	c2_1
 D475  B8 55AA	 	 	 	 	mov	ax,055aah
 D478  8B D0	 	 	 	 	mov	dx,ax
 D47A  F3/ AB	 	 	 	 	rep	stosw
 D47C  E4 61	 	 	 	 	in	al,port_b
 D47E  0C 30	 	 	 	 	or	al,030h
 D480  E6 61	 	 	 	 	out	port_b,al
 D482  90	 	 	 	 	nop
 D483  24 CF	 	 	 	 	and	al,0cfh
 D485  E6 61	 	 	 	 	out	port_b,al
 	 	 	 	;
 D487  4F	 	 	 	 	dec	di
 D488  4F	 	 	 	 	dec	di
 D489  FD	 	 	 	 	std
 D48A  8B F7	 	 	 	 	mov	si,di
 D48C  8B CB	 	 	 	 	mov	cx,bx
 D48E	 	 	 	c3:
 D48E  AD	 	 	 	 	lodsw
 D48F  33 C2	 	 	 	 	xor	ax,dx
 D491  75 57	 	 	 	 	jne	c7x
 D493  B8 AA55	 	 	 	 	mov	ax,0aa55h
 D496  AB	 	 	 	 	stosw
 D497  E2 F5	 	 	 	 	loop	c3
 	 	 	 	;
 D499  FC	 	 	 	 	cld
 D49A  47	 	 	 	 	inc	di
 D49B  47	 	 	 	 	inc	di
 D49C  8B F7	 	 	 	 	mov	si,di
 D49E  8B CB	 	 	 	 	mov	cx,bx
 D4A0  8B D0	 	 	 	 	mov	dx,ax
 D4A2	 	 	 	c4:
 D4A2  AD	 	 	 	 	lodsw
 D4A3  33 C2	 	 	 	 	xor	ax,dx
 D4A5  75 43	 	 	 	 	jne	c7x
 D4A7  B8 FFFF	 	 	 	 	mov	ax,0ffffh
 D4AA  AB	 	 	 	 	stosw
 D4AB  E2 F5	 	 	 	 	loop	c4
 	 	 	 	;
 D4AD  4F	 	 	 	 	dec	di
 D4AE  4F	 	 	 	 	dec	di
 D4AF  FD	 	 	 	 	std
 D4B0  8B F7	 	 	 	 	mov	si,di
 D4B2  8B CB	 	 	 	 	mov	cx,bx
 D4B4  8B D0	 	 	 	 	mov	dx,ax
 D4B6	 	 	 	c5:
 D4B6  AD	 	 	 	 	lodsw
 D4B7  33 C2	 	 	 	 	xor	ax,dx
 D4B9  75 2F	 	 	 	 	jne	c7x
 D4BB  B8 0101	 	 	 	 	mov	ax,00101h
 D4BE  AB	 	 	 	 	stosw
 D4BF  E2 F5	 	 	 	 	loop	c5
 	 	 	 	;
 D4C1  FC	 	 	 	 	cld
 D4C2  47	 	 	 	 	inc	di
 D4C3  47	 	 	 	 	inc	di
 D4C4  8B F7	 	 	 	 	mov	si,di
 D4C6  8B CB	 	 	 	 	mov	cx,bx
 D4C8  8B D0	 	 	 	 	mov	dx,ax
 D4CA	 	 	 	c6:
 D4CA  AD	 	 	 	 	lodsw
 D4CB  33 C2	 	 	 	 	xor	ax,dx
 D4CD  75 1B	 	 	 	 	jne	c7x
 D4CF  AB	 	 	 	 	stosw
 D4D0  E2 F8	 	 	 	 	loop	c6
 	 	 	 	;
 D4D2  4F	 	 	 	 	dec	di
 D4D3  4F	 	 	 	 	dec	di
 D4D4  FD	 	 	 	 	std
 D4D5  8B F7	 	 	 	 	mov	si,di
 D4D7  8B CB	 	 	 	 	mov	cx,bx
 D4D9  8B D0	 	 	 	 	mov	dx,ax
 D4DB	 	 	 	c6x:
 D4DB  AD	 	 	 	 	lodsw
 D4DC  33 C2	 	 	 	 	xor	ax,dx
 D4DE  75 0A	 	 	 	 	jne	c7x
 D4E0  E2 F9	 	 	 	 	loop	c6x
 	 	 	 	;
 D4E2  E4 62	 	 	 	 	in	al,port_c
 D4E4  24 40	 	 	 	 	and	al,040h
 D4E6  B0 00	 	 	 	 	mov	al,0
 D4E8	 	 	 	c7:
 D4E8  FC	 	 	 	 	cld
 D4E9  C3	 	 	 	 	ret
 D4EA	 	 	 	c7x:
 D4EA  3C 00	 	 	 	 	cmp	al,0
 D4EC  75 FA	 	 	 	 	jnz	c7
 D4EE  32 C4	 	 	 	 	xor	al,ah
 D4F0  46	 	 	 	 	inc	si
 D4F1  EB F5	 	 	 	 	jmp	short c7
 D4F3	 	 	 	stgtst_cnt	endp
 	 	 	 	
 	 	 	 	;RCgoff	процедура seek перемещена сюда для соответствия
 	 	 	 	;реальной BIOS редакции 2
 	 	 	 	
 	 	 	 	;----------------------------
 	 	 	 	;   Позиционирование
 	 	 	 	;
 	 	 	 	;   Эта программа позиционирует голов-
 	 	 	 	; ку обозначенного устройства на нуж-
 	 	 	 	; ную дорожку. Если устройство не
 	 	 	 	; было выбрано до тех пор, пока не
 	 	 	 	; была сброшена команда,то устройство
 	 	 	 	; будет рекалибровано.
 	 	 	 	;
 	 	 	 	;   ВВОД
 	 	 	 	;	(DL) - номер усройства для
 	 	 	 	;	       позиционирования,
 	 	 	 	;	(CH) - номер дорожки.
 	 	 	 	;
 	 	 	 	;   ВЫВОД
 	 	 	 	;	 CY=0 - успешно,
 	 	 	 	;	 CY=1 - сбой (состояние НГМД установить
 	 	 	 	;	 	согласно  AX).
 	 	 	 	;----------------------------
 D4F3	 	 	 	seek	proc	near
 D4F3  B0 01	 	 	 	mov	al,1	 	; уст маску
 D4F5  51	 	 	 	push	cx
 D4F6  8A CA	 	 	 	mov	cl,dl	 	; установить номер устройства
 D4F8  D2 C0	 	 	 	rol	al,cl	 	; циклический сдвиг влево
 D4FA  59	 	 	 	pop	cx
 D4FB  84 06 003E R	 	 	test	al,seek_status  ;каким дискам требуется рекалибровка?
 D4FF  75 25	 	 	 	jnz	j28             ;никаким - идем на j28
 D501  08 06 003E R	 	 	or	seek_status,al  ;включить "не надо рекалибр" на нужных
 D505  B4 07	 	 	 	mov	ah,07h
 D507  E8 E6A5 R	 	 	call	nec_output      ;команда рекалибровки...
 D50A  8A E2	 	 	 	mov	ah,dl           
 D50C  E8 E6A5 R	 	 	call	nec_output      ;...нужного дисковода
 D50F  E8 EEAD R	 	 	call	chk_stat_2   ; получить и обработать прерывание
 	 	 	 	;RCgoff 5 байт, которыми отличается реальный BIOS редакции 2
 D512  C6 06 0041 R 00	 	 	mov	diskette_status,0    ;игнорировать ошибку при рекалибровке
 	 	 	 	;RCgoff end
 D517  B4 07	 	 	 	mov	ah,07h	 	; команда рекалибровки (второй раз то же самое)
 D519  E8 E6A5 R	 	 	call	nec_output
 D51C  8A E2	 	 	 	mov	ah,dl
 D51E  E8 E6A5 R	 	 	call	nec_output
 D521  E8 EEAD R	 	 	call	chk_stat_2
 D524  72 32	 	 	 	jc	j32	 	; сбой позиционирования
 	 	 	 	
 	 	 	 	
 	 	 	 	 	;теперь привод синхронизирован с контроллером,
 	 	 	 	 	;и можно позиционироваться на нужную дорожку.
 D526	 	 	 	j28:
 D526  B4 0F	 	 	 	mov	ah,0fh
 D528  E8 E6A5 R	 	 	call	nec_output
 D52B  8A E2	 	 	 	mov	ah,dl	 	; номер устройства
 D52D  E8 E6A5 R	 	 	call	nec_output
 D530  8A E5	 	 	 	mov	ah,ch	 	; номер дорожки
 D532  F6 06 0010 R 04	 	 	test	byte ptr equip_flag,4
 D537  75 02	 	 	 	jnz	j300
 D539  02 E4	 	 	 	add	ah,ah	 	; удвоение номера дорожки
 D53B	 	 	 	j300:
 D53B  E8 E6A5 R	 	 	call	nec_output
 D53E  E8 EEAD R	 	 	call	chk_stat_2	; получить конечное прерывание и
 	 	 	 	 	 	 	 	; считать состояние
 	 	 	 	
 	 	 	 	
 D541  9C	 	 	 	pushf	 	 	; сохранить значение флажков
 D542  BB 0012	 	 	 	mov	bx,18
 D545  E8 EE51 R	 	 	call	get_parm
 D548  51	 	 	 	push	cx	 	; сохранить регистр
 D549	 	 	 	j29:
 D549  B9 0226	 	 	 	mov	cx,550	 	; организовать цикл = 1 ms
 D54C  0A E4	 	 	 	or	ah,ah	 	; проверка окончания времени
 D54E  74 06	 	 	 	jz	j31
 D550  E2 FE	 	 	j30:	loop	j30	 	; задержка 1ms
 D552  FE CC	 	 	 	dec	ah	 	; вычитание из счетчика
 D554  EB F3	 	 	 	jmp	short j29	; возврат к началу цикла
 D556	 	 	 	j31:
 D556  59	 	 	 	pop	cx	 	; восстановить состояние
 D557  9D	 	 	 	popf
 D558	 	 	 	j32:	 	 	 	; ошибка позиционирования
 D558  C3	 	 	 	ret	 	; возврат к программе, вызвавшей прерывание
 D559	 	 	 	seek	endp
 	 	 	 	;RCgoff end
 	 	 	 	
 DC00	 	 	 	 	org	0DC00h
 	 	 	 	
 DC00	 	 	 	crt_char_ibm	label byte
 	 	 	 	
 DC00  78 CC C0 CC 78	 	 	DB	78H,0CCH,0C0H,0CCH,78H	 	;0100 78 CC C0 CC 78
 DC05  18 0C 78 00 CC	 	 	DB	18H,0CH,78H,0,0CCH	 	;0105 18 0C 78 00 CC
 DC0A  00 03 [	 	 	 	DB	0,3 DUP(0CCH),7EH	 	;010A 00 CC CC CC 7E
                CC	 	
                    ]	 	
                   7E	 	
 DC0F  00 1C 00 78 CC	 	 	DB	0,1CH,0,78H,0CCH	 	;010F 00 1C 00 78 CC
 DC14  FC C0 78 00 7E	 	 	DB	0FCH,0C0H,78H,0,7EH	 	;0114 FC C0 78 00 7E
 DC19  C3 3C 06 3E 66	 	 	DB	0C3H,3CH,6,3EH,66H	 	;0119 C3 3C 06 3E 66
 DC1E  3F 00 CC 00 78	 	 	DB	3FH,0,0CCH,0,78H	 	;011E 3F 00 CC 00 78
 DC23  0C 7C CC 7E 00	 	 	DB	0CH,7CH,0CCH,7EH,0	 	;0123 0C 7C CC 7E 00
 DC28  E0 00 78 0C 7C	 	 	DB	0E0H,0,78H,0CH,7CH	 	;0128 E0 00 78 0C 7C
 DC2D  CC 02 [0	 	 	 	DB	0CCH,7EH,0,2 DUP(30H),78H	;012D CC 7E 00 30 30 78
                30	 	
                    ]	 	
                   78	 	
 DC33  0C 7C CC 7E 00	 	 	DB	0CH,7CH,0CCH,7EH,0	 	;0133 0C 7C CC 7E 00
 DC38     02 [	 	 	 	DB	2 DUP(0),78H,0C0H	 	;0138 00 00 78 C0
                00	 	
                    ]	 	
                   78 C0	
 DC3C  C0 78 0C 38 7E	 	 	DB	0C0H,78H,0CH,38H,7EH	 	;013C C0 78 0C 38 7E
 DC41  C3 3C 66 7E 60	 	 	DB	0C3H,3CH,66H,7EH,60H	 	;0141 C3 3C 66 7E 60
 DC46  3C 00 CC 00 78	 	 	DB	3CH,0,0CCH,0,78H	 	;0146 3C 00 CC 00 78
 DC4B  CC FC C0 78 00	 	 	DB	0CCH,0FCH,0C0H,78H,0	 	;014B CC FC C0 78 00
 DC50  E0 00 78 CC FC	 	 	DB	0E0H,0,78H,0CCH,0FCH	 	;0150 E0 00 78 CC FC
 DC55  C0 78 00 CC 00	 	 	DB	0C0H,78H,0,0CCH,0	 	;0155 C0 78 00 CC 00
 DC5A  70 03 [	 	 	 	DB	70H,3 DUP(30H),78H	 	;015A 70 30 30 30 78
                30	 	
                    ]	 	
                   78	 	
 DC5F  00 7C C6 38 18	 	 	DB	0,7CH,0C6H,38H,18H	 	;015F 00 7C C6 38 18
 DC64     02 [	 	 	 	DB	2 DUP(18H),3CH,0	 	;0164 18 18 3C 00
                18	 	
                    ]	 	
                   3C 00	
 DC68  E0 03 [0	 	 	 	DB	0E0H,0,70H,3 DUP(30H),78H	;0168 E0 00 70 30 30 30 78
                30	 	
                    ]	 	
                   78	 	
 DC6F  00 C6 38 6C C6	 	 	DB	0,0C6H,38H,6CH,0C6H	 	;016F 00 C6 38 6C C6
 DC74  FE 02 [	 	 	 	DB	0FEH,2 DUP(0C6H),0	 	;0174 FE C6 C6 00
                C6	 	
                    ]	 	
                   00	 	
 DC78     02 [	 	 	 	DB	2 DUP(30H),0,78H	 	;0178 30 30 00 78
                30	 	
                    ]	 	
                   00 78	
 DC7C  CC FC CC 00 1C	 	 	DB	0CCH,0FCH,0CCH,0,1CH	 	;017C CC FC CC 00 1C
 DC81  00 FC 60 78 60	 	 	DB	0,0FCH,60H,78H,60H	 	;0181 00 FC 60 78 60
 DC86  FC 03 [	 	 	 	DB	0FCH,3 DUP(0),7FH	 	;0186 FC 00 00 00 7F
                00	 	
                    ]	 	
                   7F	 	
 DC8B  0C 7F CC 7F 00	 	 	DB	0CH,7FH,0CCH,7FH,0	 	;018B 0C 7F CC 7F 00
 DC90  3E 6C CC FE CC	 	 	DB	3EH,6CH,0CCH,0FEH,0CCH	 	;0190 3E 6C CC FE CC
 DC95  CC CE 00 78 CC	 	 	DB	0CCH,0CEH,0,78H,0CCH	 	;0195 CC CE 00 78 CC
 DC9A  00 02 [	 	 	 	DB	0,78H,2 DUP(0CCH),78H	 	;019A 00 78 CC CC 78
                CC	 	
                    ]	 	
                   78	 	
 DC9F     02 [	 	 	 	DB	2 DUP(0),0CCH,0 	 	;019F 00 00 CC 00
                00	 	
                    ]	 	
                   CC 00	
 DCA3  78 02 [	 	 	 	DB	78H,2 DUP(0CCH),78H	 	;01A3 78 CC CC 78
                CC	 	
                    ]	 	
                   78	 	
 DCA7     02 [	 	 	 	DB	2 DUP(0),0E0H,0 	 	;01A7 00 00 E0 00
                00	 	
                    ]	 	
                   E0 00	
 DCAB  78 02 [	 	 	 	DB	78H,2 DUP(0CCH),78H	 	;01AB 78 CC CC 78
                CC	 	
                    ]	 	
                   78	 	
 DCAF  00 78 CC 00 CC	 	 	DB	0,78H,0CCH,0,0CCH	 	;01AF 00 78 CC 00 CC
 DCB4     02 [	 	 	 	DB	2 DUP(0CCH),7EH,0	 	;01B4 CC CC 7E 00
                CC	 	
                    ]	 	
                   7E 00	
 DCB8  00 03 [0	 	 	 	DB	0,0E0H,0,3 DUP(0CCH),7EH	;01B8 00 E0 00 CC CC CC 7E
                CC	 	
                    ]	 	
                   7E	 	
 DCBF     02 [	 	 	 	DB	2 DUP(0),0CCH,0 	 	;01BF 00 00 CC 00
                00	 	
                    ]	 	
                   CC 00	
 DCC3     02 [	 	 	 	DB	2 DUP(0CCH),7CH,0CH	 	;01C3 CC CC 7C 0C
                CC	 	
                    ]	 	
                   7C 0C	
 DCC7  F8 C3 18 3C 66	 	 	DB	0F8H,0C3H,18H,3CH,66H	 	;01C7 F8 C3 18 3C 66
 DCCC  66 3C 18 00 CC	 	 	DB	66H,3CH,18H,0,0CCH	 	;01CC 66 3C 18 00 CC
 DCD1  00 04 [	 	 	 	DB	0,4 DUP(0CCH),78H	 	;01D1 00 CC CC CC CC 78
                CC	 	
                    ]	 	
                   78	 	
 DCD7  00 02 [	 	 	 	DB	0,2 DUP(18H),7EH	 	;01D7 00 18 18 7E
                18	 	
                    ]	 	
                   7E	 	
 DCDB     02 [	 	 	 	DB	2 DUP(0C0H),7EH,18H	 	;01DB C0 C0 7E 18
                C0	 	
                    ]	 	
                   7E 18	
 DCDF  18 38 6C 64 F0	 	 	DB	18H,38H,6CH,64H,0F0H	 	;01DF 18 38 6C 64 F0
 DCE4  60 E6 FC 00 CC	 	 	DB	60H,0E6H,0FCH,0,0CCH	 	;01E4 60 E6 FC 00 CC
 DCE9  CC 78 FC 30 FC	 	 	DB	0CCH,78H,0FCH,30H,0FCH	 	;01E9 CC 78 FC 30 FC
 DCEE     02 [	 	 	 	DB	2 DUP(30H),0F8H,0CCH	 	;01EE 30 30 F8 CC
                30	 	
                    ]	 	
                   F8 CC	
 DCF2  CC FA C6 CF C6	 	 	DB	0CCH,0FAH,0C6H,0CFH,0C6H	;01F2 CC FA C6 CF C6
 DCF7  C7 0E 1B 18 3C	 	 	DB	0C7H,0EH,1BH,18H,3CH	 	;01F7 C7 0E 1B 18 3C
 DCFC     02 [	 	 	 	DB	2 DUP(18H),0D8H,70H	 	;01FC 18 18 D8 70
                18	 	
                    ]	 	
                   D8 70	
 DD00  1C 00 78 0C 7C	 	 	DB	1CH,0,78H,0CH,7CH	 	;0200 1C 00 78 0C 7C
 DD05  CC 7E 00 38 00	 	 	DB	0CCH,7EH,0,38H,0	 	;0205 CC 7E 00 38 00
 DD0A  70 03 [	 	 	 	DB	70H,3 DUP(30H),78H	 	;020A 70 30 30 30 78
                30	 	
                    ]	 	
                   78	 	
 DD0F     02 [	 	 	 	DB	2 DUP(0),1CH,0	 	 	;020F 00 00 1C 00
                00	 	
                    ]	 	
                   1C 00	
 DD13  78 02 [	 	 	 	DB	78H,2 DUP(0CCH),78H	 	;0213 78 CC CC 78
                CC	 	
                    ]	 	
                   78	 	
 DD17     02 [	 	 	 	DB	2 DUP(0),1CH,0	 	 	;0217 00 00 1C 00
                00	 	
                    ]	 	
                   1C 00	
 DD1B     03 [	 	 	 	DB	3 DUP(0CCH),7EH,0	 	;021B CC CC CC 7E 00
                CC	 	
                    ]	 	
                   7E 00	
 DD20  00 F8 00 F8 CC	 	 	DB	0,0F8H,0,0F8H,0CCH	 	;0220 00 F8 00 F8 CC
 DD25     02 [	 	 	 	DB	2 DUP(0CCH),0,0FCH	 	;0225 CC CC 00 FC
                CC	 	
                    ]	 	
                   00 FC	
 DD29  00 CC EC FC DC	 	 	DB	0,0CCH,0ECH,0FCH,0DCH	 	;0229 00 CC EC FC DC
 DD2E  CC 02 [C	 	 	 	DB	0CCH,0,3CH,2 DUP(6CH),3EH	;022E CC 00 3C 6C 6C 3E
                6C	 	
                    ]	 	
                   3E	 	
 DD34  00 02 [	 	 	 	DB	0,7EH,2 DUP(0),38H	 	;0234 00 7E 00 00 38
                00	 	
                    ]	 	
                   38	 	
 DD39     02 [	 	 	 	DB	2 DUP(6CH),38H,0	 	;0239 6C 6C 38 00
                6C	 	
                    ]	 	
                   38 00	
 DD3D  7C 02 [	 	 	 	DB	7CH,2 DUP(0),30H	 	;023D 7C 00 00 30
                00	 	
                    ]	 	
                   30	 	
 DD41  00 30 60 C0 CC	 	 	DB	0,30H,60H,0C0H,0CCH	 	;0241 00 30 60 C0 CC
 DD46  78 04 [	 	 	 	DB	78H,4 DUP(0),0FCH	 	;0246 78 00 00 00 00 FC
                00	 	
                    ]	 	
                   FC	 	
 DD4C     02 [	 	 	 	DB	2 DUP(0C0H),5 DUP(0),0FCH	;024C C0 C0 00 00 00 00 00 FC
                C0	 	
                    ]	 	
          05 [	 	 	
                00	 	
                    ]	 	
                   FC	 	
 DD54     02 [	 	 	 	DB	2 DUP(0CH),2 DUP(0),0C3H	;0254 0C 0C 00 00 C3
                0C	 	
                    ]	 	
          02 [	 	 	
                00	 	
                    ]	 	
                   C3	 	
 DD59  C6 CC DE 33 66	 	 	DB	0C6H,0CCH,0DEH,33H,66H	 	;0259 C6 CC DE 33 66
 DD5E  CC 0F C3 C6 CC	 	 	DB	0CCH,0FH,0C3H,0C6H,0CCH 	;025E CC 0F C3 C6 CC
 DD63  DB 37 6F CF 03	 	 	DB	0DBH,37H,6FH,0CFH,3	 	;0263 DB 37 6F CF 03
 DD68     02 [	 	 	 	DB	2 DUP(18H),0,18H	 	;0268 18 18 00 18
                18	 	
                    ]	 	
                   00 18	
 DD6C     03 [	 	 	 	DB	3 DUP(18H),2 DUP(0),33H 	;026C 18 18 18 00 00 33
                18	 	
                    ]	 	
          02 [	 	 	
                00	 	
                    ]	 	
                   33	 	
 DD72  66 CC 66 33 00	 	 	DB	66H,0CCH,66H,33H,0	 	;0272 66 CC 66 33 00
 DD77     02 [	 	 	 	DB	2 DUP(0),0CCH,66H	 	;0277 00 00 CC 66
                00	 	
                    ]	 	
                   CC 66	
 DD7B  33 02 [C	 	 	 	DB	33H,66H,0CCH,2 DUP(0),22H	;027B 33 66 CC 00 00 22
                00	 	
                    ]	 	
                   22	 	
 DD81  88 22 88 22 88	 	 	DB	88H,22H,88H,22H,88H	 	;0281 88 22 88 22 88
 DD86  22 88 55 AA 55	 	 	DB	22H,88H,55H,0AAH,55H	 	;0286 22 88 55 AA 55
 DD8B  AA 55 AA 55 AA	 	 	DB	0AAH,55H,0AAH,55H,0AAH	 	;028B AA 55 AA 55 AA
 DD90  DB 77 DB EE DB	 	 	DB	0DBH,77H,0DBH,0EEH,0DBH 	;0290 DB 77 DB EE DB
 DD95  77 0C [E	 	 	 	DB	77H,0DBH,0EEH,0CH DUP(18H),0F8H ;0295 77 DB EE 18 18 18 18 18 18 18 18 18 18 18 18 F8
                18	 	
                    ]	 	
                   F8	 	
 DDA5     05 [	 	 	 	DB	5 DUP(18H),0F8H,18H	 	;02A5 18 18 18 18 18 F8 18
                18	 	
                    ]	 	
                   F8 18	
 DDAC  F8 03 [	 	 	 	DB	0F8H,3 DUP(18H),36H	 	;02AC F8 18 18 18 36
                18	 	
                    ]	 	
                   36	 	
 DDB1     03 [	 	 	 	DB	3 DUP(36H),0F6H,36H	 	;02B1 36 36 36 F6 36
                36	 	
                    ]	 	
                   F6 36	
 DDB6     02 [	 	 	 	DB	2 DUP(36H),4 DUP(0),0FEH	;02B6 36 36 00 00 00 00 FE
                36	 	
                    ]	 	
          04 [	 	 	
                00	 	
                    ]	 	
                   FE	 	
 DDBD     03 [	 	 	 	DB	3 DUP(36H),2 DUP(0),0F8H	;02BD 36 36 36 00 00 F8
                36	 	
                    ]	 	
          02 [	 	 	
                00	 	
                    ]	 	
                   F8	 	
 DDC3  18 03 [	 	 	 	DB	18H,0F8H,3 DUP(18H),36H 	;02C3 18 F8 18 18 18 36
                18	 	
                    ]	 	
                   36	 	
 DDC9  36 F6 06 F6 36	 	 	DB	36H,0F6H,6,0F6H,36H	 	;02C9 36 F6 06 F6 36
 DDCE     0A [	 	 	 	DB	0AH DUP(36H),2 DUP(0),0FEH	;02CE 36 36 36 36 36 36 36 36 36 36 00 00 FE
                36	 	
                    ]	 	
          02 [	 	 	
                00	 	
                    ]	 	
                   FE	 	
 DDDB  06 05 [	 	 	 	DB	6,0F6H,5 DUP(36H),0F6H	 	;02DB 06 F6 36 36 36 36 36 F6
                36	 	
                    ]	 	
                   F6	 	
 DDE3  06 03 [	 	 	 	DB	6,0FEH,3 DUP(0),36H	 	;02E3 06 FE 00 00 00 36
                00	 	
                    ]	 	
                   36	 	
 DDE9     03 [	 	 	 	DB	3 DUP(36H),0FEH,0	 	;02E9 36 36 36 FE 00
                36	 	
                    ]	 	
                   FE 00	
 DDEE     02 [	 	 	 	DB	2 DUP(0),2 DUP(18H),0F8H	;02EE 00 00 18 18 F8
                00	 	
                    ]	 	
          02 [	 	 	
                18	 	
                    ]	 	
                   F8	 	
 DDF3  18 07 [	 	 	 	DB	18H,0F8H,7 DUP(0),0F8H	 	;02F3 18 F8 00 00 00 00 00 00 00 F8
                00	 	
                    ]	 	
                   F8	 	
 DDFD     07 [	 	 	 	DB	7 DUP(18H),1FH,0	 	;02FD 18 18 18 18 18 18 18 1F 00
                18	 	
                    ]	 	
                   1F 00	
 DE06     02 [	 	 	 	DB	2 DUP(0),4 DUP(18H),0FFH	;0306 00 00 18 18 18 18 FF
                00	 	
                    ]	 	
          04 [	 	 	
                18	 	
                    ]	 	
                   FF	 	
 DE0D     07 [	 	 	 	DB	7 DUP(0),0FFH,18H	 	;030D 00 00 00 00 00 00 00 FF 18
                00	 	
                    ]	 	
                   FF 18	
 DE16     06 [	 	 	 	DB	6 DUP(18H),1FH,18H	 	;0316 18 18 18 18 18 18 1F 18
                18	 	
                    ]	 	
                   1F 18	
 DE1E     02 [	 	 	 	DB	2 DUP(18H),4 DUP(0),0FFH	;031E 18 18 00 00 00 00 FF
                18	 	
                    ]	 	
          04 [	 	 	
                00	 	
                    ]	 	
                   FF	 	
 DE25     03 [	 	 	 	DB	3 DUP(0),4 DUP(18H),0FFH	;0325 00 00 00 18 18 18 18 FF
                00	 	
                    ]	 	
          04 [	 	 	
                18	 	
                    ]	 	
                   FF	 	
 DE2D     05 [	 	 	 	DB	5 DUP(18H),1FH,18H	 	;032D 18 18 18 18 18 1F 18
                18	 	
                    ]	 	
                   1F 18	
 DE34  1F 03 [	 	 	 	DB	1FH,3 DUP(18H),36H	 	;0334 1F 18 18 18 36
                18	 	
                    ]	 	
                   36	 	
 DE39     03 [	 	 	 	DB	3 DUP(36H),37H,36H	 	;0339 36 36 36 37 36
                36	 	
                    ]	 	
                   37 36	
 DE3E     04 [	 	 	 	DB	4 DUP(36H),37H,30H	 	;033E 36 36 36 36 37 30
                36	 	
                    ]	 	
                   37 30	
 DE44  3F 05 [	 	 	 	DB	3FH,5 DUP(0),3FH	 	;0344 3F 00 00 00 00 00 3F
                00	 	
                    ]	 	
                   3F	 	
 DE4B  30 05 [	 	 	 	DB	30H,37H,5 DUP(36H),0F7H 	;034B 30 37 36 36 36 36 36 F7
                36	 	
                    ]	 	
                   F7	 	
 DE53  00 05 [	 	 	 	DB	0,0FFH,5 DUP(0),0FFH	 	;0353 00 FF 00 00 00 00 00 FF
                00	 	
                    ]	 	
                   FF	 	
 DE5B  00 05 [	 	 	 	DB	0,0F7H,5 DUP(36H),37H	 	;035B 00 F7 36 36 36 36 36 37
                36	 	
                    ]	 	
                   37	 	
 DE63  30 03 [	 	 	 	DB	30H,37H,3 DUP(36H),0	 	;0363 30 37 36 36 36 00
                36	 	
                    ]	 	
                   00	 	
 DE69  00 FF 00 FF 00	 	 	DB	0,0FFH,0,0FFH,0 	 	;0369 00 FF 00 FF 00
 DE6E     02 [	 	 	 	DB	2 DUP(0),2 DUP(36H),0F7H	;036E 00 00 36 36 F7
                00	 	
                    ]	 	
          02 [	 	 	
                36	 	
                    ]	 	
                   F7	 	
 DE73  00 03 [	 	 	 	DB	0,0F7H,3 DUP(36H),18H	 	;0373 00 F7 36 36 36 18
                36	 	
                    ]	 	
                   18	 	
 DE79  18 FF 00 FF 00	 	 	DB	18H,0FFH,0,0FFH,0	 	;0379 18 FF 00 FF 00
 DE7E     02 [	 	 	 	DB	2 DUP(0),4 DUP(36H),0FFH	;037E 00 00 36 36 36 36 FF
                00	 	
                    ]	 	
          04 [	 	 	
                36	 	
                    ]	 	
                   FF	 	
 DE85     05 [	 	 	 	DB	5 DUP(0),0FFH,0 	 	;0385 00 00 00 00 00 FF 00
                00	 	
                    ]	 	
                   FF 00	
 DE8C  FF 03 [	 	 	 	DB	0FFH,3 DUP(18H),0	 	;038C FF 18 18 18 00
                18	 	
                    ]	 	
                   00	 	
 DE91     03 [	 	 	 	DB	3 DUP(0),0FFH,36H	 	;0391 00 00 00 FF 36
                00	 	
                    ]	 	
                   FF 36	
 DE96     06 [	 	 	 	DB	6 DUP(36H),3FH,0	 	;0396 36 36 36 36 36 36 3F 00
                36	 	
                    ]	 	
                   3F 00	
 DE9E     02 [	 	 	 	DB	2 DUP(0),2 DUP(18H),1FH 	;039E 00 00 18 18 1F
                00	 	
                    ]	 	
          02 [	 	 	
                18	 	
                    ]	 	
                   1F	 	
 DEA3  18 05 [	 	 	 	DB	18H,1FH,5 DUP(0),1FH	 	;03A3 18 1F 00 00 00 00 00 1F
                00	 	
                    ]	 	
                   1F	 	
 DEAB  18 03 [	 	 	 	DB	18H,1FH,3 DUP(18H),0	 	;03AB 18 1F 18 18 18 00
                18	 	
                    ]	 	
                   00	 	
 DEB1     03 [	 	 	 	DB	3 DUP(0),3FH,36H	 	;03B1 00 00 00 3F 36
                00	 	
                    ]	 	
                   3F 36	
 DEB6     06 [	 	 	 	DB	6 DUP(36H),0FFH,36H	 	;03B6 36 36 36 36 36 36 FF 36
                36	 	
                    ]	 	
                   FF 36	
 DEBE     02 [	 	 	 	DB	2 DUP(36H),2 DUP(18H),0FFH	;03BE 36 36 18 18 FF
                36	 	
                    ]	 	
          02 [	 	 	
                18	 	
                    ]	 	
                   FF	 	
 DEC3  18 07 [	 	 	 	DB	18H,0FFH,7 DUP(18H),0F8H	;03C3 18 FF 18 18 18 18 18 18 18 F8
                18	 	
                    ]	 	
                   F8	 	
 DECD     07 [	 	 	 	DB	7 DUP(0),1FH,18H	 	;03CD 00 00 00 00 00 00 00 1F 18
                00	 	
                    ]	 	
                   1F 18	
 DED6     02 [	 	 	 	DB	2 DUP(18H),8 DUP(0FFH),0	;03D6 18 18 FF FF FF FF FF FF FF FF 00
                18	 	
                    ]	 	
          08 [	 	 	
                FF	 	
                    ]	 	
                   00	 	
 DEE1     03 [	 	 	 	DB	3 DUP(0),4 DUP(0FFH),0F0H	;03E1 00 00 00 FF FF FF FF F0
                00	 	
                    ]	 	
          04 [	 	 	
                FF	 	
                    ]	 	
                   F0	 	
 DEE9     07 [	 	 	 	DB	7 DUP(0F0H),8 DUP(0FH),0FFH	;03E9 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F FF
                F0	 	
                    ]	 	
          08 [	 	 	
                0F	 	
                    ]	 	
                   FF	 	
 DEF9     03 [	 	 	 	DB	3 DUP(0FFH),6 DUP(0),76H	;03F9 FF FF FF 00 00 00 00 00 00 76
                FF	 	
                    ]	 	
          06 [	 	 	
                00	 	
                    ]	 	
                   76	 	
 DF03  DC C8 DC 76 00	 	 	DB	0DCH,0C8H,0DCH,76H,0	 	;0403 DC C8 DC 76 00
 DF08  00 78 CC F8 CC	 	 	DB	0,78H,0CCH,0F8H,0CCH	 	;0408 00 78 CC F8 CC
 DF0D  F8 02 [	 	 	 	DB	0F8H,2 DUP(0C0H),0	 	;040D F8 C0 C0 00
                C0	 	
                    ]	 	
                   00	 	
 DF11  FC 04 [	 	 	 	DB	0FCH,0CCH,4 DUP(0C0H),0 	;0411 FC CC C0 C0 C0 C0 00
                C0	 	
                    ]	 	
                   00	 	
 DF18  00 05 [	 	 	 	DB	0,0FEH,5 DUP(6CH),0	 	;0418 00 FE 6C 6C 6C 6C 6C 00
                6C	 	
                    ]	 	
                   00	 	
 DF20  FC CC 60 30 60	 	 	DB	0FCH,0CCH,60H,30H,60H	 	;0420 FC CC 60 30 60
 DF25  CC 03 [	 	 	 	DB	0CCH,0FCH,3 DUP(0),7EH	 	;0425 CC FC 00 00 00 7E
                00	 	
                    ]	 	
                   7E	 	
 DF2B     03 [	 	 	 	DB	3 DUP(0D8H),70H,0	 	;042B D8 D8 D8 70 00
                D8	 	
                    ]	 	
                   70 00	
 DF30  00 04 [	 	 	 	DB	0,4 DUP(66H),7CH	 	;0430 00 66 66 66 66 7C
                66	 	
                    ]	 	
                   7C	 	
 DF36  60 C0 00 76 DC	 	 	DB	60H,0C0H,0,76H,0DCH	 	;0436 60 C0 00 76 DC
 DF3B     04 [	 	 	 	DB	4 DUP(18H),0,0FCH	 	;043B 18 18 18 18 00 FC
                18	 	
                    ]	 	
                   00 FC	
 DF41  30 02 [	 	 	 	DB	30H,78H,2 DUP(0CCH),78H 	;0441 30 78 CC CC 78
                CC	 	
                    ]	 	
                   78	 	
 DF46  30 FC 38 6C C6	 	 	DB	30H,0FCH,38H,6CH,0C6H	 	;0446 30 FC 38 6C C6
 DF4B  FE C6 6C 38 00	 	 	DB	0FEH,0C6H,6CH,38H,0	 	;044B FE C6 6C 38 00
 DF50  38 02 [	 	 	 	DB	38H,6CH,2 DUP(0C6H),6CH 	;0450 38 6C C6 C6 6C
                C6	 	
                    ]	 	
                   6C	 	
 DF55  6C EE 00 1C 30	 	 	DB	6CH,0EEH,0,1CH,30H	 	;0455 6C EE 00 1C 30
 DF5A  18 02 [	 	 	 	DB	18H,7CH,2 DUP(0CCH),78H 	;045A 18 7C CC CC 78
                CC	 	
                    ]	 	
                   78	 	
 DF5F     03 [	 	 	 	DB	3 DUP(0),7EH,0DBH	 	;045F 00 00 00 7E DB
                00	 	
                    ]	 	
                   7E DB	
 DF64  DB 02 [	 	 	 	DB	0DBH,7EH,2 DUP(0),6	 	;0464 DB 7E 00 00 06
                00	 	
                    ]	 	
                   06	 	
 DF69  0C 02 [	 	 	 	DB	0CH,7EH,2 DUP(0DBH),7EH 	;0469 0C 7E DB DB 7E
                DB	 	
                    ]	 	
                   7E	 	
 DF6E  60 C0 38 60 C0	 	 	DB	60H,0C0H,38H,60H,0C0H	 	;046E 60 C0 38 60 C0
 DF73  F8 C0 60 38 00	 	 	DB	0F8H,0C0H,60H,38H,0	 	;0473 F8 C0 60 38 00
 DF78  78 06 [	 	 	 	DB	78H,6 DUP(0CCH),0	 	;0478 78 CC CC CC CC CC CC 00
                CC	 	
                    ]	 	
                   00	 	
 DF80  00 FC 00 FC 00	 	 	DB	0,0FCH,0,0FCH,0 	 	;0480 00 FC 00 FC 00
 DF85  FC 02 [	 	 	 	DB	0FCH,2 DUP(0),30H	 	;0485 FC 00 00 30
                00	 	
                    ]	 	
                   30	 	
 DF89  30 02 [	 	 	 	DB	30H,0FCH,2 DUP(30H),0	 	;0489 30 FC 30 30 00
                30	 	
                    ]	 	
                   00	 	
 DF8E  FC 00 60 30 18	 	 	DB	0FCH,0,60H,30H,18H	 	;048E FC 00 60 30 18
 DF93  30 60 00 FC 00	 	 	DB	30H,60H,0,0FCH,0	 	;0493 30 60 00 FC 00
 DF98  18 30 60 30 18	 	 	DB	18H,30H,60H,30H,18H	 	;0498 18 30 60 30 18
 DF9D  00 FC 00 0E 1B	 	 	DB	0,0FCH,0,0EH,1BH	 	;049D 00 FC 00 0E 1B
 DFA2  1B 0A [	 	 	 	DB	1BH,0AH DUP(18H),0D8H	 	;04A2 1B 18 18 18 18 18 18 18 18 18 18 D8
                18	 	
                    ]	 	
                   D8	 	
 DFAE  D8 02 [	 	 	 	DB	0D8H,70H,2 DUP(30H),0	 	;04AE D8 70 30 30 00
                30	 	
                    ]	 	
                   00	 	
 DFB3  FC 02 [	 	 	 	DB	0FCH,0,2 DUP(30H),0	 	;04B3 FC 00 30 30 00
                30	 	
                    ]	 	
                   00	 	
 DFB8  00 76 DC 00 76	 	 	DB	0,76H,0DCH,0,76H	 	;04B8 00 76 DC 00 76
 DFBD  DC 02 [	 	 	 	DB	0DCH,2 DUP(0),38H	 	;04BD DC 00 00 38
                00	 	
                    ]	 	
                   38	 	
 DFC1     02 [	 	 	 	DB	2 DUP(6CH),38H,0	 	;04C1 6C 6C 38 00
                6C	 	
                    ]	 	
                   38 00	
 DFC5     06 [	 	 	 	DB	6 DUP(0),2 DUP(18H),0	 	;04C5 00 00 00 00 00 00 18 18 00
                00	 	
                    ]	 	
          02 [	 	 	
                18	 	
                    ]	 	
                   00	 	
 DFCE     06 [	 	 	 	DB	6 DUP(0),18H,0	 	 	;04CE 00 00 00 00 00 00 18 00
                00	 	
                    ]	 	
                   18 00	
 DFD6     02 [	 	 	 	DB	2 DUP(0),0FH,0CH	 	;04D6 00 00 0F 0C
                00	 	
                    ]	 	
                   0F 0C	
 DFDA     02 [	 	 	 	DB	2 DUP(0CH),0ECH,6CH	 	;04DA 0C 0C EC 6C
                0C	 	
                    ]	 	
                   EC 6C	
 DFDE  3C 04 [8	 	 	 	DB	3CH,1CH,78H,4 DUP(6CH),0	;04DE 3C 1C 78 6C 6C 6C 6C 00
                6C	 	
                    ]	 	
                   00	 	
 DFE6     02 [	 	 	 	DB	2 DUP(0),70H,18H	 	;04E6 00 00 70 18
                00	 	
                    ]	 	
                   70 18	
 DFEA  30 05 [8	 	 	 	DB	30H,60H,78H,5 DUP(0),3CH	;04EA 30 60 78 00 00 00 00 00 3C
                00	 	
                    ]	 	
                   3C	 	
 DFF3     03 [	 	 	 	DB	3 DUP(3CH),0AH DUP(0)	 	;04F3 3C 3C 3C 00 00 00 00 00 00 00 00 00 00
                3C	 	
                    ]	 	
          0A [	 	 	
                00	 	
                    ]	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	
 E000	 	 	 	 	org	0e000h
 	 	 	 	
 E000     16 [	 	 	 	db	16h dup(?) 
                ??	 	
                    ]	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	;____________________
 	 	 	 	;  Сброс системы - фаза 1
 	 	 	 	;____________________
 	 	 	 	;_____________________
 	 	 	 	;  Проверка 16К памяти
 	 	 	 	;_____________________
 E016  E0D9 R	 	 	c1	dw	c11	 	;адрес возврата
 E018  D003 R	 	 	caw	dw	ca3
 	 	 	 	
 	 	 	 	
 E05B	 	 	 	 	org	0e05bh
 	 	 	 	
 	 	 	 	
 	 	 	 	;___________________
 	 	 	 	;  ТЕСТ.01
 	 	 	 	;	Тест процессора 8086. Осуществляет проверку регистра
 	 	 	 	;	признаков, команд перехода и считывания-записи
 	 	 	 	;	общих и сегментных регистров.
 	 	 	 	;_____________________________________
 E05B	 	 	 	reset	label	near
 E05B  FA	 	 	start:	cli	 	 	; сброс признака разрешения прерывания
 E05C  B4 D5	 	 	 	mov	ah,0d5h 	;уст признаки SF,CF,ZF,AF
 E05E  9E	 	 	 	sahf
 E05F  73 4E	 	 	 	jnc	err01	 	;CF=0,в программу ошибок
 E061  75 4C	 	 	 	jnz	err01	 	;ZF=0,в программу ошибок
 E063  7B 4A	 	 	 	jnp	err01	 	;PF=0,в программу ошибок
 E065  79 48	 	 	 	jns	err01	 	;SF=0,в программу ошибок
 E067  9F	 	 	 	lahf	 	 	;загрузить признаки в AH
 E068  B1 05	 	 	 	mov	cl,5	 	;загрузить счетчик
 E06A  D2 EC	 	 	 	shr	ah,cl	 	;выделить бит переноса
 E06C  73 41	 	 	 	jnc	err01	 	;признак AF=0
 E06E  B0 40	 	 	 	mov	al,40h	 	;уст признак переполнения
 E070  D0 E0	 	 	 	shl	al,1	 	;уст для контроля
 E072  71 3B	 	 	 	jno	err01	 	;признак OF не уст
 E074  32 E4	 	 	 	xor	ah,ah	 	;уст AH=0
 E076  9E	 	 	 	sahf	 	 	;уст в исходное состояние SF,CF,ZF,PF
 E077  72 36	 	 	 	jc	err01	 	;признак CF=1
 E079  74 34	 	 	 	jz	err01	 	;признак ZF=1
 E07B  78 32	 	 	 	js	err01	 	;признак SF=1
 E07D  7A 30	 	 	 	jp	err01	 	;признак PF=1
 E07F  9F	 	 	 	lahf	 	 	;загрузить признаки в AH
 E080  B1 05	 	 	 	mov	cl,5	 	;загрузить счетчик
 E082  D2 EC	 	 	 	shr	ah,cl	 	;выделить бит переноса
 E084  72 29	 	 	 	jc	err01	 	;признак IF=1
 E086  D0 E4	 	 	 	shl	ah,1	 	;контроль, что OF сброшен
 E088  70 25	 	 	 	jo	err01
 E08A  B8 FFFF	 	 	 	mov	ax,0ffffh	;уст эталона в AX
 E08D  F9	 	 	 	stc
 E08E  8E D8	 	 	c8:	mov	ds,ax	 	;запись во все регистры
 E090  8C DB	 	 	 	mov	bx,ds
 E092  8E C3	 	 	 	mov	es,bx
 E094  8C C1	 	 	 	mov	cx,es
 E096  8E D1	 	 	 	mov	ss,cx
 E098  8C D2	 	 	 	mov	dx,ss
 E09A  8B E2	 	 	 	mov	sp,dx
 E09C  8B EC	 	 	 	mov	bp,sp
 E09E  8B F5	 	 	 	mov	si,bp
 E0A0  8B FE	 	 	 	mov	di,si
 E0A2  73 07	 	 	 	jnc	c9
 E0A4  33 C7	 	 	 	xor	ax,di	 	;проверка всех регистров
 	 	 	 	 	 	 	 	;эталонами "FFFF", "0000"
 E0A6  75 07	 	 	 	jnz	err01
 E0A8  F8	 	 	 	clc
 E0A9  73 E3	 	 	 	jnc	c8
 E0AB	 	 	 	c9:
 E0AB  0B C7	 	 	 	or	ax,di	 	;нулевым шаблоном все регистры проверены ?
 E0AD  74 02	 	 	 	jz	c10	 	;ДА - переход к следующему тесту
 E0AF  EB AA	 	 	err01:	jmp   short  start
 	 	 	 	;_______________________
 	 	 	 	; ТЕСТ.02
 	 	 	 	;_______________________
 E0B1	 	 	 	c10:
 E0B1  B0 00	 	 	 	mov	al,0	 	;запретить прерывaния NMI
 E0B3  E6 A0	 	 	 	out	0a0h,al
 E0B5  E6 83	 	 	 	out	83h,al	 	;инициализация регистрa страниц ПДП
 E0B7  B0 99	 	 	 	mov	al,99h	 	;уст A,C -ввод, B - вывод
 E0B9  E6 63	 	 	       out	cmd_port,al	 	;запись в регистр режима
 	 	 	 	 	 	 	 	 	;трехканального порта
 E0BB  B0 FC	 	 	 	mov	al,0fch 	 	;блокировка контроля по четности
 E0BD  E6 61	 	 	 	out	port_b,al
 E0BF  2A C0	 	 	 	sub	al,al
 E0C1  BA 03D8	 	 	 	mov	dx,3d8h
 E0C4  EE	 	 	 	out	dx,al	 	;блокировка цветного ЭЛИ
 E0C5  FE C0	 	 	 	inc	al
 E0C7  BA 03B8	 	 	 	mov	dx,3b8h
 E0CA  EE	 	 	 	out	dx,al	 	;блокировка черно-белого ЭЛИ
 E0CB  B8 F000	 	 	 	mov	ax,cod	 	;уст сегментного регистра SS
 E0CE  8E D0	 	 	 	mov	ss,ax
 E0D0  BB E000	 	 	 	mov	bx,0e000h	 	;уст начального адреса памяти
 E0D3  BC E016 R	 	 	mov	sp,offset c1	 	;уст адреса возврата
 E0D6  EB 03 90	 	 	 	jmp	ros
 E0D9  75 D4	 	 	c11:	jne	err01
 	 	 	 	;------------------------
 	 	 	 	;  ТЕСТ.03
 	 	 	 	;   Осуществляет проверку, инициализацию и запуск ПДП и
 	 	 	 	; таймера 1 для регенерации памяти
 	 	 	 	;_________________________
 	 	 	 	;   Блокировка контроллера ПДП
 	 	 	 	
 E0DB  B0 04	 	 	ros:	mov	al,04
 E0DD  E6 08	 	 	 	out	dma08,al
 	 	 	 	
 	 	 	 	;   Проверка правильности функционирования
 	 	 	 	;   таймера 1
 	 	 	 	
 E0DF  B0 54	 	 	 	mov	al,54h	 	;выбор таймера 1,LSB, режим 2
 E0E1  E6 43	 	 	 	out	timer+3,al
 E0E3  2B C9	 	 	 	sub	cx,cx
 E0E5  8A D9	 	 	 	mov	bl,cl
 E0E7  8A C1	 	 	 	mov	al,cl	 	;уст начального счетчика таймера в 0
 E0E9  E6 41	 	 	 	out	timer+1,al
 E0EB	 	 	 	c12:
 E0EB  B0 40	 	 	 	mov	al,40h
 E0ED  E6 43	 	 	 	out	timer+3,al
 E0EF  E4 41	 	 	 	in	al,timer+1	;считывание счетчика таймера 1
 E0F1  0A D8	 	 	 	or	bl,al	 	;все биты таймера включены ?
 E0F3  80 FB FF	 	 	 	cmp	bl,0ffh 	;ДА - сравнение с FF
 E0F6  74 04	 	 	 	je	c13	 	;биты таймера сброшены
 E0F8  E2 F1	 	 	 	loop	c12	 	;биты таймера установлены
 E0FA  EB B3	 	 	 	jmp	short err01	;сбой таймера 1, останов системы
 E0FC	 	 	 	c13:
 E0FC  8A C3	 	 	 	mov	al,bl	 	;уст счетчика таймера 1
 E0FE  2B C9	 	 	 	sub	cx,cx
 E100  E6 41	 	 	 	out	timer+1,al
 E102	 	 	 	c14:	 	;цикл таймера
 E102  B0 40	 	 	 	mov	al,40h
 E104  E6 43	 	 	 	out	timer+3,al
 E106  E4 41	 	 	 	in	al,timer+1	 	;считывание счетчика таймера 1
 E108  22 D8	 	 	 	and	bl,al
 E10A  74 04	 	 	 	jz	c15
 E10C  E2 F4	 	 	 	loop	c14	 	;цикл таймера
 E10E  EB 9F	 	 	 	jmp	short err01
 	 	 	 	
 	 	 	 	;   Инициализация таймера 1
 	 	 	 	
 E110	 	 	 	c15:
 E110  B0 54	 	 	 	mov	al,54h
 E112  E6 43	 	 	 	out	timer+3,al	;запись в регистр режима таймера
 E114  B0 07	 	 	 	mov	al,7	;уст коэффициента деления для регенерации
 E116  E6 41	 	 	 	out	timer+1,al	;запись в счетчик таймера 1
 E118  E6 0D	 	 	 	out	dma+0dh,al	;послать гашение ПДП
 	 	 	 	
 	 	 	 	;   Цикл проверки регистров ПДП
 	 	 	 	
 E11A  B0 FF	 	 	 	mov	al,0ffh 	;запись шаблона FF во все регистры
 E11C  8A D8	 	 	c16:	mov	bl,al	 	;сохранить шаблон для сравнения
 E11E  8A F8	 	 	 	mov	bh,al
 E120  B9 0008	 	 	 	mov	cx,8	 	;уст цикла счетчика
 E123  BA 0000	 	 	 	mov	dx,dma	 	;уст адреса регистра порта ввода/вывода
 E126  EE	 	 	c17:	out	dx,al	 	;запись  шаблона в регистр
 E127  EE	 	 	 	out	dx,al	 	;старшие 16 бит регистра
 E128  B8 0101	 	 	 	mov	ax,0101h	;изменение AX перед считыванием
 E12B  EC	 	 	 	in	al,dx
 E12C  8A E0	 	 	 	mov	ah,al	 	;сохранить младшие 16 бит регистра
 E12E  EC	 	 	 	in	al,dx
 E12F  3B D8	 	 	 	cmp	bx,ax	 	;считан тот же шаблон ?
 E131  74 03	 	 	 	je	c18	 	;ДА - проверка следующего регистра
 E133  E9 E0AF R	 	 	jmp	err01	 	;НЕТ - ошибка
 E136	 	 	 	c18:	 	 	 	;выбор следующего регистра ПДП
 E136  42	 	 	 	inc	dx	 	;установка адреса следующего
 	 	 	 	 	 	 	 	;регистра ПДП
 E137  E2 ED	 	 	 	loop	c17	 	;запись шаблона для следующего регистра
 E139  F6 D0	 	 	 	not	al	 	  ;уст шаблона в 0
 E13B  74 DF	 	 	 	jz	c16
 	 	 	 	
 	 	 	 	;   Инициализация и запуск ПДП
 	 	 	 	
 E13D  B0 FF	 	 	 	mov	al,0ffh 	;уст счетчика 64K для регенерации
 E13F  E6 01	 	 	 	out	dma+1,al
 E141  E6 01	 	 	 	out	dma+1,al
 E143  B0 58	 	 	 	mov	al,058h 	;уст режим ПДП, счетчик 0, считывание
 E145  E6 0B	 	 	 	out	dma+0bh,al	;запись в регистр режима ПДП
 E147  B0 00	 	 	 	mov	al,0	 	;доступность контроллера ПДП
 E149  E6 08	 	 	 	out	dma+8,al	;уст регистр команд ПДП
 E14B  E6 0A	 	 	 	out	dma+10,al	;доступность канала 0 для регенерации
 E14D  B0 41	 	 	 	mov	al,41h	 	;уст режим дла канала 1
 E14F  E6 0B	 	 	 	out	dma+0bh,al
 E151  B0 42	 	 	 	mov	al,42h	 	;уст режим для канала 2
 E153  E6 0B	 	 	 	out	dma+0bh,al
 E155  B0 43	 	 	 	mov	al,43h	 	;уст режим для канала 3
 E157  E6 0B	 	 	 	out	dma+0bh,al
 	 	 	 	;____________________
 	 	 	 	;   ТЕСТ.04
 	 	 	 	;
 	 	 	 	;   Осуществляет считывание-запись эталонов в 16К байт ОЗУ,
 	 	 	 	; тестирование клавиатуры, установку стека, вектора NMI
 	 	 	 	; и вектора режима печати экрана ЭЛИ
 	 	 	 	;___________________
 	 	 	 	;   Определение об'ема памяти
 	 	 	 	;   и заполнение памяти данными
 	 	 	 	
 E159  E9 CFB2 R	 	 	jmp	ca0
 	 	 	 	
 	 	 	 	;____________________
 	 	 	 	;   Инициализация контроллера
 	 	 	 	;   прерываний 8259
 	 	 	 	;____________________
 E15C	 	 	 	c21:
 E15C  B0 13	 	 	 	mov	al,13h	 	;ICW1 - EDGE, SNGL, ICW4
 E15E  E6 20	 	 	 	out	inta00,al
 E160  B0 08	 	 	 	mov	al,8	 	;УСТ ICW2 - прерывание типа 8(8-F)
 E162  E6 21	 	 	 	out	inta01,al
 E164  B0 09	 	 	 	mov	al,9	 	;уст ICW4 - BUFFERD , режим 8086
 E166  E6 21	 	 	 	out	inta01,al
 	 	 	 	
 	 	 	 	;RCgoff:покроем 30h дыру в нестыкующихся BIOS
 	 	 	 	;Это неубранный кусок проверки и загрузки MFG.TEST 2 IBM (см. PC - не XT - BIOSv2)
 	 	 	 	
 E168  2B C0	 	 	        SUB     AX,AX
 E16A  8E D8	 	 	 	MOV     DS,AX	 	;для mov в начало памяти используется DS
 E16C  BF 0500	 	 	 	MOV     DI,0500h	;ds:di<-0:500, это для STOSB ниже
 E16F  BC FFF0	 	 	 	MOV     SP,0FFF0h
 E172  8E D0	 	 	 	MOV     SS,AX           ;ss:sp<-0:fff0, временный стек
 E174  BB 0024	 	 	 	MOV     BX,0024h
 E177  C7 07 E259 R	 	 	MOV     WORD PTR [BX],offset d11    ;уст INT8(IRQ1,клаву) на временный обраб прерывания
 E17B  43	 	 	 	INC     BX
 E17C  43	 	 	 	INC     BX
 E17D  8C 0F	 	 	 	MOV     [BX],CS
 E17F  E8 E5EB R	 	 	CALL    kbd_reset	;сброс клавиатуры и возврат скан-кода в BL, если был
 E182  80 FB 65	 	 	 	CMP     BL,65h          ;код 65h - CTRL-F8.
 E185  75 11	 	 	 	JNZ     c25	 	;не было его? - продолжить системный тест
 	 	 	 	 
 E187  B2 FF	 	 	 	MOV     DL,0FFh	 	;а если было - загрузить с клавиатурного порта 256 байт
 E189  E8 E5F8 R	 	c22:	CALL    sp_test         ;получить очередной скан-код в BL
 E18C  8A C3	 	 	 	MOV     AL,BL
 E18E  AA	 	 	 	STOSB	 	 	;загружаем с адреса 0:500 принятое с порта клавиатуры (это IBM-ский тест)
 E18F  FE CA	 	 	 	DEC     DL
 E191  75 F6	 	 	 	JNZ     c22
 E193  EA 0500 ---- R	 	 	JMP     mfg_test_rtn	;и уходим на загруженный код
 	 	 	 	;RCgoff end
 	 	 	 	
 	 	 	 	
 	 	 	 	;   Установка сегмента стека и SP
 	 	 	 	
 E198	 	 	 	c25:
 E198  B8 ---- R	 	 	mov	ax,stack 	;получить величину стека
 E19B  8E D0	 	 	 	mov	ss,ax	 	;уст стек
 E19D  BC 0100 R	 	 	mov	sp,offset tos	;стек готов
 	 	 	 	
 E1A0  EB 32	 	 	 	jmp	short tst6	;переход к следующему тесту
 	 	 	 	
 E1A2	 	 	 	ros_checksum proc  near
 E1A2  B9 2000	 	 	 	mov	cx,8192 	;число байт для сложения
 E1A5  32 C0	 	 	 	xor	al,al
 E1A7  2E: 02 07	 	c26:	add	al,cs:[bx]
 E1AA  43	 	 	 	inc	bx	 	;указание следующего байта
 E1AB  E2 FA	 	 	 	loop	c26	 	;сложить все байты в модуле ROS
 E1AD  0A C0	 	 	 	or	al,al	 	;сумма = 0 ?
 E1AF  C3	 	 	 	ret
 E1B0	 	 	 	ros_checksum endp
 	 	 	 	;______________________
 	 	 	 	;   Начальный тест надежности
 	 	 	 	;______________________
 	 	 	 	 	assume	cs:code,es:abs0
 	 	 	 	
 	 	 	 	;RCgoff
 	 	 	 	if	cp866
 	 	 	 	;' СБОЙ  ПАРИТЕТА ПАМЯТИ'  (cp866)
 E1B0  20 91 81 8E 89 20	d1	db	20h,91h,81h,8Eh,89h,20h,20h,8Fh,80h,90h,88h,92h	
       20 8F 80 90 88 92	
 E1BC  85 92 80 20 8F 80	 	db	85h,92h,80h,20h,8Fh,80h,8Ch,9Fh,92h,88h	 	
       8C 9F 92 88	 	
 	 	 	 	endif
 	 	 	 	;RCgoff end
 = 0016	 	 	 	d1l	equ	22
 E1C6  70 61 72 69 74 79	d2	db	'parity check 1'
       20 63 68 65 63 6B	
       20 31	 	 	
 = 000E	 	 	 	d2l	equ	0eh
 	 	 	 	;______________________
 	 	 	 	;   ТЕСТ.06
 	 	 	 	;	 Тест контроллера прерываний
 	 	 	 	;	 8259
 	 	 	 	;_______________________
 E1D4	 	 	 	tst6:
 	 	 	 	
 	 	 	 	
 	 	 	 	;   Проверка регистра масок прерываний (IMR)
 	 	 	 	
 E1D4  FA	 	 	 	cli	 	 	;сброс признака разрешения прерываний
 E1D5  B0 00	 	 	 	mov	al,0	 	;уст IMR в 0
 E1D7  E6 21	 	 	 	out	inta01,al
 E1D9  E4 21	 	 	 	in	al,inta01	;считывание IMR
 E1DB  0A C0	 	 	 	or	al,al	 	;IMR=0 ?
 E1DD  75 41	 	 	 	jnz	d6	 	;IMR не 0,в программу ошибок
 E1DF  B0 FF	 	 	 	mov	al,0ffh 	;недоступность прерываний
 E1E1  E6 21	 	 	 	out	inta01,al	;запись в IMR
 E1E3  E4 21	 	 	 	in	al,inta01	;считывание IMR
 E1E5  04 01	 	 	 	add	al,1	 	;все биты IMR установлены ?
 E1E7  75 37	 	 	 	jnz	d6	 	;НЕТ - в программу ошибок
 	 	 	 	
 	 	 	 	
 E1E9  2B C0	 	 	 	sub	ax,ax	 	;уст регистра ES (RC это необязательно, после теста регистров ES=0)
 E1EB  8E C0	 	 	 	mov	es,ax
 	 	 	 	
 	 	 	 	;   Контроль ожидания прерывания
 	 	 	 	
 E1ED  FC	 	 	 	cld	 	 	; уст признак направления
 E1EE  B9 0020	 	 	 	mov	cx,20h	 	;RC все прерывания 00..1F, относящиеся к BIOS
 	 	 	 	;rc 	mov	di,offset int_ptr	; уст адресацию таблицы
 E1F1  33 FF	 	 	 	xor	di,di
 E1F3	 	 	 	d3:
 E1F3  B8 E259 R	 	 	mov	ax,offset d11	; установить адрес процедуры прерываний
 E1F6  AB	 	 	 	stosw
 E1F7  B8 F000	 	 	 	mov	ax,cod	; получить адрес сегмента процедуры
 E1FA  AB	 	 	 	stosw
 	 	 	 	;rc 	add	bx,4	;уст BX для указания следующего значения
 E1FB  E2 F6	 	 	 	loop	d3
 	 	 	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	;   Установка указателя вектора прерывания NMI
 	 	 	 	
 E1FD  26: C7 06 0008 R E266 R	 	mov	es:nmi_ptr,offset nmi_int
 	 	 	 	;rc 	mov	es:nmi_ptr+2,cod
 	 	 	 	
 	 	 	 	
 	 	 	 	;-----уст вектора прерываний 5
 	 	 	 	
 E204  26: C7 06 0014 R FF54 R	 	mov	es:int5_ptr,offset print_screen   ; печать экрана
 	 	 	 	;rc 	mov	es:int5_ptr+2,cod
 	 	 	 	
 E20B  90	 	 	 	nop
 	 	 	 	
 E20C  90	 	 	 	nop
 E20D  90	 	 	 	nop
 E20E  90	 	 	 	nop
 E20F  90	 	 	 	nop
 E210  90	 	 	 	nop
 E211  90	 	 	 	nop
 E212  90	 	 	 	nop
 	 	 	 	
 	 	 	 	
 	 	 	 	;   Прерывания размаскированы
 	 	 	 	
 E213  32 E4	 	 	 	xor	ah,ah	 	;очистить регистр AH
 E215  FB	 	 	 	sti	 	 	; установка признака разрешения прерывания
 E216  2B C9	 	 	 	sub	cx,cx	 	; ожидание 1 сек любого прерывания,
 E218  E2 FE	 	 	d4:	loop	d4	 	; которое может произойти
 E21A  E2 FE	 	 	d5:	loop	d5
 E21C  0A E4	 	 	 	or	ah,ah	 	; прерывание возникло ?
 E21E  74 08	 	 	 	jz	d7	 	; нет - к следующему тесту
 E220  BA 0101	 	 	d6:	mov	dx,101h 	; уст длительности звукового сигнала
 E223  E8 E5A0 R	 	 	call	err_beep	; идти в программу звукового сигнала
 E226  FA	 	 	 	cli
 E227  F4	 	 	 	hlt	 	 	; останов системы
 	 	 	 	;__________________
 	 	 	 	;   ТЕСТ.07
 	 	 	 	;	 Проверка таймера 8253
 	 	 	 	;___________________
 E228	 	 	 	d7:
 E228  B4 00	 	 	 	mov	ah,0	 	; сброс признака прерывания таймера
 E22A  32 ED	 	 	 	xor	ch,ch	 	; очистить регистр CH
 E22C  B0 FE	 	 	 	mov	al,0feh   ; маскировать все прерывания, кроме LVL 0
 E22E  E6 21	 	 	 	out	inta01,al	; запись IMR
 E230  B0 10	 	 	 	mov	al,00010000b	; выбрать TIM 0, LSD, режим 0, BINARY
 E232  E6 43	 	 	 	out	tim_ctl,al  ;записать регистр режима управления таймера
 E234  B1 16	 	 	 	mov	cl,16h	 	; уст счетчик программного цикла
 E236  8A C1	 	 	 	mov	al,cl	 	; установить счетчик таймера 0
 E238  E6 40	 	 	 	out	timero,al	; записать счетчик таймера 0
 E23A  F6 C4 FF	 	 	d8:	test	ah,0ffh 	; прерывание таймера 0 произошло ?
 E23D  75 04	 	 	 	jnz	d9	 	; да - таймер считал медленно
 E23F  E2 F9	 	 	 	loop	d8	 	; ожидание прерывания определенное время
 E241  EB DD	 	 	 	jmp	short d6   ;прерывание таймера 0 не произошло - ошибка
 E243  B1 12	 	 	d9:	mov	cl,18	 	; уст счетчик программного цикла
 E245  B0 FF	 	 	 	mov	al,0ffh 	; записать счетчик таймера 0
 E247  E6 40	 	 	 	out	timero,al
 E249  B4 00	 	 	 	mov	ah,0	 	; сброс признака,полученного прерывания
 E24B  B0 FE	 	 	 	mov	al,0feh 	; недоступность прерываний таймера 0
 E24D  E6 21	 	 	 	out	inta01,al
 E24F  F6 C4 FF	 	 	d10:	test	ah,0ffh 	; прерывание таймера 0 произошло ?
 E252  75 CC	 	 	 	jnz	d6	 	; да - таймер считает быстро
 E254  E2 F9	 	 	 	loop	d10	 	; ожидание прерывания определенное время
 E256  EB 3F 90	 	 	 	jmp	tst8	 	; переход к следующему тесту
 	 	 	 	;____________________
 	 	 	 	;   Программа обслуживания
 	 	 	 	;   временного прерывания
 	 	 	 	;____________________
 E259	 	 	 	d11	proc	near
 E259  B4 01	 	 	 	mov	ah,1
 E25B  50	 	 	 	push	ax	 	; хранить регистр AX
 E25C  B0 FF	 	 	 	mov	al,0ffh 	; размаскировать все прерывания
 E25E  E6 21	 	 	 	out	inta01,al
 E260  B0 20	 	 	 	mov	al,eoi
 E262  E6 20	 	 	 	out	inta00,al
 E264  58	 	 	 	pop	ax	 	; восстановить регистр AX
 E265  CF	 	 	 	iret
 E266	 	 	 	d11	endp
 	 	 	 	
 E266	 	 	 	nmi_int proc	near
 E266  50	 	 	 	push	ax	 	; хранить регистр AX
 E267  E4 62	 	 	 	in	al,port_c
 E269  A8 40	 	 	 	test	al,40h	 	; ошибка паритета при вводе/выводе ?
 E26B  74 08	 	 	 	jz	d12	 	; да - признак сбрасывается в 0
 E26D  BE E1B0 R	 	 	mov	si,offset d1	; адрес поля сообщения об ошибке
 E270  B9 0016	 	 	 	mov	cx,d1l	 	; длина поля сообщения об ошибке
 E273  EB 0A	 	 	 	jmp	short d13	; отобразить ошибку на дисплее
 E275	 	 	 	d12:
 E275  A8 80	 	 	 	test	al,80h
 E277  74 10	 	 	 	jz	d14
 E279  BE E1C6 R	 	 	mov	si,offset d2	; адрес поля сообщения об ошибке
 E27C  B9 000E	 	 	 	mov	cx,d2l	 	; длина поля сообщения об ошибке
 E27F	 	 	 	d13:
 E27F  B8 0000	 	 	 	mov	ax,0	 	; инициировать и установить режим ЭЛИ
 E282  CD 10	 	 	 	int	10h	 	; вызвать процедуру VIDEO_IO
 E284  E8 E615 R	 	 	call	p_msg	 	; распечатать ошибку
 E287  FA	 	 	 	cli
 E288  F4	 	 	 	hlt	 	 	; останов системы
 E289	 	 	 	d14:
 E289  58	 	 	 	pop	ax	 	; восстановить AX
 E28A  CF	 	 	 	iret
 E28B	 	 	 	nmi_int endp
 	 	 	 	;____________________
 	 	 	 	;   Начальный тест надежности
 	 	 	 	;____________________
 	 	 	 	 	assume	cs:code,ds:data
 	 	 	 	
 E28B  20 32 30 31	 	e1	db	' 201'
 = 0004	 	 	 	e1l	equ	04h
 E28F  20 28 30 29	 	e1n	db	' (0)'
 E293  20 28 31 29	 	 	db	' (1)'
 = 0004	 	 	 	e1nl	equ	4
 	 	 	 	
 	 	 	 	;   Выполнение программы БСУВВ,
 	 	 	 	;   генерирующей вектора прерываний
 	 	 	 	
 E297	 	 	 	tst8:
 E297  FC	 	 	 	cld	 	 	; установить признак направления вперед
 E298  BF 0040 R	 	 	mov	di,offset video_int   ; уст адреса области прерываний
 E29B  0E	 	 	 	push	cs
 E29C  1F	 	 	 	pop	ds	 	; уст адреса таблицы векторов
 E29D  BE CB92 R	 	 	mov	si,offset vector_table+10h  ; смещение VECTOR_TABLE+2*8 (rc начало прогр прерыв)
 E2A0  B9 0010	 	 	 	mov	cx,10h
 E2A3  A5	 	 	e1a:	movsw	 	 	; передать таблицу векторов в память
 E2A4  47	 	 	 	inc	di
 E2A5  47	 	 	 	inc	di
 E2A6  E2 FB	 	 	 	loop	e1a
 	 	 	 	
 	 	 	 	;   Установка таймера 0 в режим 3
 	 	 	 	
 E2A8  B0 FF	 	 	 	mov	al,0ffh
 E2AA  E6 21	 	 	 	out	inta01,al
 E2AC  B0 36	 	 	 	mov	al,36h	 	; выбор счетчика 0,считывания-за-
 	 	 	 	; писи младшего,затем старшего байта счетчика,уст режима 3
 E2AE  E6 43	 	 	 	out	timer+3,al	; запись режима таймера
 E2B0  B0 C7	 	 	 	mov	al,0c7h
 E2B2  E6 40	 	 	 	out	timer,al	; записать младшую часть счетчика
 E2B4  B0 DB	 	 	 	mov	al,0dbh
 E2B6  E6 40	 	 	 	out	timer,al	; записать старшую часть счетчика
 	 	 	 	
 	 	 	 	
 	 	 	 	 	assume	ds:data
 E2B8  B8 ---- R	 	 	mov	ax,data	 	; DS - сегмент данных
 E2BB  8E D8	 	 	 	mov	ds,ax
 E2BD	 	 	 	e3:
 E2BD  81 3E 0072 R 1234	 	cmp	reset_flag,1234h
 E2C3  74 03	 	 	 	jz	e3a
 E2C5  E8 F866 R	 	 	call	bct	;загрузка знакогенератора Ч/Б ЭЛИ
 	 	 	 	;_____________________
 	 	 	 	;   ТЕСТ.08
 	 	 	 	;	 Инициализация и запуск
 	 	 	 	;	 контроллера ЭЛИ
 	 	 	 	;______________________
 E2C8  E4 60	 	 	e3a:	in	al,port_a	; считывание состояния переключателей
 E2CA  B4 00	 	 	 	mov	ah,0
 E2CC  A3 0010 R	 	 	mov	equip_flag,ax	; запомнить считанное состояние пере-
 	 	 	 	 	 	 	 	; ключателей
 E2CF  24 30	 	 	 	and	al,30h	 	; выделить переключатели ЭЛИ
 E2D1  75 03	 	 	 	jnz	e7	 	; переключатели ЭЛИ установлены в 0 ?
 E2D3  E9 E36E R	 	 	jmp	e19	 	; пропустить тест ЭЛИ
 E2D6	 	 	 	e7:
 E2D6  86 E0	 	 	 	xchg	ah,al
 E2D8  80 FC 30	 	 	 	cmp	ah,30h	 	; адаптер ч/б ?
 E2DB  74 09	 	 	 	je	e8	 	; да - установить режим для ч/б адаптера
 E2DD  FE C0	 	 	 	inc	al	 ; уст цветной режим для цветного адаптера
 E2DF  80 FC 20	 	 	 	cmp	ah,20h	 	; режим 80х25 установлен ?
 E2E2  75 02	 	 	 	jne	e8	 	; нет - уст режим для 40х25
 E2E4  B0 03	 	 	 	mov	al,3	 	; установить режим 80х25
 E2E6	 	 	 	e8:
 E2E6  50	 	 	 	push	ax	 	; хранить режим ЭЛИ в стеке
 E2E7  2A E4	 	 	 	sub	ah,ah	 	;
 E2E9  CD 10	 	 	 	int	10h
 E2EB  58	 	 	 	pop	ax
 E2EC  50	 	 	 	push	ax
 E2ED  BB B000	 	 	 	mov	bx,0b000h
 E2F0  BA 03B8	 	 	 	mov	dx,3b8h 	; регистр режима для ч/б
 E2F3  B9 0800	 	 	 	mov	cx,2048 	; счетчик байт для ч/б адаптера
 E2F6  B0 01	 	 	 	mov	al,1	 	; уст режим для ч/б адаптера
 E2F8  80 FC 30	 	 	 	cmp	ah,30h	 	; ч/б адаптер ЭЛИ подключен ?
 E2FB  74 0B	 	 	 	je	e9	 	; переход к проверке буфера ЭЛИ
 E2FD  BB B800	 	 	 	mov	bx,0b800h
 E300  BA 03D8	 	 	 	mov	dx,3d8h 	; регистр режима для цветного адаптера
 E303  B9 2000	 	 	 	mov	cx,2000h
 E306  FE C8	 	 	 	dec	al	 	; уст режим в 0 для цветного адаптера
 	 	 	 	;
 	 	 	 	;	Проверка буфера ЭЛИ
 	 	 	 	;
 E308	 	 	 	e9:
 E308  EE	 	 	 	out	dx,al	 	; блокировка ЭЛИ для цветного адаптера
 E309  8E C3	 	 	 	mov	es,bx
 E30B  B8 ---- R	 	 	mov	ax,data	 	; DS - сегмент данных
 E30E  8E D8	 	 	 	mov	ds,ax
 E310  81 3E 0072 R 1234	 	cmp	reset_flag,1234h
 E316  74 0D	 	 	 	je	e10
 E318  8E DB	 	 	 	mov	ds,bx	 	;
 E31A  E8 D460 R	 	 	call	stgtst_cnt	; переход к проверке памяти
 E31D  74 06	 	 	 	je	e10
 E31F  BA 0102	 	 	 	mov	dx,102h
 E322  E8 E5A0 R	 	 	call	err_beep
 	 	 	 	
 	 	 	 	;___________________________
 	 	 	 	;
 	 	 	 	;   ТЕСТ.09
 	 	 	 	;	 Осуществляет проверку формирования строк в буфере ЭЛИ
 	 	 	 	;_________________________
 E325	 	 	 	e10:
 E325  58	 	 	 	pop	ax   ; получить считанные переключатели ЭЛИ в AH
 E326  50	 	 	 	push	ax	 	; сохранить их
 E327  B4 00	 	 	 	mov	ah,0
 E329  CD 10	 	 	 	int	10h
 E32B  B8 7020	 	 	 	mov	ax,7020h	; запись пробелов в режиме реверса
 E32E  2B FF	 	 	 	sub	di,di	 	; установка начала области
 E330  B9 0028	 	 	 	mov	cx,40	 	;
 E333  FC	 	 	 	cld	    ; установить признак направления для уменьшения
 E334  F3/ AB	 	 	 	rep	stosw	 	; записать в память
 	 	 	 	;______________________
 	 	 	 	;    ТЕСТ.10
 	 	 	 	;	  Осуществляет проверку линий интерфейса ЭЛИ
 	 	 	 	;______________________
 E336  58	 	 	 	pop	ax	 	; получить считанные переключатели
 E337  50	 	 	 	push	ax	 	; сохранить их
 E338  80 FC 30	 	 	 	cmp	ah,30h	 	; ч/б адаптер подключен ?
 E33B  BA 03BA	 	 	 	mov	dx,03bah	; уст адрес порта состояния ч/б дисплея
 E33E  74 03	 	 	 	je	e11	 	; да - переход к следующей строке
 E340  BA 03DA	 	 	 	mov	dx,03dah	; цветной адаптер подключен
 	 	 	 	;
 	 	 	 	;	Тест строчной развертки
 	 	 	 	;
 E343	 	 	 	e11:
 E343  B4 08	 	 	 	mov	ah,8
 E345	 	 	 	e12:
 E345  2B C9	 	 	 	sub	cx,cx
 E347  EC	 	 	e13:	in	al,dx	    ;считывание порта состояния контроллера СМ607
 E348  22 C4	 	 	 	and	al,ah	 	; проверка строки
 E34A  75 04	 	 	 	jnz	e14
 E34C  E2 F9	 	 	 	loop	e13
 E34E  EB 13	 	 	 	jmp	short e17	; переход к сообщению об ошибке
 E350  2B C9	 	 	e14:	sub	cx,cx
 E352  EC	 	 	e15:	in	al,dx	  ;считывание порта состояния контроллера СМ607
 E353  22 C4	 	 	 	and	al,ah
 E355  74 04	 	 	 	jz	e16
 E357  E2 F9	 	 	 	loop	e15
 E359  EB 08	 	 	 	jmp	short e17
 	 	 	 	;
 	 	 	 	;	Следующий строчный импульс
 	 	 	 	;
 E35B	 	 	 	e16:
 E35B  B1 03	 	 	 	mov	cl,3	 	; получить следующий бит для контроля
 E35D  D2 EC	 	 	 	shr	ah,cl
 E35F  75 E4	 	 	 	jnz	e12
 E361  EB 06	 	 	 	jmp	short e18	; отобразить курсор на экране
 	 	 	 	;
 	 	 	 	;	Сообщение об ошибке конттроллера СМ607
 	 	 	 	;
 E363	 	 	 	e17:
 E363  BA 0103	 	 	 	mov	dx,103h
 E366  E8 E5A0 R	 	 	call	err_beep
 	 	 	 	;
 	 	 	 	;	Отображение курсора на экране
 	 	 	 	;
 E369	 	 	 	e18:
 E369  58	 	 	 	pop	ax	 	; получить считанные переключатели в AH
 E36A  B4 00	 	 	 	mov	ah,0	 	; установить режим
 E36C  CD 10	 	 	 	int	10h
 	 	 	 	;______________________
 	 	 	 	;   ТЕСТ.11
 	 	 	 	;	 Дополнительный тест памяти
 	 	 	 	;______________________
 	 	 	 	 	assume	ds:data
 E36E	 	 	 	e19:
 E36E  B8 ---- R	 	 	mov	ax,data
 E371  8E D8	 	 	 	mov	ds,ax
 E373  81 3E 0072 R 1234	 	cmp	reset_flag,1234h
 E379  74 40	 	 	 	je	e22
 	 	 	 	
 	 	 	 	;   Проверка любой действительной памяти
 	 	 	 	;   на считывание и запись
 	 	 	 	
 E37B  E9 D0EB R	 	 	jmp	e190
 	 	 	 	
 	 	 	 	;   Печать адреса и эталона, если
 	 	 	 	;   произошла ошибка данных
 	 	 	 	;RCgoff
 	 	 	 	;	org	0e367h
 	 	 	 	;	org	0e385h	 	;смещение выставлено по анализу перехода в прошивке реальной машины
 	 	 	 	;внимание! ниже метка e22, на которую идет по jmp переход при ошибке из e190. Если двигать код, то менять и ПЗУ
 	 	 	 	;14-15, т.к. e190 находится в Dxxxh
 	 	 	 	;RCgoff end
 	 	 	 	
 	 	 	 	
 E37E	 	 	 	osh:	 	 	 	;rc печать кода ошибки теста ОЗУ
 E37E  8A E8	 	 	 	mov	ch,al	 	;
 E380  8A C6	 	 	 	mov	al,dh	 	; получить измененный адрес
 E382  B1 04	 	 	 	mov	cl,4
 E384  D2 E8	 	 	 	shr	al,cl	 	;
 E386  E8 E3BD R	 	 	call	xlat_print_cod	; преобразование и печать кода
 E389  8A C6	 	 	 	mov	al,dh
 E38B  24 0F	 	 	 	and	al,0fh
 E38D  E8 E3BD R	 	 	call	xlat_print_cod	; преобразование и печать кода
 E390  8A C5	 	 	 	mov	al,ch	 	; получить следующий шаблон
 E392  B1 04	 	 	 	mov	cl,4
 E394  D2 E8	 	 	 	shr	al,cl
 E396  E8 E3BD R	 	 	call	xlat_print_cod	; преобразование и печать кода
 E399  8A C5	 	 	 	mov	al,ch	 	;
 E39B  24 0F	 	 	 	and	al,0fh	 	;
 E39D  E8 E3BD R	 	 	call	xlat_print_cod	; преобразование и печать кода
 E3A0  81 E6 0001	 	 	and	si,0001
 E3A4  D1 E6	 	 	 	shl	si,1
 E3A6  D1 E6	 	 	 	shl	si,1
 E3A8  81 C6 E28F R	 	 	add	si,offset e1n
 E3AC  B9 0004	 	 	 	mov	cx,e1nl
 E3AF  E8 D399 R	 	 	call	pmsg
 E3B2  BE E28B R	 	 	mov	si,offset e1	; установить адрес поля сообщения
 	 	 	 	 	 	 	 	; об ошибке
 E3B5  B9 0004	 	 	 	mov	cx,e1l	 	; получить счетчик поля сообщения об ошибке
 E3B8  E8 E615 R	 	 	call	p_msg	 	; печать ошибки
 E3BB	 	 	 	e22:
 E3BB  EB 2B	 	 	 	jmp	short tst12 	; переход к следующему тесту
 	 	 	 	
 	 	 	 	;_____________________
 	 	 	 	;
 	 	 	 	;   Процедура вывода на экран сообщения об ошибке в коде ASCII
 	 	 	 	;
 	 	 	 	;_______________________
 	 	 	 	
 E3BD	 	 	 	xlat_print_cod proc near
 E3BD  1E	 	 	 	push	ds	 	; сохранить DS
 E3BE  0E	 	 	 	push	cs
 E3BF  1F	 	 	 	pop	ds
 E3C0  BB E3D8 R	 	 	mov	bx,offset f4e	; адрес таблицы кодов ASCII
 E3C3  D7	 	 	 	xlatb
 E3C4  B4 0E	 	 	 	mov	ah,14
 E3C6  B7 00	 	 	 	mov	bh,0
 E3C8  CD 10	 	 	 	int	10h
 E3CA  1F	 	 	 	pop	ds
 E3CB  C3	 	 	 	ret
 E3CC	 	 	 	xlat_print_cod endp
 	 	 	 	;______________________
 	 	 	 	;   Сброс системы - фаза 4
 	 	 	 	;______________________
 	 	 	 	;
 	 	 	 	;   Коды сообщений об ошибках
 	 	 	 	;_______________________
 	 	 	 	
 	 	 	 	 	assume	cs:code,ds:data
 E3CC  20 33 30 31	 	f1	db	' 301'
 = 0004	 	 	 	f1l	equ	4h	 	; сообщение клавиатуры
 E3D0  31 33 31	 	 	f2	db	'131'
 = 0003	 	 	 	f2l	equ	3h	 	; сообщение кассеты
 E3D3  36 30 31	 	 	f3	db	'601'
 = 0003	 	 	 	f3l	equ	3h	 	; сообщение НГМД
 	 	 	 	
 E3D6	 	 	 	f4	label	word
 E3D6  0378	 	 	 	dw	378h
 E3D8	 	 	 	f4e	label	word
 E3D8  30 31 32 33 34 35	ascii_tbl db	'0123456789abcdef'
       36 37 38 39 61 62	
       63 64 65 66	 	
 	 	 	 	;______________________
 	 	 	 	;   ТЕСТ.12
 	 	 	 	;   Тест клавиатуры
 	 	 	 	;______________________
 E3E8	 	 	 	tst12:
 E3E8  B8 ---- R	 	 	mov	ax,data
 E3EB  8E D8	 	 	 	mov	ds,ax
 E3ED  C6 06 0018 R 03	 	 	mov	kb_flag_1,lat_shift+lat	; rc включить латиницу
 E3F2  E8 E5EB R	 	 	call	kbd_reset	; Сброс клавиатуры
 E3F5  E3 2B	 	 	 	jcxz	f6	 	; печать ошибки, если нет прерывания
 E3F7  B0 4D	 	 	 	mov	al,4dh	 	; доступность клавиатуры
 E3F9  E6 61	 	 	 	out	port_b,al
 E3FB  80 FB AA	 	 	 	cmp	bl,0aah 	; код сканирования 'AA' ?
 E3FE  75 22	 	 	 	jne	f6	 	; нет - печать ошибки
 	 	 	 	
 	 	 	 	;   Поиск "залипших" клавиш
 	 	 	 	
 E400  B0 CC	 	 	 	mov	al,0cch       ; сброс клавиатуры, уст синхронизации
 E402  E6 61	 	 	 	out	port_b,al
 E404  B0 4C	 	 	 	mov	al,4ch	      ; доступность клавиатуры
 E406  E6 61	 	 	 	out	port_b,al
 E408  2B C9	 	 	 	sub	cx,cx
 	 	 	 	;
 	 	 	 	;	Ожидание прерывания клавиатуры
 	 	 	 	;
 E40A	 	 	 	f5:
 E40A  E2 FE	 	 	 	loop	f5	 	; задержка
 E40C  E4 60	 	 	 	in	al,kbd_in	; получение кода сканирования
 E40E  3C 00	 	 	 	cmp	al,0	 	; код сканирования равен 0 ?
 E410  74 19	 	 	 	je	f7	 	; да - продолжение тестирования
 E412  8A E8	 	 	 	mov	ch,al	 	; сохранить код сканирования
 E414  B1 04	 	 	 	mov	cl,4
 E416  D2 E8	 	 	 	shr	al,cl
 E418  E8 E3BD R	 	 	call	xlat_print_cod	; преобразование и печать
 E41B  8A C5	 	 	 	mov	al,ch	 	; восстановить код сканирования
 E41D  24 0F	 	 	 	and	al,0fh	 	; выделить младший байт
 E41F  E8 E3BD R	 	 	call	xlat_print_cod	; преобразование и печать
 E422  BE E3CC R	 	f6:	mov	si,offset f1	; получить адрес поля сообщения об
 	 	 	 	 	 	 	 	; ошибке
 E425  B9 0004	 	 	 	mov	cx,f1l	 	 ; длина поля сообщения об ошибке
 E428  E8 E615 R	 	 	call	p_msg	 	 ; вывод сообщения об ошибке на экран
 	 	 	 	
 	 	 	 	;   Установка таблицы векторов прерываний
 	 	 	 	
 E42B	 	 	 	f7:
 E42B  2B C0	 	 	 	sub	ax,ax
 E42D  8E C0	 	 	 	mov	es,ax
 E42F  B9 0008	 	 	 	mov	cx,8 	; получить счетчик векторов
 E432  0E	 	 	 	push	cs
 E433  1F	 	 	 	pop	ds
 E434  BE CB82 R	 	 	mov	si,offset vector_table	 ; адрес таблицы векторов
 E437  BF 0020 R	 	 	mov	di,offset int_ptr
 E43A  FC	 	 	 	cld
 E43B  A5	 	 	f7a:	movsw
 E43C  47	 	 	 	inc	di
 E43D  47	 	 	 	inc	di
 E43E  E2 FB	 	 	 	loop	f7a
 E440  26: F6 06 0410 R 08	 	test	eq_fl,08h
 E446  74 35	 	 	 	jz	alzo
 	 	 	 	
 	 	 	 	
 E448  E8 C003 R	 	 	call	disk_setup
 	 	 	 	
 	 	 	 	;
 	 	 	 	;   Проверка памяти от C8000 до F6000 по 2К
 	 	 	 	;
 	 	 	 	
 E44B	 	 	 	rom_scan:
 E44B  BA C800	 	 	 	mov	dx,0c800h
 E44E	 	 	 	rom_scan_1:
 E44E  8E DA	 	 	 	mov	ds,dx
 E450  2B DB	 	 	 	sub	bx,bx
 E452  8B 07	 	 	 	mov	ax,[bx]
 E454  53	 	 	 	push	bx
 E455  5B	 	 	 	pop	bx
 E456  3D AA55	 	 	 	cmp	ax,0aa55h
 E459  75 06	 	 	 	jnz	next_rom
 E45B  E8 C7BB R	 	 	call	rom_check
 E45E  EB 05 90	 	 	 	jmp	are_we_done
 E461	 	 	 	next_rom:
 E461  81 C2 0080	 	 	add	dx,0080h
 E465	 	 	 	are_we_done:
 E465  81 FA F600	 	 	cmp	dx,0f600h
 E469  7C E3	 	 	 	jl	rom_scan_1
 E46B  EB 10 90	 	 	 	jmp	alzo
 	 	 	 	
 E47D	 	 	 	 	org	0e47dh
 	 	 	 	
 	 	 	 	;______________________
 	 	 	 	;   ТЕСТ.14
 	 	 	 	;   Осуществляет проверку НГМД
 	 	 	 	;______________________
 E47D  B8 ---- R	 	alzo:	mov	ax,data	 	; уст. регистр DS
 E480  8E D8	 	 	 	mov	ds,ax
 E482  B0 FC	 	 	 	mov	al,0fch  ; доступность прерываний таймера и клавиатуры
 E484  E6 21	 	 	 	out	inta01,al
 E486  A0 0010 R	 	 	mov	al,byte ptr equip_flag	; получить состояние переклю-
 	 	 	 	 	 	 	 	 	; чателей
 E489  A8 01	 	 	 	test	al,01h	 	; первоначальная загрузка с НГМД ?
 E48B  75 03	 	 	 	jnz	f10	 	; да - проверка управления НГМД
 E48D  E9 E59D R	 	 	jmp	f23
 E490	 	 	 	f10:
 E490  B0 BC	 	 	 	mov	al,0bch 	; доступность прерываний с НГМД,
 E492  E6 21	 	 	 	out	inta01,al	; клавиатуры и таймера
 E494  B4 00	 	 	 	mov	ah,0	 	; сброс контроллера НГМД
 E496  CD 13	 	 	 	int	13h	 	; переход к сбросу НГМД
 E498  F6 C4 FF	 	 	 	test	ah,0ffh 	; состояние верно ?
 E49B  75 20	 	 	 	jnz	f13	 	; нет - сбой устройства
 	 	 	 	
 	 	 	 	;   Включить мотор устройства 0
 	 	 	 	
 E49D  BA 03F2	 	 	 	mov	dx,03f2h	; получить адрес адаптера НГМД
 E4A0  B0 1C	 	 	 	mov	al,1ch	 	; включить мотор
 E4A2  EE	 	 	 	out	dx,al
 E4A3  2B C9	 	 	 	sub	cx,cx
 	 	 	 	
 	 	 	 	;    Ожидание включения мотора НГМД
 	 	 	 	
 E4A5	 	 	 	f11:
 E4A5  E2 FE	 	 	 	loop	f11
 E4A7	 	 	 	f12:	 	 	 	; ожидание мотора 1
 E4A7  E2 FE	 	 	 	loop	f12
 E4A9  33 D2	 	 	 	xor	dx,dx
 E4AB  B5 01	 	 	 	mov	ch,1	 	; выбор первой дорожки
 E4AD  88 16 003E R	 	 	mov seek_status,dl
 E4B1  E8 D4F3 R	 	 	call	seek	 	; переход к рекалибровке НГМД
 E4B4  72 07	 	 	 	jc	f13	 	; перейти в программу ошибок
 E4B6  B5 22	 	 	 	mov	ch,34	 	; выбор 34 дорожки
 E4B8  E8 D4F3 R	 	 	call	seek
 E4BB  73 09	 	 	 	jnc	f14	 	; выключить мотор
 	 	 	 	
 	 	 	 	;    Ошибки НГМД
 	 	 	 	
 E4BD	 	 	 	f13:
 E4BD  BE E3D3 R	 	 	mov	si,offset f3	; получить адрес поля сообщения об
 	 	 	 	 	 	 	 	; ошибке
 E4C0  B9 0003	 	 	 	mov	cx,f3l	 	; установить счетчик
 E4C3  E8 E615 R	 	 	call	p_msg	 	; идти в программу ошибок
 	 	 	 	
 	 	 	 	;   Выключить мотор устройства 0
 	 	 	 	
 E4C6	 	 	 	f14:
 E4C6  B0 0C	 	 	 	mov	al,0ch	 	; выключить мотор устройства 0
 E4C8  BA 03F2	 	 	 	mov	dx,03f2h	; уст адрес порта управления НГМД
 E4CB  EE	 	 	 	out	dx,al
 	 	 	 	
 	 	 	 	;   Установка печати и базового адреса
 	 	 	 	;   адаптера стыка С2, если устройства подключены
 	 	 	 	
 E4CC	 	 	 	f15:
 E4CC  C7 06 001A R 001E R	 	mov	buffer_head,offset kb_buffer  ; уст параметров
 	 	 	 	 	 	 	 	 	      ; клавиатуры
 E4D2  C7 06 001C R 001E R	 	mov	buffer_tail,offset kb_buffer
 E4D8  C7 06 0082 R 003E R	 	mov	buffer_end,offset kb_buffer_end
 E4DE  C7 06 0080 R 001E R	 	mov	buffer_start,offset kb_buffer
 E4E4  83 FD 00	 	 	 	cmp	bp,0000h
 E4E7  74 18	 	 	 	jz	dal
 E4E9  BA 0003	 	 	 	mov	dx,3
 E4EC  E8 E5A0 R	 	 	call	err_beep
 E4EF  BE D1D1 R	 	 	mov	si,offset f39
 E4F2  B9 0020	 	 	 	mov	cx,32
 E4F5  E8 E615 R	 	 	call	p_msg
 E4F8	 	 	 	err_wait:
 E4F8  B4 00	 	 	 	mov	ah,0
 E4FA  CD 16	 	 	 	int	16h
 E4FC  80 FC 3B	 	 	 	cmp	ah,3bh
 E4FF  75 F7	 	 	 	jnz	err_wait
 E501  2A E4	 	 	dal:	sub	ah,ah
 E503  A0 0049 R	 	 	mov	al,crt_mode
 E506  CD 10	 	 	 	int	10h
 E508  BD E3D6 R	 	 	mov	bp,offset f4	; таблица PRT_SRC
 E50B  BE 0000	 	 	 	mov	si,0
 E50E	 	 	 	f16:
 E50E  2E: 8B 56 00	 	 	mov	dx,cs:[bp]	; получить базовый адрес печати
 E512  B0 AA	 	 	 	mov	al,0aah 	; записать данные в порт А
 E514  EE	 	 	 	out	dx,al
 E515  2A C0	 	 	 	sub	al,al
 E517  EC	 	 	 	in	al,dx	 	; считывание порта А
 E518  3C AA	 	 	 	cmp	al,0aah 	; шаблон данных тот же
 E51A  75 06	 	 	 	jne	f17	    ; нет - проверка следующего устройства печати
 E51C  89 94 0008 R	 	 	mov	word ptr printer_base[si],dx  ;да-уст базовый адрес
 E520  46	 	 	 	inc	si	 	; вычисление следующего слова
 E521  46	 	 	 	inc	si
 E522	 	 	 	f17:
 E522  45	 	 	 	inc	bp	 	; указать следующий базовый адрес
 E523  45	 	 	 	inc	bp
 E524  81 FD E3D8 R	 	 	cmp	bp,offset f4e	; все возможные адреса проверены ?
 E528  75 E4	 	 	 	jne	f16	 	; нет, к проверке следующего адреса печати
 E52A  BB 0000	 	 	 	mov	bx,0
 E52D  BA 03FF	 	 	 	mov	dx,3ffh 	; проверка подключения адаптера 1 стыка С2
 E530  B0 8A	 	 	 	mov	al,8ah
 E532  EE	 	 	 	out	dx,al
 E533  BA 02FF	 	 	 	mov	dx,2ffh
 E536  EE	 	 	 	out	dx,al
 E537  BA 03FC	 	 	 	mov	dx,3fch
 E53A  B0 AA	 	 	 	mov	al,0aah
 E53C  EE	 	 	 	out	dx,al
 E53D  42	 	 	 	inc	dx
 E53E  EC	 	 	 	in	al,dx
 E53F  3C AA	 	 	 	cmp	al,0aah
 E541  75 08	 	 	 	jnz	f18
 E543  C7 87 0000 R 03F8	 	mov  word ptr rs232_base[bx],3f8h  ; уст адрес адаптера 1
 E549  43	 	 	 	inc	bx
 E54A  43	 	 	 	inc	bx
 E54B  BA 02FC	 	 	f18:	mov	dx,2fch 	; проверка подключения адаптера 2 стыка С2
 E54E  B0 AA	 	 	 	mov	al,0aah
 E550  EE	 	 	 	out	dx,al
 E551  42	 	 	 	inc	dx
 E552  EC	 	 	 	in	al,dx
 E553  3C AA	 	 	 	cmp	al,0aah
 E555  75 08	 	 	 	jnz	f19
 E557  C7 87 0000 R 02F8	 	mov  word ptr rs232_base[bx],2f8h   ; уст адрес адаптера 2
 E55D  43	 	 	 	inc	bx
 E55E  43	 	 	 	inc	bx
 	 	 	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	;_____Установка EQUIP_FLAG для инди-
 	 	 	 	;     кации номера печати
 	 	 	 	
 E55F	 	 	 	f19:
 	 	 	 	
 E55F  42	 	 	 	inc	dx	 	;
 E560  B0 08	 	 	 	mov	al,8	 	; сброс низкого уровня IRQ3
 E562  EE	 	 	 	OUT	DX,AL
 E563  BA 03FE	 	 	 	mov	dx,3feh
 E566  EE	 	 	 	out	dx,al	 	;сброс низкого уровня IRQ4
 E567  B0 A4	 	 	 	mov	al,0a4h
 E569  E6 21	 	 	 	out	21h,al	 	; разрешить прерывания адаптера С2
 	 	 	 	
 E56B  8B C6	 	 	 	mov	ax,si
 E56D  B1 03	 	 	 	mov	cl,3
 E56F  D2 C8	 	 	 	ror	al,cl
 E571  0A C3	 	 	 	or	al,bl
 E573  A2 0011 R	 	 	mov	byte ptr equip_flag+1,al
 E576  BA 0201	 	 	 	mov	dx,201h
 E579  EC	 	 	 	in	al,dx
 E57A  A8 0F	 	 	 	test	al,0fh
 E57C  75 05	 	 	 	jnz	f20	 	 	   ; проверка адаптера игр
 E57E  80 0E 0011 R 10	 	 	or	byte ptr equip_flag+1,16
 E583	 	 	 	f20:
 	 	 	 	
 	 	 	 	;   Разрешить прерывания NMI,закрыть маски адаптера стыка С2
 	 	 	 	
 E583  B0 BC	 	 	 	mov	al,0bch
 E585  E6 21	 	 	 	out	21h,al
 	 	 	 	
 	 	 	 	
 E587  E4 61	 	 	 	in	al,port_b
 E589  0C 30	 	 	 	or	al,30h
 E58B  E6 61	 	 	 	out	port_b,al	; сброс ошибки паритета
 E58D  24 CF	 	 	 	and	al,0cfh
 E58F  E6 61	 	 	 	out	port_b,al
 E591  B0 80	 	 	 	mov	al,80h	 	; разрешение прерываний NMI
 E593  E6 A0	 	 	 	out	0a0h,al
 E595  BA 0001	 	 	 	mov	dx,1
 E598  E8 E5A0 R	 	 	call	err_beep	; переход к подпрограмме звукового сигнала
 E59B	 	 	 	f21:
 E59B  CD 19	 	 	 	int	19h	 	; переход к программе первоначальной загрузки
 E59D	 	 	 	f23:
 E59D  E9 E4CC R	 	 	jmp	f15
 	 	 	 	
 	 	 	 	;    Установка длительности звукового сигнала
 	 	 	 	
 	 	 	 	 	assume	cs:code,ds:data
 E5A0	 	 	 	err_beep proc	near
 E5A0  9C	 	 	 	pushf	 	 	; сохранить признаки
 E5A1  FA	 	 	 	cli	 	 	; сброс признака разрешения прерывания
 E5A2  1E	 	 	 	push	ds	 	; сохранить DS
 E5A3  B8 ---- R	 	 	mov	ax,data	 	; DS - сегмент данных
 E5A6  8E D8	 	 	 	mov	ds,ax
 E5A8  0A F6	 	 	 	or	dh,dh
 E5AA  74 0B	 	 	 	jz	g3
 E5AC	 	 	 	g1:	 	 	 	 ; длинный звуковой сигнал
 E5AC  B3 06	 	 	 	mov	bl,6	 	 ; счетчик для звуковых сигналов
 E5AE  E8 E5C9 R	 	 	call	beep	 	 ; выполнить звуковой сигнал
 E5B1  E2 FE	 	 	g2:	loop	g2	 	 ; задержка между звуковыми сигналами
 E5B3  FE CE	 	 	 	dec	dh
 E5B5  75 F5	 	 	 	jnz	g1
 E5B7	 	 	 	g3:	 	 	 	 ; короткий звуковой сигнал
 E5B7  B3 01	 	 	 	mov	bl,1   ; счетчик для короткого звукового сигнала
 E5B9  E8 E5C9 R	 	 	call	beep	 	; выполнить звуковой сигнал
 E5BC  E2 FE	 	 	g4:	loop	g4	 	; задержка между звуковыми сигналами
 E5BE  FE CA	 	 	 	dec	dl	 	;
 E5C0  75 F5	 	 	 	jnz	g3	 	; выполнить
 E5C2  E2 FE	 	 	g5:	loop	g5	 	; длинная задержка перед возвратом
 E5C4  E2 FE	 	 	g6:	loop	g6
 E5C6  1F	 	 	 	pop	ds	 	; восстановление DS
 E5C7  9D	 	 	 	popf	 	   ; восстановление первоначальных признаков
 E5C8  C3	 	 	 	ret	 	 	; возврат к программе
 E5C9	 	 	 	err_beep	endp
 	 	 	 	
 	 	 	 	;   Подпрограмма звукового сигнала
 	 	 	 	
 E5C9	 	 	 	beep	proc	near
 E5C9  B0 B6	 	 	 	mov	al,10110110b	; таймер 2,младший и старший счет-
 	 	 	 	 	 	 	 	; чики, двоичный счет
 E5CB  E6 43	 	 	 	out	timer+3,al	; записать в регистр режима
 E5CD  B8 045E	 	 	 	mov	ax,45eh 	; делитель
 E5D0  E6 42	 	 	 	out	timer+2,al	; записать младший счетчик
 E5D2  8A C4	 	 	 	mov	al,ah
 E5D4  E6 42	 	 	 	out	timer+2,al	; записать старший счетчик
 E5D6  E4 61	 	 	 	in	al,port_b	; получить текущее состояние порта
 E5D8  8A E0	 	 	 	mov	ah,al	 	; сохранить это состояние
 E5DA  0C 03	 	 	 	or	al,03	 	; включить звук
 E5DC  E6 61	 	 	 	out	port_b,al
 E5DE  2B C9	 	 	 	sub	cx,cx	 	; установить счетчик ожидания
 E5E0  E2 FE	 	 	g7:	loop	g7	 	; задержка перед выключением
 E5E2  FE CB	 	 	 	dec	bl	 	; задержка счетчика закончена ?
 E5E4  75 FA	 	 	 	jnz	g7	; нет - продолжение подачи звукового сигнала
 E5E6  8A C4	 	 	 	mov	al,ah	 	; восстановить значение порта
 E5E8  E6 61	 	 	 	out	port_b,al
 E5EA  C3	 	 	 	ret	 	 	; возврат к программе
 E5EB	 	 	 	beep	endp
 	 	 	 	;_____________________
 	 	 	 	;   Эта процедура вызывает программный
 	 	 	 	;   сброс клавиатуры
 	 	 	 	;_____________________
 E5EB	 	 	 	kbd_reset proc	near
 E5EB  B0 0C	 	 	 	mov	al,0ch	   ; установить низкий уровень синхронизации
 E5ED  E6 61	 	 	 	out	port_b,al	; записать порт B
 E5EF  B9 7530	 	 	 	mov	cx,30000	; время длительности низкого уровня
 E5F2  E2 FE	 	 	g8:	loop	g8
 E5F4  B0 CC	 	 	 	mov	al,0cch 	; уст CLK
 E5F6  E6 61	 	 	 	out	port_b,al
 E5F8	 	 	 	sp_test:
 E5F8  B0 4C	 	 	 	mov	al,4ch	 	; уст высокий уровень синхронизации
 E5FA  E6 61	 	 	 	out	port_b,al
 E5FC  B0 FD	 	 	 	mov	al,0fdh 	; разрешить прерывания клавиатуры
 E5FE  E6 21	 	 	 	out	inta01,al	; записать регистр масок
 E600  FB	 	 	 	sti	 	 	; уст признака разрешения прерывания
 E601  B4 00	 	 	 	mov	ah,0
 E603  2B C9	 	 	 	sub	cx,cx	 	; уст счетчика ожидания прерываний
 E605  F6 C4 FF	 	 	g9:	test	ah,0ffh 	; прерывание клавиатуры возникло ?
 E608  75 02	 	 	 	jnz	g10   ;  да - считывание возвращенного кода сканирования
 E60A  E2 F9	 	 	 	loop	g9	 	; нет - цикл ожидания
 E60C  E4 60	 	 	g10:	in	al,port_a   ; считать код сканирования клавиатуры
 E60E  8A D8	 	 	 	mov	bl,al	 	; сохранить этот код
 E610  B0 CC	 	 	 	mov	al,0cch 	; очистка клавиатуры
 E612  E6 61	 	 	 	out	port_b,al
 E614  C3	 	 	 	ret	 	 	; возврат к программе
 E615	 	 	 	kbd_reset	endp
 	 	 	 	;_____________________
 	 	 	 	;   Эта программа выводит на экран дисплея
 	 	 	 	;   сообщения об ошибках
 	 	 	 	;
 	 	 	 	;     Необходимые условия:
 	 	 	 	;   SI = адрес поля сообщения об ошибке
 	 	 	 	;   CX = длина поля сообщения об ошибке
 	 	 	 	;   Максимальный размер передаваемой
 	 	 	 	;   информации - 36 знаков
 	 	 	 	;
 	 	 	 	;______________________
 E615	 	 	 	p_msg	proc	near
 E615  B8 ---- R	 	 	mov	ax,data
 E618  8E D8	 	 	 	mov	ds,ax
 E61A  8B EE	 	 	 	mov	bp,si
 E61C	 	 	 	g12:
 E61C  2E: 8A 04	 	 	mov	al,cs:[si]	; поместить знак в AL
 E61F  46	 	 	 	inc	si	 	; указать следующий знак
 E620  B7 00	 	 	 	mov	bh,0	 	; установить страницу
 E622  B4 0E	 	 	 	mov	ah,14	 	; уст функцию записи знака
 E624  CD 10	 	 	 	int	10h	 	; и записать знак
 E626  E2 F4	 	 	 	loop	g12	; продолжать до записи всего сообщения
 E628  B8 0E0D	 	 	 	mov	ax,0e0dh   ; переместить курсор в начало строки
 E62B  CD 10	 	 	 	int	10h
 E62D  B8 0E0A	 	 	 	mov	ax,0e0ah  ; переместить курсор на следующую строку
 E630  CD 10	 	 	 	int	10h
 E632  C3	 	 	 	ret
 E633	 	 	 	p_msg	endp
 	 	 	 	
 	 	 	 	;   Таблица кодов русских больших букв (заглавных)
 	 	 	 	
 E633	 	 	 	rust2	label	byte
 E633  1B 21 40 FC 24 25	 	db	1bh,'!@№$',37,05eh,'&*()_+' 	;RCgoff поставлен знак номера
       5E 26 2A 28 29 5F	
       2B	 	 	
 E640  08 00	 	 	 	db	08h,0
 	 	 	 	;RCgoff
 	 	 	 	if	cp866
 	 	 	 	;866 кодировка, заглавные, сканкоды
 E642  89 96 93 8A 85 8D	 	db	089h,096h,093h,08Ah,085h,08Dh,083h,098h	;'ЙЦУКЕНГШ'	 	;caps:11111111
       83 98	 	 	
 E64A  99 87 86 9D 0D FF	 	db	099h,087h,086h,09Dh,00Dh,0FFh,094h,09Bh	;'ЩЗЖЭ',0dh,-1,'ФЫ' 	;caps:11110011	
       94 9B	 	 	
 E652  82 80 8F 90 8E 8B	 	db	082h,080h,08Fh,090h,08Eh,08Bh,084h,027h	;'ВАПРОЛД',27h 	 	;caps:11111110
       84 27	 	 	
 E65A  22 81 9E 7C 9F 97	 	db	022h,081h,09Eh,07Ch,09Fh,097h,091h,08Ch	;'"БЮ',7ch,'ЯЧСМ'	;caps:01101111
       91 8C	 	 	
 E662  88 92 9C 3C 3E 3F	 	db	088h,092h,09Ch,03Ch,03Eh,03Fh,095h,000h	;'ИТЬ','<>?','Х',0	;caps:11100010
       95 00	 	 	
 E66A  FF 20 9A	 	 	 	db	0FFh,020h,09Ah	 	 	 	;-1,' Ъ'	 	;caps:001
 	 	 	 	endif
 	 	 	 	;RCgoff end
 	 	 	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	;___int 19_____________
 	 	 	 	;   Программа загрузки системы с НГМД
 	 	 	 	;
 	 	 	 	; Программа считывает содержимое дорожки 0 сектора 1 в
 	 	 	 	; ячейку boot_locn (адрес 7C00,сегмент 0)
 	 	 	 	;   Если НГМД отсутствует или произошла аппаратная ошибка,
 	 	 	 	; устанавливается прерывание типа INT 18H, которое вызывает
 	 	 	 	; выполнение программ тестирования и инициализации
 	 	 	 	; системы
 	 	 	 	;
 	 	 	 	;_________________________
 	 	 	 	 	assume	cs:code,ds:data
 E66D	 	 	 	boot_strap proc near
 	 	 	 	
 E66D  FB	 	 	 	sti	 	      ; установить признак разрешения прерывания
 E66E  B8 ---- R	 	 	mov	ax,data	      ; установить адресацию
 E671  8E D8	 	 	 	mov	ds,ax
 E673  A1 0010 R	 	 	mov	ax,equip_flag ; получить состояние переключателей
 E676  A8 01	 	 	 	test	al,1	      ; опрос первоначальной загрузки
 E678  74 23	 	 	 	jz	h3
 	 	 	 	
 	 	 	 	;   Система загружается с НГМД
 	 	 	 	;   CX содержит счетчик повторений
 	 	 	 	
 E67A  B9 0004	 	 	 	mov	cx,4	 	; установить счетчик повторений
 E67D	 	 	 	h1:	 	 	 	; первоначальная загрузка
 E67D  51	 	 	 	push	cx	 	; сохранить счетчик повторений
 E67E  B4 00	 	 	 	mov	ah,0	 	; сброс НГМД
 E680  CD 13	 	 	 	int	13h
 E682  72 14	 	 	 	jc	h2	 	; если ошибка,повторить
 E684  B4 02	 	 	 	mov	ah,2	 	; считать сектор 1
 E686  BB 0000	 	 	 	mov	bx,0	 	;
 E689  8E C3	 	 	 	mov	es,bx
 E68B  BB 7C00 R	 	 	mov	bx,offset boot_locn
 E68E  BA 0000	 	 	 	mov	dx,0	 	;
 E691  B9 0001	 	 	 	mov	cx,1	 	; сектор 1 , дорожка 0
 E694  B0 01	 	 	 	mov	al,1	 	; считывание первого сектора
 E696  CD 13	 	 	 	int	13h
 E698  59	 	 	h2:	pop	cx	 	; восстановить счетчик повторений
 E699  73 05	 	 	 	jnc	h4	 	; уст CF при безуспешном считывании
 E69B  E2 E0	 	 	 	loop	h1	 	; цикл повторения
 	 	 	 	
 	 	 	 	;   Загрузка с НГМД недоступна
 	 	 	 	
 E69D	 	 	 	h3:	 	 	 	; кассета
 E69D  E9 E0AF R	 	 	jmp	err01	; отсутствует дискет загрузки
 	 	 	 	
 	 	 	 	;   Загрузка завершилась успешно
 	 	 	 	
 E6A0	 	 	 	h4:
 E6A0  EA 00 7C 00 00	 	 	db	0eah,00h,7ch,00h,00h
 E6A5	 	 	 	boot_strap	endp
 	 	 	 	;--------------------
 	 	 	 	;   Эта программа посылает байт в контроллер адаптера НГМД
 	 	 	 	; после проверки корректности управления и готовности
 	 	 	 	; контроллера.
 	 	 	 	;   Программа ожидает байт состояния определенное время
 	 	 	 	; и проверяет готовность НГМД к работе.
 	 	 	 	;
 	 	 	 	;   ВВОД   (AH) - выводимый байт
 	 	 	 	;
 	 	 	 	;   ВЫВОД  CY=0 - успешно,
 	 	 	 	;	   CY=1 - не успешно.Состояние
 	 	 	 	;	   НГМД анализируется.
 	 	 	 	;-----------------------
 E6A5	 	 	 	nec_output proc near
 E6A5  52	 	 	 	push	dx	 	; сохранить регистры
 E6A6  51	 	 	 	push	cx
 E6A7  BA 03F4	 	 	 	mov	dx,03f4h	; состояние порта
 E6AA  33 C9	 	 	 	xor	cx,cx	 	; счетчик времени вывода
 E6AC	 	 	 	j23:
 E6AC  EC	 	 	 	in	al,dx	 	; получить состояние
 E6AD  A8 40	 	 	 	test	al,040h 	; проверка управляющих бит
 E6AF  74 0C	 	 	 	jz	j25	 	; биты управления нормальные
 E6B1  E2 F9	 	 	 	loop	j23
 E6B3	 	 	 	j24:
 E6B3  80 0E 0041 R 80	 	 	or	diskette_status,time_out
 E6B8  59	 	 	 	pop	cx
 E6B9  5A	 	 	 	pop	dx	; установить код ошибки и восстановить регистры
 E6BA  58	 	 	 	pop	ax	 	; адрес возврата
 E6BB  F9	 	 	 	stc	 	 	;
 E6BC  C3	 	 	 	ret
 	 	 	 	
 E6BD	 	 	 	j25:
 E6BD  33 C9	 	 	 	xor	cx,cx	 	; обнуление счетчика
 E6BF	 	 	 	j26:
 E6BF  EC	 	 	 	in	al,dx	 	; получить состояние
 E6C0  A8 80	 	 	 	test	al,080h 	; проверка готовности
 E6C2  75 04	 	 	 	jnz	j27	 	; да - идти на выход
 E6C4  E2 F9	 	 	 	loop	j26	 	; повторить
 E6C6  EB EB	 	 	 	jmp	short j24	; ошибка состояния
 E6C8	 	 	 	j27:	 	 	 	; выход
 E6C8  8A C4	 	 	 	mov	al,ah	 	; получить байт
 E6CA  BA 03F5	 	 	 	mov	dx,03f5h	; переслать байт данных в порт
 E6CD  EE	 	 	 	out	dx,al
 E6CE  59	 	 	 	pop	cx	 	; восстановить регистры
 E6CF  5A	 	 	 	pop	dx
 E6D0  C3	 	 	 	ret	 	 	;
 E6D1	 	 	 	nec_output	endp
 	 	 	 	
 	 	 	 	;___int 16_________________
 	 	 	 	;
 	 	 	 	;   Программа поддержки клавиатуры
 	 	 	 	;
 	 	 	 	;   Эта программа считывает в регистр
 	 	 	 	; AX код сканирования клавиши и код
 	 	 	 	; ASCII из буфера клавиатуры.
 	 	 	 	;
 	 	 	 	;   Программа выполняет три функции, код
 	 	 	 	; которых задается в регистре AH:
 	 	 	 	;
 	 	 	 	;    AH=0 - считать следующий символ
 	 	 	 	;	     из буфера.При выходе код
 	 	 	 	;	     сканирования в AH,код
 	 	 	 	;	     ASCII в AL.
 	 	 	 	;   AH=1 - установить ZF, если код
 	 	 	 	;	     ASCII прочитан:
 	 	 	 	;
 	 	 	 	;	     ZF=0 - буфер заполнен,
 	 	 	 	;	     ZF=1 - буфер пустой.
 	 	 	 	;   При выходе в AX помещен адрес вершины буфера клавиатуры.
 	 	 	 	;   AH=2 - возврат текущего состояния в регистр AL
 	 	 	 	;	      из постоянно распределенной области памяти с
 	 	 	 	;	   адресом 00417H.
 	 	 	 	;
 	 	 	 	;   При выполнении программ клавиатуры используются флажки,
 	 	 	 	; которые устанавливаются в постоянно распределенной области
 	 	 	 	; памяти по адресам 00417H и 00418H и имеют значение:
 	 	 	 	;   00417H
 	 	 	 	;	  0 - правое переключение регистра;
 	 	 	 	;	  1 - левое переключение регистра;
 	 	 	 	;	     2 - УПР;
 	 	 	 	;	  3 - ДОП;
 	 	 	 	;	  4 - ФСД;
 	 	 	 	;	  5 - ЦИФ;
 	 	 	 	;	  6 - ФПБ;
 	 	 	 	;	  7 - ВСТ;
 	 	 	 	;   00418H
 	 	 	 	;	  0 - состояние клавиши ЛАТ между нажатием и отжатием;
 	 	 	 	;	  1 - ЛАТ;
 	 	 	 	;	  2 - Р/Л;
 	 	 	 	;	  3 - пауза;
 	 	 	 	;	  4 - ФСД;
 	 	 	 	;	  5 - ЦИФ;
 	 	 	 	;	  6 - ФПБ;
 	 	 	 	;	  7 - ВСТ.
 	 	 	 	;
 	 	 	 	;   Флажки, соответствующие разрядам 4-7 постоянно распределенной
 	 	 	 	; области памяти с адресом 00417H, устанавливаются по нажатию
 	 	 	 	; клавиш ВСТ, ФПБ, ЦИФ, ФСД и сохраняют свои значения до сле-
 	 	 	 	; дующего нажатия соответствующей клавиши.
 	 	 	 	; Одноименные флажки, соответствующие разрядам 4-7 постоянно
 	 	 	 	; распределенной области памяти с адресом 00418H, и флажки
 	 	 	 	; ДОП, УПР, левое переключение регистра, правое переключение
 	 	 	 	; регистра, Р/Л устанавливаются по нажатию клавиш и сбрасываются
 	 	 	 	; по отжатию.
 	 	 	 	;
 	 	 	 	;------------------------------
 	 	 	 	 	assume	cs:code,ds:data
 	 	 	 	
 	 	 	 	
 E6D1	 	 	 	k4	proc	near
 E6D1  83 C3 02	 	 	 	add	bx,2
 E6D4  3B 1E 0082 R	 	 	cmp  bx,buffer_end	 	 ; конец буфера ?
 E6D8  75 04	 	 	 	jne	k5	 	 	 ; нет - продолжить
 E6DA  8B 1E 0080 R	 	 	mov	bx,buffer_start 	 ; да - уст начала буфера
 E6DE	 	 	 	k5:
 E6DE  C3	 	 	 	ret
 E6DF	 	 	 	k4	endp
 	 	 	 	
 E6DF	 	 	 	error_beep proc near
 E6DF  50	 	 	 	push	ax
 E6E0  53	 	 	 	push	bx
 E6E1  51	 	 	 	push	cx
 E6E2  BB 00C0	 	 	 	mov	bx,0c0h
 E6E5  E4 61	 	 	 	in	al,kb_ctl
 E6E7  50	 	 	 	push	ax
 E6E8	 	 	 	k65:
 E6E8  24 FC	 	 	 	and	al,0fch
 E6EA  E6 61	 	 	 	out	kb_ctl,al
 E6EC  B9 0048	 	 	 	mov	cx,48h
 E6EF  E2 FE	 	 	k66:	loop	k66
 E6F1  0C 02	 	 	 	or	al,2
 E6F3  E6 61	 	 	 	out	kb_ctl,al
 E6F5  B9 0048	 	 	 	mov	cx,48h
 E6F8  E2 FE	 	 	k67:	loop	k67
 E6FA  4B	 	 	 	dec	bx
 E6FB  75 EB	 	 	 	jnz	k65
 E6FD  58	 	 	 	pop	ax
 E6FE  E6 61	 	 	 	out	kb_ctl,al
 E700  59	 	 	 	pop	cx
 E701  5B	 	 	 	pop	bx
 E702  58	 	 	 	pop	ax
 E703  C3	 	 	 	ret
 E704	 	 	 	error_beep	endp
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 E704	 	 	 	k54:	 	 	 	 	;rc обычный нижний регистр
 E704  3C 3B	 	 	 	cmp	al,59
 E706  72 05	 	 	 	jb	k55
 E708  B0 00	 	 	 	mov	al,0
 E70A  EB 0F 90	 	 	 	jmp	 k57
 	 	 	 	
 E70D  BB E8DC R	 	k55:	mov	bx,offset k10
 E710  F6 06 0018 R 02	 	 	test	kb_flag_1,lat
 E715  74 57	 	 	 	jz	k99	 	 	;rc переход по отсутствию флага ЛАТ
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 E717	 	 	 	k56:
 E717  FE C8	 	 	 	dec	al
 E719  2E: D7	 	 	 	xlat	cs:k11
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 E71B	 	 	 	k57:
 E71B  3C FF	 	 	 	cmp	al,-1
 E71D  74 2A	 	 	 	je	k59
 E71F  80 FC FF	 	 	 	cmp	ah,-1
 E722  74 25	 	 	 	je	k59
 	 	 	 	;---
 	 	 	 	
 E724	 	 	 	k58:
 E724  F6 06 0017 R 40	 	 	test	kb_flag,caps_state
 E729  74 2B	 	 	 	jz	k61
 	 	 	 	
 	 	 	 	;---
 E72B  F6 06 0018 R 02	 	 	test	kb_flag_1,lat
 E730  75 03	 	 	 	jnz	k88
 E732  E9 FEF3 R	 	 	jmp	k89
 E735	 	 	 	k88:
 E735  F6 06 0017 R 03	 	 	test	kb_flag,left_shift+right_shift
 E73A  74 10	 	 	 	jz	k60
 	 	 	 	
 	 	 	 	;----------
 	 	 	 	
 E73C  3C 41	 	 	 	cmp	al,'A'
 E73E  72 16	 	 	 	jb	k61
 E740  3C 5A	 	 	 	cmp	al,'Z'
 E742  77 12	 	 	 	ja	k61
 E744  04 20	 	 	 	add	al,'a'-'A'
 E746  EB 0E 90	 	 	 	jmp	 k61
 	 	 	 	
 E749	 	 	 	k59:
 E749  E9 EAEB R	 	 	jmp	k26
 	 	 	 	
 	 	 	 	
 E74C	 	 	 	k60:
 E74C  3C 61	 	 	 	cmp	al,'a'
 E74E  72 06	 	 	 	jb	k61
 E750  3C 7A	 	 	 	cmp	al,'z'
 E752  77 02	 	 	 	ja	k61
 E754  2C 20	 	 	 	sub	al,'a'-'A'
 	 	 	 	
 E756	 	 	 	k61:
 E756  8B 1E 001C R	 	 	mov	bx,buffer_tail
 E75A  8B F3	 	 	 	mov	si,bx
 E75C  E8 E6D1 R	 	 	call   k4
 E75F  3B 1E 001A R	 	 	cmp	bx,buffer_head
 E763  74 0E	 	 	 	je	k62
 E765  89 04	 	 	 	mov	word ptr [si],ax
 E767  89 1E 001C R	 	 	mov	buffer_tail,bx
 E76B  E9 EAEB R	 	 	jmp	k26
 E76E  BB F8A7 R	 	k99:	mov	bx,offset rust	 	 	;rc маленькие рус буквы (kb_flag_1.lat=0)
 E771  EB A4	 	 	 	jmp k56
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 E773	 	 	 	k62:
 E773  E8 E6DF R	 	 	call	error_beep
 E776  E9 EAEB R	 	 	jmp	k26
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 E779	 	 	 	k63:
 E779  2C 3B	 	 	 	sub	al,59
 E77B	 	 	 	k64:
 E77B  2E: D7	 	 	 	xlat	cs:k9
 E77D  8A E0	 	 	 	mov	ah,al
 E77F  B0 00	 	 	 	mov	al,0
 E781  EB 98	 	 	 	jmp	 k57
 	 	 	 	
 	 	 	 	
 	 	 	 	;---
 E82E	 	 	 	 	org	0e82eh
 E82E	 	 	 	keyboard_io proc	far
 E82E  FB	 	 	 	sti	 	 	;
 E82F  1E	 	 	 	push	ds
 E830  53	 	 	 	push	bx
 E831  BB ---- R	 	 	mov	bx,data
 E834  8E DB	 	 	 	mov	ds,bx	 	; установить сегмент данных
 E836  0A E4	 	 	 	or	ah,ah	 	; AH=0
 E838  74 0B	 	 	 	jz	k1	     ; переход к считыванию следующего символа
 E83A  FE CC	 	 	 	dec	ah	 	; AH=1
 E83C  74 20	 	 	 	jz	k2	     ; переход к считыванию кода ASCII
 E83E  FE CC	 	 	 	dec	ah	 	     ; AH=2
 E840  74 2D	 	 	 	jz	k3	     ; переход к получению байта состояния
 E842  5B	 	 	 	pop	bx	 	     ; восстановить регистр
 E843  1F	 	 	 	pop	ds
 E844  CF	 	 	 	iret
 	 	 	 	
 	 	 	 	;   Считывание кода сканирования и кода ASCII из буфера клавиатуры
 	 	 	 	;
 E845	 	 	 	k1:
 E845  FB	 	 	 	sti	 	; уст признака разрешения прерывания
 E846  90	 	 	 	nop	 	 	; задержка
 E847  FA	 	 	 	cli	 	; сброс признака разрешения прерывания
 E848  8B 1E 001A R	 	 	mov	bx,buffer_head	; уст вершину буфера по чтению
 E84C  3B 1E 001C R	 	 	cmp	bx,buffer_tail	; сравнить с вершиной буфера по записи
 E850  74 F3	 	 	 	jz	k1
 E852  8B 07	 	 	 	mov	ax,word ptr [bx] ; получить код сканирования и код ASCII
 E854  E8 E6D1 R	 	 	call	k4
 E857  89 1E 001A R	 	 	mov	buffer_head,bx	; запомнить вершину буфера по чтению
 E85B  5B	 	 	 	pop	bx	 	; восстановить регистр
 E85C  1F	 	 	 	pop	ds	 	; восстановить сегмент
 E85D  CF	 	 	 	iret	 	 	; возврат к программе
 	 	 	 	
 	 	 	 	;   Считать код ASCII
 	 	 	 	
 E85E	 	 	 	k2:
 E85E  FA	 	 	 	cli	 	; Сброс признака разрешения прерывания
 E85F  8B 1E 001A R	 	 	mov	bx,buffer_head	; получить указатель вершины буфера
 	 	 	 	 	 	 	 	; по чтению
 E863  3B 1E 001C R	 	 	cmp	bx,buffer_tail	; сравнить с вершиной буфера по записи
 E867  8B 07	 	 	 	mov	ax,word ptr [bx]
 E869  FB	 	 	 	sti	 	 	; уст признак разрешения прерывания
 E86A  5B	 	 	 	pop	bx	 	; восстановить регистр
 E86B  1F	 	 	 	pop	ds	 	; восстановить сегмент
 E86C  CA 0002	 	 	 	ret	2
 	 	 	 	
 	 	 	 	;   Получение младшего байта состояния (флажков)
 	 	 	 	
 E86F	 	 	 	k3:
 E86F  A0 0017 R	 	 	mov	al,kb_flag	; получить младший байт состояния     на
 E872  5B	 	 	 	pop	bx	 	; восстановить регистр
 E873  1F	 	 	 	pop	ds	 	; восстановить сегмент
 E874  CF	 	 	 	iret	 	 	; возврат к программе
 E875	 	 	 	keyboard_io	endp
 	 	 	 	
 	 	 	 	;   Таблица кодов сканирования управляющих клавиш
 	 	 	 	
 E875	 	 	 	k6	label	byte
 E875  52	 	 	 	db	ins_key
 E876  56 45 46 38 1D	 	 	db	caps_key,num_key,scroll_key,alt_key,ctl_key
 E87B  54 55	 	 	 	db	left_key,right_key
 E87D  58	 	 	 	db	inv_key_l
 E87E  5A 57 5B	 	 	 	db	inv_key_r,lat_key,rus_key
 = 000C	 	 	 	k6l	equ	0ch
 	 	 	 	
 	 	 	 	;   Таблица масок нажатых управляющих клавиш
 	 	 	 	
 E881	 	 	 	k7	label	byte
 E881  80	 	 	 	db	ins_shift
 E882  40 20 10 08 04	 	 	db	caps_shift,num_shift,scroll_shift,alt_shift,ctl_shift
 E887  02 01	 	 	 	db	left_shift,right_shift
 	 	 	 	
 	 	 	 	
 	 	 	 	;   Таблица кодов сканирования при нажатой клавише УПР для
 	 	 	 	; кодов сканирования клавиш меньше 59
 	 	 	 	
 E889  1B FF 00 FF FF FF	k8	db	27,-1,0,-1,-1,-1,30,-1
       1E FF	 	 	
 E891  FF FF FF 1F FF 7F	 	db	-1,-1,-1,31,-1,127,-1,17
       FF 11	 	 	
 E899  17 05 12 14 19 15	 	db	23,5,18,20,25,21,9,15
       09 0F	 	 	
 E8A1  10 1B 1D 0A FF 01	 	db	16,27,29,10,-1,1,19
       13	 	 	
 E8A8  04 06 07 08 0A 0B	 	db	4,6,7,8,10,11,12,-1,-1
       0C FF FF	 	 	
 E8B1  FF FF 1C 1A 18 03	 	db	-1,-1,28,26,24,3,22,2
       16 02	 	 	
 E8B9  0E 0D FF FF FF FF	 	db	14,13,-1,-1,-1,-1,-1,-1
       FF FF	 	 	
 E8C1  20 FF	 	 	 	db	' ',-1
 	 	 	 	
 	 	 	 	;   Таблица кодов сканирования при нажатой клавише УПР для
 	 	 	 	; кодов сканирования клавиш больше 59
 E8C3	 	 	 	k9	label	byte
 E8C3  5E 5F 60 61 62 63	 	db	94,95,96,97,98,99,100,101
       64 65	 	 	
 E8CB  66 67 FF FF 77 FF	 	db	102,103,-1,-1,119,-1,132,-1
       84 FF	 	 	
 E8D3  73 FF 74 FF 75 FF	 	db	115,-1,116,-1,117,-1,118,-1
       76 FF	 	 	
 E8DB  FF	 	 	 	db	-1
 	 	 	 	
 	 	 	 	;   Таблица кодов ASCII нижнего регистра клавиатуры
 	 	 	 	
 E8DC	 	 	 	k10	label	byte
 E8DC  1B 31 32 33 34 35	 	db	27,'1234567890-='
       36 37 38 39 30 2D	
       3D	 	 	
 E8E9  08 09	 	 	 	db	08h,09h
 E8EB  71 77 65 72 74 79	 	db	'qwertyuiop[]',0dh,-1,'asdfghjkl;:',60h,7eh
       75 69 6F 70 5B 5D	
       0D FF 61 73 64 66	
       67 68 6A 6B 6C 3B	
       3A 60 7E	 	 	
 E906  5C 7A 78 63 76 62	 	db	05ch,'zxcvbnm',',./{'
       6E 6D 2C 2E 2F 7B	
 E912  2A FF 20 7D	 	 	db	'*',-1,' }'
 	 	 	 	
 	 	 	 	;   Таблица кодов ASCII верхнего регистра клавиатуры
 	 	 	 	
 E916	 	 	 	k11	label	byte
 E916  1B 21 40 23 24 25	 	db	27,'!@#$',37,05eh,'&*()_+'
       5E 26 2A 28 29 5F	
       2B	 	 	
 E923  08 00	 	 	 	db	08h,0
 E925  51 57 45 52 54 59	 	db	'QWERTYUIOP',-1,-1,0dh,-1
       55 49 4F 50 FF FF	
       0D FF	 	 	
 E933  41 53 44 46 47 48	 	db	'ASDFGHJKL'
       4A 4B 4C	 	 	
 E93C  27 22 FF FF 7C	 	 	db	027h,'"',-1,-1,7ch
 E941  5A 58 43 56 42 4E	 	db	'ZXCVBNM'
       4D	 	 	
 E948  3C 3E 3F FF 00 FF	 	db	'<>?',-1,0,-1,' ',-1
       20 FF	 	 	
 	 	 	 	
 	 	 	 	;   Таблица кодов сканирования клавиш Ф11 - Ф20 (на верхнем
 	 	 	 	; регистре Ф1 - Ф10)
 	 	 	 	
 E950	 	 	 	k12	label	byte
 E950  54 55 56 57 58 59	 	db	84,85,86,87,88,89,90
       5A	 	 	
 E957  5B 5C 5D	 	 	 	db	91,92,93
 	 	 	 	
 	 	 	 	;   Таблица кодов сканирования одновременно нажатых клавиш
 	 	 	 	; ДОП и Ф1 - Ф10
 	 	 	 	
 E95A	 	 	 	k13	label byte
 E95A  68 69 6A 6B 6C	 	 	db	104,105,106,107,108
 E95F  6D 6E 6F 70 71	 	 	db	109,110,111,112,113
 	 	 	 	
 	 	 	 	;   Таблица кодов правого пятнадцатиклавишного поля на верхнем
 	 	 	 	; регистре
 	 	 	 	
 E964	 	 	 	k14	label	byte
 E964  37 38 39 2D 34 35	 	db	'789-456+1230.'
       36 2B 31 32 33 30	
       2E	 	 	
 	 	 	 	
 	 	 	 	;   Таблица кодов правого пятнадцатиклавишного поля на нижнем
 	 	 	 	; регистре
 	 	 	 	
 E971	 	 	 	k15	label byte
 E971  47 48 49 FF 4B FF	 	db	71,72,73,-1,75,-1,77
       4D	 	 	
 E978  FF 4F 50 51 52 53	 	db	-1,79,80,81,82,83
 	 	 	 	
 E987	 	 	 	 	org	0e987h
 	 	 	 	
 	 	 	 	;----INT 9--------------------------
 	 	 	 	;
 	 	 	 	;    Программа обработки прерывания клавиатуры
 	 	 	 	;
 	 	 	 	; Программа считывает код сканирования клавиши в регистр AL.
 	 	 	 	; Единичное состояние разряда 7 в коде сканирования означает,
 	 	 	 	; что клавиша отжата.
 	 	 	 	;   В результате выполнения программы в регистре AX формируется
 	 	 	 	; слово, старший байт которого (AH) содержит код сканирования,
 	 	 	 	; а младший (AL) - код ASCII. Эта информация помещается в буфер
 	 	 	 	; клавиатуры. После заполнения буфера подается звуковой сигнал.
 	 	 	 	;
 	 	 	 	;-----------------------------------
 	 	 	 	
 E987	 	 	 	kb_int proc far
 E987  FB	 	 	 	sti	 	   ; установка признака разрешения прерывания
 E988  50	 	 	 	push	ax
 E989  53	 	 	 	push	bx
 E98A  51	 	 	 	push	cx
 E98B  52	 	 	 	push	dx
 E98C  56	 	 	 	push	si
 E98D  57	 	 	 	push	di
 E98E  1E	 	 	 	push	ds
 E98F  06	 	 	 	push	es
 E990  FC	 	 	 	cld	 	       ; установить признак направления вперед
 E991  B8 ---- R	 	 	mov	ax,data	       ; установить адресацию
 E994  8E D8	 	 	 	mov	ds,ax
 E996  E4 60	 	 	 	in	al,kb_dat      ; считать код сканирования
 E998  50	 	 	 	push	ax
 E999  E4 61	 	 	 	in	al,kb_ctl      ; считать значение порта 61
 E99B  8A E0	 	 	 	mov	ah,al	       ; сохранить считанное значение
 E99D  0C 80	 	 	 	or	al,80h	       ; установить бит 7 порта 61
 E99F  E6 61	 	 	 	out	kb_ctl,al      ; для работы с клавиатурой
 E9A1  86 E0	 	 	 	xchg	ah,al	       ; восстановить значение порта 61
 E9A3  E6 61	 	 	 	out	kb_ctl,al
 E9A5  58	 	 	 	pop	ax	       ; восстановить код сканирования
 E9A6  8A E0	 	 	 	mov	ah,al	       ; и сохранить его в AH
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 E9A8  3C FF	 	 	 	cmp	al,0ffh  ; сравнение с кодом заполнения буфера
 	 	 	 	 	 	 	 ; клавиатуры
 E9AA  75 03	 	 	 	jnz	k16	 	; продолжить
 E9AC  E9 E773 R	 	 	jmp	k62	; переход на звуковой сигнал по заполнению
 	 	 	 	 	 	 	; буфера клавиатуры
 	 	 	 	
 E9AF	 	 	 	k16:
 E9AF  24 7F	 	 	 	and	al,07fh 	; сброс бита отжатия клавиши
 E9B1  0E	 	 	 	push	cs
 E9B2  07	 	 	 	pop	es
 E9B3  BF E875 R	 	 	mov	di,offset k6  ; установить адрес таблицы сканирования
 	 	 	 	 	 	 	      ; управляющих клавиш
 E9B6  B9 000C	 	 	 	mov	cx,k6l
 E9B9  F2/ AE	 	 	 	repne 	scasb	; сравнение полученного кода сканирования с содержимым таблицы
 E9BB  8A C4	 	 	 	mov	al,ah	 	; запомнить код сканирования
 E9BD  74 1A	 	 	 	je	k17	 	; переход по совпадению
 E9BF  E9 EACC R	 	 	jmp	k25	 	; переход по несовпадению
 	 	 	 	
 E9C2	 	 	 	k406:           	 	 	;rc это обработчик клавиши Ё
 E9C2  F6 06 0018 R 02	 	 	test	kb_flag_1,lat
 E9C7  75 7F	 	 	 	jnz	k26a                    ;rc в ЛАТ-режиме клавиша не генерирует ничего, выход
 E9C9  F6 06 0017 R 03	 	 	test	kb_flag,left_shift+right_shift
 E9CE  B8 5CF1	 	 	 	mov	ax,5cf1h	 	;rc ё
 E9D1  74 03	 	 	 	jz	k407
 E9D3  B8 5CF0	 	 	 	mov	ax,5cf0h                ;rc Ё
 E9D6	 	 	 	k407:	 	 	 	 	;rc передвинул сюда, двумя строками выше  (это ж не получение маски)
 E9D6  E9 E71B R	 	 	jmp	k57
 	 	 	 	
 	 	 	 	;   Получение маски нажатой управляющей клавиши
 	 	 	 	
 	 	 	 	
 E9D9  81 EF E876 R	 	k17:	sub	di,offset k6+1	 	;rc получить индекс упр клавиши в табл k6, начиная с 0
 E9DD  83 FF 08	 	 	 	cmp	di,8
 E9E0  72 3B	 	 	 	jb	k300                    ;rc меньше 8 (это совместимые клавиши) обрабатываются как в IBM
 E9E2  B4 06	 	 	 	mov	ah,6                    ;rc маска 0b00000110 для руслат  (inv_shift + lat)
 E9E4  83 FF 0A	 	 	 	cmp	di,0ah
 E9E7  72 39	 	 	 	jb	k301                    ;rc если inv_key (Р/Л)
 E9E9  A8 80	 	 	 	test	al,80h                  
 E9EB  74 5B	 	 	 	jz	k26a                    ;rc если не отпускание РУС или ЛАТ -> вых (борьба с автоповтором?)
 	 	 	 	
 	 	 	 	 	 	 	 	;rc здесь мы после отпускания РУС или ЛАТ
 E9ED  80 26 0018 R FC	 	 	and	kb_flag_1,not lat+lat_shift   ;rc not действует на оба, сбрасываем lat и "светодиодный" lat
 E9F2  83 FF 0B	 	 	 	cmp	di,0bh
 E9F5  74 17	 	 	 	je	k401                    ;rc переход, если РУС
 	 	 	 	 	 	 	 	;rc если ЛАТ:
 E9F7  F6 06 0018 R 04	 	 	test	kb_flag_1,inv_shift
 E9FC  74 08	 	 	 	jz	k400                    ;rc переход по ненажатию Р/Л
 E9FE  80 0E 0018 R 01	 	 	or	kb_flag_1,lat_shift     ;rc нажата Р/Л->отметить нажатие ("светодиодный") ЛАТа и всё
 EA03  EB 43 90	 	 	 	jmp	k26a
 EA06  80 0E 0018 R 03	 	k400:	or	kb_flag_1,lat+lat_shift ;rc не нажата Р/Л и нажат ЛАТ->включить ЛАТ и факт нажатия ("светодиодный")
 EA0B  EB 3B 90	 	 	 	jmp	k26a
 	 	 	 	
 	 	 	 	 	 	 	 	;РУС:
 EA0E  F6 06 0018 R 04	 	k401:	test	kb_flag_1,inv_shift
 EA13  74 33	 	 	 	jz	k26a                    ;rc по ненажатию Р/Л выход ("светодиодный" выключен заранее)
 EA15  80 0E 0018 R 02	 	 	or	kb_flag_1,lat           ;rc нажата Р/Л и отпущена РУС: включить lat ///???
 EA1A  EB 2C 90	 	 	 	jmp	k26a
 	 	 	 	
 	 	 	 	 	 	 	 	;rc далее IBM-ский код	 	 	 	
 EA1D  2E: 8A A5 E881 R	 	k300:	mov	ah,cs:k7[di]            ;rc аналогично IBM считыаем маску из k7 для совместимых упр клавиш
 EA22	 	 	 	k301:
 EA22  A8 80	 	 	 	test	al,80h	 	; клавиша отжата ?
 EA24  75 79	 	 	 	jnz	k23	; переход, если клавиша отжата
 	 	 	 	
 	 	 	 	;   Управляющая клавиша нажата
 	 	 	 	
 EA26  80 FC 10	 	 	 	cmp	ah,scroll_shift ; нажата управляющая клавиша с
 	 	 	 	 	 	 	 	;  запоминанием ?
 EA29  73 20	 	 	 	jae	k18	 	; переход, если да
 	 	 	 	
 	 	 	 	;---
 EA2B  80 FC 06	 	 	 	cmp	ah,6            
 EA2E  74 07	 	 	 	je	k302            ; rc нажата Р/Л
 	 	 	 	
 EA30  08 26 0017 R	 	 	or	kb_flag,ah	; установка масок управляющих клавиш
 	 	 	 	 	 	 	 	; без запоминания
 EA34  E9 EAEB R	 	 	jmp	k26	 	; к выходу из прерывания
 	 	 	 	
 EA37  80 0E 0018 R 06	 	k302:	or	kb_flag_1,inv_shift+lat ;rc обработка нажатия Р/Л: ставим факт нажатия и латиницу
 EA3C  F6 06 0018 R 01	 	 	test	kb_flag_1,lat_shift	;rc светодиодный ЛАТ есть?
 EA41  74 05	 	 	 	jz	k26a                    ;rc нет -> выходим
 EA43  80 26 0018 R FD	 	 	and	kb_flag_1,not lat       ;rc есть -> сбрасываем латиницу
 EA48	 	 	 	k26a:
 EA48  E9 EAEB R	 	 	jmp	k26
 	 	 	 	
 	 	 	 	;   Опрос нажатия клавиши с запоминанием
 	 	 	 	
 EA4B	 	 	 	k18:
 EA4B  F6 06 0017 R 04	 	 	test	kb_flag,ctl_shift	  ; опрос клавиши УПР
 EA50  75 7A	 	 	 	jnz	k25
 EA52  3C 52	 	 	 	cmp	al,ins_key	 	  ; опрос клавиши ВСТ
 EA54  75 25	 	 	 	jnz	k22
 EA56  F6 06 0017 R 08	 	 	test	kb_flag,alt_shift	  ; опрос клавиши ДОП
 EA5B  74 03	 	 	 	jz	k19
 EA5D  EB 6D 90	 	 	 	jmp	k25
 EA60  F6 06 0017 R 20	 	k19:	test	kb_flag,num_state  ; опрос клавиши ЦИФ
 EA65  75 0D	 	 	 	jnz	k21
 EA67  F6 06 0017 R 03	 	 	test	kb_flag,left_shift+right_shift ; опрос клавиш левого
 	 	 	 	 	 	 	     ; и правого переключения регистров
 EA6C  74 0D	 	 	 	jz	k22
 	 	 	 	
 EA6E	 	 	 	k20:
 EA6E  B8 5230	 	 	 	mov	ax,5230h
 EA71  E9 E71B R	 	 	jmp	k57	      ; установка кода нуля
 EA74	 	 	 	k21:
 EA74  F6 06 0017 R 03	 	 	test	kb_flag,left_shift+right_shift
 EA79  74 F3	 	 	 	jz	k20
 	 	 	 	
 EA7B	 	 	 	k22:
 EA7B  84 26 0018 R	 	 	test	ah,kb_flag_1
 EA7F  75 6A	 	 	 	jnz	k26
 EA81  08 26 0018 R	 	 	or	kb_flag_1,ah
 EA85  30 26 0017 R	 	 	xor	kb_flag,ah
 EA89  3C 52	 	 	 	cmp	al,ins_key
 EA8B  75 5E	 	 	 	jne	k26
 EA8D  B8 5200	 	 	 	mov	ax,ins_key*256
 EA90  E9 E71B R	 	 	jmp	k57
 	 	 	 	
 EA93	 	 	 	k303:	 	 	 	 	 	;rc отжатие Р/Л
 EA93  80 26 0018 R FB	 	 	and	kb_flag_1,not inv_shift         ;rc сброс флажка нажатия Р/Л
 EA98  80 36 0018 R 02	 	 	xor	kb_flag_1,lat                   ;rc переключение раскладки
 EA9D  EB 10	 	 	 	jmp	short k304
 	 	 	 	
 	 	 	 	;   Управляющая клавиша отжата
 	 	 	 	 	 	 	;rc если сюда попали при нажатии ЕС-клавиши Р/Л, то ah=6
 EA9F	 	 	 	k23:
 	 	 	 	
 EA9F  80 FC 10	 	 	 	cmp	ah,scroll_shift
 EAA2  73 1F	 	 	 	jae	k24	 	 	 	;rc это были переключатели с фиксацией?
 EAA4  F6 D4	 	 	 	not	ah                              ;rc да - переходим к ним
 EAA6  80 FC F9	 	 	 	cmp	ah,0f9h	 	 	 	;rc было ah=6? Р/Л?
 EAA9  74 E8	 	 	 	je	k303                            ;rc да->обрабатываем
 EAAB  20 26 0017 R	 	 	and	kb_flag,ah                      ;rc это и далее - продолжение IBM-ского кода
 EAAF	 	 	 	k304:	 	 	 	 	 	
 EAAF  3C B8	 	 	 	cmp	al,alt_key+80h
 EAB1  75 38	 	 	 	jne	k26
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EAB3  A0 0019 R	 	 	mov	al,alt_input
 EAB6  B4 00	 	 	 	mov	ah,0
 EAB8  88 26 0019 R	 	 	mov	alt_input,ah
 EABC  3C 00	 	 	 	cmp	al,0
 EABE  74 2B	 	 	 	je	k26
 EAC0  E9 E724 R	 	 	jmp	k58
 	 	 	 	
 EAC3	 	 	 	k24:
 EAC3  F6 D4	 	 	 	not	ah
 EAC5  20 26 0018 R	 	 	and	kb_flag_1,ah
 EAC9  EB 20 90	 	 	 	jmp	 k26
 	 	 	 	;---
 	 	 	 	
 EACC	 	 	 	k25:	 	 	 	 	 	;rc как и в IBM, здесь мы, если не управляющая клавиша
 	 	 	 	 	 	 	 	 	 	;rc (т.е. ее код не в k6) или если мы нажали ins-num-caps-scroll,
 	 	 	 	 	 	 	 	 	 	;rc когда ранее была зажата ctrl или alt 
 EACC  3C 80	 	 	 	cmp	al,80h
 EACE  73 1B	 	 	 	jae	k26
 EAD0  3C 59	 	 	 	cmp	al,inf_key
 EAD2  74 25	 	 	 	je	k307  	 	 	 	;rc обработчик клавиши ИНФ (выдает 0a00h расшир код)
 EAD4  3C 5C	 	 	 	cmp	al,92
 EAD6  75 03	 	 	 	jne	k406b
 EAD8  E9 E9C2 R	 	 	jmp	k406	 	 	 	;rc обработчик клавиши Ё (выдает ASCII F0h/F1h в режиме РУС)
 EADB	 	 	 	k406b:                                          ;rc далее как в IBM
 EADB  F6 06 0018 R 08	 	 	test	kb_flag_1,hold_state
 EAE0  74 1D	 	 	 	jz	k28
 EAE2  3C 45	 	 	 	cmp	al,num_key
 EAE4  74 05	 	 	 	je	k26
 EAE6  80 26 0018 R F7	 	 	and	kb_flag_1,not hold_state
 	 	 	 	
 EAEB	 	 	 	k26:
 EAEB  FA	 	 	 	cli
 EAEC  B0 20	 	 	 	mov	al,eoi
 EAEE  E6 20	 	 	 	out	020h,al
 EAF0	 	 	 	k27:
 EAF0  07	 	 	 	pop	es
 EAF1  1F	 	 	 	pop	ds
 EAF2  5F	 	 	 	pop	di
 EAF3  5E	 	 	 	pop	si
 EAF4  5A	 	 	 	pop	dx
 EAF5  59	 	 	 	pop	cx
 EAF6  5B	 	 	 	pop	bx
 EAF7  58	 	 	 	pop	ax
 EAF8  CF	 	 	 	iret
 	 	 	 	
 EAF9  B8 A000	 	 	k307:	mov	ax,0a000h	 	 	;rc клавиша ИНФ
 EAFC  E9 E71B R	 	 	jmp	k57
 	 	 	 	
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EAFF	 	 	 	k28:
 EAFF  F6 06 0017 R 08	 	 	test	kb_flag,alt_shift
 EB04  75 03	 	 	 	jnz	k29
 EB06  EB 6D 90	 	 	 	jmp	k38
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EB09	 	 	 	k29:
 EB09  F6 06 0017 R 04	 	 	test	kb_flag,ctl_shift
 EB0E  74 0F	 	 	 	jz	k31
 EB10  3C 53	 	 	 	cmp	al,del_key
 EB12  75 0B	 	 	 	jne	k31
 	 	 	 	
 	 	 	 	;---
 EB14	 	 	 	k306:
 EB14  C7 06 0072 R 1234	 	mov	reset_flag,1234h
 EB1A  EA 5B E0 00 F0	 	 	db	0eah,5bh,0e0h,00h,0f0h
 	 	 	 	;---
 	 	 	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	
 EB1F	 	 	 	k31:
 EB1F  3C 39	 	 	 	cmp	al,57
 EB21  75 05	 	 	 	jne	k32
 EB23  B0 20	 	 	 	mov	al,' '
 EB25  E9 E71B R	 	 	jmp	k57
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EB28	 	 	 	k32:
 EB28  BF F8E1 R	 	 	mov	di,offset k30
 EB2B  B9 000A	 	 	 	mov	cx,10
 EB2E  F2 AE	 	 	 	db	0f2h,0aeh
 EB30  75 12	 	 	 	jne	k33
 EB32  81 EF F8E2 R	 	 	sub	di,offset k30+1
 EB36  A0 0019 R	 	 	mov	al,alt_input
 EB39  B4 0A	 	 	 	mov	ah,10
 EB3B  F6 E4	 	 	 	mul	ah
 EB3D  03 C7	 	 	 	add	ax,di
 EB3F  A2 0019 R	 	 	mov	alt_input,al
 EB42  EB A7	 	 	 	jmp	 k26
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EB44	 	 	 	k33:
 EB44  C6 06 0019 R 00	 	 	mov	alt_input,00h
 EB49  B9 001A	 	 	 	mov	cx,0026
 EB4C  F2 AE	 	 	 	db  0f2h,0aeh
 EB4E  75 05	 	 	 	jne	k34
 EB50  B0 00	 	 	 	mov	al,0
 EB52  E9 E71B R	 	 	jmp	k57
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EB55	 	 	 	k34:
 EB55  3C 02	 	 	 	cmp	al,2
 EB57  72 0C	 	 	 	jb	k35
 EB59  3C 0E	 	 	 	cmp	al,14
 EB5B  73 08	 	 	 	jae	k35
 EB5D  80 C4 76	 	 	 	add	ah,118
 EB60  B0 00	 	 	 	mov	al,0
 EB62  E9 E71B R	 	 	jmp	k57
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EB65	 	 	 	k35:
 EB65  3C 3B	 	 	 	cmp	al,59
 EB67  73 02	 	 	 	jae	k37
 EB69	 	 	 	k36:
 EB69  EB 80	 	 	 	jmp	k26
 EB6B	 	 	 	k37:
 EB6B  3C 47	 	 	 	cmp	al,71
 EB6D  73 FA	 	 	 	jae	k36
 EB6F  BB E95A R	 	 	mov	bx,offset k13
 EB72  E9 E779 R	 	 	jmp	k63
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EB75	 	 	 	k38:
 EB75  F6 06 0017 R 04	 	 	test	kb_flag,ctl_shift
 EB7A  74 5B	 	 	 	jz	k44
 	 	 	 	
 	 	 	 	;---
 	 	 	 	;---
 	 	 	 	
 EB7C  3C 46	 	 	 	cmp	al,scroll_key
 EB7E  75 18	 	 	 	jne	k39
 EB80  BB 001E R	 	 	mov	bx,offset kb_buffer
 EB83  89 1E 001A R	 	 	mov	buffer_head,bx
 EB87  89 1E 001C R	 	 	mov	buffer_tail,bx
 EB8B  C6 06 0071 R 80	 	 	mov	bios_break,80h
 EB90  CD 1B	 	 	 	int	1bh
 EB92  B8 0000	 	 	 	mov	ax,0
 EB95  E9 E71B R	 	 	jmp	k57
 	 	 	 	
 EB98	 	 	 	k39:
 EB98  3C 45	 	 	 	cmp	al,num_key
 EB9A  75 21	 	 	 	jne	k41
 EB9C  80 0E 0018 R 08	 	 	or	kb_flag_1,hold_state
 EBA1  B0 20	 	 	 	mov	al,eoi
 EBA3  E6 20	 	 	 	out	020h,al
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EBA5  80 3E 0049 R 07	 	 	cmp	crt_mode,7
 EBAA  74 07	 	 	 	je	k40
 EBAC  BA 03D8	 	 	 	mov	dx,03d8h
 EBAF  A0 0065 R	 	 	mov	al,crt_mode_set
 EBB2  EE	 	 	 	out	dx,al
 EBB3	 	 	 	k40:
 EBB3  F6 06 0018 R 08	 	 	test	kb_flag_1,hold_state
 EBB8  75 F9	 	 	 	jnz	k40
 EBBA  E9 EAF0 R	 	 	jmp	k27
 EBBD	 	 	 	k41:
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EBBD  3C 37	 	 	 	cmp	al,55
 EBBF  75 06	 	 	 	jne	k42
 EBC1  B8 7200	 	 	 	mov	ax,114*256
 EBC4  E9 E71B R	 	 	jmp	k57
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EBC7	 	 	 	k42:
 EBC7  BB E889 R	 	 	mov	bx,offset k8
 EBCA  3C 3B	 	 	 	cmp	al,59
 EBCC  73 03	 	 	 	jae	k43
 EBCE  E9 E717 R	 	 	jmp	k56
 EBD1	 	 	 	k43:
 EBD1  BB E8C3 R	 	 	mov	bx,offset k9
 EBD4  E9 E779 R	 	 	jmp	k63
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EBD7	 	 	 	k44:
 	 	 	 	
 EBD7  3C 47	 	 	 	cmp	al,71
 EBD9  73 3E	 	 	 	jae	k48
 EBDB  F6 06 0017 R 03	 	 	test	kb_flag,left_shift+right_shift
 EBE0  74 0A	 	 	 	jz	k54a
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EBE2  3C 0F	 	 	 	cmp	al,15
 EBE4  75 09	 	 	 	jne	k45
 EBE6  B8 0F00	 	 	 	mov	ax,15*256
 EBE9  E9 E71B R	 	 	jmp	k57
 	 	 	 	
 EBEC	 	 	 	k54a:
 EBEC  E9 E704 R	 	 	jmp k54
 	 	 	 	
 EBEF	 	 	 	k45:
 EBEF  3C 37	 	 	 	cmp	al,55
 EBF1  75 09	 	 	 	jne	k46
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EBF3  B0 20	 	 	 	mov	al,eoi
 EBF5  E6 20	 	 	 	out	020h,al
 EBF7  CD 05	 	 	 	int	5h
 EBF9  E9 EAF0 R	 	 	jmp	k27
 	 	 	 	
 EBFC	 	 	 	k46:
 EBFC  3C 3B	 	 	 	cmp	al,59
 EBFE  72 06	 	 	 	jb	k47
 EC00  BB E950 R	 	 	mov	bx,offset k12
 EC03  E9 E779 R	 	 	jmp	k63
 	 	 	 	
 EC06	 	 	 	k47:
 EC06  F6 06 0018 R 02	 	 	test	kb_flag_1,lat
 EC0B  74 06	 	 	 	jz	k98
 EC0D  BB E916 R	 	 	mov	bx,offset k11
 EC10  E9 E717 R	 	 	jmp	 k56
 EC13  BB E633 R	 	k98:	mov	bx,offset rust2
 EC16  E9 E717 R	 	 	jmp	k56
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EC19	 	 	 	k48:
 EC19  F6 06 0017 R 20	 	 	test	kb_flag,num_state
 EC1E  75 23	 	 	 	jnz	k52
 EC20  F6 06 0017 R 03	 	 	test	kb_flag,left_shift+right_shift
 EC25  75 23	 	 	 	jnz	k53
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EC27	 	 	 	k49:
 	 	 	 	
 EC27  3C 4A	 	 	 	cmp	al,74
 EC29  74 0C	 	 	 	je	k50
 EC2B  3C 4E	 	 	 	cmp	al,78
 EC2D  74 0E	 	 	 	je	k51
 EC2F  2C 47	 	 	 	sub	al,71
 EC31  BB E971 R	 	 	mov	bx,offset k15
 EC34  E9 E77B R	 	 	jmp	  k64
 	 	 	 	
 EC37  B8 4A2D	 	 	k50:	mov	ax,74*256+'-'
 EC3A  E9 E71B R	 	 	jmp	 k57
 	 	 	 	
 EC3D  B8 4E2B	 	 	k51:	mov	ax,78*256+'+'
 EC40  E9 E71B R	 	 	jmp	 k57
 	 	 	 	
 	 	 	 	;---
 	 	 	 	
 EC43	 	 	 	k52:
 EC43  F6 06 0017 R 03	 	 	test	kb_flag,left_shift+right_shift
 EC48  75 DD	 	 	 	jnz	k49
 	 	 	 	
 EC4A	 	 	 	k53:
 EC4A  2C 46	 	 	 	sub	al,70
 EC4C  BB E964 R	 	 	mov	bx,offset k14
 EC4F  E9 E717 R	 	 	jmp	 k56
 EC52	 	 	 	kb_int	endp
 	 	 	 	
 	 	 	 	;--- int 40H---------
 	 	 	 	;   Программа обслуживания накопителя на гибком магнитном
 	 	 	 	; диске выполняет шесть функций, код которых задается
 	 	 	 	; в регистре AH:
 	 	 	 	;   AH=0 - сбросить  НГМД;
 	 	 	 	;   AH=1 - считать байт состояния НГМД. Состояние соответствует
 	 	 	 	; последней выполняемой операции и передается в регистр AL из
 	 	 	 	; постоянно распределенной области оперативной памяти с адресом
 	 	 	 	; 00441H;
 	 	 	 	;    AH=2H - считать указанный сектор в память;
 	 	 	 	;    AH=3H - записать указанный сектор из памяти;
 	 	 	 	;    AH=4H - верификация;
 	 	 	 	;    AH=5H - форматизация.
 	 	 	 	;    Для выполнения функций записи, считывания, верификации,
 	 	 	 	; форматизации в регистрах задается следующая информация:
 	 	 	 	;    DL - номер устройства (0-3, контролируемое значение);
 	 	 	 	;    DH - номер головки (0-1, неконтролируемое значение);
 	 	 	 	;    CH - номер дорожки (0-39, неконтролируемое значение);
 	 	 	 	;    CL - номер сектора (1-8, неконтролируемое значение);
 	 	 	 	;    AL - количество секторов (1-8, неконтролируемое значение).
 	 	 	 	;
 	 	 	 	;    Для выполнения форматизации необходимо сформировать в
 	 	 	 	; памяти четырехбайтную таблицу для каждого сектора, содержащую
 	 	 	 	; следующую информацию:
 	 	 	 	;    номер дорожки;
 	 	 	 	;    номер головки;
 	 	 	 	;    номер сектора;
 	 	 	 	;    количество байт в секторе (00 - 128 байт, 01 - 256 байт,
 	 	 	 	; 02 - 512 байт, 03 - 1024 байта).
 	 	 	 	;    Адрес таблицы задается в регистрах ES:BX.
 	 	 	 	;
 	 	 	 	;    После выполнения программы в регистре AH находится
 	 	 	 	; байт состояния НГМД.
 	 	 	 	;
 	 	 	 	;    Байт состояния НГМД имеет следующее значение:
 	 	 	 	;    80 - тайм-аут;
 	 	 	 	;    40 - сбой позиционирования;
 	 	 	 	;    20 - сбой контроллера;
 	 	 	 	;    10 - ошибка кода циклического контроля при считывании;
 	 	 	 	;    09 - переход адреса через сегмент (64К байт);
 	 	 	 	;    08 - переполнение;
 	 	 	 	;    04 - сектор не найден;
 	 	 	 	;    03 - защита записи;
 	 	 	 	;    02 - не обнаружен маркер идентификатора сектора;
 	 	 	 	;    01 - команда отвергнута.
 	 	 	 	;    При успешном завершении программы признак CF=0,  в про-
 	 	 	 	; тивном случае - признак CF=1 (регистр AH содержит код ошибки).
 	 	 	 	;    Регистр AL содержит количество реально считанных секторов.
 	 	 	 	;    Адрес программы обслуживания накопителя на гибком магнитном
 	 	 	 	; диске записывается в вектор 40H в процедуре сброса по включению
 	 	 	 	; питания.
 	 	 	 	;-------------------------
 	 	 	 	 	assume	cs:code,ds:data,es:data
 EC59	 	 	 	 	org	0ec59h
 EC59	 	 	 	diskette_io proc	far
 EC59  FB	 	 	 	sti	 	 	; установить признак прерывания
 EC5A  53	 	 	 	push	bx	 	; сохранить адрес
 EC5B  51	 	 	 	push	cx
 EC5C  1E	 	 	 	push	ds	   ; сохранить сегментное значение регистра
 EC5D  56	 	 	 	push	si	   ; сохранить все регистры во время операции
 EC5E  57	 	 	 	push	di
 EC5F  55	 	 	 	push	bp
 EC60  52	 	 	 	push	dx
 EC61  8B EC	 	 	 	mov	bp,sp	   ; установить указатель вершины стека
 EC63  BE ---- R	 	 	mov	si,data
 EC66  8E DE	 	 	 	mov	ds,si	 	; установить область данных
 EC68  E8 EC87 R	 	 	call	j1	 	;
 EC6B  BB 0004	 	 	 	mov	bx,4	 	; получить параметры ожидания мотора
 EC6E  E8 EE51 R	 	 	call	get_parm
 EC71  88 26 0040 R	 	 	mov	motor_count,ah	; уст время отсчета для мотора
 EC75  8A 26 0041 R	 	 	mov	ah,diskette_status  ; получить состояние операции
 EC79  80 FC 01	 	 	 	cmp	ah,1	 	; уст признак CF для индикации
 EC7C  F5	 	 	 	cmc	 	 	; успешной операции
 EC7D  5A	 	 	 	pop	dx	 	; восстановить все регистры
 EC7E  5D	 	 	 	pop	bp
 EC7F  5F	 	 	 	pop	di
 EC80  5E	 	 	 	pop	si
 EC81  1F	 	 	 	pop	ds
 EC82  59	 	 	 	pop	cx
 EC83  5B	 	 	 	pop	bx
 EC84  CA 0002	 	 	 	ret	2
 EC87	 	 	 	diskette_io	endp
 EC87	 	 	 	j1	proc	near
 EC87  8A F0	 	 	 	mov	dh,al	 	; сохранить количество секторов
 EC89  80 26 003F R 7F	 	 	and	motor_status,07fh   ; указать операцию считывания
 EC8E  0A E4	 	 	 	or	ah,ah	 	; AH=0
 EC90  74 27	 	 	 	jz	disk_reset
 EC92  FE CC	 	 	 	dec	ah	 	; AH=1
 EC94  74 74	 	 	 	jz	disk_status
 EC96  C6 06 0041 R 00	 	 	mov	diskette_status,0   ; сброс состояния
 EC9B  80 FA 04	 	 	 	cmp	dl,4	 	; проверка количества устройств
 EC9E  73 13	 	 	 	jae	j3	 	; переход по ошибке
 ECA0  FE CC	 	 	 	dec	ah	 	; AH=2
 ECA2  74 6A	 	 	 	jz	disk_read
 ECA4  FE CC	 	 	 	dec	ah	 	; AH=3
 ECA6  75 03	 	 	 	jnz	j2
 ECA8  E9 ED41 R	 	 	jmp	disk_write
 ECAB	 	 	 	j2:
 ECAB  FE CC	 	 	 	dec	ah	 	; AH=4
 ECAD  74 68	 	 	 	jz	disk_verf
 ECAF  FE CC	 	 	 	dec	ah	 	; AH=5
 ECB1  74 68	 	 	 	jz	disk_format
 ECB3	 	 	 	j3:
 ECB3  C6 06 0041 R 01	 	 	mov	diskette_status,bad_cmd   ; неверная команда
 	 	 	 	
 ECB8  C3	 	 	 	ret	 	 	; операция не определена
 ECB9	 	 	 	j1	endp
 	 	 	 	
 	 	 	 	;   Сбросить НГМД
 	 	 	 	
 ECB9	 	 	 	disk_reset proc near
 ECB9  BA 03F2	 	 	 	mov	dx,03f2h
 ECBC  FA	 	 	 	cli	 	 	; сброс признака разрешения прерывания
 ECBD  A0 003F R	 	 	mov	al,motor_status  ; какой мотор включен
 ECC0  B1 04	 	 	 	mov	cl,4	 	; счетчик сдвига
 ECC2  D2 E0	 	 	 	sal	al,cl
 ECC4  A8 20	 	 	 	test	al,20h	 	; выбрать соответствующее устройство
 ECC6  75 0C	 	 	 	jnz	j5	 	; переход, если включен мотор первого
 	 	 	 	 	 	 	 	; устройства
 ECC8  A8 40	 	 	 	test	al,40h
 ECCA  75 06	 	 	 	jnz	j4	 	; переход, если включен мотор второго
 	 	 	 	 	 	 	 	; устройства
 ECCC  A8 80	 	 	 	test	al,80h
 ECCE  74 06	 	 	 	jz	j6	 	; переход, если включен мотор нулевого
 	 	 	 	 	 	 	 	; устройства
 ECD0  FE C0	 	 	 	inc	al
 ECD2  FE C0	 	 	j4:	inc	al
 ECD4  FE C0	 	 	j5:	inc	al
 ECD6  0C 08	 	 	j6:	or	al,8	 	; включить доступность прерывания
 ECD8  EE	 	 	 	out	dx,al	 	; сброс адаптера
 ECD9  C6 06 003E R 00	 	 	mov	seek_status,0
 ECDE  C6 06 0041 R 00	 	 	mov	diskette_status,0  ; уст нормальное состояние НГМД
 ECE3  0C 04	 	 	 	or	al,4	 	; выключить сброс
 ECE5  EE	 	 	 	out	dx,al
 ECE6  FB	 	 	 	sti	 	 	; установить бит разрешения прерывания
 ECE7  E8 EEAD R	 	 	call	chk_stat_2	; выполнить прерывание после сброса
 ECEA  A0 0042 R	 	 	mov	al,nec_status
 ECED  3C C0	 	 	 	cmp	al,0c0h    ; проверка готовности устройства для передачи
 ECEF  74 07	 	 	 	jz	j7	 	; устройство готово
 ECF1  80 0E 0041 R 20	 	 	or	diskette_status,bad_nec  ; уст код ошибки
 ECF6  EB 11	 	 	 	jmp	short j8
 	 	 	 	
 	 	 	 	;   Послать команду в контроллер
 	 	 	 	
 ECF8	 	 	 	j7:
 ECF8  B4 03	 	 	 	mov	ah,03h	 	; установить команду
 ECFA  E8 E6A5 R	 	 	call	nec_output	; передать команду
 ECFD  BB 0001	 	 	 	mov	bx,1	 	; передача первого байта параметров
 ED00  E8 EE51 R	 	 	call	get_parm	; в контроллер
 ED03  BB 0003	 	 	 	mov	bx,3	 	; передача второго байта параметров
 ED06  E8 EE51 R	 	 	call	get_parm	; в контроллер
 ED09	 	 	 	j8:
 ED09  C3	 	 	 	ret	 	 	; возврат к прерванной программе
 ED0A	 	 	 	disk_reset	endp
 	 	 	 	
 	 	 	 	;
 	 	 	 	; Считать байт состояния НГМД (AH=1)
 	 	 	 	;
 	 	 	 	
 ED0A	 	 	 	disk_status proc near
 ED0A  A0 0041 R	 	 	mov	al,diskette_status
 ED0D  C3	 	 	 	ret
 ED0E	 	 	 	disk_status	endp
 	 	 	 	
 	 	 	 	;   Считать указанный сектор в память (AH=2)
 	 	 	 	
 ED0E	 	 	 	disk_read proc near
 ED0E  B0 46	 	 	 	mov	al,046h 	; установить команду
 ED10	 	 	 	j9:
 ED10  E8 EE67 R	 	 	call	dma_setup	; установить ПДП
 ED13  B4 E6	 	 	 	mov	ah,0e6h     ; уст команду считывания  контроллера
 ED15  EB 36	 	 	 	jmp	short rw_opn	; переход к выполнению операции
 ED17	 	 	 	disk_read	endp
 	 	 	 	
 	 	 	 	;   Верификация (AH=4)
 	 	 	 	
 ED17	 	 	 	disk_verf proc near
 ED17  B0 42	 	 	 	mov	al,042h 	; установить команду
 ED19  EB F5	 	 	 	jmp	short j9
 ED1B	 	 	 	disk_verf	endp
 	 	 	 	
 	 	 	 	;   Форматизация (AH=5)
 	 	 	 	
 ED1B	 	 	 	disk_format proc near
 ED1B  80 0E 003F R 80	 	 	or	motor_status,80h  ; индикация операции записи
 ED20  B0 4A	 	 	 	mov	al,04ah 	  ; установить команду
 ED22  E8 EE67 R	 	 	call	dma_setup	  ; установить ПДП
 ED25  B4 4D	 	 	 	mov	ah,04dh 	  ; установить команду
 ED27  EB 24	 	 	 	jmp	short rw_opn
 ED29	 	 	 	j10:
 ED29  BB 0007	 	 	 	mov	bx,7	 	  ; получить значение сектора
 ED2C  E8 EE51 R	 	 	call	get_parm
 ED2F  BB 0009	 	 	 	mov	bx,9	 	; получить значение дорожки на секторе
 ED32  E8 EE51 R	 	 	call	get_parm
 ED35  BB 000F	 	 	 	mov	bx,15	 	; получить значение длины интервала
 ED38  E8 EE51 R	 	 	call	get_parm	; для контроллера
 ED3B  BB 0011	 	 	 	mov	bx,17	 	; получить полный байт
 ED3E  E9 EDF9 R	 	 	jmp	j16
 ED41	 	 	 	disk_format	endp
 	 	 	 	
 	 	 	 	;   Записать указанный сектор из памяти (AH=3)
 	 	 	 	
 ED41	 	 	 	disk_write proc near
 ED41  80 0E 003F R 80	 	 	or	motor_status,80h	; индикация операции записи
 ED46  B0 4A	 	 	 	mov	al,04ah 	 	; уст код операции записи
 ED48  E8 EE67 R	 	 	call	dma_setup
 ED4B  B4 C5	 	 	 	mov	ah,0c5h 	 	; команда записи на НГМД
 ED4D	 	 	 	disk_write	endp
 	 	 	 	
 	 	 	 	;______________________
 	 	 	 	; rw_opn
 	 	 	 	;   Программа выполнения операций
 	 	 	 	;   считывания, записи, верификации
 	 	 	 	;----------------------
 ED4D	 	 	 	rw_opn	proc	near
 ED4D  73 08	 	 	 	jnc	j11	 	; проверка ошибки ПДП
 ED4F  C6 06 0041 R 09	 	 	mov	diskette_status,dma_boundary   ; установить ошибку
 ED54  B0 00	 	 	 	mov	al,0	 	;
 ED56  C3	 	 	 	ret	 	 	; возврат к основной программе
 ED57	 	 	 	j11:
 ED57  50	 	 	 	push	ax	 	; сохранить команду
 	 	 	 	
 	 	 	 	;   Включить мотор и выбрать устройство
 	 	 	 	
 ED58  51	 	 	 	push	cx
 ED59  8A CA	 	 	 	mov	cl,dl	 	; уст номер устройства, как счетчик сдвига
 ED5B  B0 01	 	 	 	mov	al,1	 	; маска для определения мотора устройства
 ED5D  D2 E0	 	 	 	sal	al,cl	 	; сдвиг
 ED5F  FA	 	 	 	cli	 	 	; сбросить бит разрешения прерывания
 ED60  C6 06 0040 R FF	 	 	mov	motor_count,0ffh  ; установить счетчик
 ED65  84 06 003F R	 	 	test	al,motor_status
 ED69  75 3F	 	 	 	jnz	j14
 ED6B  80 26 003F R F0	 	 	and	motor_status,0f0h  ; выключить все биты мотора
 ED70  08 06 003F R	 	 	or	motor_status,al    ; включить мотор
 ED74  FB	 	 	 	sti	 	 	; установить бит разрешения прерывания
 ED75  B0 10	 	 	 	mov	al,10h	 	; бит маски
 ED77  D2 E0	 	 	 	sal	al,cl	 	; уст бит маски для доступности мотора
 ED79  0A C2	 	 	 	or	al,dl	 	; включить бит выбора устройства
 ED7B  0C 0C	 	 	 	or	al,0ch	 	; нет сброса, доступность прерывания ПДП
 ED7D  52	 	 	 	push	dx
 ED7E  BA 03F2	 	 	 	mov	dx,03f2h	; установить адрес порта
 ED81  EE	 	 	 	out	dx,al
 ED82  5A	 	 	 	pop	dx	 	; восстановить регистры
 ED83  51	 	 	 	push	cx	 	;задержка для включения мотора устройства
 ED84  B9 0003	 	 	 	mov	cx,3
 ED87  51	 	 	x2:	push	cx
 ED88  B9 0000	 	 	 	mov	cx,0
 ED8B  E2 FE	 	 	x1:	loop	x1
 ED8D  59	 	 	 	pop	cx
 ED8E  E2 F7	 	 	 	loop	x2
 ED90  59	 	 	 	pop	cx
 	 	 	 	
 	 	 	 	;   Ожидание включения мотора для операции записи
 	 	 	 	
 ED91  F6 06 003F R 80	 	 	test	motor_status,80h  ; запись ?
 ED96  74 12	 	 	 	jz	j14	; нет - продолжать без ожидания
 ED98  BB 0014	 	 	 	mov	bx,20	 	; установить ожидание включения мотора
 ED9B  E8 EE51 R	 	 	call	get_parm	; получить параметры
 ED9E  0A E4	 	 	 	or	ah,ah
 EDA0	 	 	 	j12:
 EDA0  74 08	 	 	 	jz	j14	 	; выход по окончании времени ожидания
 EDA2  2B C9	 	 	 	sub	cx,cx	 	; установить счетчик
 EDA4  E2 FE	 	 	j13:	loop	j13	 	; ожидать требуемое время
 EDA6  FE CC	 	 	 	dec	ah	 	; уменьшеть значение времени
 EDA8  EB F6	 	 	 	jmp	short j12	; повторить цикл
 	 	 	 	
 EDAA	 	 	 	j14:
 EDAA  FB	 	 	 	sti	 	 	; уст признак разрешения прерывания
 EDAB  59	 	 	 	pop	cx
 	 	 	 	
 	 	 	 	;   Выполнить операцию поиска
 	 	 	 	
 EDAC  E8 D4F3 R	 	 	call	seek	 	; установить дорожку
 EDAF  58	 	 	 	pop	ax	 	; восстановить команду
 EDB0  8A FC	 	 	 	mov	bh,ah	 	; сохранить команду в BH
 EDB2  B6 00	 	 	 	mov	dh,0	 	; уст 0 сектор в случае ошибки
 EDB4  72 4A	 	 	 	jc	j17	 	; выход, если ошибка
 EDB6  BE EE00 R	 	 	mov	si,offset j17
 	 	 	 	
 EDB9  56	 	 	 	push	si
 	 	 	 	
 	 	 	 	;   Послать параметры в контроллер
 	 	 	 	
 EDBA  E8 E6A5 R	 	 	call	nec_output	; передача команды
 EDBD  8A 66 01	 	 	 	mov	ah,byte ptr [bp+1]  ; уст номер головки
 EDC0  D0 E4	 	 	 	sal	ah,1	 	; сдвиг на 2
 EDC2  D0 E4	 	 	 	sal	ah,1
 EDC4  80 E4 04	 	 	 	and	ah,4	 	; выделить бит
 EDC7  0A E2	 	 	 	or	ah,dl	 	; операция OR с номером устройства
 EDC9  E8 E6A5 R	 	 	call	nec_output
 	 	 	 	
 	 	 	 	;   Проверка операции форматизации
 	 	 	 	
 EDCC  80 FF 4D	 	 	 	cmp	bh,04dh 	; форматизация ?
 EDCF  75 03	 	 	 	jne	j15    ; нет - продолжать запись/считывание/верификацию
 EDD1  E9 ED29 R	 	 	jmp	j10
 	 	 	 	
 EDD4  8A E5	 	 	j15:	mov	ah,ch	 	; номер цилиндра
 EDD6  E8 E6A5 R	 	 	call	nec_output
 EDD9  8A 66 01	 	 	 	mov	ah,byte ptr [bp+1]  ; номер головки
 EDDC  E8 E6A5 R	 	 	call	nec_output
 EDDF  8A E1	 	 	 	mov	ah,cl	 	; номер сектора
 EDE1  E8 E6A5 R	 	 	call	nec_output
 EDE4  BB 0007	 	 	 	mov	bx,7
 EDE7  E8 EE51 R	 	 	call	get_parm
 EDEA  BB 0009	 	 	 	mov	bx,9
 EDED  E8 EE51 R	 	 	call	get_parm
 EDF0  BB 000B	 	 	 	mov	bx,11
 EDF3  E8 EE51 R	 	 	call	get_parm
 EDF6  BB 000D	 	 	 	mov	bx,13
 EDF9	 	 	 	j16:
 EDF9  E8 EE51 R	 	 	call	get_parm
 EDFC  5E	 	 	 	pop	si
 	 	 	 	
 	 	 	 	;   Операция запущена
 	 	 	 	
 EDFD  E8 EECE R	 	 	call	wait_int	; ожидание прерывания
 EE00	 	 	 	j17:
 EE00  72 45	 	 	 	jc	j21	 	; поиск ошибки
 EE02  E8 EF6B R	 	 	call	results 	; получить состояние контроллера
 EE05  72 3F	 	 	 	jc	j20	 	; поиск ошибки
 	 	 	 	
 	 	 	 	;   Проверка  состояния, полученного из контроллера
 	 	 	 	
 EE07  FC	 	 	 	cld	 	 	; установить направление коррекции
 EE08  BE 0042 R	 	 	mov	si,offset nec_status
 EE0B  AC	 	 	 	lods	nec_status
 EE0C  24 C0	 	 	 	and	al,0c0h 	; проверить нормальное окончание
 EE0E  74 3B	 	 	 	jz	j22
 EE10  3C 40	 	 	 	cmp	al,040h 	; проверить неверное окончание
 EE12  75 29	 	 	 	jnz	j18
 	 	 	 	
 	 	 	 	;   Обнаруженно неверное окончание
 	 	 	 	
 EE14  AC	 	 	 	lods	nec_status
 EE15  D0 E0	 	 	 	sal	al,1
 EE17  B4 04	 	 	 	mov	ah,record_not_fnd
 EE19  72 24	 	 	 	jc	j19
 EE1B  D0 E0	 	 	 	sal	al,1
 EE1D  D0 E0	 	 	 	sal	al,1
 EE1F  B4 10	 	 	 	mov	ah,bad_crc
 EE21  72 1C	 	 	 	jc	j19
 EE23  D0 E0	 	 	 	sal	al,1
 EE25  B4 08	 	 	 	mov	ah,bad_dma
 EE27  72 16	 	 	 	jc	j19
 EE29  D0 E0	 	 	 	sal	al,1
 EE2B  D0 E0	 	 	 	sal	al,1
 EE2D  B4 04	 	 	 	mov	ah,record_not_fnd
 EE2F  72 0E	 	 	 	jc	j19
 EE31  D0 E0	 	 	 	sal	al,1
 EE33  B4 03	 	 	 	mov	ah,write_protect  ; проверка защиты записи
 EE35  72 08	 	 	 	jc	j19
 EE37  D0 E0	 	 	 	sal	al,1
 EE39  B4 02	 	 	 	mov	ah,bad_addr_mark
 EE3B  72 02	 	 	 	jc	j19
 	 	 	 	
 	 	 	 	;   Контроллер вышел из строя
 	 	 	 	
 EE3D	 	 	 	j18:
 EE3D  B4 20	 	 	 	mov	ah,bad_nec
 EE3F	 	 	 	j19:
 EE3F  08 26 0041 R	 	 	or	diskette_status,ah
 EE43  E8 EFB0 R	 	 	call	num_trans
 EE46	 	 	 	j20:
 EE46  C3	 	 	 	ret	 	; возврат к программе, вызвавшей прерывание
 	 	 	 	
 EE47	 	 	 	j21:
 EE47  E8 EF6B R	 	 	call	results 	; вызов результатов в буфер
 EE4A  C3	 	 	 	ret
 	 	 	 	
 	 	 	 	;   Операция была успешной
 	 	 	 	
 EE4B	 	 	 	j22:
 EE4B  E8 EFB0 R	 	 	call	num_trans
 EE4E  32 E4	 	 	 	xor	ah,ah	 	; нет ошибок
 EE50  C3	 	 	 	ret
 EE51	 	 	 	rw_opn	endp
 	 	 	 	;------------------------
 	 	 	 	;get_parm
 	 	 	 	;
 	 	 	 	;   ВХОД   BX - индекс байта,деленный
 	 	 	 	;	 	на 2,который будет
 	 	 	 	;	 	выбран,если младший
 	 	 	 	;	 	бит BX установлен,то
 	 	 	 	;	 	байт немедленно пере-
 	 	 	 	;	 	дается контроллеру.
 	 	 	 	;
 	 	 	 	;   ВЫХОД  AH - байт из блока.
 	 	 	 	;-------------------------
 EE51	 	 	 	get_parm proc	near
 EE51  1E	 	 	 	push	ds	 	; сохранить сегмент
 EE52  2B C0	 	 	 	sub	ax,ax	 	; AX=0
 EE54  8E D8	 	 	 	mov	ds,ax
 	 	 	 	 	assume	ds:abs0
 EE56  C5 36 0078 R	 	 	lds	si,disk_pointer
 EE5A  D1 EB	 	 	 	shr	bx,1	 	; делить BX на 2, уст флаг для выхода
 EE5C  8A A0 0000 R	 	 	mov	ah,zb[si+bx]	; получить слово
 EE60  1F	 	 	 	pop	ds	 	; восстановить сегмент
 	 	 	 	 	assume	ds:data
 EE61  72 01	 	 	 	jc	nec_op	 	 ;если флаг установлен, выход
 EE63  C3	 	 	 	ret	 	; возврат к программе, вызвавшей прерывание
 EE64  E9 E6A5 R	 	nec_op: jmp	nec_output
 EE67	 	 	 	get_parm endp
 	 	 	 	
 	 	 	 	;RCgoff	процедура seek отсюда перемещена 
 	 	 	 	;для соответствия реальной BIOS редакции 2
 	 	 	 	
 	 	 	 	;-----------------------
 	 	 	 	; dma_setup
 	 	 	 	;   Программа установки ПДП для операций записи,считывания,верифи-
 	 	 	 	; кации.
 	 	 	 	;
 	 	 	 	;   ВВОД
 	 	 	 	;
 	 	 	 	;	(AL) - байт режима для ПДП,
 	 	 	 	;	(ES:BX) - адрес считывания/записи информации.
 	 	 	 	;
 	 	 	 	;------------------------
 EE67	 	 	 	dma_setup proc	near
 EE67  51	 	 	 	push	cx	 	; сохранить регистр
 EE68  E6 0C	 	 	 	out	dma+12,al
 EE6A  E6 0B	 	 	 	out	dma+11,al	; вывод байта состояния
 EE6C  8C C0	 	 	 	mov	ax,es	 	; получить значение ES
 EE6E  B1 04	 	 	 	mov	cl,4	 	; счетчик для сдвига
 EE70  D3 C0	 	 	 	rol ax,cl	 	; циклический сдвиг влево
 EE72  8A E8	 	 	 	mov	ch,al	 	;
 EE74  24 F0	 	 	 	and	al,0f0h 	;
 EE76  03 C3	 	 	 	add	ax,bx
 EE78  73 02	 	 	 	jnc	j33
 EE7A  FE C5	 	 	 	inc	ch	 	; перенос означает, что старшие 4 бита
 	 	 	 	 	 	 	 	; должны быть прибавлены
 EE7C	 	 	 	j33:
 EE7C  50	 	 	 	push	ax	 	; сохранить начальный адрес
 EE7D  E6 04	 	 	 	out	dma+4,al	; вывод младшей половины адреса
 EE7F  8A C4	 	 	 	mov	al,ah
 EE81  E6 04	 	 	 	out	dma+4,al	; вывод старшей половины адреса
 EE83  8A C5	 	 	 	mov	al,ch	 	; получить 4 старших бита
 EE85  24 0F	 	 	 	and	al,0fh
 EE87  E6 81	 	 	 	out	081h,al   ; вывод 4 старших бит на регистр страниц
 	 	 	 	
 	 	 	 	;   Определение счетчика
 	 	 	 	
 EE89  8A E6	 	 	 	mov	ah,dh	 	; номер сектора
 EE8B  2A C0	 	 	 	sub	al,al	 	;
 EE8D  D1 E8	 	 	 	shr	ax,1	 	;
 EE8F  50	 	 	 	push	ax
 EE90  BB 0006	 	 	 	mov	bx,6	 	; получить параметры байт/сектор
 EE93  E8 EE51 R	 	 	call	get_parm
 EE96  8A CC	 	 	 	mov	cl,ah	 	; счетчик сдига (0=128, 1=256 и т.д)
 EE98  58	 	 	 	pop	ax
 EE99  D3 E0	 	 	 	shl	ax,cl	 	; сдвиг
 EE9B  48	 	 	 	dec	ax	 	; -1
 EE9C  50	 	 	 	push	ax	 	; сохранить значение счетчика
 EE9D  E6 05	 	 	 	out	dma+5,al	; вывести младший байт счетчика
 EE9F  8A C4	 	 	 	mov	al,ah
 EEA1  E6 05	 	 	 	out	dma+5,al	; вывести старший байт счетчика
 EEA3  59	 	 	 	pop	cx	 	; восстановить значение счетчика
 EEA4  58	 	 	 	pop	ax	 	; восстановить значение адреса
 EEA5  03 C1	 	 	 	add	ax,cx	 	; проверка заполнения 64K
 EEA7  59	 	 	 	pop	cx	 	; восстановить регистр
 EEA8  B0 02	 	 	 	mov	al,2	 	; режим для 8237
 EEAA  E6 0A	 	 	 	out	dma+10,al	; инициализация канала НГМД
 EEAC  C3	 	 	 	ret	 	; возврат к программе, вызвавшей прерывание
 EEAD	 	 	 	dma_setup	endp
 	 	 	 	;-----------------------
 	 	 	 	;chk_stat_2
 	 	 	 	;   Эта программа обрабатывает прерывания ,полученные после
 	 	 	 	; рекалибровки, позиционирования или сброса адаптера. Прерывание
 	 	 	 	; ожидается, принимается, обрабатывается и результат выдается программе,
 	 	 	 	; вызвавшей прерывание.
 	 	 	 	;
 	 	 	 	;   ВЫВОД
 	 	 	 	;	  CY=0 - успешно,
 	 	 	 	;	  CY=1 - сбой (ошибка в состоянии НГМД),
 	 	 	 	;--------------------------
 EEAD	 	 	 	chk_stat_2 proc near
 EEAD  E8 EECE R	 	 	call	wait_int	; ожидание прерывания
 EEB0  72 14	 	 	 	jc	j34	 	; если ошибка, то возврат
 EEB2  B4 08	 	 	 	mov	ah,08h	 	; команда получения состояния
 EEB4  E8 E6A5 R	 	 	call	nec_output
 EEB7  E8 EF6B R	 	 	call	results 	; считать результаты
 EEBA  72 0A	 	 	 	jc	j34
 EEBC  A0 0042 R	 	 	mov	al,nec_status	; получить первый байт состояния
 EEBF  24 60	 	 	 	and	al,060h 	; выделить биты
 EEC1  3C 60	 	 	 	cmp	al,060h 	; проверка
 EEC3  74 02	 	 	 	jz	j35	   ; если ошибка, то идти на метку
 EEC5  F8	 	 	 	clc	 	 	; возврат
 EEC6	 	 	 	j34:
 EEC6  C3	 	 	 	ret	 	; возврат к программе, вызвавшей прерывание
 EEC7	 	 	 	j35:
 EEC7  80 0E 0041 R 40	 	 	or	diskette_status,bad_seek
 EECC  F9	 	 	 	stc	 	 	; ошибка в возвращенном коде
 EECD  C3	 	 	 	ret
 EECE	 	 	 	chk_stat_2	endp
 	 	 	 	;---------------------------------
 	 	 	 	; wait_int
 	 	 	 	;   Эта программа ожидает прерывание, которое возникает во время
 	 	 	 	; программы вывода. Если устройство не готово, ошибка может быть
 	 	 	 	; возвращена.
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;   ВЫВОД
 	 	 	 	;	      CY=0 - успешно,
 	 	 	 	;	      CY=1 - сбой(состояние НГМД устанавливается),
 	 	 	 	;-----------------------------------
 EECE	 	 	 	wait_int proc	near
 EECE  FB	 	 	 	sti	 	 	; установить признак разрешения прерывания
 EECF  53	 	 	 	push	bx
 EED0  51	 	 	 	push	cx	 	; сохранить регистр
 EED1  B3 02	 	 	 	mov	bl,2	 	; количество циклов
 EED3  33 C9	 	 	 	xor	cx,cx	 	; длителность одного цикла ожидания
 EED5	 	 	 	j36:
 EED5  F6 06 003E R 80	 	 	test	seek_status,int_flag  ; опрос наличия прерывания
 EEDA  75 0C	 	 	 	jnz	j37
 EEDC  E2 F7	 	 	 	loop	j36	 	; возврат к началу цикла
 EEDE  FE CB	 	 	 	dec	bl
 EEE0  75 F3	 	 	 	jnz	j36
 EEE2  80 0E 0041 R 80	 	 	or	diskette_status,time_out
 EEE7  F9	 	 	 	stc	 	 	; возврат при ошибке
 EEE8	 	 	 	j37:
 EEE8  9C	 	 	 	pushf	 	 	; сохранить текущие признаки
 EEE9  80 26 003E R 7F	 	 	and	seek_status,not int_flag
 EEEE  9D	 	 	 	popf	 	 	; восстановить признаки
 EEEF  59	 	 	 	pop	cx
 EEF0  5B	 	 	 	pop	bx	 	; восстановить регистр
 EEF1  C3	 	 	 	ret	 	; возврат к программе, вызвавшей прерывание
 EEF2	 	 	 	wait_int	endp
 	 	 	 	;---------------------------
 	 	 	 	;disk_int
 	 	 	 	;   Эта программа обрабатывает прерывания НГМД
 	 	 	 	;
 	 	 	 	;   ВЫВОД  - признак прерывания устанавливается в SEEK_STATUS.
 	 	 	 	;---------------------------
 EF57	 	 	 	 	org	0ef57h
 EF57	 	 	 	disk_int proc	far
 EF57  FB	 	 	 	sti	 	 	; установить признак разрешения прерывания
 EF58  1E	 	 	 	push	ds
 EF59  50	 	 	 	push	ax
 EF5A  B8 ---- R	 	 	mov	ax,data
 EF5D  8E D8	 	 	 	mov	ds,ax
 EF5F  80 0E 003E R 80	 	 	or	seek_status,int_flag
 EF64  B0 20	 	 	 	mov	al,20h	 	; установить конец прерывания
 EF66  E6 20	 	 	 	out	20h,al	 	; послать конец прерывания в порт
 EF68  58	 	 	 	pop	ax
 EF69  1F	 	 	 	pop	ds
 EF6A  CF	 	 	 	iret	 	 	; возврат из прерывания
 EF6B	 	 	 	disk_int	endp
 	 	 	 	;----------------------------
 	 	 	 	;
 	 	 	 	;   Эта программа считывет все, что контроллер адаптера НГМД указывает
 	 	 	 	; программе, следующей за прерыванием.
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;   ВЫВОД
 	 	 	 	;	   CF=0 - успешно,
 	 	 	 	;	   CF=1 - сбой
 	 	 	 	;----------------------------
 EF6B	 	 	 	results proc	near
 EF6B  FC	 	 	 	cld
 EF6C  BF 0042 R	 	 	mov	di,offset nec_status
 EF6F  51	 	 	 	push	cx	 	; сохранить счетчик
 EF70  52	 	 	 	push	dx
 EF71  53	 	 	 	push	bx
 EF72  B3 07	 	 	 	mov	bl,7	 	; установить длину области состояния
 	 	 	 	
 	 	 	 	
 EF74	 	 	 	j38:
 EF74  33 C9	 	 	 	xor	cx,cx	 	; длительность одного цикла
 EF76  BA 03F4	 	 	 	mov	dx,03f4h	; адрес порта
 EF79	 	 	 	j39:
 EF79  EC	 	 	 	in	al,dx	 	; получить состояние
 EF7A  A8 80	 	 	 	test	al,080h 	; готово ?
 EF7C  75 0C	 	 	 	jnz	j40a
 EF7E  E2 F9	 	 	 	loop	j39
 EF80  80 0E 0041 R 80	 	 	or	diskette_status,time_out
 EF85	 	 	 	j40:	 	 	 	; ошибка
 EF85  F9	 	 	 	stc	 	 	; возврат по ошибке
 EF86  5B	 	 	 	pop	bx
 EF87  5A	 	 	 	pop	dx
 EF88  59	 	 	 	pop	cx
 EF89  C3	 	 	 	ret
 	 	 	 	
 	 	 	 	;   Проверка признака направления
 	 	 	 	
 EF8A  EC	 	 	j40a:	in	al,dx	 	; получить регистр состояния
 EF8B  A8 40	 	 	 	test	al,040h 	; сбой позиционирования
 EF8D  75 07	 	 	 	jnz	j42	; если все нормально, считать состояние
 EF8F	 	 	 	j41:
 EF8F  80 0E 0041 R 20	 	 	or	diskette_status,bad_nec
 EF94  EB EF	 	 	 	jmp	short j40	; ошибка
 	 	 	 	
 	 	 	 	;   Считывание состояния
 	 	 	 	
 EF96	 	 	 	j42:
 EF96  42	 	 	 	inc	dx	 	; указать порт
 EF97  EC	 	 	 	in	al,dx	 	; ввести данные
 EF98  88 05	 	 	 	mov    byte ptr [di],al  ; сохранить байт
 EF9A  47	 	 	 	inc	di	 	; увеличить адрес
 EF9B  B9 000A	 	 	 	mov	cx,000ah	; счетчик
 EF9E  E2 FE	 	 	j43:	loop	j43
 EFA0  4A	 	 	 	dec	dx
 EFA1  EC	 	 	 	in	al,dx	 	; получить состояние
 EFA2  A8 10	 	 	 	test	al,010h
 EFA4  74 06	 	 	 	jz	j44
 EFA6  FE CB	 	 	 	dec	bl	 	; -1 из количества циклов
 EFA8  75 CA	 	 	 	jnz	j38
 EFAA  EB E3	 	 	 	jmp	short j41	; сигнал неверен
 	 	 	 	
 EFAC	 	 	 	j44:
 EFAC  5B	 	 	 	pop	bx	 	; восстановить регистры
 EFAD  5A	 	 	 	pop	dx
 EFAE  59	 	 	 	pop	cx
 EFAF  C3	 	 	 	ret	 	 	; возврат из прерывания
 EFB0	 	 	 	results endp
 	 	 	 	;-----------------------------
 	 	 	 	; num_trans
 	 	 	 	;   Эта программа вычисляет количество секторов, которое действительно
 	 	 	 	; было записано или считано с НГМД
 	 	 	 	;
 	 	 	 	;   ВВОД
 	 	 	 	;	 (CH) - цилиндр,
 	 	 	 	;	 (CL) - сектор.
 	 	 	 	;
 	 	 	 	;   ВЫВОД
 	 	 	 	;	 (AL) - количество действительно переданных секторов.
 	 	 	 	;
 	 	 	 	;------------------------------
 EFB0	 	 	 	num_trans proc	near
 EFB0  A0 0045 R	 	 	mov	al,nec_status+3  ; получить последний цилиндр
 EFB3  3A C5	 	 	 	cmp	al,ch	 	; сравнить со стартовым
 EFB5  A0 0047 R	 	 	mov	al,nec_status+5  ; получить последний сектор
 EFB8  74 0A	 	 	 	jz	j45
 EFBA  BB 0008	 	 	 	mov	bx,8
 EFBD  E8 EE51 R	 	 	call	get_parm	; получить значение EOT
 EFC0  8A C4	 	 	 	mov	al,ah	 	; AH в AL
 EFC2  FE C0	 	 	 	inc	al	 	; EOT+1
 EFC4  2A C1	 	 	j45:	sub	al,cl	    ; вычисление стартового номера из конечного
 EFC6  C3	 	 	 	ret
 EFC7	 	 	 	num_trans endp
 	 	 	 	
 	 	 	 	;-------------------------------
 	 	 	 	; disk_base
 	 	 	 	;   Эта программа устанавливает параметры,требуемые для операций
 	 	 	 	; НГМД.
 	 	 	 	;--------------------------------
 	 	 	 	
 EFC7	 	 	 	disk_base label byte
 EFC7  CF	 	 	 	db	11001111b	;
 EFC8  02	 	 	 	db	2	 	;
 EFC9  25	 	 	 	db	motor_wait	;
 EFCA  02	 	 	 	db	2	 	;
 EFCB  08	 	 	 	db	8	 	;
 EFCC  2A	 	 	 	db	02ah	 	;
 EFCD  FF	 	 	 	db	0ffh	 	;
 EFCE  50	 	 	 	db	050h	 	;
 EFCF  F6	 	 	 	db	0f6h	 	;
 EFD0  19	 	 	 	db	25	 	;
 EFD1  04	 	 	 	db	4	 	;
 	 	 	 	;--- int 17-------------------
 	 	 	 	;   Программа связи с печатающим устройством
 	 	 	 	;
 	 	 	 	;   Эта программа выполняет три функции, код которых задается
 	 	 	 	; в регистре AH:
 	 	 	 	;   AH=0 - печать знака, заданного в регистре AL. Если в
 	 	 	 	; результате выполнения функции знак не напечатается, то в регистре
 	 	 	 	; AL устанавливается "1" (тайм-аут);
 	 	 	 	;   AH=1 - инициализация порта печати. После выполнения функции
 	 	 	 	; в регистре AH находится байт состояния печатающего устройства;
 	 	 	 	;   AH=2H - считывание байта состояния печатающего устройства.
 	 	 	 	;   В регистре DX необходимо задать ноль.
 	 	 	 	;   Значение разрядов байта состояния печатающего устройства:
 	 	 	 	;   0 - тайм-аут;
 	 	 	 	;   3 - ошибка ввода-вывода;
 	 	 	 	;   4 - выбран (SLCT);
 	 	 	 	;   5 - конец бумаги (PE);
 	 	 	 	;   6 - подтверждение;
 	 	 	 	;   7 - занято.
 	 	 	 	;------------------------------
 	 	 	 	
 	 	 	 	 	assume	cs:code,ds:data
 EFD2	 	 	 	printer_io proc far
 EFD2  FB	 	 	 	sti	 	 	; установить признак разрешения прерывания
 EFD3  1E	 	 	 	push	ds	 	; сохранить сегмент
 EFD4  52	 	 	 	push	dx
 EFD5  56	 	 	 	push	si
 EFD6  51	 	 	 	push	cx
 EFD7  53	 	 	 	push	bx
 EFD8  BE ---- R	 	 	mov	si,data
 EFDB  8E DE	 	 	 	mov	ds,si	 	; установить сегмент
 EFDD  8B F2	 	 	 	mov	si,dx
 EFDF  D1 E6	 	 	 	shl	si,1
 EFE1  8B 94 0008 R	 	 	mov	dx,printer_base[si]  ; получить базовый адрес
 	 	 	 	 	 	 	 	     ; печатающего устройства
 EFE5  0B D2	 	 	 	or	dx,dx	 	   ; печать подключена ?
 EFE7  74 0C	 	 	 	jz	b1	 	   ; нет, возврат
 EFE9  0A E4	 	 	 	or	ah,ah	 	   ; AH=0 ?
 EFEB  74 0E	 	 	 	jz	b2	 	   ; да, переход к печати знака
 EFED  FE CC	 	 	 	dec	ah	 	   ; AH=1 ?
 EFEF  74 42	 	 	 	jz	b8	 	   ; да, переход к инициализации
 EFF1  FE CC	 	 	 	dec	ah	 	   ; AH=2 ?
 EFF3  74 2A	 	 	 	jz	b5	   ; да, переход к считыванию байта состояния
 	 	 	 	
 	 	 	 	;    Выход из программы
 	 	 	 	
 EFF5	 	 	 	b1:
 EFF5  5B	 	 	 	pop	bx	 	; восстановить регистры
 EFF6  59	 	 	 	pop	cx
 EFF7  5E	 	 	 	pop	si
 EFF8  5A	 	 	 	pop	dx
 EFF9  1F	 	 	 	pop	ds
 EFFA  CF	 	 	 	iret
 	 	 	 	
 	 	 	 	;   Печать знака, заданного в AL
 	 	 	 	
 EFFB	 	 	 	b2:
 EFFB  50	 	 	 	push	ax
 EFFC  B3 0A	 	 	 	mov	bl,10	 	; количество циклов ожидания
 EFFE  33 C9	 	 	 	xor	cx,cx	 	; длительность одного цикла
 F000  EE	 	 	 	out	dx,al	 	; вывести символ в порт
 F001  42	 	 	 	inc	dx	 	; -1 из адреса порта
 F002	 	 	 	b3:	 	 	 	; ожидание BUSY
 F002  EC	 	 	 	in	al,dx	 	; получить состояние
 F003  8A E0	 	 	 	mov	ah,al	 	; переслать состояние в AH
 F005  A8 80	 	 	 	test	al,80h	 	; печать занята ?
 F007  75 0E	 	 	 	jnz	b4	 	; переход, если да
 F009  E2 F7	 	 	 	loop	b3	 	; цикл ожидания закончился ?
 F00B  FE CB	 	 	 	dec	bl	 	; да, -1 из количества циклов
 F00D  75 F3	 	 	 	jnz	b3	 	; время ожидания истекло ?
 F00F  80 CC 01	 	 	 	or	ah,1	 	; да, уст бит "тайм-аут"
 F012  80 E4 F9	 	 	 	and	ah,0f9h 	;
 F015  EB 14	 	 	 	jmp	short b7
 F017	 	 	 	b4:	 	 	 	; OUT_STROBE
 F017  B0 0D	 	 	 	mov	al,0dh	 	; установить высокий строб
 F019  42	 	 	 	inc	dx	; стробирование битом 0 порта C для 8255
 F01A  EE	 	 	 	out	dx,al
 F01B  B0 0C	 	 	 	mov	al,0ch	 	; установить низкий строб
 F01D  EE	 	 	 	out	dx,al
 F01E  58	 	 	 	pop	ax	 	;
 	 	 	 	
 	 	 	 	;   Считывание байта состояния печатающего устройства
 	 	 	 	
 F01F	 	 	 	b5:
 F01F  50	 	 	 	push	ax	 	; сохранить регистр
 F020	 	 	 	b6:
 F020  8B 94 0008 R	 	 	mov	dx,printer_base[si]  ; получить адрес печати
 F024  42	 	 	 	inc	dx
 F025  EC	 	 	 	in	al,dx	 	; получить состояние печати
 F026  8A E0	 	 	 	mov	ah,al
 F028  80 E4 F8	 	 	 	and	ah,0f8h
 F02B	 	 	 	b7:
 F02B  5A	 	 	 	pop	dx
 F02C  8A C2	 	 	 	mov	al,dl
 F02E  80 F4 48	 	 	 	xor	ah,48h
 F031  EB C2	 	 	 	jmp	short b1	; к выходу из программы
 	 	 	 	
 	 	 	 	;   Инициализация порта печатающего устройства
 	 	 	 	
 F033	 	 	 	b8:
 F033  50	 	 	 	push	ax
 F034  83 C2 02	 	 	 	add	dx,2	 	; указать порт
 F037  B0 08	 	 	 	mov	al,8
 F039  EE	 	 	 	out	dx,al
 F03A  B8 03E8	 	 	 	mov	ax,1000 	 ; время задержки
 F03D	 	 	 	b9:
 F03D  48	 	 	 	dec	ax	 	 ; цикл задержки
 F03E  75 FD	 	 	 	jnz	b9
 F040  B0 0C	 	 	 	mov	al,0ch
 F042  EE	 	 	 	out	dx,al
 F043  EB DB	 	 	 	jmp	short b6    ; переход к считыванию байта состояния
 F045	 	 	 	printer_io	endp
 	 	 	 	;--- int 10------------------
 	 	 	 	;
 	 	 	 	;   Программа обработки прерывания ЭЛИ
 	 	 	 	;
 	 	 	 	;   Эта программа обеспечивает выполнение функций обслуживания
 	 	 	 	; адаптера ЭЛИ, код которых задается в регистре AH:
 	 	 	 	;
 	 	 	 	;    AH=0   - установить режим работы адаптера ЭЛИ. В результате
 	 	 	 	; выполнения функции в регистре AL могут устанавливаться следу-
 	 	 	 	; ющие режимы:
 	 	 	 	;    0 - 40х25, черно-белый, алфавитно-цифровой;
 	 	 	 	;    1 - 40х25, цветной, алфавитно-цифровой;
 	 	 	 	;    2 - 80х25, черно-белый, алфавитно-цифровой;
 	 	 	 	;    3 - 80х25, цветной, алфавитно-цифровой;
 	 	 	 	;    4 - 320х200, цветной, графический;
 	 	 	 	;    5 - 320х200, черно-белый, графический;
 	 	 	 	;    6 - 640х200, черно-белый, графический;
 	 	 	 	;    7 - 80х25, черно-белый, алфавитно-цифровой.
 	 	 	 	;    Режимы 0 - 6 используются для ЭМ адаптера ЭЛИ, режим 7
 	 	 	 	; используется для монохромного черно-белого 80х25 адаптера.
 	 	 	 	;
 	 	 	 	;    AH=1   - установить размер курсора. Функция задает размер кур-
 	 	 	 	; сора и управление им.
 	 	 	 	;   Разряды 0 - 4 регистра CL определяют конечную границу курсора,
 	 	 	 	; разряды 0 - 4 регистра CH - начальную границу курсора.
 	 	 	 	;    Разряды 6 и 5 задают управление курсором:
 	 	 	 	;    00 - курсор мерцает с частотой, задаваемой аппаратурно;
 	 	 	 	;    01 - курсор отсутствует.
 	 	 	 	;    Аппаратурно всегда вызывается мерцание курсора с частотой,
 	 	 	 	; равной 1/16 частоты кадровой развертки.
 	 	 	 	;
 	 	 	 	;    AH=2   - установить текущую позицию курсора. Для выполнения
 	 	 	 	; функции необходимо задать следующие координаты курсора:
 	 	 	 	;    BH - страница;
 	 	 	 	;    DX - строка и колонка.
 	 	 	 	; При графическом режиме регистр BH=0.
 	 	 	 	;
 	 	 	 	;    AH=3   - считать текущее положение курсора. Функция вос-
 	 	 	 	; станавливает текущее положение курсора. Перед выполнением
 	 	 	 	; функции в регистре BH необходимо задать страницу.
 	 	 	 	;    После выполнения программы регистры содержат следующую
 	 	 	 	; информацию:
 	 	 	 	;    DH - строка;
 	 	 	 	;    DL - колонка;
 	 	 	 	;    CX - размер курсора и управление им.
 	 	 	 	;
 	 	 	 	;    AH=5  - установить активную страницу буфера адаптера.
 	 	 	 	; Функция используется только в алфавитно-цифровом режиме.
 	 	 	 	; Для ее выполнения необходимо в регистре AL задать страницу:
 	 	 	 	;    0-7 - для режимов 0 и 1;
 	 	 	 	;    0-3 - для режимов 2 и 3.
 	 	 	 	;    Значения режимов те же, что и для функции AH=0.
 	 	 	 	;
 	 	 	 	;    AH=6   - переместить блок символов вверх по экрану.
 	 	 	 	; Функция перемещает символы в пределах заданной области вверх
 	 	 	 	; по экрану, заполняя нижние строки пробелами с заданным атрибу-
 	 	 	 	; том.
 	 	 	 	;    Для выполнения функции необходимо задать следующие пара-
 	 	 	 	; метры;
 	 	 	 	;    AL - количество перемещаемых строк. Для очистки блока AL=0;
 	 	 	 	;    CX - координаты левого верхнего угла блока (строка,колонка);
 	 	 	 	;    DX - координаты правого нижнего угла блока;
 	 	 	 	;    BH - атрибут символа пробела.
 	 	 	 	;
 	 	 	 	;    AH=7   - переместить блок символов вниз. Функция перемещает
 	 	 	 	; символы в пределах заданной области вниз по экрану, заполняя
 	 	 	 	; верхние строки пробелами с заданным атрибутом.
 	 	 	 	;    Для выполнения функции необходимо задать те же параметры,
 	 	 	 	; что и для функции AH=6H.
 	 	 	 	;
 	 	 	 	;    AH=8   - считать атрибут и код символа, находящегося в теку-
 	 	 	 	; щей позиции курсора. Функция считывает атрибут и код символа
 	 	 	 	; и помещает их в регистр AX (AL - код символа, AH - атрибут
 	 	 	 	; символа).
 	 	 	 	;    Для выполнения функции необходимо в регистре BH задать
 	 	 	 	; страницу (только для алфавитно-цифрового режима).
 	 	 	 	;
 	 	 	 	;    AH=9   - записать атрибут и код символа в текущую позицию
 	 	 	 	; курсора. Функция помещает код символа и его атрибут в текущую
 	 	 	 	; позицию курсора.
 	 	 	 	;    Для выполнения функции необходимо задать следующие параметры:
 	 	 	 	;    BH - отображаемая страница (только для алфавитно-цифрового
 	 	 	 	; режима;
 	 	 	 	;    CX - количество записываемых символов;
 	 	 	 	;    AL - код символа;
 	 	 	 	;    BL - атрибут символа для алфавитно-цифрового режима или
 	 	 	 	; цвет знака для графики. При записи точки разряд 7 регистра BL=1.    =1
 	 	 	 	;
 	 	 	 	;    AH=10 - записать символ в текущую позицию курсора. Атрибут
 	 	 	 	; не изменяется.
 	 	 	 	;    Для выполнения функции необходимо задать следующие параметры:
 	 	 	 	;    BH - отображаемая страница (только для алфавитно-цифрового
 	 	 	 	; режима);
 	 	 	 	;    CX - количество повторений символа;
 	 	 	 	;    AL - код записываемого символа.	 	 	 	      ся
 	 	 	 	;	 	 	 	 	 	 	 	      -
 	 	 	 	;    AH=11 - установить цветовую палитру.	 	 	      ь
 	 	 	 	;    При выполнении функции используются два варианта.
 	 	 	 	;    Для первого варианта в регистре BH задается ноль,а в регистре
 	 	 	 	; BL - значения пяти младших разрядов, используемых для выбора
 	 	 	 	; цветовой палитры (цвет заднего плана для цветного графического
 	 	 	 	; режима 320х200 или цвет каймы для цветного графического режима
 	 	 	 	; 40х25).
 	 	 	 	;    Для второго варианта в регистре BH задается "1", а в регистре
 	 	 	 	; BL - номер цветовой палитры (0 или 1).
 	 	 	 	;    Палитра 0 состоит из зеленого (1), красного (2) и желтого (3)
 	 	 	 	; цветов, палитра 1 - из голубого (1), фиолетового (2) и белого (3).
 	 	 	 	; При работе с видеомонитором цвета палитры заменяются соответству-
 	 	 	 	; ющими градациями цвета.
 	 	 	 	;    Результатом выполнения функции является установка цветовой       )
 	 	 	 	; палитры в регистре выбора цвета (3D9).
 	 	 	 	;
 	 	 	 	;    AH=12  - записать точку. Функция определяет относительный
 	 	 	 	; адрес байта внутри буфера ЭЛИ, по которому должна быть записана
 	 	 	 	; точка с заданными координатами.
 	 	 	 	;    Для выполнения функции необходимо задать следующие параметры:    ,
 	 	 	 	;    DX - строка;
 	 	 	 	;    CX - колонка;
 	 	 	 	;    AL - цвет выводимой точки. Если разряд 7 регистра AL уста-       3)
 	 	 	 	; новлен в "1", то выполняется операция XOR над значением точки
 	 	 	 	; из буфера и значением точки из регистра AL.
 	 	 	 	;
 	 	 	 	;    AH=13 - считать точку. Функция определяет относительный
 	 	 	 	; адрес байта внутри буфера ЭЛИ, по которому должна быть считана
 	 	 	 	; точка с заданными координатами.
 	 	 	 	;    Перед выполнением программы в регистрах задаются те же парамет-
 	 	 	 	; ры, что и для функции AH=12.
 	 	 	 	;   После выполнения программы в регистре AL находится значение
 	 	 	 	; считанной точки.
 	 	 	 	;
 	 	 	 	;    AH=14 - записать телетайп. Функция выводит символ в буфер
 	 	 	 	; ЭЛИ с одновременной установкой позиции курсора и передвижением
 	 	 	 	; курсора на экране.
 	 	 	 	;    После записи символа в последнюю позицию строки выполняется
 	 	 	 	; автоматический переход на новую строку. Если страница экрана
 	 	 	 	; заполнена, выполняется перемещение на одну строку вверх. Осво-
 	 	 	 	; бодившаяся строка заполняется значением атрибута символа для
 	 	 	 	; алфавитно-цифрового режима или нулями - для графики.
 	 	 	 	;    После записи очередного символа курсор устанавливается
 	 	 	 	; в следующую позицию.
 	 	 	 	;    Для выполнения программы необходимо задать следующие параметры:
 	 	 	 	;    AL - код выводимого символа;
 	 	 	 	;    BL - цвет переднего плана (для графического режима).
 	 	 	 	;    Программа обрабатывает следующие служебные символы:
 	 	 	 	;    0BH - сдвиг курсора на одну позицию (без очистки);
 	 	 	 	;    0DH - перемещение курсора в начало строки;
 	 	 	 	;    0AH - перемещение курсора на следующую строку;
 	 	 	 	;    07H - звуковой сигнал.
 	 	 	 	;
 	 	 	 	;    AH=15 - получить текущее состояние ЭЛИ. Функция считывает
 	 	 	 	; текущее состояние ЭЛИ из памяти и размещает его в следующих
 	 	 	 	; регистрах;
 	 	 	 	;    AH - количество колонок (40 или 80);
 	 	 	 	;    AL - текущий режим (0-7). Значения режимов те же, что и для
 	 	 	 	; функции AH=0;
 	 	 	 	;    BH - номер активной страницы.
 	 	 	 	;
 	 	 	 	;   AH=17 - загрузить знакогенератор пользователя. Функция дает
 	 	 	 	; возможность пользователю загружать знакогенератор любым, необ-
 	 	 	 	; ходимым ему алфавитом.
 	 	 	 	;    Для выполнения программы необходимо задать следующие параметры:
 	 	 	 	;    ES:BP - адрес таблицы, сформированной пользователем;
 	 	 	 	;    CX    - количество передаваемых символов;
 	 	 	 	;    BL    - код символа, начиная с которого загружается таблица
 	 	 	 	; пользователя;
 	 	 	 	;    BH - количество байт на знакоместо;
 	 	 	 	;    DL - идентификатор таблицы пользователя;
 	 	 	 	;    AL - режим:
 	 	 	 	;	 	  AL=0	 -  загрузить знакогенератор
 	 	 	 	;	 	  AL=1	 -  выдать идентификатор таблицы
 	 	 	 	;	 	  AL=3	 -  загрузить вторую половину знакогенератора:
 	 	 	 	;	 	 	    BL=0 - загрузить вторую половину знакогене
 	 	 	 	;	 	 	    ратора из ПЗУ кодовой таблицы с русским
 	 	 	 	;	 	 	    алфавитом,
 	 	 	 	;	 	 	    BL=1 - загрузить вторую половину знакогене
 	 	 	 	;	 	 	    ратора из ПЗУ стандартной кодовой таблицей
 	 	 	 	;	 	 	    ASCII (USA)
 	 	 	 	;   На выходе:
 	 	 	 	;	AH   -	количество байт на знакоместо
 	 	 	 	;	AL   -	идентификатор таблицы пользователя
 	 	 	 	;	CF=1   -   операция завершена успешно
 	 	 	 	;
 	 	 	 	;    AH=19 - переслать цепочку символов. Функция позволяет пере-
 	 	 	 	; сылать символы четырьмя способами, тип которых задается в
 	 	 	 	; регистре AL:
 	 	 	 	;    AL=0 - символ, символ, символ, ...
 	 	 	 	; В регистре BL задается атрибут, курсор не движется;
 	 	 	 	;    AL=1 - символ, символ, символ, ...
 	 	 	 	; В регистре BL задается атрибут, курсор движется;
 	 	 	 	;    AL=2H - символ, атрибут, символ, атрибут, ...
 	 	 	 	; Курсор не движется;
 	 	 	 	;    AL=3H - символ, атрибут, символ, атрибут, ...
 	 	 	 	; Курсор движется.
 	 	 	 	;     Кроме того необходимо задать в регистрах:
 	 	 	 	;    ES:BP - начальный адрес цепочки символов;
 	 	 	 	;    CX    - количество символов;
 	 	 	 	;    DH,DL - строку и колонку для начала записи;
 	 	 	 	;    BH    - номер страницы.
 	 	 	 	;-----------------------------------------------------------
 	 	 	 	
 	 	 	 	 	assume cs:code,ds:data,es:video_ram
 	 	 	 	
 F045	 	 	 	m1	label	word	 	; таблица функций адаптера ЭЛИ
 F045  F111 R	 	 	 	dw	offset	set_mode
 F047  F1E5 R	 	 	 	dw	offset	set_ctype
 F049  F206 R	 	 	 	dw	offset	set_cpos
 F04B  F230 R	 	 	 	dw	offset	read_cursor
 F04D  F93F R	 	 	 	dw	offset	read_lpen1
 F04F  F247 R	 	 	 	dw	offset	act_disp_page
 F051  F2B4 R	 	 	 	dw	offset	scroll_up
 F053  F359 R	 	 	 	dw	offset	scroll_down
 F055  F395 R	 	 	 	dw	offset	read_ac_current
 F057  F3DB R	 	 	 	dw	offset	write_ac_current
 F059  F40E R	 	 	 	dw	offset	write_c_current
 F05B  F26B R	 	 	 	dw	offset	set_color
 F05D  F450 R	 	 	 	dw	offset	write_dot
 F05F  F43F R	 	 	 	dw	offset	read_dot
 F061  D3AD R	 	 	 	dw	offset	write_tty
 F063  F291 R	 	 	 	dw	offset	video_state
 F065  F1DC R	 	 	 	dw	video_return
 F067  D430 R	 	 	 	dw	offset ah12
 F069  F1DC R	 	 	 	dw	offset video_return
 F06B  C861 R	 	 	 	dw	ah13
 = 0028	 	 	 	m1l	equ	28h
 	 	 	 	
 F06D	 	 	 	video_io proc	near
 F06D  FB	 	 	 	sti	 	    ; установить признак разрешения прерывания
 F06E  FC	 	 	 	cld
 F06F  06	 	 	 	push	es
 F070  1E	 	 	 	push	ds
 F071  52	 	 	 	push	dx
 F072  51	 	 	 	push	cx
 F073  53	 	 	 	push	bx
 F074  56	 	 	 	push	si
 F075  57	 	 	 	push	di
 F076  55	 	 	 	push	bp
 F077  50	 	 	 	push	ax	 	; сохранить значение AX
 F078  8A C4	 	 	 	mov	al,ah	 	; переслать AH в AL
 F07A  32 E4	 	 	 	xor	ah,ah	 	; обнулить старший байт
 F07C  D1 E0	 	 	 	sal	ax,1	 	; умножить на 2
 F07E  8B F0	 	 	 	mov	si,ax	 	; поместить в SI
 F080  3D 0028	 	 	 	cmp	ax,m1l	 	; проверка длины таблицы функций
 F083  72 04	 	 	 	jb	m2	 	; адаптера ЭЛИ
 F085  58	 	 	 	pop	ax	 	; восстановить AX
 F086  E9 F1DC R	 	 	jmp	video_return	; выход, если AX неверно
 F089  B8 ---- R	 	m2:	mov	ax,data
 F08C  8E D8	 	 	 	mov	ds,ax
 F08E  B8 B800	 	 	 	mov	ax,0b800h	; сегмент для цветного адаптера
 F091  8B 3E 0010 R	 	 	mov	di,equip_flag	; получить тип адаптера
 F095  81 E7 0030	 	 	and	di,30h	 	; выделить биты режима
 F099  83 FF 30	 	 	 	cmp	di,30h	 	; есть установка ч/б адаптера ?
 F09C  75 03	 	 	 	jne	m3
 F09E  B8 B000	 	 	 	mov	ax,0b000h	; уст адреса буфера для ч/б адаптера
 F0A1  8E C0	 	 	m3:	mov	es,ax
 F0A3  58	 	 	 	pop	ax	 	; восстановить значение
 F0A4  80 FC 10	 	 	 	cmp	ah,10h
 F0A7  72 07	 	 	 	jb	mm3
 F0A9  55	 	 	 	push	bp
 F0AA  8B EC	 	 	 	mov	bp,sp
 F0AC  8E 46 10	 	 	 	mov	es,[bp+10h]
 F0AF  5D	 	 	 	pop	bp
 F0B0	 	 	 	mm3:
 F0B0  8A 26 0049 R	 	 	mov	ah,crt_mode	; получить текущий режим в AH
 F0B4  2E: FF A4 F045 R	 	 	jmp   cs:[si+offset m1]
 F0B9	 	 	 	video_io	endp
 	 	 	 	;-------------------------
 	 	 	 	; set mode
 	 	 	 	
 	 	 	 	;   Эта программа устанавливает режим работы адаптера ЭЛИ
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   (AL) - содержит значение режима.
 	 	 	 	;
 	 	 	 	;--------------------------
 	 	 	 	
 	 	 	 	;   Таблицы параметров ЭЛИ
 	 	 	 	
 F0B9	 	 	 	video_parms label	byte
 	 	 	 	
 	 	 	 	;   Таблица инициализации
 	 	 	 	
 F0B9  38 28 2D 0A 1F 06	 	db	38h,28h,2dh,0ah,1fh,6,19h   ; уст для 40х25
       19	 	 	
 F0C0  1C 02 07 06 07	 	 	db	1ch,2,7,6,7
 F0C5  00 00 00 00	 	 	db	0,0,0,0
 = 0010	 	 	 	m4	equ	10h
 	 	 	 	
 F0C9  71 50 5A 0A 1F 06	 	db	71h,50h,5ah,0ah,1fh,6,19h   ; уст для 80х25
       19	 	 	
 F0D0  1C 02 07 06 07	 	 	db	1ch,2,7,6,7
 F0D5  00 00 00 00	 	 	db	0,0,0,0
 	 	 	 	
 F0D9  38 28 2D 0A 7F 06	 	db	38h,28h,2dh,0ah,7fh,6,64h   ; уст для графики
       64	 	 	
 F0E0  70 02 01 06 07	 	 	db	70h,2,1,6,7
 F0E5  00 00 00 00	 	 	db	0,0,0,0
 	 	 	 	
 F0E9  62 50 50 0F 19 06	 	db	62h,50h,50h,0fh,19h,6,19h   ; уст для 80х25 ч/б адаптера
       19	 	 	
 F0F0  19 02 0D 0B 0C	 	 	db	19h,2,0dh,0bh,0ch
 F0F5  00 00 00 00	 	 	db	0,0,0,0
 	 	 	 	
 F0F9	 	 	 	m5	label	word	 	; таблица для восстановления длины
 F0F9  0800	 	 	 	dw	2048
 F0FB  1000	 	 	 	dw	4096
 F0FD  4000	 	 	 	dw	16384
 F0FF  4000	 	 	 	dw	16384
 	 	 	 	
 	 	 	 	;   Колонки
 F101	 	 	 	m6	label	byte
 F101  28 28 50 50 28 28	 	db	40,40,80,80,40,40,80,80
       50 50	 	 	
 	 	 	 	
 	 	 	 	;--- c_reg_tab
 F109	 	 	 	m7	label	byte	 	; таблица установки режима
 F109  2C 28 2D 29 2A 2E	 	db	2ch,28h,2dh,29h,2ah,2eh,1eh,29h
       1E 29	 	 	
 	 	 	 	
 F111	 	 	 	set_mode proc	near
 F111  BA 03D4	 	 	 	mov	dx,03d4h	; адрес цветного адаптера
 F114  B3 00	 	 	 	mov	bl,0	 ; уст значение для цветного адаптера
 F116  83 FF 30	 	 	 	cmp	di,30h	 	; установлен ч/б адаптер ?
 F119  75 07	 	 	 	jne	m8	 	; переход, если указан цветной
 F11B  B0 07	 	 	 	mov	al,7	 	; указать ч/б режим
 F11D  BA 03B4	 	 	 	mov	dx,03b4h	; адрес для ч/б адаптера
 F120  FE C3	 	 	 	inc	bl	 	; установить режим для ч/б адаптера
 F122  8A E0	 	 	m8:	mov	ah,al	 	; сохранить режим в AH
 F124  A2 0049 R	 	 	mov	crt_mode,al
 F127  89 16 0063 R	 	 	mov	addr_6845,dx	; сохранить адрес управляющего порта
 	 	 	 	 	 	 	 	; для активного дисплея
 F12B  1E	 	 	 	push	ds
 F12C  50	 	 	 	push	ax	 	; сохранить режим
 F12D  52	 	 	 	push	dx	 	; сохранить значение порта вывода
 F12E  83 C2 04	 	 	 	add	dx,4	 	; указать адрес регистра управления
 F131  8A C3	 	 	 	mov	al,bl	 	; получить режим для адаптера
 F133  EE	 	 	 	out	dx,al	 	; сброс экрана
 F134  5A	 	 	 	pop	dx	 	; восстановить DX
 F135  2B C0	 	 	 	sub	ax,ax
 F137  8E D8	 	 	 	mov	ds,ax	 	; установить адрес таблицы векторов
 	 	 	 	 	assume	ds:abs0
 F139  C5 1E 0074 R	 	 	lds	bx,parm_ptr ; получить значение параметров адаптера ЭЛИ
 F13D  58	 	 	 	pop	ax	 	; восстановить AX
 	 	 	 	 	assume	ds:code
 F13E  B9 0010	 	 	 	mov	cx,m4	   ; установить длину таблицы параметров
 F141  80 FC 02	 	 	 	cmp	ah,2	 	; определение режима
 F144  72 10	 	 	 	jc	m9	 	; режим 0 или 1 ?
 F146  03 D9	 	 	 	add	bx,cx	 	; уст начало таблицы параметров
 F148  80 FC 04	 	 	 	cmp	ah,4
 F14B  72 09	 	 	 	jc	m9	 	; режим 2 или 3
 F14D  03 D9	 	 	 	add	bx,cx	 	; начало таблицы для графики
 F14F  80 FC 07	 	 	 	cmp	ah,7
 F152  72 02	 	 	 	jc	m9	 	; режимы 4, 5 или 6 ?
 F154  03 D9	 	 	 	add	bx,cx	 	; уст начало таблицы для ч/б адаптера
 	 	 	 	
 	 	 	 	;   BX указывает на строку таблицы инициализации
 	 	 	 	
 F156	 	 	 	m9:	 	 	 	; OUT_INIT
 F156  50	 	 	 	push	ax	 	; сохранить режим в AH
 F157  32 E4	 	 	 	xor	ah,ah	 	;
 	 	 	 	
 	 	 	 	;   Цикл таблицы, устанавливающий адреса регистров и выводящий значения
 	 	 	 	; из таблицы
 	 	 	 	
 F159	 	 	 	m10:
 F159  8A C4	 	 	 	mov	al,ah	 	;
 F15B  EE	 	 	 	out	dx,al
 F15C  42	 	 	 	inc	dx	 	; указать адрес порта
 F15D  FE C4	 	 	 	inc	ah	 	;
 F15F  8A 07	 	 	 	mov	al,byte ptr [bx]   ; получить значение таблицы
 F161  EE	 	 	 	out	dx,al	 	; послать строку из таблицы в порт
 F162  43	 	 	 	inc	bx	 	; +1 к адресу таблицы
 F163  4A	 	 	 	dec	dx	 	; -1 из адреса порта
 F164  E2 F3	 	 	 	loop	m10	 	; передана вся таблица ?
 F166  58	 	 	 	pop	ax	 	; вернуть режимы
 F167  1F	 	 	 	pop	ds	 	; вернуть сегмент
 	 	 	 	 	assume	ds:data
 	 	 	 	
 	 	 	 	;   Инициализация буфера дисплея
 	 	 	 	
 F168  33 FF	 	 	 	xor	di,di	 	; DI=0
 F16A  89 3E 004E R	 	 	mov	crt_start,di	; сохранить начальный адрес
 F16E  C6 06 0062 R 00	 	 	mov	active_page,0	; установить активную страницу
 F173  B9 2000	 	 	 	mov	cx,8192 	; количество слов в цветном адаптере
 F176  80 FC 04	 	 	 	cmp	ah,4	 	; опрос графики
 F179  72 0C	 	 	 	jc	m12	 	; нет инициализации графики
 F17B  80 FC 07	 	 	 	cmp	ah,7	 	; опрос ч/б адаптера
 F17E  74 04	 	 	 	je	m11	 	; инициализация ч/б адаптера
 F180  33 C0	 	 	 	xor	ax,ax	 	; для графического режима
 F182  EB 06	 	 	 	jmp	short m13	; очистить буфер
 F184	 	 	 	m11:	 	 	 	; инициализация ч/б адаптера
 F184  B9 0800	 	 	 	mov	cx,2048 	; об'ем буфера ч/б адаптера
 F187	 	 	 	m12:
 F187  B8 0720	 	 	 	mov	ax,' '+7*256    ; заполнить характеристики для альфа
 F18A	 	 	 	m13:	 	 	 	; очистить буфер
 F18A  F3/ AB	 	 	 	rep	stosw	 	; заполнить область буфера пробелами
 	 	 	 	
 	 	 	 	;   Формирование порта управления режимом
 	 	 	 	
 F18C  C7 06 0060 R 0607	 	mov	cursor_mode,607h   ; установить режим текущего курсора
 F192  A0 0049 R	 	 	mov	al,crt_mode	; получить режим в регистре AX
 F195  32 E4	 	 	 	xor	ah,ah
 F197  8B F0	 	 	 	mov	si,ax	 	; таблица указателей режима
 F199  8B 16 0063 R	 	 	mov	dx,addr_6845	; подготовить адрес порта для вывода
 F19D  83 C2 04	 	 	 	add	dx,4
 F1A0  2E: 8A 84 F109 R	 	 	mov al,cs:[si+offset m7]
 F1A5  EE	 	 	 	out	dx,al
 F1A6  A2 0065 R	 	 	mov	crt_mode_set,al
 	 	 	 	
 	 	 	 	;   Форморование количества колонок
 	 	 	 	
 F1A9  2E: 8A 84 F101 R	 	 	mov al,cs:[si+offset m6]
 F1AE  32 E4	 	 	 	xor	ah,ah
 F1B0  A3 004A R	 	 	mov	crt_cols,ax	; коичество колонок на экране
 	 	 	 	
 	 	 	 	;   Установить позицию курсора
 	 	 	 	
 F1B3  81 E6 000E	 	 	and	si,0eh	 	;
 F1B7  2E: 8B 8C F0F9 R	 	 	mov cx,cs:[si+offset m5]  ; длина для очистки
 F1BC  89 0E 004C R	 	 	mov	crt_len,cx
 F1C0  B9 0008	 	 	 	mov	cx,8	 	; очистить все позиции курсора
 F1C3  BF 0050 R	 	 	mov	di,offset cursor_posn
 F1C6  1E	 	 	 	push	ds	 	; восстановить сегмент
 F1C7  07	 	 	 	pop	es
 F1C8  33 C0	 	 	 	xor	ax,ax
 F1CA  F3/ AB	 	 	 	rep	stosw	 	; заполнить нулями
 	 	 	 	
 	 	 	 	;   Установка регистра сканирования
 	 	 	 	
 F1CC  42	 	 	 	inc	dx	 	; уст порт сканирования по умолчанию
 F1CD  B0 30	 	 	 	mov	al,30h	 	; значение 30H для всех режимов,
 	 	 	 	 	 	 	 	; исключая 640х200
 F1CF  80 3E 0049 R 06	 	 	cmp	crt_mode,6	; режим ч/б 640х200
 F1D4  75 02	 	 	 	jnz	m14	 	; если не 640х200
 F1D6  B0 3F	 	 	 	mov	al,3fh	 	; если 640х200, то поместить в 3FH
 F1D8  EE	 	 	m14:	out	dx,al	 	; вывод правильного значения в порт 3D9
 F1D9  A2 0066 R	 	 	mov	crt_pallette,al   ; сохранить значение для использования
 	 	 	 	
 	 	 	 	;   Нормальный возврат
 	 	 	 	
 F1DC	 	 	 	video_return:
 F1DC  5D	 	 	 	pop	bp
 F1DD  5F	 	 	 	pop	di
 F1DE  5E	 	 	 	pop	si
 F1DF  5B	 	 	 	pop	bx
 F1E0	 	 	 	m15:
 F1E0  59	 	 	 	pop	cx	 	; восстановление регистров
 F1E1  5A	 	 	 	pop	dx
 F1E2  1F	 	 	 	pop	ds
 F1E3  07	 	 	 	pop	es
 F1E4  CF	 	 	 	iret	 	 	; возврат из прерывания
 F1E5	 	 	 	set_mode	endp
 	 	 	 	;--------------------
 	 	 	 	; set_ctype
 	 	 	 	;
 	 	 	 	;   Эта программа устанавливает размер курсора и управление им
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   (CX) - содержит размер курсора. (CH - начальная граница,
 	 	 	 	;	 	  CL - конечная граница)
 	 	 	 	;
 	 	 	 	;--------------------
 F1E5	 	 	 	set_ctype proc	near
 F1E5  B4 0A	 	 	 	mov	ah,10	 	; установить регистр 6845 для курсора
 F1E7  89 0E 0060 R	 	 	mov	cursor_mode,cx	 ; сохранить в области данных
 F1EB  E8 F1F0 R	 	 	call	m16	 	; вывод регистра CX
 F1EE  EB EC	 	 	 	jmp	short video_return
 	 	 	 	
 F1F0	 	 	 	m16:
 F1F0  8B 16 0063 R	 	 	mov	dx,addr_6845	; адрес регистра
 F1F4  8A C4	 	 	 	mov	al,ah	 	; получить значение
 F1F6  EE	 	 	 	out	dx,al	 	; установить регистр
 F1F7  42	 	 	 	inc	dx	 	; регистр данных
 F1F8  8A C5	 	 	 	mov	al,ch	 	; данные
 F1FA  EE	 	 	 	out	dx,al
 F1FB  4A	 	 	 	dec	dx
 F1FC  8A C4	 	 	 	mov	al,ah
 F1FE  FE C0	 	 	 	inc	al	 	; указать другой регистр данных
 F200  EE	 	 	 	out	dx,al	 	; установить второй регистр
 F201  42	 	 	 	inc	dx
 F202  8A C1	 	 	 	mov	al,cl	 	; второе значение данных
 F204  EE	 	 	 	out	dx,al
 F205  C3	 	 	 	ret	 	 	; возврат
 F206	 	 	 	set_ctype	endp
 	 	 	 	;----------------------------
 	 	 	 	; set_cpos
 	 	 	 	;
 	 	 	 	;   Установить текущую позицию курсора
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   DX - строка, колонка,
 	 	 	 	;	   BH - номер страницы.
 	 	 	 	;
 	 	 	 	;-----------------------------
 F206	 	 	 	set_cpos proc	near
 F206  8A CF	 	 	 	mov	cl,bh
 F208  32 ED	 	 	 	xor	ch,ch	 	; установить счетчик
 F20A  D1 E1	 	 	 	sal	cx,1	 	; сдвиг слова
 F20C  8B F1	 	 	 	mov	si,cx
 F20E  89 94 0050 R	 	 	mov word ptr [si + offset cursor_posn],dx  ;сохранить указатель
 F212  38 3E 0062 R	 	 	cmp	active_page,bh
 F216  75 05	 	 	 	jnz	m17
 F218  8B C2	 	 	 	mov	ax,dx	 	; получить строку/колонку в AX
 F21A  E8 F21F R	 	 	call	m18	 	; установить курсор
 F21D	 	 	 	m17:
 F21D  EB BD	 	 	 	jmp	short video_return  ; возврат
 F21F	 	 	 	set_cpos	endp
 	 	 	 	
 	 	 	 	;   Установить позицию курсора, AX содержит  строку/колонку
 	 	 	 	
 F21F	 	 	 	m18	proc	near
 F21F  E8 F2A3 R	 	 	call	position
 F222  8B C8	 	 	 	mov	cx,ax
 F224  03 0E 004E R	 	 	add	cx,crt_start	; сложить с начальным адресом страницы
 F228  D1 F9	 	 	 	sar	cx,1	 	; делить на 2
 F22A  B4 0E	 	 	 	mov	ah,14
 F22C  E8 F1F0 R	 	 	call	m16
 F22F  C3	 	 	 	ret
 F230	 	 	 	m18	endp
 	 	 	 	;---------------------------
 	 	 	 	; read_cursor
 	 	 	 	;
 	 	 	 	;   Считать текущее положение курсора
 	 	 	 	;
 	 	 	 	;   Эта программа восстанавливает текущее положение курсора
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   BH - номер страницы
 	 	 	 	;
 	 	 	 	;   ВЫХОД
 	 	 	 	;	   DX - строка/колонка текущей позиции курсора,
 	 	 	 	;	   CX - размер курсора и управление им
 	 	 	 	;
 	 	 	 	;---------------------------
 F230	 	 	 	read_cursor proc near
 F230  8A DF	 	 	 	mov	bl,bh
 F232  32 FF	 	 	 	xor	bh,bh
 F234  D1 E3	 	 	 	sal	bx,1
 F236  8B 97 0050 R	 	 	mov dx,word ptr [bx+offset cursor_posn]
 F23A  8B 0E 0060 R	 	 	mov	cx,cursor_mode
 F23E  5D	 	 	 	pop	bp
 F23F  5F	 	 	 	pop	di	 	; восстановить регистры
 F240  5E	 	 	 	pop	si
 F241  5B	 	 	 	pop	bx
 F242  58	 	 	 	pop	ax
 F243  58	 	 	 	pop	ax
 F244  1F	 	 	 	pop	ds
 F245  07	 	 	 	pop	es
 F246  CF	 	 	 	iret
 F247	 	 	 	read_cursor	endp
 	 	 	 	;-----------------------------
 	 	 	 	; act_disp_page
 	 	 	 	;
 	 	 	 	;    Эта программа устанавливает активную страницу буфера адаптера ЭЛИ
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   AL - страница.
 	 	 	 	;
 	 	 	 	;   ВЫХОД
 	 	 	 	;	   Выполняется сброс контроллера для установки новой страницы.
 	 	 	 	;
 	 	 	 	;-----------------------------
 F247	 	 	 	act_disp_page proc	near
 F247  A2 0062 R	 	 	mov	active_page,al	; сохранить значение активной страницы
 F24A  8B 0E 004C R	 	 	mov	cx,crt_len	; получить длину области буфера
 F24E  98	 	 	 	cbw	 	 	; преобразовать AL
 F24F  50	 	 	 	push	ax	 	; сохранить значение страницы
 F250  F7 E1	 	 	 	mul	cx
 F252  A3 004E R	 	 	mov	crt_start,ax	; сохранить начальный адрес
 	 	 	 	 	 	 	 	; для следующего требования
 F255  8B C8	 	 	 	mov	cx,ax	 	; переслать начальный адрес в CX
 F257  D1 F9	 	 	 	sar	cx,1	 	; делить на 2
 F259  B4 0C	 	 	 	mov	ah,12
 F25B  E8 F1F0 R	 	 	call	m16
 F25E  5B	 	 	 	pop	bx	 	; восстановить значение страницы
 F25F  D1 E3	 	 	 	sal	bx,1
 F261  8B 87 0050 R	 	 	mov ax,word ptr [bx+offset cursor_posn]   ; получить курсор
 F265  E8 F21F R	 	 	call	m18	 	; установить позицию курсора
 F268  E9 F1DC R	 	 	jmp	video_return
 F26B	 	 	 	act_disp_page	endp
 	 	 	 	;------------------------------
 	 	 	 	; set color
 	 	 	 	;
 	 	 	 	;   Эта программа устанавливает цветовую палитру.
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   BH=0
 	 	 	 	;	 	BL - значение пяти младших бит, используемых для выбора
 	 	 	 	;	 	     цветовой палитры (цвет заднего плана для цветной
 	 	 	 	;	 	     графики 320х200 или цвет каймы для цветного 40х25)
 	 	 	 	;	   BH=1
 	 	 	 	;	 	BL - номер цветовой палитры
 	 	 	 	;	 	     BL=0 - зеленый(1), красный(2), желтый(3),
 	 	 	 	;	 	     BL=1 - голубой(1), фиолетовый(2), белый (3)
 	 	 	 	;
 	 	 	 	;   ВЫХОД
 	 	 	 	;	   Установленная цветовая палитра в порту 3D9.
 	 	 	 	;------------------------------
 F26B	 	 	 	set_color proc	near
 F26B  8B 16 0063 R	 	 	mov	dx,addr_6845	; порт для палитры
 F26F  83 C2 05	 	 	 	add	dx,5	 	; установить порт
 F272  A0 0066 R	 	 	mov	al,crt_pallette   ; получить текущее значение палитры
 F275  0A FF	 	 	 	or	bh,bh	 	; цвет 0 ?
 F277  75 0E	 	 	 	jnz	m20	 	; вывод цвета 1
 	 	 	 	
 	 	 	 	;   Обработка цветовой палитры 0
 	 	 	 	
 F279  24 E0	 	 	 	and	al,0e0h 	; сбросить 5 младших бит
 F27B  80 E3 1F	 	 	 	and	bl,01fh 	; сбросить 3 старших бита
 F27E  0A C3	 	 	 	or	al,bl
 F280	 	 	 	m19:
 F280  EE	 	 	 	out	dx,al	 	 ; вывод выбранного цвета в порт 3D9
 F281  A2 0066 R	 	 	mov	crt_pallette,al  ; сохранить значение цвета
 F284  E9 F1DC R	 	 	jmp	video_return
 	 	 	 	
 	 	 	 	;   Обработка цветовой палитры 1
 	 	 	 	
 F287	 	 	 	m20:
 F287  24 DF	 	 	 	and	al,0dfh 	;
 F289  D0 EB	 	 	 	shr	bl,1	 	; проверить младший бит BL
 F28B  73 F3	 	 	 	jnc	m19
 F28D  0C 20	 	 	 	or	al,20h	 	;
 F28F  EB EF	 	 	 	jmp	short m19	; переход
 F291	 	 	 	set_color	endp
 	 	 	 	;--------------------------
 	 	 	 	; video state
 	 	 	 	;
 	 	 	 	;   Эта программа получает текущее состояние ЭЛИ в AX.
 	 	 	 	;
 	 	 	 	;	   AH - количество колонок,
 	 	 	 	;	   AL - текущий режим,
 	 	 	 	;	   BH - номер активной страницы.
 	 	 	 	;
 	 	 	 	;---------------------------
 F291	 	 	 	video_state proc	near
 F291  8A 26 004A R	 	 	mov	ah,byte ptr crt_cols   ; получить количество колонок
 F295  A0 0049 R	 	 	mov	al,crt_mode	 	; текущий режим
 F298  8A 3E 0062 R	 	 	mov	bh,active_page	; получить текущую активную страницу
 F29C  5D	 	 	 	pop	bp
 F29D  5F	 	 	 	pop	di	 	; восстановить регистры
 F29E  5E	 	 	 	pop	si
 F29F  59	 	 	 	pop	cx
 F2A0  E9 F1E0 R	 	 	jmp	m15	 	; возврат к программе
 F2A3	 	 	 	video_state	endp
 	 	 	 	;---------------------------
 	 	 	 	; position
 	 	 	 	;
 	 	 	 	;   Эта программа вычисляет адрес буфера символа в режиме альфа.
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   AX - номер строки, номер колонки,
 	 	 	 	;
 	 	 	 	;   ВЫХОД
 	 	 	 	;	   AX - смещение символа с координатами (AH, AL) относительно
 	 	 	 	;	 	начала страницы. Смещение измеряется в байтах.
 	 	 	 	;
 	 	 	 	;----------------------------
 F2A3	 	 	 	position proc	near
 F2A3  53	 	 	 	push	bx	 	; сохранить регистр
 F2A4  8B D8	 	 	 	mov	bx,ax
 F2A6  8A C4	 	 	 	mov	al,ah	 	; строки в AL
 F2A8  F6 26 004A R	 	 	mul	byte ptr crt_cols
 F2AC  32 FF	 	 	 	xor	bh,bh
 F2AE  03 C3	 	 	 	add	ax,bx	 	; добавить к значению колонки
 F2B0  D1 E0	 	 	 	sal	ax,1	 	; * 2 для байтов атрибута
 F2B2  5B	 	 	 	pop	bx
 F2B3  C3	 	 	 	ret
 F2B4	 	 	 	position	endp
 	 	 	 	;-------------------------------
 	 	 	 	;scroll up
 	 	 	 	;
 	 	 	 	;   Эта программа перемещает блок символов вверх по экрану.
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   AH - текуший режим,
 	 	 	 	;	   AL - количество перемещаемых строк
 	 	 	 	;	   CX - координаты левого верхнего угла блока
 	 	 	 	;	 	(строка, колонка),
 	 	 	 	;	   DX - координаты правого нижнего угла
 	 	 	 	;	   BH - атрибут символа пробела (для опробеливания освобожда-
 	 	 	 	;	 	емых строк),
 	 	 	 	;
 	 	 	 	;   ВЫХОД
 	 	 	 	;	   Модифицированный буфер дисплея.
 	 	 	 	;
 	 	 	 	;-----------------------------------
 	 	 	 	 	assume cs:code,ds:data,es:data
 F2B4	 	 	 	scroll_up proc	near
 F2B4  8A D8	 	 	 	mov	bl,al	    ; сохранить количество перемещаемых строк
 F2B6  80 FC 04	 	 	 	cmp	ah,4	 	; проверка графического режима
 F2B9  72 08	 	 	 	jc	n1
 F2BB  80 FC 07	 	 	 	cmp	ah,7	 	; проверка ч/б адаптера
 F2BE  74 03	 	 	 	je	n1
 F2C0  E9 F4B6 R	 	 	jmp	graphics_up
 F2C3	 	 	 	n1:
 F2C3  53	 	 	 	push	bx	 	; сохранить полный атрибут в BH
 F2C4  8B C1	 	 	 	mov	ax,cx	 	; координаты левого верхнего угла
 F2C6  E8 F302 R	 	 	call	scroll_position
 F2C9  74 33	 	 	 	jz	n7
 F2CB  03 F0	 	 	 	add	si,ax
 F2CD  8A E6	 	 	 	mov	ah,dh	 	; строка
 F2CF  2A E3	 	 	 	sub	ah,bl
 F2D1	 	 	 	n2:
 F2D1  E8 F349 R	 	 	call	n10	 	; сдвинуть одну строку
 F2D4  03 F5	 	 	 	add	si,bp
 F2D6  03 FD	 	 	 	add	di,bp	 	; указать на следующую строку в блоке
 F2D8  FE CC	 	 	 	dec	ah	 	; счетчик строк для сдвига
 F2DA  75 F5	 	 	 	jnz	n2	 	; цикл строки
 F2DC	 	 	 	n3:	 	 	 	; очистка входа
 F2DC  58	 	 	 	pop	ax	 	; восстановить атрибут в AH
 F2DD  B0 20	 	 	 	mov	al,' '          ; заполнить пробелами
 F2DF	 	 	 	n4:	 	 	 	; очистка счетчика
 F2DF  E8 F352 R	 	 	call	n11	 	; очистка строки
 F2E2  03 FD	 	 	 	add	di,bp	 	; указать следующую строку
 F2E4  FE CB	 	 	 	dec	bl	 	; счетчик строк для сдвига
 F2E6  75 F7	 	 	 	jnz	n4	 	; очистка счетчика
 F2E8	 	 	 	n5:	 	 	 	; конец сдвига
 F2E8  B8 ---- R	 	 	mov	ax,data
 F2EB  8E D8	 	 	 	mov	ds,ax
 F2ED  80 3E 0049 R 07	 	 	cmp	crt_mode,7	; ч/б адаптер ?
 F2F2  74 07	 	 	 	je	n6	 	; если да - пропуск режима сброса
 F2F4  A0 0065 R	 	 	mov	al,crt_mode_set
 F2F7  BA 03D8	 	 	 	mov	dx,03d8h	; установить порт цветного адаптера
 F2FA  EE	 	 	 	out	dx,al
 F2FB	 	 	 	n6:
 F2FB  E9 F1DC R	 	 	jmp	video_return
 F2FE	 	 	 	n7:
 F2FE  8A DE	 	 	 	mov	bl,dh
 F300  EB DA	 	 	 	jmp	short n3	; очистить
 F302	 	 	 	scroll_up	endp
 	 	 	 	
 	 	 	 	;   Обработка сдвига
 	 	 	 	
 F302	 	 	 	scroll_position proc	near
 F302  80 3E 0049 R 02	 	 	cmp	crt_mode,2
 F307  72 19	 	 	 	jb	n9	 	; обработать 80х25 отдельно
 F309  80 3E 0049 R 03	 	 	cmp	crt_mode,3
 F30E  77 12	 	 	 	ja	n9
 	 	 	 	
 	 	 	 	;   Сдиг для цветного адаптера в режиме 80х25
 	 	 	 	
 F310  52	 	 	 	push	dx
 F311  BA 03DA	 	 	 	mov	dx,3dah 	; обработка цветного адаптера
 F314  50	 	 	 	push	ax
 F315	 	 	 	n8:	 	 	 	; ожидание доступности дисплея
 F315  EC	 	 	 	in	al,dx
 F316  A8 08	 	 	 	test	al,8
 F318  74 FB	 	 	 	jz	n8	 	; ожидание доступности дисплея
 F31A  B0 25	 	 	 	mov	al,25h
 F31C  BA 03D8	 	 	 	mov	dx,03d8h
 F31F  EE	 	 	 	out	dx,al	 	; выключить ЭЛИ
 F320  58	 	 	 	pop	ax
 F321  5A	 	 	 	pop	dx
 F322  E8 F2A3 R	 	n9:	call	position
 F325  03 06 004E R	 	 	add	ax,crt_start	; смещение активной страницы
 F329  8B F8	 	 	 	mov	di,ax	 	; для адреса сдвига
 F32B  8B F0	 	 	 	mov	si,ax
 F32D  2B D1	 	 	 	sub	dx,cx	 	; DX=строка
 F32F  FE C6	 	 	 	inc	dh
 F331  FE C2	 	 	 	inc	dl	 	; прибавление к началу
 F333  32 ED	 	 	 	xor	ch,ch	 	; установить старший байт счетчика в 0
 F335  8B 2E 004A R	 	 	mov	bp,crt_cols	; получить число колонок дисплея
 F339  03 ED	 	 	 	add	bp,bp	 	; увеличить на 2 байт атрибута
 F33B  8A C3	 	 	 	mov	al,bl	 	; получить счетчик строки
 F33D  F6 26 004A R	 	 	mul	byte ptr crt_cols   ; определить смещение из адреса,
 F341  03 C0	 	 	 	add	ax,ax	  ; умноженного на 2, для байта атрибута
 F343  06	 	 	 	push	es	; установить адресацию для области буфера
 F344  1F	 	 	 	pop	ds
 F345  80 FB 00	 	 	 	cmp	bl,0	 	; 0 означает очистку блока
 F348  C3	 	 	 	ret	 	 	; возврат с установкой флажков
 F349	 	 	 	scroll_position endp
 	 	 	 	
 	 	 	 	;   Перемещение строки
 	 	 	 	
 F349	 	 	 	n10	proc	near
 F349  8A CA	 	 	 	mov	cl,dl	 	; получить колонки для передачи
 F34B  56	 	 	 	push	si
 F34C  57	 	 	 	push	di	 	; сохранить начальный адрес
 F34D  F3/ A5	 	 	 	rep	movsw	 	; передать эту строку на экран
 F34F  5F	 	 	 	pop	di
 F350  5E	 	 	 	pop	si	 	; восстановить адресацию
 F351  C3	 	 	 	ret
 F352	 	 	 	n10	endp
 	 	 	 	
 	 	 	 	;   очистка строки
 	 	 	 	
 F352	 	 	 	n11	proc	near
 F352  8A CA	 	 	 	mov	cl,dl	 	; получить колонки для очистки
 F354  57	 	 	 	push	di
 F355  F3/ AB	 	 	 	rep	stosw	 	; запомнить полный знак
 F357  5F	 	 	 	pop	di
 F358  C3	 	 	 	ret
 F359	 	 	 	n11	endp
 	 	 	 	;------------------------
 	 	 	 	; scroll_down
 	 	 	 	;
 	 	 	 	;   Эта программа перемещает блок символов вниз по
 	 	 	 	; экрану, заполняя верхние строки пробелом с заданным атрибутом
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   AH - текущий режим,
 	 	 	 	;	   AL - количество строк,
 	 	 	 	;	   CX - верхний левый угол блока,
 	 	 	 	;	   DX - правый нижний угол блока,
 	 	 	 	;	   BH - атрибут символа-заполнителя (пробела),
 	 	 	 	;
 	 	 	 	;-------------------------
 F359	 	 	 	scroll_down proc near
 F359  FD	 	 	 	std	 	 	; уст направление сдвига вниз
 F35A  8A D8	 	 	 	mov	bl,al	 	; количество строк в BL
 F35C  80 FC 04	 	 	 	cmp	ah,4	 	; проверка графики
 F35F  72 08	 	 	 	jc	n12
 F361  80 FC 07	 	 	 	cmp	ah,7	 	; проверка ч/б адаптера
 F364  74 03	 	 	 	je	n12
 F366  E9 F50F R	 	 	jmp	graphics_down
 F369	 	 	 	n12:
 F369  53	 	 	 	push	bx	 	; сохранить атрибут в BH
 F36A  8B C2	 	 	 	mov	ax,dx	 	; нижний правый угол
 F36C  E8 F302 R	 	 	call	scroll_position
 F36F  74 20	 	 	 	jz	n16
 F371  2B F0	 	 	 	sub	si,ax	 	; SI для адресации
 F373  8A E6	 	 	 	mov	ah,dh
 F375  2A E3	 	 	 	sub	ah,bl	 	; передать количество строк
 F377	 	 	 	n13:
 F377  E8 F349 R	 	 	call	n10	 	; передать одну строку
 F37A  2B F5	 	 	 	sub	si,bp
 F37C  2B FD	 	 	 	sub	di,bp
 F37E  FE CC	 	 	 	dec	ah
 F380  75 F5	 	 	 	jnz	n13
 F382	 	 	 	n14:
 F382  58	 	 	 	pop	ax	 	; восстановить атрибут в AH
 F383  B0 20	 	 	 	mov	al,' '
 F385	 	 	 	n15:
 F385  E8 F352 R	 	 	call	n11	 	; очистка одной строки
 F388  2B FD	 	 	 	sub	di,bp	 	; перейти к следующей строке
 F38A  FE CB	 	 	 	dec	bl
 F38C  75 F7	 	 	 	jnz	n15
 F38E  E9 F2E8 R	 	 	jmp	n5	 	; конец сдвига
 F391	 	 	 	n16:
 F391  8A DE	 	 	 	mov	bl,dh
 F393  EB ED	 	 	 	jmp	short n14
 F395	 	 	 	scroll_down  endp
 	 	 	 	;--------------------
 	 	 	 	; read_ac_current
 	 	 	 	;
 	 	 	 	;   Эта программа считывает атрибут и код символа, находящегося в теку-
 	 	 	 	; щем положении курсора
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   AH - текущий режим,
 	 	 	 	;	   BH - номер страницы (только для режима альфа),
 	 	 	 	;
 	 	 	 	;   ВЫХОД
 	 	 	 	;	   AL - код символа,
 	 	 	 	;	   AH - атрибут символа.
 	 	 	 	;
 	 	 	 	;---------------------
 	 	 	 	 	assume cs:code,ds:data,es:data
 F395	 	 	 	read_ac_current proc near
 F395  80 FC 04	 	 	 	cmp	ah,4	 	; это графика ?
 F398  72 08	 	 	 	jc	p1
 F39A  80 FC 07	 	 	 	cmp	ah,7	 	; ч/б адаптер ?
 F39D  74 03	 	 	 	je	p1
 F39F  E9 F64B R	 	 	jmp	graphics_read
 F3A2	 	 	 	p1:	 	 	 	;
 F3A2  E8 F3BF R	 	 	call	find_position
 F3A5  8B F3	 	 	 	mov	si,bx	 	; установить адресацию в SI
 	 	 	 	
 	 	 	 	
 F3A7  8B 16 0063 R	 	 	mov	dx,addr_6845	; получить базовый адрес
 F3AB  83 C2 06	 	 	 	add	dx,6	 	; порт состояния
 F3AE  06	 	 	 	push	es
 F3AF  1F	 	 	 	pop	ds	 	; получить сегмент
 F3B0	 	 	 	p2:
 F3B0  EC	 	 	 	in	al,dx	 	; получить состояние
 F3B1  A8 01	 	 	 	test	al,1
 F3B3  75 FB	 	 	 	jnz	p2	 	; ожидание
 F3B5  FA	 	 	 	cli	 	   ; сброс признака разрешения прерывания
 F3B6	 	 	 	p3:
 F3B6  EC	 	 	 	in	al,dx	 	; получить состояние
 F3B7  A8 01	 	 	 	test	al,1
 F3B9  74 FB	 	 	 	jz	p3	 	; ожидание
 F3BB  AD	 	 	 	lodsw	 	 	; получить символ/атрибут
 F3BC  E9 F1DC R	 	 	jmp	video_return
 F3BF	 	 	 	read_ac_current endp
 	 	 	 	
 F3BF	 	 	 	find_position proc near
 F3BF  8A CF	 	 	 	mov	cl,bh	 	; поместить страницу в CX
 F3C1  32 ED	 	 	 	xor	ch,ch
 F3C3  8B F1	 	 	 	mov	si,cx	 	; передать в SI индекс, умноженный на 2
 F3C5  D1 E6	 	 	 	sal	si,1	 	; для слова смещения
 F3C7  8B 84 0050 R	 	 	mov ax,word ptr [si+offset cursor_posn]   ; получить строку/ко-
 	 	 	 	 	 	 	 	; лонку этой страницы
 F3CB  33 DB	 	 	 	xor	bx,bx	 	; установить начальный адрес в 0
 F3CD  E3 06	 	 	 	jcxz	p5
 F3CF	 	 	 	p4:
 F3CF  03 1E 004C R	 	 	add	bx,crt_len	; длина буфера
 F3D3  E2 FA	 	 	 	loop	p4
 F3D5	 	 	 	p5:
 F3D5  E8 F2A3 R	 	 	call	position
 F3D8  03 D8	 	 	 	add	bx,ax
 F3DA  C3	 	 	 	ret
 F3DB	 	 	 	find_position	endp
 	 	 	 	;---------------------
 	 	 	 	;write_ac_current
 	 	 	 	;
 	 	 	 	;   Эта программа записывает атрибут и код символа в текущую позицию
 	 	 	 	; курсора
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   AH - текущий режим,
 	 	 	 	;	   BH - номер страницы,
 	 	 	 	;	   CX - счетчик (количество повторений символов),
 	 	 	 	;	   AL - код символа,
 	 	 	 	;	   BL - атрибут символа (для режимов альфа) или цвет символа
 	 	 	 	;	 	для графики.
 	 	 	 	;
 	 	 	 	;----------------------
 F3DB	 	 	 	write_ac_current proc near
 F3DB  80 FC 04	 	 	 	cmp	ah,4	 	; это графика ?
 F3DE  72 08	 	 	 	jc	p6
 F3E0  80 FC 07	 	 	 	cmp	ah,7	 	; это ч/б адаптер ?
 F3E3  74 03	 	 	 	je	p6
 F3E5  E9 F599 R	 	 	jmp	graphics_write
 F3E8	 	 	 	p6:
 F3E8  8A E3	 	 	 	mov	ah,bl	 	; получить атрибут в AH
 F3EA  50	 	 	 	push	ax	 	; хранить
 F3EB  51	 	 	 	push	cx	 	; хранить счетчик
 F3EC  E8 F3BF R	 	 	call	find_position
 F3EF  8B FB	 	 	 	mov	di,bx	 	; адрес в DI
 F3F1  59	 	 	 	pop	cx	 	; вернуть счетчик
 F3F2  5B	 	 	 	pop	bx	 	; и символ
 F3F3	 	 	 	p7:	 	 	 	; цикл записи
 	 	 	 	
 	 	 	 	
 F3F3  8B 16 0063 R	 	 	mov	dx,addr_6845	; получить базовый адрес
 F3F7  83 C2 06	 	 	 	add	dx,6	 	; указать порт состояния
 F3FA	 	 	 	p8:
 F3FA  EC	 	 	 	in	al,dx	 	; получить состояние
 F3FB  A8 01	 	 	 	test	al,1
 F3FD  75 FB	 	 	 	jnz	p8	 	; ожидать
 F3FF  FA	 	 	 	cli	 	     ; сброс признака разрешения прерывания
 F400	 	 	 	p9:
 F400  EC	 	 	 	in	al,dx	 	; получить состояние
 F401  A8 01	 	 	 	test	al,1
 F403  74 FB	 	 	 	jz	p9	 	; ожидать
 F405  8B C3	 	 	 	mov	ax,bx
 F407  AB	 	 	 	stosw	 	 	; записать символ и атрибут
 F408  FB	 	 	 	sti	 	 	; уст признак разрешения прерывания
 F409  E2 E8	 	 	 	loop	p7
 F40B  E9 F1DC R	 	 	jmp	video_return
 F40E	 	 	 	write_ac_current  endp
 	 	 	 	;---------------------
 	 	 	 	;write_c_current
 	 	 	 	;
 	 	 	 	;   Эта программа записывает символ в текущую позицию курсора.
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   BH - номер страницы (только для альфа режимов),
 	 	 	 	;	   CX - счетчик (количество повторений символа),
 	 	 	 	;	   AL - код символа,
 	 	 	 	;
 	 	 	 	;-----------------------
 F40E	 	 	 	write_c_current proc near
 F40E  80 FC 04	 	 	 	cmp	ah,4	 	; это графика ?
 F411  72 08	 	 	 	jc	p10
 F413  80 FC 07	 	 	 	cmp	ah,7	 	; это ч/б адаптер ?
 F416  74 03	 	 	 	je	p10
 F418  E9 F599 R	 	 	jmp	graphics_write
 F41B	 	 	 	p10:
 F41B  50	 	 	 	push	ax	 	; сохранить в стеке
 F41C  51	 	 	 	push	cx	 	; сохранить количество повторений
 F41D  E8 F3BF R	 	 	call	find_position
 F420  8B FB	 	 	 	mov	di,bx	 	; адрес в DI
 F422  59	 	 	 	pop	cx	 	; вернуть количество повторений
 F423  5B	 	 	 	pop	bx	 	; BL - код символа
 F424	 	 	 	p11:
 	 	 	 	
 	 	 	 	
 F424  8B 16 0063 R	 	 	mov	dx,addr_6845	; получить базовый адрес
 F428  83 C2 06	 	 	 	add	dx,6	 	; указать порт состояния
 F42B	 	 	 	p12:
 F42B  EC	 	 	 	in	al,dx	 	; получить состояние
 F42C  A8 01	 	 	 	test	al,1
 F42E  75 FB	 	 	 	jnz	p12	 	; ожидать
 F430  FA	 	 	 	cli	 	 	; сброс признака разрешения прерывания
 F431	 	 	 	p13:
 F431  EC	 	 	 	in	al,dx	 	; получить состояние
 F432  A8 01	 	 	 	test	al,1
 F434  74 FB	 	 	 	jz	p13	 	; ожидание
 F436  8A C3	 	 	 	mov	al,bl	 	; восстановить символ
 F438  AA	 	 	 	stosb	 	 	; записать символ
 F439  47	 	 	 	inc	di
 F43A  E2 E8	 	 	 	loop	p11	 	; цикл
 F43C  E9 F1DC R	 	 	jmp	video_return
 F43F	 	 	 	write_c_current endp
 	 	 	 	;---------------------
 	 	 	 	; read dot - write dot
 	 	 	 	;
 	 	 	 	;   Эта программа считывает/записывает точку.
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   DX - строка (0-199),
 	 	 	 	;	   CX - колонка (0-639),
 	 	 	 	;	   AL - цвет выводимой точки.
 	 	 	 	;	 	Если бит 7=1, то выполняется операция
 	 	 	 	;	 	XOR над значением точки из буфера дисплея и значением
 	 	 	 	;	 	точки из регистра AL (при записи точки).
 	 	 	 	;
 	 	 	 	;   ВЫХОД
 	 	 	 	;	   AL - значение считанной точки
 	 	 	 	;
 	 	 	 	;----------------------
 	 	 	 	 	assume cs:code,ds:data,es:data
 F43F	 	 	 	read_dot proc	near
 F43F  E8 F473 R	 	 	call	r3	 	; определить положение точки
 F442  26: 8A 04	 	 	mov	al,es:[si]	; получить байт
 F445  22 C4	 	 	 	and	al,ah	 	; размаскировать другие биты в байте
 F447  D2 E0	 	 	 	shl	al,cl	 	;
 F449  8A CE	 	 	 	mov	cl,dh	 	; получить число бит результата
 F44B  D2 C0	 	 	 	rol	al,cl
 F44D  E9 F1DC R	 	 	jmp	video_return	; выход из прерывания
 F450	 	 	 	read_dot	endp
 	 	 	 	
 F450	 	 	 	write_dot proc	near
 F450  50	 	 	 	push	ax	 	; сохранить значение точки
 F451  50	 	 	 	push	ax	 	; еще раз
 F452  E8 F473 R	 	 	call	r3	 	; определить положение точки
 F455  D2 E8	 	 	 	shr	al,cl	 	; сдвиг для установки бит при выводе
 F457  22 C4	 	 	 	and	al,ah	 	; сбросить другие биты
 F459  26: 8A 0C	 	 	mov	cl,es:[si]	; получить текущий байт
 F45C  5B	 	 	 	pop	bx
 F45D  F6 C3 80	 	 	 	test	bl,80h
 F460  75 0D	 	 	 	jnz	r2
 F462  F6 D4	 	 	 	not	ah	  ; установить маску для передачи указанных бит
 F464  22 CC	 	 	 	and	cl,ah
 F466  0A C1	 	 	 	or	al,cl
 F468	 	 	 	r1:
 F468  26: 88 04	 	 	mov es:[si],al	 	; восстановить байт в памяти
 F46B  58	 	 	 	pop	ax
 F46C  E9 F1DC R	 	 	jmp	video_return	; к выходу из программы
 F46F	 	 	 	r2:
 F46F  32 C1	 	 	 	xor	al,cl	 	; исключающее ИЛИ над значениями точки
 F471  EB F5	 	 	 	jmp	short r1	; конец записи
 F473	 	 	 	write_dot	endp
 	 	 	 	
 	 	 	 	;-------------------------------------
 	 	 	 	;
 	 	 	 	;   Эта программа определяет относительный адрес байта (внутри буфера
 	 	 	 	; дисплея), из которого должна быть считана/записана точка,с заданными
 	 	 	 	; координатами.
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   DX - строка (0-199),
 	 	 	 	;	   CX - колонка (0-639).
 	 	 	 	;
 	 	 	 	;   ВЫХОД
 	 	 	 	;	   SI - относительный адрес байта, содержащего точку внутри
 	 	 	 	;	 	буфера дисплея,
 	 	 	 	;	   AH - маска для выделения значения заданной точки внутри байта
 	 	 	 	;	   CL - константа сдвига маски в AH в крайнюю левую позицию,
 	 	 	 	;	   DH - число бит, определяющих значение точки.
 	 	 	 	;
 	 	 	 	;--------------------------------------
 	 	 	 	
 F473	 	 	 	r3	proc	near
 F473  53	 	 	 	push	bx	 	; сохранить BX
 F474  50	 	 	 	push	ax	 	; сохранить AL
 	 	 	 	
 	 	 	 	;   Вычисление первого байта указанной строки умножением на 40.
 	 	 	 	; Наименьший бит строки определяет четно/нечетную 80-байтовую строку.
 	 	 	 	
 F475  B0 28	 	 	 	mov	al,40
 F477  52	 	 	 	push	dx	 	; сохранить значение строки
 F478  80 E2 FE	 	 	 	and	dl,0feh 	; сброс четно/нечетного бита
 F47B  F6 E2	 	 	 	mul	dl   ; AX содержит адрес первого байта указанной строки
 F47D  5A	 	 	 	pop	dx	 	; восстановить его
 F47E  F6 C2 01	 	 	 	test	dl,1	 	; проверить четность/нечетность
 F481  74 03	 	 	 	jz	r4	 	; переход,если строка четная
 F483  05 2000	 	 	 	add	ax,2000h	; смещение для нахождения нечетных строк
 F486	 	 	 	r4:	 	 	 	; четная строка
 F486  8B F0	 	 	 	mov	si,ax	 	; передать указатель в SI
 F488  58	 	 	 	pop	ax	 	; восстановить значение AL
 F489  8B D1	 	 	 	mov	dx,cx	 	; значение колонки в DX
 	 	 	 	
 	 	 	 	;   Определение действительных графических режимов
 	 	 	 	;
 	 	 	 	;   Установка регистров согласно режимaм
 	 	 	 	;
 	 	 	 	;	  BH - количество бит, определяющее точку,
 	 	 	 	;	  BL - константа выделения точки из левых бит байта,
 	 	 	 	;	  CH - константа для выделения из номера колонки номера позиции
 	 	 	 	;	       первого бита, определяющего точку в байте, т.е. получение
 	 	 	 	;	       остатка от деления номера на 8 (для режима 640х200) или
 	 	 	 	;	       номера на 4 (для режима 320х200),
 	 	 	 	;	  CL - константа сдвига (для выполнения деления на 8 или на 4).
 	 	 	 	
 F48B  BB 02C0	 	 	 	mov	bx,2c0h
 F48E  B9 0302	 	 	 	mov	cx,302h 	; установка параметров
 F491  80 3E 0049 R 06	 	 	cmp	crt_mode,6
 F496  72 06	 	 	 	jc	r5	 	;
 F498  BB 0180	 	 	 	mov	bx,180h
 F49B  B9 0703	 	 	 	mov	cx,703h 	; уст параметры для старшего регистра
 	 	 	 	
 	 	 	 	;   Определение бита смещения в байте по маске
 F49E	 	 	 	r5:
 F49E  22 EA	 	 	 	and	ch,dl	 	;
 	 	 	 	
 	 	 	 	;   Определение байта смещения в колонке
 	 	 	 	
 F4A0  D3 EA	 	 	 	shr	dx,cl	 	; сдвиг для коррекции
 F4A2  03 F2	 	 	 	add	si,dx	 	; получить указатель
 F4A4  8A F7	 	 	 	mov	dh,bh	; получить указатель битов результата в DH
 	 	 	 	
 	 	 	 	;   Умножение BH (количество бит в байте) на CH (бит смещения)
 	 	 	 	
 F4A6  2A C9	 	 	 	sub	cl,cl
 F4A8	 	 	 	r6:
 F4A8  D0 C8	 	 	 	ror	al,1	; левое крайнее значение в AL для записи
 F4AA  02 CD	 	 	 	add	cl,ch	 	; прибавить значение бита смещения
 F4AC  FE CF	 	 	 	dec	bh	 	; счетчик контроля
 F4AE  75 F8	 	 	 	jnz	r6	; на выходе CL содержит счетчик сдвига для
 	 	 	 	 	 	 	 	; восстановления
 F4B0  8A E3	 	 	 	mov	ah,bl	 	; получить маску в AH
 F4B2  D2 EC	 	 	 	shr	ah,cl	 	; передать маску в ячейку
 F4B4  5B	 	 	 	pop	bx	 	; восстановить регистр
 F4B5  C3	 	 	 	ret	 	 	; возврат с восстановлением
 F4B6	 	 	 	r3	endp
 	 	 	 	
 	 	 	 	;----------------------------------------
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;    Программа перемещает блок символов вверх в режиме графики
 	 	 	 	;
 	 	 	 	;-----------------------------------------
 	 	 	 	
 F4B6	 	 	 	graphics_up proc near
 F4B6  8A D8	 	 	 	mov	bl,al	 	; сохранить количество символов
 F4B8  8B C1	 	 	 	mov	ax,cx	 	; получить верхний левый угол в AX
 	 	 	 	
 	 	 	 	
 F4BA  E8 F727 R	 	 	call	graph_posn
 F4BD  8B F8	 	 	 	mov	di,ax	 	; сохранить результат
 	 	 	 	
 	 	 	 	;   Определить размеры блока
 	 	 	 	
 F4BF  2B D1	 	 	 	sub	dx,cx
 F4C1  81 C2 0101	 	 	add	dx,101h
 F4C5  D0 E6	 	 	 	sal	dh,1
 F4C7  D0 E6	 	 	 	sal	dh,1
 	 	 	 	
 F4C9  80 3E 0049 R 06	 	 	cmp	crt_mode,6
 F4CE  73 04	 	 	 	jnc	r7
 	 	 	 	
 F4D0  D0 E2	 	 	 	sal	dl,1
 F4D2  D1 E7	 	 	 	sal	di,1	 	;
 	 	 	 	
 	 	 	 	;   Определение адреса источника в буфере
 F4D4	 	 	 	r7:
 F4D4  06	 	 	 	push	es
 F4D5  1F	 	 	 	pop	ds
 F4D6  2A ED	 	 	 	sub	ch,ch	 	; обнулить старший байт счетчика
 F4D8  D0 E3	 	 	 	sal	bl,1	 	; умножение числа строк на 4
 F4DA  D0 E3	 	 	 	sal	bl,1
 F4DC  74 2D	 	 	 	jz	r11	 	; если 0, занести пробелы
 F4DE  8A C3	 	 	 	mov	al,bl	 	; получить число строк в AL
 F4E0  B4 50	 	 	 	mov	ah,80	 	; 80 байт/строк
 F4E2  F6 E4	 	 	 	mul	ah	 	; определить смещение источника
 F4E4  8B F7	 	 	 	mov	si,di	 	; установить источник
 F4E6  03 F0	 	 	 	add	si,ax	 	; сложить источник с ним
 F4E8  8A E6	 	 	 	mov	ah,dh	 	; количество строк
 F4EA  2A E3	 	 	 	sub	ah,bl	 	; определить число перемещений
 	 	 	 	
 F4EC	 	 	 	r8:
 F4EC  E8 F56F R	 	 	call	r17	 	; перемещение одной строки
 F4EF  81 EE 1FB0	 	 	sub	si,2000h-80	; перемещение в следующую строку
 F4F3  81 EF 1FB0	 	 	sub	di,2000h-80
 F4F7  FE CC	 	 	 	dec	ah	 	; количество строк для перемещения
 F4F9  75 F1	 	 	 	jnz	r8	; продолжать, пока все строки не переместятся
 	 	 	 	
 	 	 	 	;   Заполнение освобожденных строк
 F4FB	 	 	 	r9:
 F4FB  8A C7	 	 	 	mov	al,bh
 F4FD	 	 	 	r10:
 F4FD  E8 F588 R	 	 	call	r18	 	; очистить эту строку
 F500  81 EF 1FB0	 	 	sub	di,2000h-80	; указать на следующую
 F504  FE CB	 	 	 	dec	bl	 	; количество строк для заполнения
 F506  75 F5	 	 	 	jnz	r10	 	; цикл очистки
 F508  E9 F1DC R	 	 	jmp	video_return	; к выходу из программы
 	 	 	 	
 F50B	 	 	 	r11:
 F50B  8A DE	 	 	 	mov	bl,dh	 	; установить количество пробелов
 F50D  EB EC	 	 	 	jmp	short r9	; очистить
 F50F	 	 	 	graphics_up	endp
 	 	 	 	
 	 	 	 	;---------------------------------
 	 	 	 	;
 	 	 	 	;   Программа перемещает блок символов вниз в режиме графики
 	 	 	 	;
 	 	 	 	;----------------------------------
 	 	 	 	
 F50F	 	 	 	graphics_down proc	near
 F50F  FD	 	 	 	std	 	 	; установить направление
 F510  8A D8	 	 	 	mov	bl,al	 	; сохранить количество строк
 F512  8B C2	 	 	 	mov	ax,dx	 	; получить нижнюю правую позицию в AX
 	 	 	 	
 	 	 	 	
 F514  E8 F727 R	 	 	call	graph_posn
 F517  8B F8	 	 	 	mov	di,ax	 	; сохранить результат
 	 	 	 	
 	 	 	 	;   Определение размера блока
 	 	 	 	
 F519  2B D1	 	 	 	sub	dx,cx
 F51B  81 C2 0101	 	 	add	dx,101h
 F51F  D0 E6	 	 	 	sal	dh,1
 F521  D0 E6	 	 	 	sal	dh,1
 	 	 	 	
 	 	 	 	
 F523  80 3E 0049 R 06	 	 	cmp	crt_mode,6
 F528  73 05	 	 	 	jnc	r12
 	 	 	 	
 F52A  D0 E2	 	 	 	sal	dl,1
 F52C  D1 E7	 	 	 	sal	di,1
 F52E  47	 	 	 	inc	di
 	 	 	 	
 	 	 	 	;   Определение адреса источника в буфере
 F52F	 	 	 	r12:
 F52F  06	 	 	 	push	es
 F530  1F	 	 	 	pop	ds
 F531  2A ED	 	 	 	sub	ch,ch	 	; обнулить старший байт счетчика
 F533  81 C7 00F0	 	 	add	di,240	 	; указать последнюю строку
 F537  D0 E3	 	 	 	sal	bl,1	 	; умножить количество строк на 4
 F539  D0 E3	 	 	 	sal	bl,1
 F53B  74 2E	 	 	 	jz	r16	 	; если 0, заполнить пробелом
 F53D  8A C3	 	 	 	mov	al,bl	 	; получить количество строк в AL
 F53F  B4 50	 	 	 	mov	ah,80	 	; 80 байт/строк
 F541  F6 E4	 	 	 	mul	ah	 	; определить смещение источника
 F543  8B F7	 	 	 	mov	si,di	 	; установить источник
 F545  2B F0	 	 	 	sub	si,ax	 	; вычесть смещение
 F547  8A E6	 	 	 	mov	ah,dh	 	; количество строк
 F549  2A E3	 	 	 	sub	ah,bl	 	; определить число для перемещения
 	 	 	 	
 F54B	 	 	 	r13:
 F54B  E8 F56F R	 	 	call	r17	 	; переместить одну строку
 F54E  81 EE 2050	 	 	sub	si,2000h+80	; установить следующую строку
 F552  81 EF 2050	 	 	sub	di,2000h+80
 F556  FE CC	 	 	 	dec	ah	 	; количество строк для перемещения
 F558  75 F1	 	 	 	jnz	r13	 	; продолжать, пока все не переместятся
 	 	 	 	
 	 	 	 	;   Заполнение освобожденных строк
 F55A	 	 	 	r14:
 F55A  8A C7	 	 	 	mov	al,bh	 	; атрибут заполнения
 F55C	 	 	 	r15:
 F55C  E8 F588 R	 	 	call	r18	 	; очистить строку
 F55F  81 EF 2050	 	 	sub	di,2000h+80	; указать следующую строку
 F563  FE CB	 	 	 	dec	bl	 	; число строк для заполнения
 F565  75 F5	 	 	 	jnz	r15
 F567  FC	 	 	 	cld	 	 	; сброс признака направления
 F568  E9 F1DC R	 	 	jmp	video_return	; к выходу из программы
 	 	 	 	
 F56B	 	 	 	r16:
 F56B  8A DE	 	 	 	mov	bl,dh
 F56D  EB EB	 	 	 	jmp	short r14	; очистить
 F56F	 	 	 	graphics_down endp
 	 	 	 	
 	 	 	 	;   Программа перемещения одной строки
 	 	 	 	
 F56F	 	 	 	r17	proc	near
 F56F  8A CA	 	 	 	mov	cl,dl	 	; число байт в строке
 F571  56	 	 	 	push	si
 F572  57	 	 	 	push	di	 	; хранить указатели
 F573  F3/ A4	 	 	 	rep	movsb	 	; переместить четное поле
 F575  5F	 	 	 	pop	di
 F576  5E	 	 	 	pop	si
 F577  81 C6 2000	 	 	add	si,2000h
 F57B  81 C7 2000	 	 	add	di,2000h	; указать нечетное поле
 F57F  56	 	 	 	push	si
 F580  57	 	 	 	push	di	 	; сохранить указатели
 F581  8A CA	 	 	 	mov	cl,dl	 	; возврат счвтчика
 F583  F3/ A4	 	 	 	rep	movsb	 	; передать нечетное поле
 F585  5F	 	 	 	pop	di
 F586  5E	 	 	 	pop	si	 	; возврат указателей
 F587  C3	 	 	 	ret	 	 	; возврат к программе
 F588	 	 	 	r17	endp
 	 	 	 	
 	 	 	 	;   Заполнение пробелами строки
 	 	 	 	
 F588	 	 	 	r18	proc	near
 F588  8A CA	 	 	 	mov	cl,dl	 	; число байт в поле
 F58A  57	 	 	 	push	di	 	; хранить указатель
 F58B  F3/ AA	 	 	 	rep	stosb	 	; запомнить новое значение
 F58D  5F	 	 	 	pop	di	 	; вернуть указатель
 F58E  81 C7 2000	 	 	add	di,2000h	; указать нечетное поле
 F592  57	 	 	 	push	di
 F593  8A CA	 	 	 	mov	cl,dl
 F595  F3/ AA	 	 	 	rep	stosb	 	; заполнить нечетное поле
 F597  5F	 	 	 	pop	di
 F598  C3	 	 	 	ret	 	 	; возврат к программе
 F599	 	 	 	r18	endp
 	 	 	 	
 	 	 	 	;--------------------------------------
 	 	 	 	;
 	 	 	 	;  graphics_write
 	 	 	 	;
 	 	 	 	;   Эта программа записывает символ в режиме графики
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   AL - код символа,
 	 	 	 	;	   BL - атрибут цвета, который используется в качестве цвета
 	 	 	 	;	 	переднего плана (цвет символа). Если бит 7 BL=1, то
 	 	 	 	;	 	выполняется операция XOR над байтом в буфере и байтом
 	 	 	 	;	 	в генераторе символов,
 	 	 	 	;	   CX - счетчик повторений символа
 	 	 	 	;
 	 	 	 	;----------------------------------------
 	 	 	 	
 	 	 	 	 	assume cs:code,ds:data,es:data
 F599	 	 	 	graphics_write proc near
 F599  B4 00	 	 	 	mov	ah,0	 	; AH=0
 F59B  50	 	 	 	push	ax	 	; сохранить значение кода символа
 	 	 	 	
 	 	 	 	;   Определение позиции в области буфера засылкой туда кода точек
 	 	 	 	
 F59C  E8 F724 R	 	 	call	s26	 	; найти ячейку в области буфера
 F59F  8B F8	 	 	 	mov	di,ax	 	; указатель области в DI
 	 	 	 	
 	 	 	 	;   Определение области для получения кода точки
 	 	 	 	
 F5A1  58	 	 	 	pop	ax	 	; восстановить код точки
 F5A2  3C 80	 	 	 	cmp	al,80h	 	; во второй половине ?
 F5A4  73 06	 	 	 	jae	s1	 	; да
 	 	 	 	
 	 	 	 	;   Изображение есть в первой половине памяти
 	 	 	 	
 F5A6  BE FA6E R	 	 	mov	si, offset crt_char_gen  ; смещение изображения
 F5A9  0E	 	 	 	push	cs	 	; хранить сегмент в стеке
 F5AA  EB 0F	 	 	 	jmp	short s2	; определить режим
 	 	 	 	
 	 	 	 	;   Изображение есть во второй части памяти
 	 	 	 	
 F5AC	 	 	 	s1:
 F5AC  2C 80	 	 	 	sub	al,80h	 	; 0 во вторую половину
 F5AE  1E	 	 	 	push	ds	 	; хранить указатель данных
 F5AF  2B F6	 	 	 	sub	si,si
 F5B1  8E DE	 	 	 	mov	ds,si	 	; установить адресацию
 	 	 	 	 	assume	ds:abs0
 F5B3  C5 36 007C R	 	 	lds	si,ext_ptr	; получить смещение
 F5B7  8C DA	 	 	 	mov	dx,ds	 	; получить сегмент
 	 	 	 	 	assume	ds:data
 F5B9  1F	 	 	 	pop	ds	 	; восстановить сегмент данных
 F5BA  52	 	 	 	push	dx	 	; хранить сегмент в стеке
 	 	 	 	
 	 	 	 	;   Опеделение графического режима операции
 	 	 	 	
 F5BB	 	 	 	s2:	 	 	 	; определение режима
 F5BB  D1 E0	 	 	 	sal	ax,1	 	; умножить указатель кода на 8
 F5BD  D1 E0	 	 	 	sal	ax,1
 F5BF  D1 E0	 	 	 	sal	ax,1
 F5C1  03 F0	 	 	 	add	si,ax	 	; SI содержит смещение
 F5C3  80 3E 0049 R 06	 	 	cmp	crt_mode,6
 F5C8  1F	 	 	 	pop	ds	 	; восстановить указатель таблицы
 F5C9  72 2C	 	 	 	jc	s7	; проверка для средней разрешающей способности
 	 	 	 	
 	 	 	 	;   Высокая разрешающая способность
 F5CB	 	 	 	s3:
 F5CB  57	 	 	 	push	di	 	; сохранить указатель области
 F5CC  56	 	 	 	push	si	 	; сохранить указатель кода
 F5CD  B6 04	 	 	 	mov	dh,4	 	; количество циклов
 F5CF	 	 	 	s4:
 F5CF  AC	 	 	 	lodsb	 	 	; выборка четного байта
 F5D0  F6 C3 80	 	 	 	test	bl,80h
 F5D3  75 16	 	 	 	jnz	s6
 F5D5  AA	 	 	 	stosb
 F5D6  AC	 	 	 	lodsb
 F5D7	 	 	 	s5:
 F5D7  26: 88 85 1FFF	 	 	mov es:[di+1fffh],al	; запомнить во второй части
 F5DC  83 C7 4F	 	 	 	add	di,79	 	; передать следующую строку
 F5DF  FE CE	 	 	 	dec	dh	 	; выполнить цикл
 F5E1  75 EC	 	 	 	jnz	s4
 F5E3  5E	 	 	 	pop	si
 F5E4  5F	 	 	 	pop	di	 	; восстановить указатель области
 F5E5  47	 	 	 	inc	di	; указать на следующую позицию символа
 F5E6  E2 E3	 	 	 	loop	s3	 	; записать последующие символы
 F5E8  E9 F1DC R	 	 	jmp	video_return
 	 	 	 	
 F5EB	 	 	 	s6:
 F5EB  26: 32 05	 	 	xor al,es:[di]
 F5EE  AA	 	 	 	stosb	 	 	; запомнить код
 F5EF  AC	 	 	 	lodsb	 	 	; выборка нечетного символа
 F5F0  26: 32 85 1FFF	 	 	xor  al,es:[di+1fffh]
 F5F5  EB E0	 	 	 	jmp	s5	 	; повторить
 	 	 	 	
 	 	 	 	;   Средняя разрешающая способность записи
 F5F7	 	 	 	s7:
 F5F7  8A D3	 	 	 	mov	dl,bl	 	; сохранить старший бит цвета
 F5F9  D1 E7	 	 	 	sal	di,1	; умножить на 2, т.к. два байта/символа
 F5FB  E8 F6CF R	 	 	call	s19	 	; расширение BL до полного слова цвета
 F5FE	 	 	 	s8:
 F5FE  57	 	 	 	push	di
 F5FF  56	 	 	 	push	si
 F600  B6 04	 	 	 	mov	dh,4	 	; число циклов
 F602	 	 	 	s9:
 F602  AC	 	 	 	lodsb	 	 	; получить код точки
 F603  E8 F6E4 R	 	 	call	s21	 	; продублировать
 F606  23 C3	 	 	 	and	ax,bx	 	; окрашивание в заданный цвет
 F608  F6 C2 80	 	 	 	test	dl,80h
 F60B  74 07	 	 	 	jz	s10
 F60D  26: 32 25	 	 	xor	ah,es:[di]	; выполнить функцию XOR со "старым"
 F610  26: 32 45 01	 	 	xor	al,es:[di+1]	; и "новым" цветами
 F614  26: 88 25	 	s10:	mov  es:[di],ah 	; запомнить первый байт
 F617  26: 88 45 01	 	 	mov es:[di+1],al	; запомнить второй байт
 F61B  AC	 	 	 	lodsb	 	 	; получить код точки
 F61C  E8 F6E4 R	 	 	call	s21
 F61F  23 C3	 	 	 	and	ax,bx	 	; окрашивание нечетного байта
 F621  F6 C2 80	 	 	 	test	dl,80h
 F624  74 0A	 	 	 	jz  s11
 F626  26: 32 A5 2000	 	 	xor	ah,es:[di+2000h]   ; из первой половины
 F62B  26: 32 85 2001	 	 	xor	al,es:[di+2001h]   ; и из второй половины
 F630  26: 88 A5 2000	 	s11:	mov	es:[di+2000h],ah
 F635  26: 88 85 2001	 	 	mov	es:[di+2001h],al   ; запомнить вторую часть буфера
 F63A  83 C7 50	 	 	 	add	di,80	 	; указать следующую ячейку
 F63D  FE CE	 	 	 	dec	dh
 F63F  75 C1	 	 	 	jnz	s9	 	; повторить
 F641  5E	 	 	 	pop	si
 F642  5F	 	 	 	pop	di
 F643  83 C7 02	 	 	 	add	di,2	 	; переход к следующему символу
 F646  E2 B6	 	 	 	loop	s8	 	; режим записи
 F648  E9 F1DC R	 	 	jmp	video_return
 F64B	 	 	 	graphics_write	endp
 	 	 	 	;-------------------------------------
 	 	 	 	;graphics_read
 	 	 	 	;
 	 	 	 	;   Программа считывает символ в режиме графики
 	 	 	 	;
 	 	 	 	;-------------------------------------
 F64B	 	 	 	graphics_read	proc	near
 F64B  E8 F724 R	 	 	call	s26
 F64E  8B F0	 	 	 	mov	si,ax	 	; сохранить в SI
 F650  83 EC 08	 	 	 	sub	sp,8	 	; зарезервировать в стеке 8 байт для
 	 	 	 	 	 	 	 	; записи символа из буфера дисплея
 F653  8B EC	 	 	 	mov	bp,sp	 	; указатель для хранения области
 	 	 	 	
 	 	 	 	;   Определение режима графики
 	 	 	 	
 F655  80 3E 0049 R 06	 	 	cmp	crt_mode,6
 F65A  06	 	 	 	push	es
 F65B  1F	 	 	 	pop	ds	 	; указать сегмент
 F65C  72 1A	 	 	 	jc	s13	 	; средняя разрешающая способность
 	 	 	 	
 	 	 	 	;  Высокая разрешающая способность для считавания
 	 	 	 	
 F65E  B6 04	 	 	 	mov	dh,4
 F660	 	 	 	s12:
 F660  8A 04	 	 	 	mov	al,byte ptr [si]   ; получить первый байт
 F662  88 46 00	 	 	 	mov byte ptr [bp],al	   ; запомнить в памяти
 F665  45	 	 	 	inc	bp
 F666  8A 84 2000	 	 	mov al,byte ptr [si+2000h]   ; получить младший байт
 F66A  88 46 00	 	 	 	mov byte ptr [bp],al
 F66D  45	 	 	 	inc	bp
 F66E  83 C6 50	 	 	 	add	si,80	 	; переход на следующую четную строку
 F671  FE CE	 	 	 	dec	dh
 F673  75 EB	 	 	 	jnz	s12	 	; повторить
 F675  EB 17 90	 	 	 	jmp	s15	 	; переход к хранению кодов точек
 	 	 	 	
 	 	 	 	;   Средняя разрешающая способность для считывания
 F678	 	 	 	s13:
 F678  D1 E6	 	 	 	sal	si,1	  ; смещение умножить на 2, т.к. 2 байта/символа
 F67A  B6 04	 	 	 	mov	dh,4
 F67C	 	 	 	s14:
 F67C  E8 F707 R	 	 	call	s23
 F67F  81 C6 2000	 	 	add	si,2000h
 F683  E8 F707 R	 	 	call	s23
 F686  81 EE 1FB0	 	 	sub	si,2000h-80
 F68A  FE CE	 	 	 	dec	dh
 F68C  75 EE	 	 	 	jnz	s14	 	; повторить
 	 	 	 	
 	 	 	 	;   Сохранить
 F68E	 	 	 	s15:
 F68E  BF FA6E R	 	 	mov	di,offset crt_char_gen	 ; смещение
 F691  0E	 	 	 	push	cs
 F692  07	 	 	 	pop	es
 F693  83 ED 08	 	 	 	sub	bp,8	 	; восстановить начальный адрес
 F696  8B F5	 	 	 	mov	si,bp
 F698  FC	 	 	 	cld	 	 	; установить направление
 F699  B0 00	 	 	 	mov	al,0
 F69B	 	 	 	s16:
 F69B  16	 	 	 	push	ss
 F69C  1F	 	 	 	pop	ds
 F69D  BA 0080	 	 	 	mov	dx,128	 	; количество символов
 F6A0	 	 	 	s17:
 F6A0  56	 	 	 	push	si
 F6A1  57	 	 	 	push	di
 F6A2  B9 0008	 	 	 	mov	cx,8	 	; количество байт в символе
 F6A5  F3/ A6	 	 	 	repe	cmpsb	 	; сравнить
 F6A7  5F	 	 	 	pop	di
 F6A8  5E	 	 	 	pop	si
 F6A9  74 1E	 	 	 	jz	s18	 	; если признак = 0,символы сравнились
 F6AB  FE C0	 	 	 	inc	al	 	; не сравнились
 F6AD  83 C7 08	 	 	 	add	di,8	 	; следующий код точки
 F6B0  4A	 	 	 	dec	dx	 	; - 1 из счетчика
 F6B1  75 ED	 	 	 	jnz	s17	 	; повторить
 	 	 	 	
 	 	 	 	
 F6B3  3C 00	 	 	 	cmp	al,0
 F6B5  74 12	 	 	 	je	s18    ; переход, если все сканировано, но символ
 	 	 	 	 	 	       ; не найден
 F6B7  2B C0	 	 	 	sub	ax,ax
 F6B9  8E D8	 	 	 	mov	ds,ax	 	; установить адресацию вектора
 	 	 	 	 	assume	ds:abs0
 F6BB  C4 3E 007C R	 	 	les	di,ext_ptr
 F6BF  8C C0	 	 	 	mov	ax,es
 F6C1  0B C7	 	 	 	or	ax,di
 F6C3  74 04	 	 	 	jz	s18
 F6C5  B0 80	 	 	 	mov	al,128	 	; начало второй части
 F6C7  EB D2	 	 	 	jmp	short s16	; вернуться и повторить
 	 	 	 	 	assume	ds:data
 	 	 	 	
 F6C9	 	 	 	s18:
 F6C9  83 C4 08	 	 	 	add	sp,8
 F6CC  E9 F1DC R	 	 	jmp	video_return
 F6CF	 	 	 	graphics_read	endp
 	 	 	 	
 	 	 	 	;---------------------------------
 	 	 	 	;
 	 	 	 	;   Эта программа заполняет регистр BX двумя младшими битами
 	 	 	 	; регистра BL.
 	 	 	 	;
 	 	 	 	;   ВХОД
 	 	 	 	;	   BL - используемый цвет (младшие два бита).
 	 	 	 	;
 	 	 	 	;   ВЫХОД
 	 	 	 	;	   BX - используемый цвет (восемь повторений двух битов цвета).
 	 	 	 	;
 	 	 	 	;---------------------------------
 F6CF	 	 	 	s19	proc	near
 F6CF  80 E3 03	 	 	 	and	bl,3	 	; выделить биты цвета
 F6D2  8A C3	 	 	 	mov	al,bl	 	; переписать в AL
 F6D4  51	 	 	 	push	cx	 	; сохранить регистр
 F6D5  B9 0003	 	 	 	mov	cx,3	 	; количество повторений
 F6D8	 	 	 	s20:
 F6D8  D0 E0	 	 	 	sal	al,1
 F6DA  D0 E0	 	 	 	sal	al,1	 	; сдвиг влево на 2
 F6DC  0A D8	 	 	 	or	bl,al	 	; в BL накапливается результат
 F6DE  E2 F8	 	 	 	loop	s20	 	; цикл
 F6E0  8A FB	 	 	 	mov	bh,bl	 	; заполнить
 F6E2  59	 	 	 	pop	cx
 F6E3  C3	 	 	 	ret	 	 	; все выполнено
 F6E4	 	 	 	s19	endp
 	 	 	 	;--------------------------------------
 	 	 	 	;
 	 	 	 	;   Эта программа берет байт в AL и удваивает все биты, превращая
 	 	 	 	; 8 бит в 16 бит. Результат помещается в AX.
 	 	 	 	;--------------------------------------
 F6E4	 	 	 	s21	proc	near
 F6E4  52	 	 	 	push	dx	 	; сохранить регистры
 F6E5  51	 	 	 	push	cx
 F6E6  53	 	 	 	push	bx
 F6E7  BA 0000	 	 	 	mov	dx,0	 	; результат удвоения
 F6EA  B9 0001	 	 	 	mov	cx,1	 	; маска
 F6ED	 	 	 	s22:
 F6ED  8B D8	 	 	 	mov	bx,ax
 F6EF  23 D9	 	 	 	and	bx,cx	 	; выделение бита
 F6F1  0B D3	 	 	 	or	dx,bx	 	; накапливание результата
 F6F3  D1 E0	 	 	 	shl	ax,1
 F6F5  D1 E1	 	 	 	shl	cx,1	 	; сдвинуть базу и маску на 1
 F6F7  8B D8	 	 	 	mov	bx,ax
 F6F9  23 D9	 	 	 	and	bx,cx
 F6FB  0B D3	 	 	 	or	dx,bx
 F6FD  D1 E1	 	 	 	shl	cx,1	; сдиг маски, для выделения следующего бита
 F6FF  73 EC	 	 	 	jnc	s22
 F701  8B C2	 	 	 	mov	ax,dx
 F703  5B	 	 	 	pop	bx	 	; восстановить регистры
 F704  59	 	 	 	pop	cx
 F705  5A	 	 	 	pop	dx
 F706  C3	 	 	 	ret	 	 	; к выходу из прерывания
 F707	 	 	 	s21	endp
 	 	 	 	
 	 	 	 	;----------------------------------
 	 	 	 	;
 	 	 	 	;   Эта программа преобразовывает двух-битовое представление точки
 	 	 	 	; (C1,C0) в однобитовое
 	 	 	 	; (C1,C0) к однобитовому.
 	 	 	 	;
 	 	 	 	;----------------------------------
 F707	 	 	 	s23	proc	near
 F707  8A 24	 	 	 	mov	ah,byte ptr [si]   ; получить первый байт
 F709  8A 44 01	 	 	 	mov	al,byte ptr [si+1]   ; получить второй байт
 F70C  B9 C000	 	 	 	mov	cx,0c000h	; 2 бита маски
 F70F  B2 00	 	 	 	mov	dl,0	 	; регистр результата
 F711	 	 	 	s24:
 F711  85 C1	 	 	 	test	ax,cx	 	; проверка 2 младших бит AX на 0
 F713  F8	 	 	 	clc	 	 	; сбросить признак переноса CF
 F714  74 01	 	 	 	jz	s25	 	; переход если 0
 F716  F9	 	 	 	stc	 	 	; нет - установить CF
 F717  D0 D2	 	 	s25:	rcl	dl,1	 	; циклический сдвиг
 F719  D1 E9	 	 	 	shr	cx,1
 F71B  D1 E9	 	 	 	shr	cx,1
 F71D  73 F2	 	 	 	jnc	s24	 	; повторить, если CF=1
 F71F  88 56 00	 	 	 	mov byte ptr [bp],dl	; запомнить результат
 F722  45	 	 	 	inc	bp
 F723  C3	 	 	 	ret	 	 	; к выходу из прерывания
 F724	 	 	 	s23	endp
 	 	 	 	
 	 	 	 	;---------------------------------------
 	 	 	 	;
 	 	 	 	;   Эта программа определает положение курсора относительно	 мяти и
 	 	 	 	; начала буфера в режиме графики	 	 	 	 /символ
 	 	 	 	;
 	 	 	 	;   ВЫХОД
 	 	 	 	;	   AX  содержит смещение курсора
 	 	 	 	;
 	 	 	 	;-----------------------------------------
 F724	 	 	 	s26	proc	near
 F724  A1 0050 R	 	 	mov	ax,cursor_posn	; получить текущее положение курсора
 F727	 	 	 	graph_posn	label	near
 F727  53	 	 	 	push	bx	 	; сохранить регистр
 F728  8B D8	 	 	 	mov	bx,ax	 	; сохранить текущее положение курсора
 F72A  8A C4	 	 	 	mov	al,ah	 	; строка
 F72C  F6 26 004A R	 	 	mul	byte ptr crt_cols   ; умножить на байт/колонку
 F730  D1 E0	 	 	 	shl	ax,1	 	; умножить на 4
 F732  D1 E0	 	 	 	shl	ax,1
 F734  2A FF	 	 	 	sub	bh,bh	 	; выделить значение колонки
 F736  03 C3	 	 	 	add	ax,bx	 	; определить смещение
 F738  5B	 	 	 	pop	bx
 F739  C3	 	 	 	ret	 	 	; к выходу из прерывания
 F73A	 	 	 	s26	endp
 	 	 	 	
 	 	 	 	;
 	 	 	 	;----------------------------------------
 	 	 	 	;
 	 	 	 	;   Эта программа считывает положение светового пера.
 	 	 	 	; Проверяется переключатель и триггер светового пера. Если бит 1 ре-
 	 	 	 	; гистра состояния (порт 3DA)=1, то триггер установлен. Если бит 2 порта
 	 	 	 	; 3DA=0, то установлен переключатель.
 	 	 	 	;   Порты 3BD и 3DC используются для установки и сброса триггера и пере-
 	 	 	 	; ключателя светового пера.
 	 	 	 	;   В регистрах R16 и R17 контроллера содержится адрес координат пера
 	 	 	 	; относительно начала буфера дисплея.
 	 	 	 	;   Если триггер и переключатель установлены, то программа определяет
 	 	 	 	; положение светового пера, в противном случае, возврат без выдачи
 	 	 	 	; информации.
 	 	 	 	;
 	 	 	 	;   В ППЭВМ ЕС1841 функция не поддерживается
 	 	 	 	;-------------------------------------------------
 	 	 	 	
 	 	 	 	
 	 	 	 	
 F7AE	 	 	 	 	org	0f7aeh
 	 	 	 	
 	 	 	 	
 	 	 	 	 	assume	cs:code,ds:data
 	 	 	 	
 	 	 	 	;   Таблица поправок для получения фактических координат светового пера
 	 	 	 	
 F7AE	 	 	 	v1	label	byte
 F7AE  03 03 05 05 03 03	 	db	3,3,5,5,3,3,3,4
       03 04	 	 	
 F7B6	 	 	 	read_lpen	proc	near
 	 	 	 	
 	 	 	 	
 F7B6  B4 00	 	 	 	mov	ah,0	 	; код возврата, если перо не включено
 F7B8  8B 16 0063 R	 	 	mov	dx,addr_6845	; получить базовый адрес 6845
 F7BC  83 C2 06	 	 	 	add	dx,6	 	; указать регистр состояния
 F7BF  EC	 	 	 	in	al,dx	 	; получить регистр состояния
 F7C0  A8 04	 	 	 	test	al,4	 	; проверить переключатель светового пера
 F7C2  75 78	 	 	 	jnz	v6	 	; не установлено, возврат
 	 	 	 	
 	 	 	 	;   Проверка триггера светового пера
 	 	 	 	
 F7C4  A8 02	 	 	 	test	al,2	 	; проверить триггер светового пера
 F7C6  74 7E	 	 	 	jz	v7	 	; возврат без сброса триггера
 	 	 	 	
 	 	 	 	;   Триггер был установлен, считать значение в AH
 	 	 	 	
 F7C8  B4 10	 	 	 	mov	ah,16	 	; уст регистры светового пера 6845
 	 	 	 	
 	 	 	 	;   Ввод регистров, указанных AH и преобразование в строки колонки в DX
 	 	 	 	
 F7CA  8B 16 0063 R	 	 	mov	dx,addr_6845
 F7CE  8A C4	 	 	 	mov	al,ah
 F7D0  EE	 	 	 	out	dx,al	 	; вывести в порт
 F7D1  42	 	 	 	inc	dx
 F7D2  EC	 	 	 	in	al,dx	 	; получить значение из порта
 F7D3  8A E8	 	 	 	mov	ch,al	 	; сохранить его в CX
 F7D5  4A	 	 	 	dec	dx	 	; регистр адреса
 F7D6  FE C4	 	 	 	inc	ah
 F7D8  8A C4	 	 	 	mov	al,ah	 	; второй регистр данных
 F7DA  EE	 	 	 	out	dx,al
 F7DB  42	 	 	 	inc	dx
 F7DC  EC	 	 	 	in	al,dx	 	; получить второе значение данных
 F7DD  8A E5	 	 	 	mov	ah,ch	 	; AX содержит координаты светового пера
 	 	 	 	
 	 	 	 	
 F7DF  8A 1E 0049 R	 	 	mov	bl,crt_mode
 F7E3  2A FF	 	 	 	sub	bh,bh	 	; выделить значение режима в BX
 F7E5  2E: 8A 9F F7AE R	 	 	mov	bl,cs:v1[bx]	; значение поправки
 F7EA  2B C3	 	 	 	sub	ax,bx
 F7EC  2B 06 004E R	 	 	sub	ax,crt_start
 	 	 	 	
 F7F0  79 03	 	 	 	jns	v2
 F7F2  B8 0000	 	 	 	mov	ax,0	 	; поместить 0
 	 	 	 	
 	 	 	 	;   Определить режим
 	 	 	 	
 F7F5	 	 	 	v2:
 F7F5  B1 03	 	 	 	mov	cl,3	 	; установить счетчик
 F7F7  80 3E 0049 R 04	 	 	cmp	crt_mode,4	; определить, режим графики или
 	 	 	 	 	 	 	 	; альфа
 F7FC  72 2A	 	 	 	jb	v4	 	; альфа-перо
 F7FE  80 3E 0049 R 07	 	 	cmp	crt_mode,7
 F803  74 23	 	 	 	je	v4	 	; альфа-перо
 	 	 	 	
 	 	 	 	;   Графический режим
 	 	 	 	
 F805  B2 28	 	 	 	mov	dl,40	 	; делитель для графики
 F807  F6 F2	 	 	 	div	dl	; определение строки (AL) и колонки (AH)
 	 	 	 	 	 	 	 	; пределы AL 0-99, AH 0-39
 	 	 	 	
 	 	 	 	;   Определение положения строки для графики
 	 	 	 	
 F809  8A E8	 	 	 	mov	ch,al	 	; сохранить значение строки в CH
 F80B  02 ED	 	 	 	add	ch,ch	 	; умножить на 2 четно/нечетное поле
 F80D  8A DC	 	 	 	mov	bl,ah	 	; значение колонки в BX
 F80F  2A FF	 	 	 	sub	bh,bh	 	; умножить на 8 для среднего результата
 F811  80 3E 0049 R 06	 	 	cmp	crt_mode,6	; определить среднюю или наивысшую
 	 	 	 	 	 	 	 	; разрешающую способность
 F816  75 04	 	 	 	jne	v3	 	; не наивысшая разрешающая способность
 F818  B1 04	 	 	 	mov	cl,4	 ; сдвинуть значение наивысшей разрешающей
 	 	 	 	 	 	 	 ; способности
 F81A  D0 E4	 	 	 	sal	ah,1	; сдвиг на 1 разряд влево значения колонки
 F81C	 	 	 	v3:	 	 	 	; не наивысшая разрешающая способность
 F81C  D3 E3	 	 	 	shl	bx,cl	; умножить на 16 для наивысшей разрешающей
 	 	 	 	 	 	 	; способности
 	 	 	 	
 	 	 	 	;   Определение положения символа для альфа
 	 	 	 	
 F81E  8A D4	 	 	 	mov	dl,ah	 	; значение колонки для возврата
 F820  8A F0	 	 	 	mov	dh,al	 	; значение строки
 F822  D0 EE	 	 	 	shr	dh,1	 	; делить на 4
 F824  D0 EE	 	 	 	shr	dh,1	 	; для значения в пределах 0-24
 F826  EB 12	 	 	 	jmp	short v5	; возврат светового пера
 	 	 	 	
 	 	 	 	;   Режим альфа светового пера
 	 	 	 	
 F828	 	 	 	v4:	 	 	 	; альфа светового пера
 F828  F6 36 004A R	 	 	div	byte ptr crt_cols  ; строка, колонка
 F82C  8A F0	 	 	 	mov	dh,al	 	; строка в DH
 F82E  8A D4	 	 	 	mov	dl,ah	 	; колонка в DL
 F830  D2 E0	 	 	 	sal	al,cl	 	; умножение строк на 8
 F832  8A E8	 	 	 	mov	ch,al
 F834  8A DC	 	 	 	mov	bl,ah
 F836  32 FF	 	 	 	xor	bh,bh
 F838  D3 E3	 	 	 	sal	bx,cl
 F83A	 	 	 	v5:
 F83A  B4 01	 	 	 	mov	ah,1	 	; указать, что все установлено
 F83C	 	 	 	v6:
 F83C  52	 	 	 	push	dx	 	; сохранить значение возврата
 F83D  8B 16 0063 R	 	 	mov	dx,addr_6845	; получить базовый адрес
 F841  83 C2 07	 	 	 	add	dx,7
 F844  EE	 	 	 	out	dx,al	 	; вывод
 F845  5A	 	 	 	pop	dx	 	; восстановить значение
 F846	 	 	 	v7:
 F846  5F	 	 	 	pop	di	 	 ; восстановить регистры
 F847  5E	 	 	 	pop	si
 F848  1F	 	 	 	pop	ds
 F849  1F	 	 	 	pop	ds
 F84A  1F	 	 	 	pop	ds
 F84B  1F	 	 	 	pop	ds
 F84C  07	 	 	 	pop	es
 F84D  CF	 	 	 	iret
 F84E	 	 	 	read_lpen	endp
 	 	 	 	
 	 	 	 	;--- int 12 ------------------------------------
 	 	 	 	;
 	 	 	 	;    Программа определения размера памяти.
 	 	 	 	;
 	 	 	 	;    Эта программа передает в регистр AX об'ем памяти в Кбайтах.
 	 	 	 	;
 	 	 	 	;-----------------------------------------
 	 	 	 	
 	 	 	 	 	assume	cs:code,ds:data
 F84E	 	 	 	memory_size_determine	proc	far
 F84E  FB	 	 	 	sti	 	 	; установить бит разрешения прерывания
 F84F  1E	 	 	 	push	ds	 	; сохранить сегмент
 F850  B8 ---- R	 	 	mov	ax,data	 	; установить адресацию
 F853  8E D8	 	 	 	mov	ds,ax
 F855  A1 0013 R	 	 	mov	ax,memory_size	; получить значение размера памяти
 F858  1F	 	 	 	pop	ds	 	; восстановить сегмент
 F859  CF	 	 	 	iret	 	 	; возврат из прерывания
 F85A	 	 	 	memory_size_determine	endp
 	 	 	 	
 	 	 	 	;--- int 11-------------------------------
 	 	 	 	;
 	 	 	 	;    Программа определения состава оборудования.
 	 	 	 	;
 	 	 	 	;   Эта программа передает в регистр AX конфигурацию системы.
 	 	 	 	;
 	 	 	 	;   Разряды регистра AX имеют следующее значение:
 	 	 	 	;   0	    - загрузка системы с НГМД;
 	 	 	 	;   5,4     - тип подключенного ЭЛИ и режим его работы:
 	 	 	 	;	      00 - не используется;
 	 	 	 	;	      01 - 40х25, черно-белый режим цветного графического
 	 	 	 	;	 	   ЭЛИ;
 	 	 	 	;	      10 - 80х25, черно-белый режим цветного графического
 	 	 	 	;	 	   ЭЛИ;
 	 	 	 	;	      11 - 80х25, черно-белый режим монохромного ЭЛИ.
 	 	 	 	;   7,6     - количество НГМД;
 	 	 	 	;   11,10,9 - количество адаптеров стыка С2;
 	 	 	 	;   12	    - адаптер игр;
 	 	 	 	;   15,14   - количество печатающих устройств.
 	 	 	 	;   Разряды 6 и 7 устанавливаются только в том случае, если
 	 	 	 	; разряд 0 установлен в "1".
 	 	 	 	;
 	 	 	 	;----------------------------------------------
 	 	 	 	
 	 	 	 	 	assume	cs:code,ds:data
 F85A	 	 	 	equipment	proc	far
 F85A  FB	 	 	 	sti	 	 	; установить признак разрешения прерывания
 F85B  1E	 	 	 	push	ds	 	; сохранить сегмент
 F85C  B8 ---- R	 	 	mov	ax,data	 	; установить адресацию
 F85F  8E D8	 	 	 	mov	ds,ax
 F861  A1 0010 R	 	 	mov	ax,equip_flag	; получить конфигурацию системы
 F864  1F	 	 	 	pop	ds	 	; восстановить сегмент
 F865  CF	 	 	 	iret	 	 	; возврат из прерывания
 F866	 	 	 	equipment	endp
 	 	 	 	
 	 	 	 	;****************************************
 	 	 	 	;
 	 	 	 	;   Загрузка знакогенератора
 	 	 	 	;
 	 	 	 	;****************************************
 	 	 	 	
 F866	 	 	 	bct	proc	near
 F866  B8 DC00	 	 	 	mov	ax,0dc00h
 F869  8E C0	 	 	 	mov	es,ax
 F86B  B9 1000	 	 	 	mov	cx,1000h
 F86E  BA 03B8	 	 	 	mov	dx,3b8h
 F871  33 C0	 	 	 	xor	ax,ax
 F873  EE	 	 	 	out	dx,al
 F874  33 FF	 	 	 	xor	di,di
 F876  FC	 	 	 	cld
 F877  F3/ AB	 	 	 	rep	stosw
 F879  BE FA6E R	 	bct3:	mov	si,offset crt_char_gen
 F87C  33 FF	 	 	 	xor	di,di
 F87E  33 C0	 	 	 	xor	ax,ax
 F880  B9 0100	 	 	 	mov	cx,256
 F883	 	 	 	bct1:
 F883  B3 08	 	 	 	mov	bl,8
 F885  2E: 8A 04	 	bct2:	mov	al,cs:[si]
 F888  46	 	 	 	inc	si
 F889  26: 89 05	 	 	mov	word ptr es:[di],ax
 F88C  47	 	 	 	inc	di
 F88D  47	 	 	 	inc	di
 F88E  FE CB	 	 	 	dec	bl
 F890  75 F3	 	 	 	jnz	bct2
 F892  83 C7 10	 	 	 	add	di,10h
 F895  49	 	 	 	dec	cx
 F896  75 03	 	 	 	jnz	pr128
 F898  E9 CB63 R	 	 	jmp	zagrcw
 F89B  81 F9 0080	 	pr128:	cmp	cx,128
 F89F  75 E2	 	 	 	jne	bct1
 F8A1  BE CBB2 R	 	 	mov	si,offset crt_char_rus
 F8A4  EB DD	 	 	 	jmp	bct1
 F8A6  C3	 	 	kzagr:	ret
 F8A7	 	 	 	bct	endp
 	 	 	 	
 	 	 	 	;
 	 	 	 	;   Таблица кодов русских маленьких букв (строчных)
 	 	 	 	;
 F8A7	 	 	 	rust	label	byte
 F8A7  1B 31 32 33 34 35	 	db	1bh,'1234567890-='
       36 37 38 39 30 2D	
       3D	 	 	
 F8B4  08 09	 	 	 	db	08h,09h
 	 	 	 	;RCgoff
 	 	 	 	if	cp866
 	 	 	 	;866 кодировка, строчные, сканкоды
 F8B6  A9 E6 E3 AA A5 AD	 	db	0A9h,0E6h,0E3h,0AAh,0A5h,0ADh,0A3h,0E8h	;'йцукенгш'
       A3 E8	 	 	
 F8BE  E9 A7 A6 ED 0D FF	 	db	0E9h,0A7h,0A6h,0EDh,00Dh,0FFh,0E4h,0EBh	;'щзжэ',0dh,-1,'фы'
       E4 EB	 	 	
 F8C6  A2 A0 AF E0 AE AB	 	db	0A2h,0A0h,0AFh,0E0h,0AEh,0ABh,0A4h,03Bh	;'вапролд',';' 	 	
       A4 3B	 	 	
 F8CE  3A A1 EE 5C EF E7	 	db	03Ah,0A1h,0EEh,05Ch,0EFh,0E7h,0E1h,0ACh	;':бю',5ch,'ячсм' 	  	
       E1 AC	 	 	
 F8D6  A8 E2 EC 2C 2E 2F	 	db	0A8h,0E2h,0ECh,02Ch,02Eh,02Fh,0E5h,02Ah	;'ить',',./','х*'	  	 	
       E5 2A	 	 	
 F8DE  FF 20 EA	 	 	 	db	0FFh,020h,0EAh	 	 	 	;-1,' ъ'
 	 	 	 	endif
 	 	 	 	;RCgoff end
 	 	 	 	
 	 	 	 	
 F8E1	 	 	 	k30	label	byte
 F8E1  52 4F 50 51 4B 4C	 	db	82,79,80,81,75,76,77
       4D	 	 	
 F8E8  47 48 49	 	 	 	db	71,72,73
 	 	 	 	;---
 F8EB  10 11 12 13 14 15	 	db	16,17,18,19,20,21,22,23
       16 17	 	 	
 F8F3  18 19 1E 1F 20 21	 	db	24,25,30,31,32,33,34,35
       22 23	 	 	
 F8FB  24 25 26 2C 2D 2E	 	db	36,37,38,44,45,46,47,48
       2F 30	 	 	
 F903  31 32	 	 	 	db	49,50
 	 	 	 	
 	 	 	 	;---
 	 	 	 	;RCgoff
 	 	 	 	;обработчик CapsLock для русских букв
 	 	 	 	;if	newzagrcw	and cp866
 	 	 	 	;
 	 	 	 	;	;не делаются проверки выхода принимаемого кода за границы!
 	 	 	 	;	;но, по идее, коды гернерируются rust и rust2 таблицами,
 	 	 	 	;	;там не может быть постронних символов	
 	 	 	 	;k89:	cmp	al,80h
 	 	 	 	;	jb	k81	 	 	;только для верхней половины ASCII
 	 	 	 	;	test	kb_flag,left_shift+right_shift
 	 	 	 	;	jz	k80
 	 	 	 	;
 	 	 	 	;       ;shift был нажат - перевод загл->стр
 	 	 	 	;	cmp	al,0f0h                 
 	 	 	 	;	je	k89a	 	 	;Ё->ё	
 	 	 	 	;	cmp	al,90h
 	 	 	 	;	jb	cap_low
 	 	 	 	;	add	al,50h   	 	;перекодировка верхней части заглавных
 	 	 	 	;	jmp 	short k81
 	 	 	 	;cap_low:add	al,20h	 	 	;перекодировка нижней части заглавных	
 	 	 	 	;	jmp	short k81	 	 	 	 	
 	 	 	 	;k89a:	inc	ax	 	 	;Ё->ё
 	 	 	 	;	jmp	short k81
 	 	 	 	;
 	 	 	 	;
 	 	 	 	;	;shift не был нажат - перевод стр->загл
 	 	 	 	;k80:	cmp	al,0f1h         	
 	 	 	 	;	je	k89b	 	 	;ё->Ё
 	 	 	 	;	cmp	al,0b0h
 	 	 	 	;	jb	sml_low
 	 	 	 	;	sub	al,50h	 	 	;перекодировка верхней части строчных
 	 	 	 	;	jmp	short k81
 	 	 	 	;sml_low:sub	al,20h	 	 	;перекодировка нижней части строчных
 	 	 	 	;	jmp	short k81
 	 	 	 	;k89b:	dec	ax 	 	 	;ё->Ё
 	 	 	 	;k81:	jmp	k61	 	 	;играет роль общего возврата 
 	 	 	 	
 	 	 	 	
 	 	 	 	;else	 	 	 	 	;старый перекодировщик для основной кодировки
 	 	 	 	;k89:	test	kb_flag,left_shift+right_shift
 	 	 	 	; 	jz	k80
 	 	 	 	; 	cmp	al,0f0h	 	 	;shift был нажат - перевод загл->стр
 	 	 	 	; 	je	k89a   	 	 	;Ё->ё
 	 	 	 	;
 	 	 	 	; 	cmp	al,0b0h
 	 	 	 	; 	jb	k81
 	 	 	 	; 	cmp	al,0cfh
 	 	 	 	; 	ja	k81
 	 	 	 	; 	add	al,20h                  ;собственно перекодировка
 	 	 	 	;k81:	jmp	k61                     ;возврат (для условных команд)
 	 	 	 	;
 	 	 	 	;k80:	cmp	al,0f1h	 	 	;shift не был нажат - перевод стр->загл
 	 	 	 	; 	je	k89b                    ;ё->Ё
 	 	 	 	;
 	 	 	 	; 	cmp	al,0d0h
 	 	 	 	; 	jb	k81
 	 	 	 	; 	cmp	al,0feh	 	 	;ошибка, должно быть 0efh! Однако эти символы все равно не ввести с клавы
 	 	 	 	; 	ja	k81
 	 	 	 	; 	sub	al,20h
 	 	 	 	; 	jmp	k61
 	 	 	 	;
 	 	 	 	;k89b:	sub	al,01h 	 	 	;обработка Ёё	
 	 	 	 	; 	jmp	k61
 	 	 	 	;k89a:	add	al,01h
 	 	 	 	; 	jmp	k61
 	 	 	 	;endif
 F938	 	 	 	 	org	0f938h
 	 	 	 	;RCgoff end
 	 	 	 	
 	 	 	 	
 	 	 	 	;	Временный обработчик прерываний стыка С2
 	 	 	 	;
 	 	 	 	;
 F938  50	 	 	dummm_return:	push	ax
 F939  B0 20	 	 	 	 	mov	al,20h
 F93B  E6 20	 	 	 	 	out	20h,al
 F93D  58	 	 	 	 	pop	ax
 F93E  CF	 	 	 	 	iret
 F93F  5D	 	 	read_lpen1:	pop	bp
 F940  E9 F7B6 R	 	 	 	 	jmp	read_lpen
 	 	 	 	
 	 	 	 	
 	 	 	 	;**************************************
 	 	 	 	;
 	 	 	 	;   Знакогенератор графический 320х200 и 640х200
 	 	 	 	;
 	 	 	 	;***************************************
 	 	 	 	
 FA6E	 	 	 	 	org	0fa6eh
 	 	 	 	
 	 	 	 	
 FA6E	 	 	 	crt_char_gen  label  byte
 FA6E  00 00 00 00 00 00	 	db	000h,000h,000h,000h,000h,000h,000h,000h ;d_00
       00 00	 	 	
 FA76  7E 81 A5 81 BD 99	 	db	07eh,081h,0a5h,081h,0bdh,099h,081h,07eh ;d_01
       81 7E	 	 	
 FA7E  7E FF DB FF C3 E7	 	db	07eh,0ffh,0dbh,0ffh,0c3h,0e7h,0ffh,07eh ;d_02
       FF 7E	 	 	
 FA86  6C FE FE FE 7C 38	 	db	06ch,0feh,0feh,0feh,07ch,038h,010h,000h ;d_03
       10 00	 	 	
 FA8E  10 38 7C FE 7C 38	 	db	010h,038h,07ch,0feh,07ch,038h,010h,008h ;d_04
       10 08	 	 	
 FA96  38 7C 38 FE FE 7C	 	db	038h,07ch,038h,0feh,0feh,07ch,038h,07ch ;d_05
       38 7C	 	 	
 FA9E  10 10 38 7C FE 7C	 	db	010h,010h,038h,07ch,0feh,07ch,038h,07ch ;d_06
       38 7C	 	 	
 FAA6  00 00 18 3C 3C 18	 	db	000h,000h,018h,03ch,03ch,018h,000h,000h ;d_07
       00 00	 	 	
 FAAE  FF FF E7 C3 C3 E7	 	db	0ffh,0ffh,0e7h,0c3h,0c3h,0e7h,0ffh,0ffh ;d_08
       FF FF	 	 	
 FAB6  00 3C 66 42 42 66	 	db	000h,03ch,066h,042h,042h,066h,03ch,000h ;d_09
       3C 00	 	 	
 FABE  FF C3 99 BD BD 99	 	db	0ffh,0c3h,099h,0bdh,0bdh,099h,0c3h,0ffh ;d_0a
       C3 FF	 	 	
 FAC6  0F 07 0F 7D CC CC	 	db	00fh,007h,00fh,07dh,0cch,0cch,0cch,078h ;d_0b
       CC 78	 	 	
 FACE  3C 66 66 66 3C 18	 	db	03ch,066h,066h,066h,03ch,018h,07eh,018h ;d_0c
       7E 18	 	 	
 FAD6  3F 33 3F 30 30 70	 	db	03fh,033h,03fh,030h,030h,070h,0f0h,0e0h ;d_0d
       F0 E0	 	 	
 FADE  7F 63 7F 63 63 67	 	db	07fh,063h,07fh,063h,063h,067h,0e6h,0c0h ;d_0e
       E6 C0	 	 	
 FAE6  99 5A 3C E7 E7 3C	 	db	099h,05ah,03ch,0e7h,0e7h,03ch,05ah,099h ;d_0f
       5A 99	 	 	
 	 	 	 	
 FAEE  80 E0 F8 FE F8 E0	 	db	080h,0e0h,0f8h,0feh,0f8h,0e0h,080h,000h ;d_10
       80 00	 	 	
 FAF6  02 0E 3E FE 3E 0E	 	db	002h,00eh,03eh,0feh,03eh,00eh,002h,000h ;d_11
       02 00	 	 	
 FAFE  18 3C 7E 18 18 7E	 	db	018h,03ch,07eh,018h,018h,07eh,03ch,018h ;d_12
       3C 18	 	 	
 FB06  66 66 66 66 66 00	 	db	066h,066h,066h,066h,066h,000h,066h,000h ;d_13
       66 00	 	 	
 FB0E  7F DB DB 7B 1B 1B	 	db	07fh,0dbh,0dbh,07bh,01bh,01bh,01bh,000h ;d_14
       1B 00	 	 	
 FB16  3E 63 38 6C 6C 38	 	db	03eh,063h,038h,06ch,06ch,038h,0cch,078h ;d_15
       CC 78	 	 	
 FB1E  00 00 00 00 7E 7E	 	db	000h,000h,000h,000h,07eh,07eh,07eh,000h ;d_16
       7E 00	 	 	
 FB26  18 3C 7E 18 7E 3C	 	db	018h,03ch,07eh,018h,07eh,03ch,018h,0ffh ;d_17
       18 FF	 	 	
 FB2E  18 3C 7E 18 18 18	 	db	018h,03ch,07eh,018h,018h,018h,018h,000h ;d_18
       18 00	 	 	
 FB36  18 18 18 18 7E 3C	 	db	018h,018h,018h,018h,07eh,03ch,018h,000h ;d_19
       18 00	 	 	
 FB3E  00 18 0C FE 0C 18	 	db	000h,018h,00ch,0feh,00ch,018h,000h,000h ;d_1a
       00 00	 	 	
 FB46  00 30 60 FE 60 30	 	db	000h,030h,060h,0feh,060h,030h,000h,000h ;d_1b
       00 00	 	 	
 FB4E  00 00 C0 C0 C0 FE	 	db	000h,000h,0c0h,0c0h,0c0h,0feh,000h,000h ;d_1c
       00 00	 	 	
 FB56  00 24 66 FF 66 24	 	db	000h,024h,066h,0ffh,066h,024h,000h,000h ;d_1d
       00 00	 	 	
 FB5E  00 18 3C 7E FF FF	 	db	000h,018h,03ch,07eh,0ffh,0ffh,000h,000h ;d_1e
       00 00	 	 	
 FB66  00 FF FF 7E 3C 18	 	db	000h,0ffh,0ffh,07eh,03ch,018h,000h,000h ;d_1f
       00 00	 	 	
 	 	 	 	
 FB6E  00 00 00 00 00 00	 	db	000h,000h,000h,000h,000h,000h,000h,000h ;sp d_20
       00 00	 	 	
 FB76  30 78 78 30 30 00	 	db	030h,078h,078h,030h,030h,000h,030h,000h ;! d_21
       30 00	 	 	
 FB7E  6C 6C 6C 00 00 00	 	db	06ch,06ch,06ch,000h,000h,000h,000h,000h ;"d_22
       00 00	 	 	
 FB86  6C 6C FE 6C FE 6C	 	db	06ch,06ch,0feh,06ch,0feh,06ch,06ch,000h ;# d_23
       6C 00	 	 	
 FB8E  30 7C C0 78 0C F8	 	db	030h,07ch,0c0h,078h,00ch,0f8h,030h,000h ;$ d_24
       30 00	 	 	
 FB96  00 C6 CC 18 30 66	 	db	000h,0c6h,0cch,018h,030h,066h,0c6h,000h ;per cent d_25
       C6 00	 	 	
 FB9E  38 6C 38 76 DC CC	 	db	038h,06ch,038h,076h,0dch,0cch,076h,000h ;& d_26
       76 00	 	 	
 FBA6  60 60 C0 00 00 00	 	db	060h,060h,0c0h,000h,000h,000h,000h,000h ;' d_27
       00 00	 	 	
 FBAE  18 30 60 60 60 30	 	db	018h,030h,060h,060h,060h,030h,018h,000h ;( d_28
       18 00	 	 	
 FBB6  60 30 18 18 18 30	 	db	060h,030h,018h,018h,018h,030h,060h,000h ;) d_29
       60 00	 	 	
 FBBE  00 66 3C FF 3C 66	 	db	000h,066h,03ch,0ffh,03ch,066h,000h,000h ;* d_2a
       00 00	 	 	
 FBC6  00 30 30 FC 30 30	 	db	000h,030h,030h,0fch,030h,030h,000h,000h ;+ d_2b
       00 00	 	 	
 FBCE  00 00 00 00 00 30	 	db	000h,000h,000h,000h,000h,030h,030h,060h ;, d_2c
       30 60	 	 	
 FBD6  00 00 00 FC 00 00	 	db	000h,000h,000h,0fch,000h,000h,000h,000h ;- d_2d
       00 00	 	 	
 FBDE  00 00 00 00 00 30	 	db	000h,000h,000h,000h,000h,030h,030h,000h ;. d_2e
       30 00	 	 	
 FBE6  06 0C 18 30 60 C0	 	db	006h,00ch,018h,030h,060h,0c0h,080h,000h ;/ d_2f
       80 00	 	 	
 	 	 	 	
 FBEE  7C C6 CE DE F6 E6	 	db	07ch,0c6h,0ceh,0deh,0f6h,0e6h,07ch,000h ;0 d_30
       7C 00	 	 	
 FBF6  30 70 30 30 30 30	 	db	030h,070h,030h,030h,030h,030h,0fch,000h ;1 d_31
       FC 00	 	 	
 FBFE  78 CC 0C 38 60 CC	 	db	078h,0cch,00ch,038h,060h,0cch,0fch,000h ;2 d_32
       FC 00	 	 	
 FC06  78 CC 0C 38 0C CC	 	db	078h,0cch,00ch,038h,00ch,0cch,078h,000h ;3 d_33
       78 00	 	 	
 FC0E  1C 3C 6C CC FE 0C	 	db	01ch,03ch,06ch,0cch,0feh,00ch,01eh,000h ;4 d_34
       1E 00	 	 	
 FC16  FC C0 F8 0C 0C CC	 	db	0fch,0c0h,0f8h,00ch,00ch,0cch,078h,000h ;5 d_35
       78 00	 	 	
 FC1E  38 60 C0 F8 CC CC	 	db	038h,060h,0c0h,0f8h,0cch,0cch,078h,000h ;6 d_36
       78 00	 	 	
 FC26  FC CC 0C 18 30 30	 	db	0fch,0cch,00ch,018h,030h,030h,030h,000h ;7 d_37
       30 00	 	 	
 FC2E  78 CC CC 78 CC CC	 	db	078h,0cch,0cch,078h,0cch,0cch,078h,000h ;8 d_38
       78 00	 	 	
 FC36  78 CC CC 7C 0C 18	 	db	078h,0cch,0cch,07ch,00ch,018h,070h,000h ;9 d_39
       70 00	 	 	
 FC3E  00 30 30 00 00 30	 	db	000h,030h,030h,000h,000h,030h,030h,000h ;: d_3a
       30 00	 	 	
 FC46  00 30 30 00 00 30	 	db	000h,030h,030h,000h,000h,030h,030h,060h ;; d_3b
       30 60	 	 	
 FC4E  18 30 60 C0 60 30	 	db	018h,030h,060h,0c0h,060h,030h,018h,000h ;< d_3c
       18 00	 	 	
 FC56  00 00 FC 00 00 FC	 	db	000h,000h,0fch,000h,000h,0fch,000h,000h ;= d_3d
       00 00	 	 	
 FC5E  60 30 18 0C 18 30	 	db	060h,030h,018h,00ch,018h,030h,060h,000h ;> d_3e
       60 00	 	 	
 FC66  78 CC 0C 18 30 00	 	db	078h,0cch,00ch,018h,030h,000h,030h,000h ;? d_3f
       30 00	 	 	
 	 	 	 	
 FC6E  7C C6 DE DE DE C0	 	db	07ch,0c6h,0deh,0deh,0deh,0c0h,078h,000h ;@ d_40
       78 00	 	 	
 FC76  30 78 CC CC FC CC	 	db	030h,078h,0cch,0cch,0fch,0cch,0cch,000h ;A d_41
       CC 00	 	 	
 FC7E  FC 66 66 7C 66 66	 	db	0fch,066h,066h,07ch,066h,066h,0fch,000h ;B d_42
       FC 00	 	 	
 FC86  3C 66 C0 C0 C0 66	 	db	03ch,066h,0c0h,0c0h,0c0h,066h,03ch,000h ;C d_43
       3C 00	 	 	
 FC8E  F8 6C 66 66 66 6C	 	db	0f8h,06ch,066h,066h,066h,06ch,0f8h,000h ;D d_44
       F8 00	 	 	
 FC96  FE 62 68 78 68 62	 	db	0feh,062h,068h,078h,068h,062h,0feh,000h ;E d_45
       FE 00	 	 	
 FC9E  FE 62 68 78 68 60	 	db	0feh,062h,068h,078h,068h,060h,0f0h,000h ;F d_46
       F0 00	 	 	
 FCA6  3C 66 C0 C0 CE 66	 	db	03ch,066h,0c0h,0c0h,0ceh,066h,03eh,000h ;G d_47
       3E 00	 	 	
 FCAE  CC CC CC FC CC CC	 	db	0cch,0cch,0cch,0fch,0cch,0cch,0cch,000h ;H d_48
       CC 00	 	 	
 FCB6  78 30 30 30 30 30	 	db	078h,030h,030h,030h,030h,030h,078h,000h ;I d_49
       78 00	 	 	
 FCBE  1E 0C 0C 0C CC CC	 	db	01eh,00ch,00ch,00ch,0cch,0cch,078h,000h ;J d_4a
       78 00	 	 	
 FCC6  E6 66 6C 78 6C 66	 	db	0e6h,066h,06ch,078h,06ch,066h,0e6h,000h ;K d_4b
       E6 00	 	 	
 FCCE  F0 60 60 60 62 66	 	db	0f0h,060h,060h,060h,062h,066h,0feh,000h ;L d_4c
       FE 00	 	 	
 FCD6  C6 EE FE FE D6 C6	 	db	0c6h,0eeh,0feh,0feh,0d6h,0c6h,0c6h,000h ;M d_4d
       C6 00	 	 	
 FCDE  C6 E6 F6 DE CE C6	 	db	0c6h,0e6h,0f6h,0deh,0ceh,0c6h,0c6h,000h ;N d_4e
       C6 00	 	 	
 FCE6  38 6C C6 C6 C6 6C	 	db	038h,06ch,0c6h,0c6h,0c6h,06ch,038h,000h ;O d_4f
       38 00	 	 	
 	 	 	 	
 FCEE  FC 66 66 7C 60 60	 	db	0fch,066h,066h,07ch,060h,060h,0f0h,000h ;P d_50
       F0 00	 	 	
 FCF6  78 CC CC CC DC 78	 	db	078h,0cch,0cch,0cch,0dch,078h,01ch,000h ;Q d_51
       1C 00	 	 	
 FCFE  FC 66 66 7C 6C 66	 	db	0fch,066h,066h,07ch,06ch,066h,0e6h,000h ;R d_52
       E6 00	 	 	
 FD06  78 CC E0 70 1C CC	 	db	078h,0cch,0e0h,070h,01ch,0cch,078h,000h ;S d_53
       78 00	 	 	
 FD0E  FC B4 30 30 30 30	 	db	0fch,0b4h,030h,030h,030h,030h,078h,000h ;T d_54
       78 00	 	 	
 FD16  CC CC CC CC CC CC	 	db	0cch,0cch,0cch,0cch,0cch,0cch,0fch,000h ;U d_55
       FC 00	 	 	
 FD1E  CC CC CC CC CC 78	 	db	0cch,0cch,0cch,0cch,0cch,078h,030h,000h ;V d_56
       30 00	 	 	
 FD26  C6 C6 C6 D6 FE EE	 	db	0c6h,0c6h,0c6h,0d6h,0feh,0eeh,0c6h,000h ;W d_57
       C6 00	 	 	
 FD2E  C6 C6 6C 38 38 6C	 	db	0c6h,0c6h,06ch,038h,038h,06ch,0c6h,000h ;X d_58
       C6 00	 	 	
 FD36  CC CC CC 78 30 30	 	db	0cch,0cch,0cch,078h,030h,030h,078h,000h ;Y d_59
       78 00	 	 	
 FD3E  FE C6 8C 18 32 66	 	db	0feh,0c6h,08ch,018h,032h,066h,0feh,000h ;Z d_5a
       FE 00	 	 	
 FD46  78 60 60 60 60 60	 	db	078h,060h,060h,060h,060h,060h,078h,000h ;( d_5b
       78 00	 	 	
 FD4E  C0 60 30 18 0C 06	 	db	0c0h,060h,030h,018h,00ch,006h,002h,000h ;backslash
       02 00	 	 	
 FD56  78 18 18 18 18 18	 	db	078h,018h,018h,018h,018h,018h,078h,000h ;) d_5d
       78 00	 	 	
 FD5E  10 38 6C C6 00 00	 	db	010h,038h,06ch,0c6h,000h,000h,000h,000h ;cimpqumflex
       00 00	 	 	
 FD66  00 00 00 00 00 00	 	db	000h,000h,000h,000h,000h,000h,000h,0ffh ;_ d_5f
       00 FF	 	 	
 	 	 	 	
 FD6E  30 30 18 00 00 00	 	db	030h,030h,018h,000h,000h,000h,000h,000h ;  d_60
       00 00	 	 	
 FD76  00 00 78 0C 7C CC	 	db	000h,000h,078h,00ch,07ch,0cch,076h,000h ;lower case a
       76 00	 	 	
 FD7E  E0 60 60 7C 66 66	 	db	0e0h,060h,060h,07ch,066h,066h,0dch,000h ;b d_62
       DC 00	 	 	
 FD86  00 00 78 CC C0 CC	 	db	000h,000h,078h,0cch,0c0h,0cch,078h,000h ;c d_63
       78 00	 	 	
 FD8E  1C 0C 0C 7C CC CC	 	db	01ch,00ch,00ch,07ch,0cch,0cch,076h,000h ;d d_64
       76 00	 	 	
 FD96  00 00 78 CC FC C0	 	db	000h,000h,078h,0cch,0fch,0c0h,078h,000h ;e d_65
       78 00	 	 	
 FD9E  38 6C 60 F0 60 60	 	db	038h,06ch,060h,0f0h,060h,060h,0f0h,000h ;f d_66
       F0 00	 	 	
 FDA6  00 00 76 CC CC 7C	 	db	000h,000h,076h,0cch,0cch,07ch,00ch,0f8h ;g d_67
       0C F8	 	 	
 FDAE  E0 60 6C 76 66 66	 	db	0e0h,060h,06ch,076h,066h,066h,0e6h,000h ;h d_68
       E6 00	 	 	
 FDB6  30 00 70 30 30 30	 	db	030h,000h,070h,030h,030h,030h,078h,000h ;i d_69
       78 00	 	 	
 FDBE  0C 00 0C 0C 0C CC	 	db	00ch,000h,00ch,00ch,00ch,0cch,0cch,078h ;j d_6a
       CC 78	 	 	
 FDC6  E0 60 66 6C 78 6C	 	db	0e0h,060h,066h,06ch,078h,06ch,0e6h,000h ;k d_6b
       E6 00	 	 	
 FDCE  70 30 30 30 30 30	 	db	070h,030h,030h,030h,030h,030h,078h,000h ;l d_6c
       78 00	 	 	
 FDD6  00 00 CC FE FE D6	 	db	000h,000h,0cch,0feh,0feh,0d6h,0c6h,000h ;m d_6d
       C6 00	 	 	
 FDDE  00 00 F8 CC CC CC	 	db	000h,000h,0f8h,0cch,0cch,0cch,0cch,000h ;n d_6e
       CC 00	 	 	
 FDE6  00 00 78 CC CC CC	 	db	000h,000h,078h,0cch,0cch,0cch,078h,000h ;o d_6f
       78 00	 	 	
 	 	 	 	
 FDEE  00 00 DC 66 66 7C	 	db	000h,000h,0dch,066h,066h,07ch,060h,0f0h ;p d_70
       60 F0	 	 	
 FDF6  00 00 76 CC CC 7C	 	db	000h,000h,076h,0cch,0cch,07ch,00ch,01eh ;q d_71
       0C 1E	 	 	
 FDFE  00 00 DC 76 66 60	 	db	000h,000h,0dch,076h,066h,060h,0f0h,000h ;r d_72
       F0 00	 	 	
 FE06  00 00 7C C0 78 0C	 	db	000h,000h,07ch,0c0h,078h,00ch,0f8h,000h ;s d_73
       F8 00	 	 	
 FE0E  10 30 7C 30 30 34	 	db	010h,030h,07ch,030h,030h,034h,018h,000h ;t d_74
       18 00	 	 	
 FE16  00 00 CC CC CC CC	 	db	000h,000h,0cch,0cch,0cch,0cch,076h,000h ;u d_75
       76 00	 	 	
 FE1E  00 00 CC CC CC 78	 	db	000h,000h,0cch,0cch,0cch,078h,030h,000h ;v d_76
       30 00	 	 	
 FE26  00 00 C6 D6 FE FE	 	db	000h,000h,0c6h,0d6h,0feh,0feh,06ch,000h ;w d_77
       6C 00	 	 	
 FE2E  00 00 C6 6C 38 6C	 	db	000h,000h,0c6h,06ch,038h,06ch,0c6h,000h ;x d_78
       C6 00	 	 	
 FE36  00 00 CC CC CC 7C	 	db	000h,000h,0cch,0cch,0cch,07ch,00ch,0f8h ;y d_79
       0C F8	 	 	
 FE3E  00 00 FC 98 30 64	 	db	000h,000h,0fch,098h,030h,064h,0fch,000h ;z d_7a
       FC 00	 	 	
 FE46  1C 30 30 E0 30 30	 	db	01ch,030h,030h,0e0h,030h,030h,01ch,000h ;  d_7b
       1C 00	 	 	
 FE4E  18 18 18 00 18 18	 	db	018h,018h,018h,000h,018h,018h,018h,000h ;  d_7c
       18 00	 	 	
 FE56  E0 30 30 1C 30 30	 	db	0e0h,030h,030h,01ch,030h,030h,0e0h,000h ;  d_7d
       E0 00	 	 	
 FE5E  76 DC 00 00 00 00	 	db	076h,0dch,000h,000h,000h,000h,000h,000h ;  d_7e
       00 00	 	 	
 FE66  00 10 38 6C C6 C6	 	db	000h,010h,038h,06ch,0c6h,0c6h,0feh,000h ;delta d_7f
       FE 00	 	 	
 	 	 	 	
 	 	 	 	;---int 1a-------------------------------
 	 	 	 	;
 	 	 	 	;   Программа установки-считывания времени суток
 	 	 	 	;
 	 	 	 	;   Эта программа обеспечивает выполнение двух функций, код которых
 	 	 	 	; задается в регистре AH:
 	 	 	 	;   AH=0 - считать текущее состояние часов. После выполнения коман-
 	 	 	 	; ды регистры CX и DX содержат старшую и младшую части счетчика.
 	 	 	 	;   Если регистр AL содержит "0", то счет идет в течение одних
 	 	 	 	; суток, при любом другом значении счет переходит на следующие
 	 	 	 	; сутки;
 	 	 	 	;
 	 	 	 	;   AH=1 - записать текущее состояние часов. Регистры CX и DX
 	 	 	 	; содержат старшую и младшую части счетчика.
 	 	 	 	;
 	 	 	 	;------------------------------------------
 	 	 	 	 	assume	cs:code,ds:data
 FE6E	 	 	 	time_of_day	proc	far
 FE6E  FB	 	 	 	sti	 	; уст признак разрешения прерывания
 FE6F  1E	 	 	 	push	ds	; сохранить сегмент
 FE70  50	 	 	 	push	ax	; сохранить параметры
 FE71  B8 ---- R	 	 	mov	ax,data
 FE74  8E D8	 	 	 	mov	ds,ax
 FE76  58	 	 	 	pop	ax
 FE77  0A E4	 	 	 	or	ah,ah	; AH=0 ?
 FE79  74 07	 	 	 	jz	t2  ; да, переход к считыванию текущего состояния
 FE7B  FE CC	 	 	 	dec	ah	; AH=1 ?
 FE7D  74 16	 	 	 	jz	t3  ; да, переход к установке текущего состояния
 	 	 	 	
 FE7F	 	 	 	t1:	; Возврат из программы
 	 	 	 	
 FE7F  FB	 	 	 	sti	 	; уст признак разрешения прерывания
 FE80  1F	 	 	 	pop	ds	; возврат сегмента
 FE81  CF	 	 	 	iret	 	; возврат к программе,вызвавшей процедуру
 	 	 	 	
 FE82	 	 	 	t2:	; Считать текущее состояния часов
 	 	 	 	
 FE82  FA	 	 	 	cli	 	; сбросить признак разрешения прерывания
 FE83  A0 0070 R	 	 	mov	al,timer_ofl  ; считать в AL флажок перехода на сле-
 FE86  C6 06 0070 R 00	 	 	mov	timer_ofl,0   ; дующие сутки и сбросить его в памяти
 FE8B  8B 0E 006E R	 	 	mov	cx,timer_high	 	; установить старшую и младшую
 FE8F  8B 16 006C R	 	 	mov	dx,timer_low	 	; части счетчика
 FE93  EB EA	 	 	 	jmp	short t1
 	 	 	 	
 FE95	 	 	 	t3:	; Установить текущее состояние часов
 	 	 	 	
 FE95  FA	 	 	 	cli	 	; сброс признака разрешения прерывания
 FE96  89 16 006C R	 	 	mov	timer_low,dx	 	; установить младшую и старшую
 FE9A  89 0E 006E R	 	 	mov	timer_high,cx	 	; части счетчика
 FE9E  C6 06 0070 R 00	 	 	mov	timer_ofl,0	; сброс флажка перехода через сутки
 FEA3  EB DA	 	 	 	jmp	short t1	; возврат из программы отсчета времени
 FEA5	 	 	 	time_of_day	endp
 	 	 	 	
 	 	 	 	;-------int 08-------------------
 	 	 	 	;
 	 	 	 	;   Программа обработки прерывания таймера КР580ВИ53 (INT 8H) об-
 	 	 	 	; рабатывает прерывания, аппаратурно возникающие от нулевого канала
 	 	 	 	; таймера, на вход которого подаются сигналы с частотой 1,228 МГц,
 	 	 	 	; делящиеся на 56263 для обеспечения 18,2 прерываний в секунду.
 	 	 	 	;   При обработке прерывания корректируется программный счетчик,
 	 	 	 	; хранящийся в памяти по адресу 0046CH (младшая часть счетчика) и
 	 	 	 	; адресу 0047EH (старшая часть счетчика) и используемый для уста-
 	 	 	 	; новки времени суток.
 	 	 	 	;   В функции программы входит коррекция счетчика, управляющего
 	 	 	 	; двигателем НГМД. После обнуления счетчика двигатель выключается.
 	 	 	 	;   Вектор 1CH дает возможность пользователю входить в заданную
 	 	 	 	; программу с частотой прерывания таймера (18.2 прерываний в секун-
 	 	 	 	; ду). Для этого в таблице векторов прерываний по адресу 007CH
 	 	 	 	; необходимо задать адрес пользовательской программы.
 	 	 	 	;
 	 	 	 	;---------------------------------------------------
 	 	 	 	
 FEA5	 	 	 	timer_int	proc	far
 FEA5  FB	 	 	 	sti	 	; уст признак разрешения прерывания
 FEA6  1E	 	 	 	push	ds
 FEA7  50	 	 	 	push	ax
 FEA8  52	 	 	 	push	dx
 FEA9  B8 ---- R	 	 	mov	ax,data
 FEAC  8E D8	 	 	 	mov	ds,ax
 FEAE  FF 06 006C R	 	 	inc	timer_low    ; +1 к старшей части счетчика
 FEB2  75 04	 	 	 	jnz	t4
 FEB4  FF 06 006E R	 	 	inc	timer_high   ; +1 к старшей части счетчика
 	 	 	 	
 FEB8	 	 	 	t4:	; Опрос счетчика = 24 часам
 	 	 	 	
 FEB8  83 3E 006E R 18	 	 	cmp	timer_high,018h
 FEBD  75 19	 	 	 	jnz	t5
 FEBF  81 3E 006C R 00B0	 	cmp	timer_low,0b0h
 FEC5  75 11	 	 	 	jnz	t5
 	 	 	 	
 	 	 	 	;   Таймер исчерпал 24 часа
 	 	 	 	
 FEC7  C7 06 006E R 0000	 	mov	timer_high,0   ; сброс старшей и младшей частей
 FECD  C7 06 006C R 0000	 	mov	timer_low,0    ; счетчика и установка флажка пере-
 FED3  C6 06 0070 R 01	 	 	mov	timer_ofl,1    ; хода счета на следующие сутки
 	 	 	 	
 	 	 	 	;   Выключение мотора НГМД, если счетчик управления мотором
 	 	 	 	; исчерпан
 	 	 	 	
 FED8	 	 	 	t5:
 FED8  FE 0E 0040 R	 	 	dec	motor_count
 FEDC  75 0B	 	 	 	jnz	t6	 	; переход, если счетчик не установлен
 FEDE  80 26 003F R F0	 	 	and	motor_status,0f0h
 FEE3  B0 0C	 	 	 	mov	al,0ch
 FEE5  BA 03F2	 	 	 	mov	dx,03f2h
 FEE8  EE	 	 	 	out	dx,al	 	; выключить мотор
 	 	 	 	
 FEE9	 	 	 	t6:
 FEE9  CD 1C	 	 	 	int	1ch	; передача управления программе пользователя
 FEEB  B0 20	 	 	 	mov	al,eoi
 FEED  E6 20	 	 	 	out	020h,al        ; конец прерывания
 FEEF  5A	 	 	 	pop	dx
 FEF0  58	 	 	 	pop	ax
 FEF1  1F	 	 	 	pop	ds
 FEF2  CF	 	 	 	iret	 	 	; возврат из прерывания
 FEF3	 	 	 	timer_int	endp
 	 	 	 	;-------------------------rc раньше здесь была vector_table
 	 	 	 	;RCgoff
 	 	 	 	;обработчик CapsLock для русских букв
 	 	 	 	;if	newzagrcw	and cp866
 	 	 	 	 	
 FEF3  3C 80	 	 	k89:	cmp	al,80h
 FEF5  72 3B	 	 	 	jb	k81	 	 	;только для верхней половины ASCII
 FEF7  F6 06 0017 R 03	 	 	test	kb_flag,left_shift+right_shift
 FEFC  74 17	 	 	 	jz	k80
 	 	 	 	
 	 	 	 	        ;shift был нажат - перевод загл->стр
 FEFE  3C F0	 	 	 	cmp	al,0f0h                 
 FF00  74 10	 	 	 	je	k89a	 	 	;Ё->ё	
 FF02  3C 90	 	 	 	cmp	al,90h
 FF04  72 08	 	 	 	jb	cap_low
 FF06  3C 9F	 	 	 	cmp	al,09fh
 FF08  77 28	 	 	 	ja	k81	 	 	;выход за границу заглавных
 FF0A  04 50	 	 	 	add	al,50h   	 	;перекодировка верхней части заглавных
 FF0C  EB 24	 	 	 	jmp 	short k81
 FF0E  04 20	 	 	cap_low:add	al,20h	 	 	;перекодировка нижней части заглавных	
 FF10  EB 20	 	 	 	jmp	short k81	 	 	 	 	
 FF12  40	 	 	k89a:	inc	ax	 	 	;Ё->ё
 FF13  EB 1D	 	 	 	jmp	short k81
 	 	 	 	
 	 	 	 	
 	 	 	 	 	;shift не был нажат - перевод стр->загл
 FF15  3C F1	 	 	k80:	cmp	al,0f1h         	
 FF17  74 18	 	 	 	je	k89b	 	 	;ё->Ё
 FF19  3C B0	 	 	 	cmp	al,0b0h
 FF1B  72 0C	 	 	 	jb	sml_low
 FF1D  3C E0	 	 	 	cmp	al,0e0h
 FF1F  72 11	 	 	 	jb	k81	 	 	;выход за границу строчных (попали в псевдографику)
 FF21  3C EF	 	 	 	cmp	al,0efh
 FF23  77 0D	 	 	 	ja	k81	 	 	;выход за границу строчных (больше большего)
 FF25  2C 50	 	 	 	sub	al,50h	 	 	;перекодировка верхней части строчных
 FF27  EB 09	 	 	 	jmp	short k81
 FF29  3C A0	 	 	sml_low:cmp	al,0a0h
 FF2B  72 05	 	 	 	jb	k81	 	 	;выход за границу строчных (меньше меньшего)
 FF2D  2C 20	 	 	 	sub	al,20h	 	 	;перекодировка нижней части строчных
 FF2F  EB 01	 	 	 	jmp	short k81
 FF31  48	 	 	k89b:	dec	ax 	 	 	;ё->Ё
 FF32  E9 E756 R	 	k81:	jmp	k61	 	 	;играет роль общего возврата 
 	 	 	 	;-----------------------------конец обработчика
 FF53	 	 	 	 	org	0FF53h
 FF53	 	 	 	dummy_return:
 FF53  CF	 	 	 	iret
 	 	 	 	
 	 	 	 	;---int 5----------------------
 	 	 	 	;
 	 	 	 	;   Программа вывода на печать содержимого буфера ЭЛИ вызывается
 	 	 	 	; одновременным нажатием клавиши ПЕЧ и клавиши переключения регист-
 	 	 	 	; ров. Позиция курсора сохраняется до завершения процедуры обработки
 	 	 	 	; прерывания. Повторное нажатие названных клавиш во время обработки
 	 	 	 	; прерывания игнорируется.
 	 	 	 	;   При выполнении программы в постоянно распределенной рабочей
 	 	 	 	; области памяти по адресу 0500H устанавливается следующая
 	 	 	 	; информация:
 	 	 	 	;   0	 - содержимое буфера ЭЛИ еще не выведено на печать, либо
 	 	 	 	; вывод уже завершен;
 	 	 	 	;   1	 - в процессе вывода содержимого буфера ЭЛИ на печать;
 	 	 	 	;   255  - при печати обнаружена ошибка.
 	 	 	 	;-----------------------------------------------------
 	 	 	 	
 	 	 	 	 	assume	cs:code,ds:xxdata
 	 	 	 	
 FF54	 	 	 	print_screen	proc	far
 FF54  FB	 	 	 	sti	 	     ; уст признак разрешения прерывания
 FF55  1E	 	 	 	push	ds
 FF56  50	 	 	 	push	ax
 FF57  53	 	 	 	push	bx
 FF58  51	 	 	 	push	cx   ; будет использоваться заглавная буква для курсора
 FF59  52	 	 	 	push	dx   ; будет содержать текущее положение курсора
 FF5A  B8 ---- R	 	 	mov	ax,xxdata	; адрес 50
 FF5D  8E D8	 	 	 	mov	ds,ax
 FF5F  80 3E 0000 R 01	 	 	cmp	status_byte,1	; печать готова ?
 FF64  74 5F	 	 	 	jz	exit	 	; переход, если печать готова
 FF66  C6 06 0000 R 01	 	 	mov	status_byte,1	;
 FF6B  B4 0F	 	 	 	mov	ah,15	 	; требуется текущий режим экрана
 FF6D  CD 10	 	 	 	int	10h	 	; AL - режим, AH - число строк/колонок
 	 	 	 	 	 	 	 	; BH - страница,выведенная на экран
 	 	 	 	
 	 	 	 	
 	 	 	 	;*************************************8
 	 	 	 	;
 	 	 	 	;   В этом месте:
 	 	 	 	;	 	    AX - колонка, строка,
 	 	 	 	;	 	    BH - номер отображаемой страницы.
 	 	 	 	;
 	 	 	 	;   Стек содержит DS, AX, BX, CX, DX.
 	 	 	 	;
 	 	 	 	;	 	    AL - режим
 	 	 	 	;
 	 	 	 	;**************************************
 	 	 	 	
 FF6F  8A CC	 	 	 	mov	cl,ah
 FF71  B5 19	 	 	 	mov	ch,25
 FF73  E8 FFCB R	 	 	call	crlf
 FF76  51	 	 	 	push	cx
 FF77  B4 03	 	 	 	mov	ah,3
 FF79  CD 10	 	 	 	int	10h
 FF7B  59	 	 	 	pop	cx
 FF7C  52	 	 	 	push	dx
 FF7D  33 D2	 	 	 	xor	dx,dx
 	 	 	 	
 	 	 	 	;**************************************
 	 	 	 	;
 	 	 	 	;    Считывание знака, находящегося в текущей позиции курсора
 	 	 	 	; и вывод на печать
 	 	 	 	;
 	 	 	 	;**************************************
 	 	 	 	
 FF7F  B4 02	 	 	pri10:	mov	ah,2
 FF81  CD 10	 	 	 	int	10h
 FF83  B4 08	 	 	 	mov	ah,8
 FF85  CD 10	 	 	 	int	10h
 FF87  0A C0	 	 	 	or	al,al
 FF89  75 02	 	 	 	jnz	pri15
 FF8B  B0 20	 	 	 	mov	al,' '
 FF8D	 	 	 	pri15:
 FF8D  52	 	 	 	push	dx
 FF8E  33 D2	 	 	 	xor	dx,dx
 FF90  32 E4	 	 	 	xor	ah,ah
 FF92  CD 17	 	 	 	int	17h
 FF94  5A	 	 	 	pop	dx
 FF95  F6 C4 25	 	 	 	test	ah,25h
 FF98  75 21	 	 	 	jnz	err10
 FF9A  FE C2	 	 	 	inc	dl
 FF9C  3A CA	 	 	 	cmp	cl,dl
 FF9E  75 DF	 	 	 	jnz	pri10
 FFA0  32 D2	 	 	 	xor	dl,dl
 FFA2  8A E2	 	 	 	mov	ah,dl
 FFA4  52	 	 	 	push	dx
 FFA5  E8 FFCB R	 	 	call	crlf
 FFA8  5A	 	 	 	pop	dx
 FFA9  FE C6	 	 	 	inc	dh
 FFAB  3A EE	 	 	 	cmp	ch,dh
 FFAD  75 D0	 	 	 	jnz	pri10
 FFAF  5A	 	 	pri20:	pop	dx
 FFB0  B4 02	 	 	 	mov	ah,2
 FFB2  CD 10	 	 	 	int	10h
 FFB4  C6 06 0000 R 00	 	 	mov	status_byte,0
 FFB9  EB 0A	 	 	 	jmp	short exit
 FFBB  5A	 	 	err10:	pop	dx
 FFBC  B4 02	 	 	 	mov	ah,2
 FFBE  CD 10	 	 	 	int	10h
 FFC0  C6 06 0000 R FF	 	err20:	mov	status_byte,0ffh
 	 	 	 	
 FFC5  5A	 	 	exit:	pop	dx
 FFC6  59	 	 	 	pop	cx
 FFC7  5B	 	 	 	pop	bx
 FFC8  58	 	 	 	pop	ax
 FFC9  1F	 	 	 	pop	ds
 FFCA  CF	 	 	 	iret
 FFCB	 	 	 	print_screen	endp
 	 	 	 	
 	 	 	 	;   Возврат каретки
 	 	 	 	
 FFCB	 	 	 	crlf	proc	near
 FFCB  33 D2	 	 	 	xor	dx,dx
 FFCD  32 E4	 	 	 	xor	ah,ah
 FFCF  B0 0A	 	 	 	mov	al,12q
 FFD1  CD 17	 	 	 	int	17h
 FFD3  32 E4	 	 	 	xor	ah,ah
 FFD5  B0 0D	 	 	 	mov	al,15q
 FFD7  CD 17	 	 	 	int	17h
 FFD9  C3	 	 	 	ret
 FFDA	 	 	 	crlf	endp
 FFE0	 	 	 	 	org	0ffe0h
 	 	 	 	;RCgoff
 	 	 	 	if	cp866
 	 	 	 	;'ЕС1841.(РЕД.02)' (cp866)
 FFE0  85 91 31 38 34 31	 	db	85h,91h,31h,38h,34h,31h,2Eh,28h,90h,85h,84h,2Eh
       2E 28 90 85 84 2E	
 FFEC  30 32 29	 	 	 	db	30h,32h,29h
 	 	 	 	endif
 	 	 	 	;RCgoff end
 	 	 	 	
 	 	 	 	
 FFF0	 	 	 	 	org	0fff0h
 	 	 	 	;--------------------------------------
 	 	 	 	;
 	 	 	 	;   Включение питания
 	 	 	 	;
 	 	 	 	;--------------------------------------
 	 	 	 	
 	 	 	 	;vector segment at 0ffffh
 	 	 	 	
 	 	 	 	;   Переход по включению питания
 	 	 	 	
 FFF0  EA 5B E0 00 F0	 	 	db	0eah,5bh,0e0h,00h,0f0h	;    jmp reset
 	 	 	 	
 FFF5  31 32 2F 30 31 2F	 	db	'12/01/86'
       38 36	 	 	
 FFFD  FF FE	 	 	 	db	0ffh,0feh
 	 	 	 	;vector ends
 	 	 	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	
 	 	 	 	
 FFFF	 	 	 	code	ends
 	 	 	 	 	end

Segments and Groups:

	 	N a m e	 	 	Size	Align	Combine	Class

ABS0 . . . . . . . . . . . . . .	7C00	AT    	0000	
CODE . . . . . . . . . . . . . .	FFFF	PARA  	NONE	
DATA . . . . . . . . . . . . . .	00E0	AT    	0040	
STACK. . . . . . . . . . . . . .	0100	AT    	0030	
VIDEO_RAM. . . . . . . . . . . .	4000	AT    	B800	
XXDATA . . . . . . . . . . . . .	0001	AT    	0050	

Symbols:            

	 	N a m e	 	 	Type	Value	Attr         

A2 . . . . . . . . . . . . . . .	L NEAR 	C276	CODE
A3 . . . . . . . . . . . . . . .	L NEAR 	C26E	CODE
A4 . . . . . . . . . . . . . . .	L NEAR 	C2F9	CODE
ACTIVE_PAGE. . . . . . . . . . .	L BYTE 	0062	DATA
ACT_DISP_PAGE. . . . . . . . . .	N PROC	F247	CODE	Length =0024
ADD4 . . . . . . . . . . . . . .	L NEAR 	C6E9	CODE
ADDR_6845. . . . . . . . . . . .	L WORD 	0063	DATA
AH12 . . . . . . . . . . . . . .	L NEAR 	D430	CODE
AH121. . . . . . . . . . . . . .	L NEAR 	D45A	CODE
AH13 . . . . . . . . . . . . . .	L NEAR 	C861	CODE
ALT_INPUT. . . . . . . . . . . .	L BYTE 	0019	DATA
ALT_KEY. . . . . . . . . . . . .	Number	0038	
ALT_SHIFT. . . . . . . . . . . .	Number	0008	
ALZO . . . . . . . . . . . . . .	L NEAR 	E47D	CODE
ARE_WE_DONE. . . . . . . . . . .	L NEAR 	E465	CODE
ASCII_TBL. . . . . . . . . . . .	L BYTE 	E3D8	CODE
B1 . . . . . . . . . . . . . . .	L NEAR 	EFF5	CODE
B1T. . . . . . . . . . . . . . .	L NEAR 	C44C	CODE
B2 . . . . . . . . . . . . . . .	L NEAR 	EFFB	CODE
B3 . . . . . . . . . . . . . . .	L NEAR 	F002	CODE
B3T. . . . . . . . . . . . . . .	L NEAR 	C4B2	CODE
B4 . . . . . . . . . . . . . . .	L NEAR 	F017	CODE
B5 . . . . . . . . . . . . . . .	L NEAR 	F01F	CODE
B5T. . . . . . . . . . . . . . .	L NEAR 	C4A8	CODE
B6 . . . . . . . . . . . . . . .	L NEAR 	F020	CODE
B6T. . . . . . . . . . . . . . .	L NEAR 	C4B9	CODE
B7 . . . . . . . . . . . . . . .	L NEAR 	F02B	CODE
B8 . . . . . . . . . . . . . . .	L NEAR 	F033	CODE
B9 . . . . . . . . . . . . . . .	L NEAR 	F03D	CODE
BAD_ADDR_MARK. . . . . . . . . .	Number	0002	
BAD_CMD. . . . . . . . . . . . .	Number	0001	
BAD_CNTLR. . . . . . . . . . . .	Number	0020	
BAD_COMMAND. . . . . . . . . . .	L NEAR 	C330	CODE
BAD_CRC. . . . . . . . . . . . .	Number	0010	
BAD_DMA. . . . . . . . . . . . .	Number	0008	
BAD_ECC. . . . . . . . . . . . .	Number	0010	
BAD_NEC. . . . . . . . . . . . .	Number	0020	
BAD_RESET. . . . . . . . . . . .	Number	0005	
BAD_SEEK . . . . . . . . . . . .	Number	0040	
BAD_TRACK. . . . . . . . . . . .	Number	000B	
BCT. . . . . . . . . . . . . . .	N PROC	F866	CODE	Length =0041
BCT1 . . . . . . . . . . . . . .	L NEAR 	F883	CODE
BCT2 . . . . . . . . . . . . . .	L NEAR 	F885	CODE
BCT3 . . . . . . . . . . . . . .	L NEAR 	F879	CODE
BEEP . . . . . . . . . . . . . .	N PROC	E5C9	CODE	Length =0022
BIOS_BREAK . . . . . . . . . . .	L BYTE 	0071	DATA
BOOT_LOCN. . . . . . . . . . . .	L FAR  	7C00	ABS0
BOOT_STRAP . . . . . . . . . . .	N PROC	E66D	CODE	Length =0038
BOOT_STRAPT. . . . . . . . . . .	L NEAR 	C186	CODE
BOOT_VEC . . . . . . . . . . . .	L DWORD	0064	ABS0
BOX_ON . . . . . . . . . . . . .	L NEAR 	C10A	CODE
BOZIN. . . . . . . . . . . . . .	L NEAR 	C8DD	CODE
BUFFER_END . . . . . . . . . . .	L WORD 	0082	DATA
BUFFER_HEAD. . . . . . . . . . .	L WORD 	001A	DATA
BUFFER_START . . . . . . . . . .	L WORD 	0080	DATA
BUFFER_TAIL. . . . . . . . . . .	L WORD 	001C	DATA
BYXOD. . . . . . . . . . . . . .	L NEAR 	C8F0	CODE
BYXOD1 . . . . . . . . . . . . .	L NEAR 	C85E	CODE
C1 . . . . . . . . . . . . . . .	L WORD 	E016	CODE
C10. . . . . . . . . . . . . . .	L NEAR 	E0B1	CODE
C11. . . . . . . . . . . . . . .	L NEAR 	E0D9	CODE
C12. . . . . . . . . . . . . . .	L NEAR 	E0EB	CODE
C13. . . . . . . . . . . . . . .	L NEAR 	E0FC	CODE
C14. . . . . . . . . . . . . . .	L NEAR 	E102	CODE
C15. . . . . . . . . . . . . . .	L NEAR 	E110	CODE
C16. . . . . . . . . . . . . . .	L NEAR 	E11C	CODE
C17. . . . . . . . . . . . . . .	L NEAR 	E126	CODE
C18. . . . . . . . . . . . . . .	L NEAR 	E136	CODE
C1T. . . . . . . . . . . . . . .	L NEAR 	C582	CODE
C21. . . . . . . . . . . . . . .	L NEAR 	E15C	CODE
C22. . . . . . . . . . . . . . .	L NEAR 	E189	CODE
C25. . . . . . . . . . . . . . .	L NEAR 	E198	CODE
C26. . . . . . . . . . . . . . .	L NEAR 	E1A7	CODE
C26K . . . . . . . . . . . . . .	L NEAR 	C856	CODE
C2_1 . . . . . . . . . . . . . .	L NEAR 	D467	CODE
C3 . . . . . . . . . . . . . . .	L NEAR 	D48E	CODE
C4 . . . . . . . . . . . . . . .	L NEAR 	D4A2	CODE
C5 . . . . . . . . . . . . . . .	L NEAR 	D4B6	CODE
C6 . . . . . . . . . . . . . . .	L NEAR 	D4CA	CODE
C6X. . . . . . . . . . . . . . .	L NEAR 	D4DB	CODE
C7 . . . . . . . . . . . . . . .	L NEAR 	D4E8	CODE
C7X. . . . . . . . . . . . . . .	L NEAR 	D4EA	CODE
C8 . . . . . . . . . . . . . . .	L NEAR 	E08E	CODE
C9 . . . . . . . . . . . . . . .	L NEAR 	E0AB	CODE
CA0. . . . . . . . . . . . . . .	L NEAR 	CFB2	CODE
CA1. . . . . . . . . . . . . . .	L NEAR 	CFD5	CODE
CA10 . . . . . . . . . . . . . .	L NEAR 	D03D	CODE
CA11 . . . . . . . . . . . . . .	L NEAR 	D071	CODE
CA12 . . . . . . . . . . . . . .	L NEAR 	D094	CODE
CA13 . . . . . . . . . . . . . .	L NEAR 	D0E0	CODE
CA14 . . . . . . . . . . . . . .	L NEAR 	D0D8	CODE
CA15 . . . . . . . . . . . . . .	L NEAR 	D0AB	CODE
CA16 . . . . . . . . . . . . . .	L NEAR 	D0BD	CODE
CA2. . . . . . . . . . . . . . .	L NEAR 	CFE4	CODE
CA22 . . . . . . . . . . . . . .	L NEAR 	CFEB	CODE
CA3. . . . . . . . . . . . . . .	L NEAR 	D003	CODE
CA4. . . . . . . . . . . . . . .	L NEAR 	D01C	CODE
CA5. . . . . . . . . . . . . . .	L NEAR 	D018	CODE
CA6. . . . . . . . . . . . . . .	L NEAR 	D022	CODE
CA7. . . . . . . . . . . . . . .	L NEAR 	D000	CODE
CA7A . . . . . . . . . . . . . .	L NEAR 	CFFD	CODE
CA8. . . . . . . . . . . . . . .	L NEAR 	D027	CODE
CA9. . . . . . . . . . . . . . .	L NEAR 	D037	CODE
CAPS_KEY . . . . . . . . . . . .	Number	0056	
CAPS_SHIFT . . . . . . . . . . .	Number	0040	
CAPS_STATE . . . . . . . . . . .	Number	0040	
CAP_LOW. . . . . . . . . . . . .	L NEAR 	FF0E	CODE
CAW. . . . . . . . . . . . . . .	L WORD 	E018	CODE
CHK_DRV. . . . . . . . . . . . .	N PROC	C52A	CODE	Length =0007
CHK_DRV_CMD. . . . . . . . . . .	Number	00E3	
CHK_LONG . . . . . . . . . . . .	N PROC	C4EB	CODE	Length =0007
CHK_STAT_2 . . . . . . . . . . .	N PROC	EEAD	CODE	Length =0021
CHK_TRK_CMD. . . . . . . . . . .	Number	0005	
CM3. . . . . . . . . . . . . . .	L NEAR 	C586	CODE
CM7. . . . . . . . . . . . . . .	L NEAR 	C59B	CODE
CMD_BLOCK. . . . . . . . . . . .	L BYTE 	0042	DATA
CMD_PORT . . . . . . . . . . . .	Number	0063	
CNTLR_DIAG . . . . . . . . . . .	N PROC	C531	CODE	Length =0005
CNTLR_DIAG_CMD . . . . . . . . .	Number	00E4	
COD. . . . . . . . . . . . . . .	Number	F000	
COMMAND. . . . . . . . . . . . .	N PROC	C562	CODE	Length =003A
CONTROL_BYTE . . . . . . . . . .	L BYTE 	0076	DATA
CP866. . . . . . . . . . . . . .	Number	0001	
CP866_CODE_0F2H. . . . . . . . .	L BYTE 	CF42	CODE
CP866_CODE_0F3H. . . . . . . . .	L BYTE 	CF4A	CODE
CP866_CODE_0F4H. . . . . . . . .	L BYTE 	CF52	CODE
CP866_CODE_0F5H. . . . . . . . .	L BYTE 	CF5A	CODE
CP866_CODE_0F6H. . . . . . . . .	L BYTE 	CF62	CODE
CP866_CODE_0F7H. . . . . . . . .	L BYTE 	CF6A	CODE
CP866_CODE_0F8H. . . . . . . . .	L BYTE 	CF72	CODE
CP866_CODE_0F9H. . . . . . . . .	L BYTE 	CF7A	CODE
CP866_CODE_0FAH. . . . . . . . .	L BYTE 	CF82	CODE
CP866_CODE_0FBH. . . . . . . . .	L BYTE 	CF8A	CODE
CP866_CODE_0FDH. . . . . . . . .	L BYTE 	CF9A	CODE
CP866_CODE_0FEH. . . . . . . . .	L BYTE 	CFA2	CODE
CP866_CODE_0FFH. . . . . . . . .	L BYTE 	CFAA	CODE
CRLF . . . . . . . . . . . . . .	N PROC	FFCB	CODE	Length =000F
CRT_CHAR_GEN . . . . . . . . . .	L BYTE 	FA6E	CODE
CRT_CHAR_IBM . . . . . . . . . .	L BYTE 	DC00	CODE
CRT_CHAR_RUS . . . . . . . . . .	L BYTE 	CBB2	CODE
CRT_COLS . . . . . . . . . . . .	L WORD 	004A	DATA
CRT_LEN. . . . . . . . . . . . .	L WORD 	004C	DATA
CRT_MODE . . . . . . . . . . . .	L BYTE 	0049	DATA
CRT_MODE_SET . . . . . . . . . .	L BYTE 	0065	DATA
CRT_PALLETTE . . . . . . . . . .	L BYTE 	0066	DATA
CRT_START. . . . . . . . . . . .	L WORD 	004E	DATA
CSI. . . . . . . . . . . . . . .	L WORD 	04D0	ABS0
CTL_KEY. . . . . . . . . . . . .	Number	001D	
CTL_SHIFT. . . . . . . . . . . .	Number	0004	
CURSOR_MODE. . . . . . . . . . .	L WORD 	0060	DATA
CURSOR_POSN. . . . . . . . . . .	L WORD 	0050	DATA	Length =0008
D1 . . . . . . . . . . . . . . .	L BYTE 	E1B0	CODE
D10. . . . . . . . . . . . . . .	L NEAR 	E24F	CODE
D11. . . . . . . . . . . . . . .	N PROC	E259	CODE	Length =000D
D12. . . . . . . . . . . . . . .	L NEAR 	E275	CODE
D13. . . . . . . . . . . . . . .	L NEAR 	E27F	CODE
D14. . . . . . . . . . . . . . .	L NEAR 	E289	CODE
D1L. . . . . . . . . . . . . . .	Number	0016	
D1T. . . . . . . . . . . . . . .	L NEAR 	C4CE	CODE
D2 . . . . . . . . . . . . . . .	L BYTE 	E1C6	CODE
D2L. . . . . . . . . . . . . . .	Number	000E	
D3 . . . . . . . . . . . . . . .	L NEAR 	E1F3	CODE
D4 . . . . . . . . . . . . . . .	L NEAR 	E218	CODE
D5 . . . . . . . . . . . . . . .	L NEAR 	E21A	CODE
D6 . . . . . . . . . . . . . . .	L NEAR 	E220	CODE
D7 . . . . . . . . . . . . . . .	L NEAR 	E228	CODE
D8 . . . . . . . . . . . . . . .	L NEAR 	E23A	CODE
D9 . . . . . . . . . . . . . . .	L NEAR 	E243	CODE
DAL. . . . . . . . . . . . . . .	L NEAR 	E501	CODE
DATA_CORRECTED . . . . . . . . .	Number	0011	
DECIMAL_LOOP . . . . . . . . . .	L NEAR 	D12B	CODE
DEL_KEY. . . . . . . . . . . . .	Number	0053	
DISKETTE_IO. . . . . . . . . . .	F PROC	EC59	CODE	Length =002E
DISKETTE_PARM. . . . . . . . . .	L DWORD	0078	ABS0
DISKETTE_STATUS. . . . . . . . .	L BYTE 	0041	DATA
DISKETTE_TBL . . . . . . . . . .	L NEAR 	C201	CODE
DISKW_STATUS . . . . . . . . . .	L BYTE 	0074	DATA
DISK_BASE. . . . . . . . . . . .	L BYTE 	EFC7	CODE
DISK_FORMAT. . . . . . . . . . .	N PROC	ED1B	CODE	Length =0026
DISK_INT . . . . . . . . . . . .	F PROC	EF57	CODE	Length =0014
DISK_IO. . . . . . . . . . . . .	F PROC	C256	CODE	Length =0046
DISK_IO_CONT . . . . . . . . . .	N PROC	C2EA	CODE	Length =004E
DISK_POINTER . . . . . . . . . .	L DWORD	0078	ABS0
DISK_READ. . . . . . . . . . . .	N PROC	ED0E	CODE	Length =0009
DISK_READT . . . . . . . . . . .	N PROC	C356	CODE	Length =000A
DISK_RESET . . . . . . . . . . .	N PROC	ECB9	CODE	Length =0051
DISK_RESETT. . . . . . . . . . .	N PROC	C338	CODE	Length =0015
DISK_SEEK. . . . . . . . . . . .	N PROC	C4F2	CODE	Length =0007
DISK_SETUP . . . . . . . . . . .	N PROC	C003	CODE	Length =0183
DISK_STATUS. . . . . . . . . . .	N PROC	ED0A	CODE	Length =0004
DISK_VECTOR. . . . . . . . . . .	L DWORD	0100	ABS0
DISK_VERF. . . . . . . . . . . .	N PROC	ED17	CODE	Length =0004
DISK_VERFT . . . . . . . . . . .	N PROC	C36A	CODE	Length =0008
DISK_WRITE . . . . . . . . . . .	N PROC	ED41	CODE	Length =000C
DISK_WRITET. . . . . . . . . . .	N PROC	C360	CODE	Length =000A
DMA. . . . . . . . . . . . . . .	Number	0000	
DMA08. . . . . . . . . . . . . .	Number	0008	
DMA_BOUNDARY . . . . . . . . . .	Number	0009	
DMA_HIGH . . . . . . . . . . . .	Number	0082	
DMA_OPN. . . . . . . . . . . . .	L NEAR 	C545	CODE
DMA_READ . . . . . . . . . . . .	Number	0047	
DMA_SETUP. . . . . . . . . . . .	N PROC	EE67	CODE	Length =0046
DMA_SETUPT . . . . . . . . . . .	N PROC	C69F	CODE	Length =0069
DMA_WRITE. . . . . . . . . . . .	Number	004B	
DR1. . . . . . . . . . . . . . .	L NEAR 	C34A	CODE
DSBL . . . . . . . . . . . . . .	N PROC	C20C	CODE	Length =004A
DUMMM_RETURN . . . . . . . . . .	L NEAR 	F938	CODE
DUMMY_RETURN . . . . . . . . . .	L NEAR 	FF53	CODE
E1 . . . . . . . . . . . . . . .	L BYTE 	E28B	CODE
E10. . . . . . . . . . . . . . .	L NEAR 	E325	CODE
E11. . . . . . . . . . . . . . .	L NEAR 	E343	CODE
E12. . . . . . . . . . . . . . .	L NEAR 	E345	CODE
E13. . . . . . . . . . . . . . .	L NEAR 	E347	CODE
E14. . . . . . . . . . . . . . .	L NEAR 	E350	CODE
E15. . . . . . . . . . . . . . .	L NEAR 	E352	CODE
E16. . . . . . . . . . . . . . .	L NEAR 	E35B	CODE
E17. . . . . . . . . . . . . . .	L NEAR 	E363	CODE
E18. . . . . . . . . . . . . . .	L NEAR 	E369	CODE
E19. . . . . . . . . . . . . . .	L NEAR 	E36E	CODE
E190 . . . . . . . . . . . . . .	L NEAR 	D0EB	CODE
E1A. . . . . . . . . . . . . . .	L NEAR 	E2A3	CODE
E1L. . . . . . . . . . . . . . .	Number	0004	
E1N. . . . . . . . . . . . . . .	L BYTE 	E28F	CODE
E1NL . . . . . . . . . . . . . .	Number	0004	
E20A . . . . . . . . . . . . . .	L NEAR 	D0FA	CODE
E20B . . . . . . . . . . . . . .	L NEAR 	D0FF	CODE
E20C . . . . . . . . . . . . . .	L NEAR 	D10F	CODE
E21A . . . . . . . . . . . . . .	L NEAR 	D161	CODE
E22. . . . . . . . . . . . . . .	L NEAR 	E3BB	CODE
E3 . . . . . . . . . . . . . . .	L NEAR 	E2BD	CODE
E300 . . . . . . . . . . . . . .	L BYTE 	D1BB	CODE
E3A. . . . . . . . . . . . . . .	L NEAR 	E2C8	CODE
E7 . . . . . . . . . . . . . . .	L NEAR 	E2D6	CODE
E8 . . . . . . . . . . . . . . .	L NEAR 	E2E6	CODE
E9 . . . . . . . . . . . . . . .	L NEAR 	E308	CODE
EA1. . . . . . . . . . . . . . .	L NEAR 	D19E	CODE
END_ADDRESS. . . . . . . . . . .	L BYTE 	C7BB	CODE
EOI. . . . . . . . . . . . . . .	Number	0020	
EQUIPMENT. . . . . . . . . . . .	F PROC	F85A	CODE	Length =000C
EQUIP_FLAG . . . . . . . . . . .	L WORD 	0010	DATA
EQ_FL. . . . . . . . . . . . . .	L BYTE 	0410	ABS0
ERR01. . . . . . . . . . . . . .	L NEAR 	E0AF	CODE
ERR10. . . . . . . . . . . . . .	L NEAR 	FFBB	CODE
ERR20. . . . . . . . . . . . . .	L NEAR 	FFC0	CODE
ERROR_BEEP . . . . . . . . . . .	N PROC	E6DF	CODE	Length =0025
ERROR_CHK. . . . . . . . . . . .	N PROC	C59C	CODE	Length =0047
ERROR_EX . . . . . . . . . . . .	L NEAR 	C142	CODE
ERROR_EXT. . . . . . . . . . . .	L NEAR 	D366	CODE
ERR_BEEP . . . . . . . . . . . .	N PROC	E5A0	CODE	Length =0029
ERR_WAIT . . . . . . . . . . . .	L NEAR 	E4F8	CODE
EXIT . . . . . . . . . . . . . .	L NEAR 	FFC5	CODE
EXT. . . . . . . . . . . . . . .	N PROC	D306	CODE	Length =0055
EXT_MEM. . . . . . . . . . . . .	L NEAR 	D25D	CODE
EXT_MEM_1. . . . . . . . . . . .	L NEAR 	D271	CODE
EXT_PTR. . . . . . . . . . . . .	L DWORD	007C	ABS0
EX_MEMORY. . . . . . . . . . . .	F PROC	D1F1	CODE	Length =01A8
EX_MEM_SIZE. . . . . . . . . . .	L NEAR 	D21B	CODE
E_MSG. . . . . . . . . . . . . .	N PROC	C840	CODE	Length =0006
F1 . . . . . . . . . . . . . . .	L BYTE 	E3CC	CODE
F10. . . . . . . . . . . . . . .	L NEAR 	E490	CODE
F11. . . . . . . . . . . . . . .	L NEAR 	E4A5	CODE
F12. . . . . . . . . . . . . . .	L NEAR 	E4A7	CODE
F13. . . . . . . . . . . . . . .	L NEAR 	E4BD	CODE
F14. . . . . . . . . . . . . . .	L NEAR 	E4C6	CODE
F15. . . . . . . . . . . . . . .	L NEAR 	E4CC	CODE
F16. . . . . . . . . . . . . . .	L NEAR 	E50E	CODE
F17. . . . . . . . . . . . . . .	L NEAR 	E522	CODE
F17T . . . . . . . . . . . . . .	L BYTE 	C168	CODE
F17TL. . . . . . . . . . . . . .	Number	0006	
F18. . . . . . . . . . . . . . .	L NEAR 	E54B	CODE
F19. . . . . . . . . . . . . . .	L NEAR 	E55F	CODE
F1L. . . . . . . . . . . . . . .	Number	0004	
F2 . . . . . . . . . . . . . . .	L BYTE 	E3D0	CODE
F20. . . . . . . . . . . . . . .	L NEAR 	E583	CODE
F21. . . . . . . . . . . . . . .	L NEAR 	E59B	CODE
F23. . . . . . . . . . . . . . .	L NEAR 	E59D	CODE
F2L. . . . . . . . . . . . . . .	Number	0003	
F3 . . . . . . . . . . . . . . .	L BYTE 	E3D3	CODE
F39. . . . . . . . . . . . . . .	L BYTE 	D1D1	CODE
F3A. . . . . . . . . . . . . . .	L BYTE 	C811	CODE
F3L. . . . . . . . . . . . . . .	Number	0003	
F4 . . . . . . . . . . . . . . .	L WORD 	E3D6	CODE
F4E. . . . . . . . . . . . . . .	L WORD 	E3D8	CODE
F5 . . . . . . . . . . . . . . .	L NEAR 	E40A	CODE
F6 . . . . . . . . . . . . . . .	L NEAR 	E422	CODE
F7 . . . . . . . . . . . . . . .	L NEAR 	E42B	CODE
F7A. . . . . . . . . . . . . . .	L NEAR 	E43B	CODE
FD_TBL . . . . . . . . . . . . .	L NEAR 	C3E7	CODE
FIND . . . . . . . . . . . . . .	L NEAR 	D32A	CODE
FIND_POSITION. . . . . . . . . .	N PROC	F3BF	CODE	Length =001C
FMTBAD_CMD . . . . . . . . . . .	Number	0007	
FMTDRV_CMD . . . . . . . . . . .	Number	0004	
FMTTRK_CMD . . . . . . . . . . .	Number	0006	
FMT_BAD. . . . . . . . . . . . .	N PROC	C379	CODE	Length =0007
FMT_CONT . . . . . . . . . . . .	L NEAR 	C385	CODE
FMT_DRV. . . . . . . . . . . . .	N PROC	C380	CODE	Length =0005
FMT_TRK. . . . . . . . . . . . .	N PROC	C372	CODE	Length =0007
FROL_252_FC. . . . . . . . . . .	L BYTE 	CF92	CODE
G1 . . . . . . . . . . . . . . .	L NEAR 	E5AC	CODE
G10. . . . . . . . . . . . . . .	L NEAR 	E60C	CODE
G11. . . . . . . . . . . . . . .	L NEAR 	C55E	CODE
G12. . . . . . . . . . . . . . .	L NEAR 	E61C	CODE
G12A . . . . . . . . . . . . . .	L NEAR 	C846	CODE
G2 . . . . . . . . . . . . . . .	L NEAR 	E5B1	CODE
G21. . . . . . . . . . . . . . .	L NEAR 	C5A4	CODE
G22. . . . . . . . . . . . . . .	L NEAR 	C5BC	CODE
G24. . . . . . . . . . . . . . .	L NEAR 	C5E1	CODE
G3 . . . . . . . . . . . . . . .	L NEAR 	E5B7	CODE
G3T. . . . . . . . . . . . . . .	L NEAR 	C555	CODE
G3T0 . . . . . . . . . . . . . .	L NEAR 	C667	CODE
G4 . . . . . . . . . . . . . . .	L NEAR 	E5BC	CODE
G4T. . . . . . . . . . . . . . .	L NEAR 	C3D7	CODE
G5 . . . . . . . . . . . . . . .	L NEAR 	E5C2	CODE
G5T. . . . . . . . . . . . . . .	L NEAR 	C3D1	CODE
G6 . . . . . . . . . . . . . . .	L NEAR 	E5C4	CODE
G7 . . . . . . . . . . . . . . .	L NEAR 	E5E0	CODE
G8 . . . . . . . . . . . . . . .	L NEAR 	E5F2	CODE
G8T. . . . . . . . . . . . . . .	L NEAR 	C53F	CODE
G9 . . . . . . . . . . . . . . .	L NEAR 	E605	CODE
GET_PARM . . . . . . . . . . . .	N PROC	EE51	CODE	Length =0016
GET_PARMT. . . . . . . . . . . .	F PROC	C390	CODE	Length =0057
GET_PARMT_N. . . . . . . . . . .	L NEAR 	C390	CODE
GO . . . . . . . . . . . . . . .	N PROC	D367	CODE	Length =0032
GR12 . . . . . . . . . . . . . .	L NEAR 	D3A0	CODE
GR8. . . . . . . . . . . . . . .	L NEAR 	CB4D	CODE
GRAPHICS_DOWN. . . . . . . . . .	N PROC	F50F	CODE	Length =0060
GRAPHICS_READ. . . . . . . . . .	N PROC	F64B	CODE	Length =0084
GRAPHICS_UP. . . . . . . . . . .	N PROC	F4B6	CODE	Length =0059
GRAPHICS_WRITE . . . . . . . . .	N PROC	F599	CODE	Length =00B2
GRAPH_POSN . . . . . . . . . . .	L NEAR 	F727	CODE
H1 . . . . . . . . . . . . . . .	L NEAR 	E67D	CODE
H1T. . . . . . . . . . . . . . .	L NEAR 	C1A3	CODE
H2 . . . . . . . . . . . . . . .	L NEAR 	E698	CODE
H2T. . . . . . . . . . . . . . .	L NEAR 	C1BB	CODE
H3 . . . . . . . . . . . . . . .	L NEAR 	E69D	CODE
H4 . . . . . . . . . . . . . . .	L NEAR 	E6A0	CODE
H4T. . . . . . . . . . . . . . .	L NEAR 	C1C8	CODE
H5 . . . . . . . . . . . . . . .	L NEAR 	C1CD	CODE
H6 . . . . . . . . . . . . . . .	L NEAR 	C1D6	CODE
H7 . . . . . . . . . . . . . . .	L NEAR 	C1F2	CODE
H8 . . . . . . . . . . . . . . .	L NEAR 	C1FD	CODE
HARD_DISK. . . . . . . . . . . .	L NEAR 	C260	CODE
HDISK_INT. . . . . . . . . . . .	L DWORD	0034	ABS0
HDISK_RECAL. . . . . . . . . . .	N PROC	C51C	CODE	Length =0007
HD_ERROR . . . . . . . . . . . .	L BYTE 	0042	DATA
HD_INT . . . . . . . . . . . . .	N PROC	C760	CODE	Length =0011
HD_RESET_1 . . . . . . . . . . .	N PROC	C16E	CODE	Length =0018
HD_WAIT_REQ. . . . . . . . . . .	N PROC	C68A	CODE	Length =0015
HF_NUM . . . . . . . . . . . . .	L BYTE 	0075	DATA
HF_PORT. . . . . . . . . . . . .	Number	0320	
HF_TBL_VEC . . . . . . . . . . .	L DWORD	0104	ABS0
HOLD_STATE . . . . . . . . . . .	Number	0008	
IDNPOL . . . . . . . . . . . . .	L WORD 	0090	DATA
INF_KEY. . . . . . . . . . . . .	Number	0059	
INIT_DRV . . . . . . . . . . . .	N PROC	C427	CODE	Length =001D
INIT_DRV_CMD . . . . . . . . . .	Number	000C	
INIT_DRV_OUT . . . . . . . . . .	L NEAR 	C443	CODE
INIT_DRV_R . . . . . . . . . . .	N PROC	C444	CODE	Length =007E
INIT_DRV_S . . . . . . . . . . .	N PROC	C4C2	CODE	Length =000D
INIT_FAIL. . . . . . . . . . . .	Number	0007	
INS_KEY. . . . . . . . . . . . .	Number	0052	
INS_SHIFT. . . . . . . . . . . .	Number	0080	
INS_STATE. . . . . . . . . . . .	Number	0080	
INT5_PTR . . . . . . . . . . . .	L WORD 	0014	ABS0
INTA00 . . . . . . . . . . . . .	Number	0020	
INTA01 . . . . . . . . . . . . .	Number	0021	
INT_ADDR . . . . . . . . . . . .	L WORD 	0020	ABS0
INT_CTL_PORT . . . . . . . . . .	Number	0020	
INT_FLAG . . . . . . . . . . . .	Number	0080	
INT_PTR. . . . . . . . . . . . .	L DWORD	0020	ABS0
INV_KEY_L. . . . . . . . . . . .	Number	0058	
INV_KEY_R. . . . . . . . . . . .	Number	005A	
INV_SHIFT. . . . . . . . . . . .	Number	0004	
IN_MEM . . . . . . . . . . . . .	L NEAR 	D269	CODE
IO_RAM_SIZE. . . . . . . . . . .	L WORD 	0015	DATA
IO_ROM_INIT. . . . . . . . . . .	L WORD 	0067	DATA
IO_ROM_SEG . . . . . . . . . . .	L WORD 	0069	DATA
J1 . . . . . . . . . . . . . . .	N PROC	EC87	CODE	Length =0032
J10. . . . . . . . . . . . . . .	L NEAR 	ED29	CODE
J11. . . . . . . . . . . . . . .	L NEAR 	ED57	CODE
J12. . . . . . . . . . . . . . .	L NEAR 	EDA0	CODE
J13. . . . . . . . . . . . . . .	L NEAR 	EDA4	CODE
J14. . . . . . . . . . . . . . .	L NEAR 	EDAA	CODE
J15. . . . . . . . . . . . . . .	L NEAR 	EDD4	CODE
J16. . . . . . . . . . . . . . .	L NEAR 	EDF9	CODE
J17. . . . . . . . . . . . . . .	L NEAR 	EE00	CODE
J18. . . . . . . . . . . . . . .	L NEAR 	EE3D	CODE
J19. . . . . . . . . . . . . . .	L NEAR 	EE3F	CODE
J1T. . . . . . . . . . . . . . .	L NEAR 	C6AA	CODE
J2 . . . . . . . . . . . . . . .	L NEAR 	ECAB	CODE
J20. . . . . . . . . . . . . . .	L NEAR 	EE46	CODE
J20T . . . . . . . . . . . . . .	L NEAR 	C6FA	CODE
J21. . . . . . . . . . . . . . .	L NEAR 	EE47	CODE
J22. . . . . . . . . . . . . . .	L NEAR 	EE4B	CODE
J23. . . . . . . . . . . . . . .	L NEAR 	E6AC	CODE
J24. . . . . . . . . . . . . . .	L NEAR 	E6B3	CODE
J25. . . . . . . . . . . . . . .	L NEAR 	E6BD	CODE
J26. . . . . . . . . . . . . . .	L NEAR 	E6BF	CODE
J27. . . . . . . . . . . . . . .	L NEAR 	E6C8	CODE
J28. . . . . . . . . . . . . . .	L NEAR 	D526	CODE
J29. . . . . . . . . . . . . . .	L NEAR 	D549	CODE
J3 . . . . . . . . . . . . . . .	L NEAR 	ECB3	CODE
J30. . . . . . . . . . . . . . .	L NEAR 	D550	CODE
J300 . . . . . . . . . . . . . .	L NEAR 	D53B	CODE
J31. . . . . . . . . . . . . . .	L NEAR 	D556	CODE
J32. . . . . . . . . . . . . . .	L NEAR 	D558	CODE
J33. . . . . . . . . . . . . . .	L NEAR 	EE7C	CODE
J33T . . . . . . . . . . . . . .	L NEAR 	C6C2	CODE
J34. . . . . . . . . . . . . . .	L NEAR 	EEC6	CODE
J35. . . . . . . . . . . . . . .	L NEAR 	EEC7	CODE
J36. . . . . . . . . . . . . . .	L NEAR 	EED5	CODE
J37. . . . . . . . . . . . . . .	L NEAR 	EEE8	CODE
J38. . . . . . . . . . . . . . .	L NEAR 	EF74	CODE
J39. . . . . . . . . . . . . . .	L NEAR 	EF79	CODE
J4 . . . . . . . . . . . . . . .	L NEAR 	ECD2	CODE
J40. . . . . . . . . . . . . . .	L NEAR 	EF85	CODE
J40A . . . . . . . . . . . . . .	L NEAR 	EF8A	CODE
J41. . . . . . . . . . . . . . .	L NEAR 	EF8F	CODE
J42. . . . . . . . . . . . . . .	L NEAR 	EF96	CODE
J43. . . . . . . . . . . . . . .	L NEAR 	EF9E	CODE
J44. . . . . . . . . . . . . . .	L NEAR 	EFAC	CODE
J45. . . . . . . . . . . . . . .	L NEAR 	EFC4	CODE
J5 . . . . . . . . . . . . . . .	L NEAR 	ECD4	CODE
J6 . . . . . . . . . . . . . . .	L NEAR 	ECD6	CODE
J7 . . . . . . . . . . . . . . .	L NEAR 	ECF8	CODE
J8 . . . . . . . . . . . . . . .	L NEAR 	ED09	CODE
J9 . . . . . . . . . . . . . . .	L NEAR 	ED10	CODE
K1 . . . . . . . . . . . . . . .	L NEAR 	E845	CODE
K10. . . . . . . . . . . . . . .	L BYTE 	E8DC	CODE
K11. . . . . . . . . . . . . . .	L BYTE 	E916	CODE
K12. . . . . . . . . . . . . . .	L BYTE 	E950	CODE
K13. . . . . . . . . . . . . . .	L BYTE 	E95A	CODE
K14. . . . . . . . . . . . . . .	L BYTE 	E964	CODE
K15. . . . . . . . . . . . . . .	L BYTE 	E971	CODE
K16. . . . . . . . . . . . . . .	L NEAR 	E9AF	CODE
K17. . . . . . . . . . . . . . .	L NEAR 	E9D9	CODE
K18. . . . . . . . . . . . . . .	L NEAR 	EA4B	CODE
K19. . . . . . . . . . . . . . .	L NEAR 	EA60	CODE
K2 . . . . . . . . . . . . . . .	L NEAR 	E85E	CODE
K20. . . . . . . . . . . . . . .	L NEAR 	EA6E	CODE
K21. . . . . . . . . . . . . . .	L NEAR 	EA74	CODE
K22. . . . . . . . . . . . . . .	L NEAR 	EA7B	CODE
K23. . . . . . . . . . . . . . .	L NEAR 	EA9F	CODE
K24. . . . . . . . . . . . . . .	L NEAR 	EAC3	CODE
K25. . . . . . . . . . . . . . .	L NEAR 	EACC	CODE
K26. . . . . . . . . . . . . . .	L NEAR 	EAEB	CODE
K26A . . . . . . . . . . . . . .	L NEAR 	EA48	CODE
K27. . . . . . . . . . . . . . .	L NEAR 	EAF0	CODE
K28. . . . . . . . . . . . . . .	L NEAR 	EAFF	CODE
K29. . . . . . . . . . . . . . .	L NEAR 	EB09	CODE
K3 . . . . . . . . . . . . . . .	L NEAR 	E86F	CODE
K30. . . . . . . . . . . . . . .	L BYTE 	F8E1	CODE
K300 . . . . . . . . . . . . . .	L NEAR 	EA1D	CODE
K301 . . . . . . . . . . . . . .	L NEAR 	EA22	CODE
K302 . . . . . . . . . . . . . .	L NEAR 	EA37	CODE
K303 . . . . . . . . . . . . . .	L NEAR 	EA93	CODE
K304 . . . . . . . . . . . . . .	L NEAR 	EAAF	CODE
K306 . . . . . . . . . . . . . .	L NEAR 	EB14	CODE
K307 . . . . . . . . . . . . . .	L NEAR 	EAF9	CODE
K31. . . . . . . . . . . . . . .	L NEAR 	EB1F	CODE
K32. . . . . . . . . . . . . . .	L NEAR 	EB28	CODE
K33. . . . . . . . . . . . . . .	L NEAR 	EB44	CODE
K34. . . . . . . . . . . . . . .	L NEAR 	EB55	CODE
K35. . . . . . . . . . . . . . .	L NEAR 	EB65	CODE
K36. . . . . . . . . . . . . . .	L NEAR 	EB69	CODE
K37. . . . . . . . . . . . . . .	L NEAR 	EB6B	CODE
K38. . . . . . . . . . . . . . .	L NEAR 	EB75	CODE
K39. . . . . . . . . . . . . . .	L NEAR 	EB98	CODE
K4 . . . . . . . . . . . . . . .	N PROC	E6D1	CODE	Length =000E
K40. . . . . . . . . . . . . . .	L NEAR 	EBB3	CODE
K400 . . . . . . . . . . . . . .	L NEAR 	EA06	CODE
K401 . . . . . . . . . . . . . .	L NEAR 	EA0E	CODE
K406 . . . . . . . . . . . . . .	L NEAR 	E9C2	CODE
K406B. . . . . . . . . . . . . .	L NEAR 	EADB	CODE
K407 . . . . . . . . . . . . . .	L NEAR 	E9D6	CODE
K41. . . . . . . . . . . . . . .	L NEAR 	EBBD	CODE
K42. . . . . . . . . . . . . . .	L NEAR 	EBC7	CODE
K43. . . . . . . . . . . . . . .	L NEAR 	EBD1	CODE
K44. . . . . . . . . . . . . . .	L NEAR 	EBD7	CODE
K45. . . . . . . . . . . . . . .	L NEAR 	EBEF	CODE
K46. . . . . . . . . . . . . . .	L NEAR 	EBFC	CODE
K47. . . . . . . . . . . . . . .	L NEAR 	EC06	CODE
K48. . . . . . . . . . . . . . .	L NEAR 	EC19	CODE
K49. . . . . . . . . . . . . . .	L NEAR 	EC27	CODE
K5 . . . . . . . . . . . . . . .	L NEAR 	E6DE	CODE
K50. . . . . . . . . . . . . . .	L NEAR 	EC37	CODE
K51. . . . . . . . . . . . . . .	L NEAR 	EC3D	CODE
K52. . . . . . . . . . . . . . .	L NEAR 	EC43	CODE
K53. . . . . . . . . . . . . . .	L NEAR 	EC4A	CODE
K54. . . . . . . . . . . . . . .	L NEAR 	E704	CODE
K54A . . . . . . . . . . . . . .	L NEAR 	EBEC	CODE
K55. . . . . . . . . . . . . . .	L NEAR 	E70D	CODE
K56. . . . . . . . . . . . . . .	L NEAR 	E717	CODE
K57. . . . . . . . . . . . . . .	L NEAR 	E71B	CODE
K58. . . . . . . . . . . . . . .	L NEAR 	E724	CODE
K59. . . . . . . . . . . . . . .	L NEAR 	E749	CODE
K6 . . . . . . . . . . . . . . .	L BYTE 	E875	CODE
K60. . . . . . . . . . . . . . .	L NEAR 	E74C	CODE
K61. . . . . . . . . . . . . . .	L NEAR 	E756	CODE
K62. . . . . . . . . . . . . . .	L NEAR 	E773	CODE
K63. . . . . . . . . . . . . . .	L NEAR 	E779	CODE
K64. . . . . . . . . . . . . . .	L NEAR 	E77B	CODE
K65. . . . . . . . . . . . . . .	L NEAR 	E6E8	CODE
K66. . . . . . . . . . . . . . .	L NEAR 	E6EF	CODE
K67. . . . . . . . . . . . . . .	L NEAR 	E6F8	CODE
K6L. . . . . . . . . . . . . . .	Number	000C	
K7 . . . . . . . . . . . . . . .	L BYTE 	E881	CODE
K8 . . . . . . . . . . . . . . .	L BYTE 	E889	CODE
K80. . . . . . . . . . . . . . .	L NEAR 	FF15	CODE
K81. . . . . . . . . . . . . . .	L NEAR 	FF32	CODE
K88. . . . . . . . . . . . . . .	L NEAR 	E735	CODE
K89. . . . . . . . . . . . . . .	L NEAR 	FEF3	CODE
K89A . . . . . . . . . . . . . .	L NEAR 	FF12	CODE
K89B . . . . . . . . . . . . . .	L NEAR 	FF31	CODE
K9 . . . . . . . . . . . . . . .	L BYTE 	E8C3	CODE
K98. . . . . . . . . . . . . . .	L NEAR 	EC13	CODE
K99. . . . . . . . . . . . . . .	L NEAR 	E76E	CODE
KBDINT . . . . . . . . . . . . .	Number	0002	
KBD_IN . . . . . . . . . . . . .	Number	0060	
KBD_RESET. . . . . . . . . . . .	N PROC	E5EB	CODE	Length =002A
KB_BUFFER. . . . . . . . . . . .	L WORD 	001E	DATA	Length =0010
KB_BUFFER_END. . . . . . . . . .	L WORD 	003E	DATA
KB_CTL . . . . . . . . . . . . .	Number	0061	
KB_DAT . . . . . . . . . . . . .	Number	0060	
KB_FLAG. . . . . . . . . . . . .	L BYTE 	0017	DATA
KB_FLAG_1. . . . . . . . . . . .	L BYTE 	0018	DATA
KB_INT . . . . . . . . . . . . .	F PROC	E987	CODE	Length =02CB
KB_OK. . . . . . . . . . . . . .	L NEAR 	D144	CODE
KEYBOARD_IO. . . . . . . . . . .	F PROC	E82E	CODE	Length =0047
KOLBY. . . . . . . . . . . . . .	L NEAR 	CB14	CODE
KZAGR. . . . . . . . . . . . . .	L NEAR 	F8A6	CODE
L1 . . . . . . . . . . . . . . .	L NEAR 	C690	CODE
L2 . . . . . . . . . . . . . . .	L NEAR 	C69D	CODE
L3 . . . . . . . . . . . . . . .	L NEAR 	C023	CODE
L4 . . . . . . . . . . . . . . .	L NEAR 	C079	CODE
L6 . . . . . . . . . . . . . . .	L NEAR 	C174	CODE
L7 . . . . . . . . . . . . . . .	L NEAR 	C083	CODE
LAST_VAL . . . . . . . . . . . .	L BYTE 	006B	DATA
LAT. . . . . . . . . . . . . . .	Number	0002	
LAT_KEY. . . . . . . . . . . . .	Number	0057	
LAT_SHIFT. . . . . . . . . . . .	Number	0001	
LEFT_KEY . . . . . . . . . . . .	Number	0054	
LEFT_SHIFT . . . . . . . . . . .	Number	0002	
M1 . . . . . . . . . . . . . . .	L WORD 	F045	CODE
M10. . . . . . . . . . . . . . .	L NEAR 	F159	CODE
M11. . . . . . . . . . . . . . .	L NEAR 	F184	CODE
M12. . . . . . . . . . . . . . .	L NEAR 	F187	CODE
M13. . . . . . . . . . . . . . .	L NEAR 	F18A	CODE
M14. . . . . . . . . . . . . . .	L NEAR 	F1D8	CODE
M15. . . . . . . . . . . . . . .	L NEAR 	F1E0	CODE
M16. . . . . . . . . . . . . . .	L NEAR 	F1F0	CODE
M17. . . . . . . . . . . . . . .	L NEAR 	F21D	CODE
M18. . . . . . . . . . . . . . .	N PROC	F21F	CODE	Length =0011
M19. . . . . . . . . . . . . . .	L NEAR 	F280	CODE
M1L. . . . . . . . . . . . . . .	Number	0028	
M1T. . . . . . . . . . . . . . .	L WORD 	C29C	CODE
M1TL . . . . . . . . . . . . . .	Number	002A	
M2 . . . . . . . . . . . . . . .	L NEAR 	F089	CODE
M20. . . . . . . . . . . . . . .	L NEAR 	F287	CODE
M3 . . . . . . . . . . . . . . .	L NEAR 	F0A1	CODE
M4 . . . . . . . . . . . . . . .	Number	0010	
M5 . . . . . . . . . . . . . . .	L WORD 	F0F9	CODE
M6 . . . . . . . . . . . . . . .	L BYTE 	F101	CODE
M7 . . . . . . . . . . . . . . .	L BYTE 	F109	CODE
M8 . . . . . . . . . . . . . . .	L NEAR 	F122	CODE
M9 . . . . . . . . . . . . . . .	L NEAR 	F156	CODE
MAIN . . . . . . . . . . . . . .	N PROC	D2D7	CODE	Length =002F
MAIN_MEM . . . . . . . . . . . .	L NEAR 	D27D	CODE
MAIN_PORT. . . . . . . . . . . .	N PROC	D2C8	CODE	Length =000F
MAX_FILE . . . . . . . . . . . .	Number	0008	
MAX_PERIOD . . . . . . . . . . .	Number	0540	
MEMORY_SIZE. . . . . . . . . . .	L WORD 	0013	DATA
MEMORY_SIZE_DETERMINE. . . . . .	F PROC	F84E	CODE	Length =000C
MEM_2. . . . . . . . . . . . . .	N PROC	D35B	CODE	Length =000B
MEM_BLOCK. . . . . . . . . . . .	L NEAR 	D226	CODE
MEM_INF. . . . . . . . . . . . .	L NEAR 	D231	CODE
MEM_SIZ. . . . . . . . . . . . .	L WORD 	0413	ABS0
MFG_TEST_RTN . . . . . . . . . .	L FAR  	0500	ABS0
MFG_TST. . . . . . . . . . . . .	L BYTE 	0012	DATA
MIN_PERIOD . . . . . . . . . . .	Number	0410	
MM3. . . . . . . . . . . . . . .	L NEAR 	F0B0	CODE
MOTOR_COUNT. . . . . . . . . . .	L BYTE 	0040	DATA
MOTOR_STATUS . . . . . . . . . .	L BYTE 	003F	DATA
MOTOR_WAIT . . . . . . . . . . .	Number	0025	
MOVE . . . . . . . . . . . . . .	L NEAR 	D239	CODE
MOVE_BLOCK . . . . . . . . . . .	L NEAR 	D282	CODE
MOVE_MEM_BLOCK . . . . . . . . .	L NEAR 	D295	CODE
MOVE_MEM_BLOCK_1 . . . . . . . .	L NEAR 	D218	CODE
N1 . . . . . . . . . . . . . . .	L NEAR 	F2C3	CODE
N10. . . . . . . . . . . . . . .	N PROC	F349	CODE	Length =0009
N11. . . . . . . . . . . . . . .	N PROC	F352	CODE	Length =0007
N12. . . . . . . . . . . . . . .	L NEAR 	F369	CODE
N13. . . . . . . . . . . . . . .	L NEAR 	F377	CODE
N14. . . . . . . . . . . . . . .	L NEAR 	F382	CODE
N15. . . . . . . . . . . . . . .	L NEAR 	F385	CODE
N16. . . . . . . . . . . . . . .	L NEAR 	F391	CODE
N2 . . . . . . . . . . . . . . .	L NEAR 	F2D1	CODE
N3 . . . . . . . . . . . . . . .	L NEAR 	F2DC	CODE
N4 . . . . . . . . . . . . . . .	L NEAR 	F2DF	CODE
N5 . . . . . . . . . . . . . . .	L NEAR 	F2E8	CODE
N6 . . . . . . . . . . . . . . .	L NEAR 	F2FB	CODE
N7 . . . . . . . . . . . . . . .	L NEAR 	F2FE	CODE
N8 . . . . . . . . . . . . . . .	L NEAR 	F315	CODE
N9 . . . . . . . . . . . . . . .	L NEAR 	F322	CODE
NDMA_OPN . . . . . . . . . . . .	L NEAR 	C536	CODE
NEC_OP . . . . . . . . . . . . .	L NEAR 	EE64	CODE
NEC_OUTPUT . . . . . . . . . . .	N PROC	E6A5	CODE	Length =002C
NEC_STATUS . . . . . . . . . . .	L BYTE 	0042	DATA	Length =0007
NEPOCL . . . . . . . . . . . . .	L NEAR 	C8D4	CODE
NEWZAGRCW. . . . . . . . . . . .	Number	0001	
NEXT_ROM . . . . . . . . . . . .	L NEAR 	E461	CODE
NMI_INT. . . . . . . . . . . . .	N PROC	E266	CODE	Length =0025
NMI_PTR. . . . . . . . . . . . .	L WORD 	0008	ABS0
NUM_KEY. . . . . . . . . . . . .	Number	0045	
NUM_SHIFT. . . . . . . . . . . .	Number	0020	
NUM_STATE. . . . . . . . . . . .	Number	0020	
NUM_TRANS. . . . . . . . . . . .	N PROC	EFB0	CODE	Length =0017
ORG_VECTOR . . . . . . . . . . .	L DWORD	004C	ABS0
OSH. . . . . . . . . . . . . . .	L NEAR 	E37E	CODE
OSHP . . . . . . . . . . . . . .	L NEAR 	D010	CODE
OUT_CH . . . . . . . . . . . . .	L NEAR 	C14F	CODE
OUT_MEM. . . . . . . . . . . . .	L NEAR 	D26E	CODE
P1 . . . . . . . . . . . . . . .	L NEAR 	F3A2	CODE
P10. . . . . . . . . . . . . . .	L NEAR 	F41B	CODE
P10T . . . . . . . . . . . . . .	L NEAR 	C0C3	CODE
P11. . . . . . . . . . . . . . .	L NEAR 	F424	CODE
P12. . . . . . . . . . . . . . .	L NEAR 	F42B	CODE
P13. . . . . . . . . . . . . . .	L NEAR 	F431	CODE
P2 . . . . . . . . . . . . . . .	L NEAR 	F3B0	CODE
P2T. . . . . . . . . . . . . . .	L NEAR 	C0CE	CODE
P3 . . . . . . . . . . . . . . .	L NEAR 	F3B6	CODE
P3T. . . . . . . . . . . . . . .	L NEAR 	C116	CODE
P4 . . . . . . . . . . . . . . .	L NEAR 	F3CF	CODE
P4T. . . . . . . . . . . . . . .	L NEAR 	C0B7	CODE
P5 . . . . . . . . . . . . . . .	L NEAR 	F3D5	CODE
P5T. . . . . . . . . . . . . . .	L NEAR 	C12E	CODE
P6 . . . . . . . . . . . . . . .	L NEAR 	F3E8	CODE
P7 . . . . . . . . . . . . . . .	L NEAR 	F3F3	CODE
P7T. . . . . . . . . . . . . . .	L NEAR 	C093	CODE
P8 . . . . . . . . . . . . . . .	L NEAR 	F3FA	CODE
P8T. . . . . . . . . . . . . . .	L NEAR 	C0B1	CODE
P9 . . . . . . . . . . . . . . .	L NEAR 	F400	CODE
P9T. . . . . . . . . . . . . . .	L NEAR 	C09D	CODE
PARM_PTR . . . . . . . . . . . .	L DWORD	0074	ABS0
PICAT. . . . . . . . . . . . . .	L NEAR 	C8B0	CODE
PICZN. . . . . . . . . . . . . .	L NEAR 	C8A1	CODE
PMSG . . . . . . . . . . . . . .	N PROC	D399	CODE	Length =0014
POCKOL . . . . . . . . . . . . .	L NEAR 	C8C8	CODE
POD_DONE . . . . . . . . . . . .	L NEAR 	C15C	CODE
PORT_0 . . . . . . . . . . . . .	N PROC	C771	CODE	Length =000D
PORT_1 . . . . . . . . . . . . .	N PROC	C77E	CODE	Length =0005
PORT_2 . . . . . . . . . . . . .	N PROC	C783	CODE	Length =0005
PORT_3 . . . . . . . . . . . . .	N PROC	C788	CODE	Length =0005
PORT_A . . . . . . . . . . . . .	Number	0060	
PORT_B . . . . . . . . . . . . .	Number	0061	
PORT_C . . . . . . . . . . . . .	Number	0062	
PORT_OFF . . . . . . . . . . . .	L BYTE 	0077	DATA
POSITION . . . . . . . . . . . .	N PROC	F2A3	CODE	Length =0011
PR128. . . . . . . . . . . . . .	L NEAR 	F89B	CODE
PRI10. . . . . . . . . . . . . .	L NEAR 	FF7F	CODE
PRI15. . . . . . . . . . . . . .	L NEAR 	FF8D	CODE
PRI20. . . . . . . . . . . . . .	L NEAR 	FFAF	CODE
PRINTER_BASE . . . . . . . . . .	L WORD 	0008	DATA	Length =0004
PRINTER_IO . . . . . . . . . . .	F PROC	EFD2	CODE	Length =0073
PRINT_SCREEN . . . . . . . . . .	F PROC	FF54	CODE	Length =0077
PRT_DEC_LOOP . . . . . . . . . .	L NEAR 	D138	CODE
PRT_HEX. . . . . . . . . . . . .	N PROC	D1B4	CODE	Length =0007
PRT_SEG. . . . . . . . . . . . .	N PROC	C816	CODE	Length =0015
PRT_SIZ. . . . . . . . . . . . .	L NEAR 	D124	CODE
P_MSG. . . . . . . . . . . . . .	N PROC	E615	CODE	Length =001E
P_MSG1 . . . . . . . . . . . . .	N PROC	C846	CODE	Length =000E
R1 . . . . . . . . . . . . . . .	L NEAR 	F468	CODE
R10. . . . . . . . . . . . . . .	L NEAR 	F4FD	CODE
R11. . . . . . . . . . . . . . .	L NEAR 	F50B	CODE
R12. . . . . . . . . . . . . . .	L NEAR 	F52F	CODE
R13. . . . . . . . . . . . . . .	L NEAR 	F54B	CODE
R14. . . . . . . . . . . . . . .	L NEAR 	F55A	CODE
R15. . . . . . . . . . . . . . .	L NEAR 	F55C	CODE
R16. . . . . . . . . . . . . . .	L NEAR 	F56B	CODE
R17. . . . . . . . . . . . . . .	N PROC	F56F	CODE	Length =0019
R18. . . . . . . . . . . . . . .	N PROC	F588	CODE	Length =0011
R1_BUS . . . . . . . . . . . . .	Number	0004	
R1_BUSY. . . . . . . . . . . . .	Number	0008	
R1_IOMODE. . . . . . . . . . . .	Number	0002	
R1_REQ . . . . . . . . . . . . .	Number	0001	
R2 . . . . . . . . . . . . . . .	L NEAR 	F46F	CODE
R3 . . . . . . . . . . . . . . .	N PROC	F473	CODE	Length =0043
R3T. . . . . . . . . . . . . . .	L NEAR 	C183	CODE
R4 . . . . . . . . . . . . . . .	L NEAR 	F486	CODE
R5 . . . . . . . . . . . . . . .	L NEAR 	F49E	CODE
R6 . . . . . . . . . . . . . . .	L NEAR 	F4A8	CODE
R7 . . . . . . . . . . . . . . .	L NEAR 	F4D4	CODE
R8 . . . . . . . . . . . . . . .	L NEAR 	F4EC	CODE
R9 . . . . . . . . . . . . . . .	L NEAR 	F4FB	CODE
RAM_DIAG . . . . . . . . . . . .	N PROC	C523	CODE	Length =0007
RAM_DIAG_CMD . . . . . . . . . .	Number	00E0	
RAV. . . . . . . . . . . . . . .	L NEAR 	D44E	CODE
RDCIMB . . . . . . . . . . . . .	L NEAR 	C87F	CODE
RD_BUFF. . . . . . . . . . . . .	N PROC	C4F9	CODE	Length =000E
RD_BUFF_CMD. . . . . . . . . . .	Number	000E	
RD_ECC_CMD . . . . . . . . . . .	Number	000D	
RD_LONG. . . . . . . . . . . . .	N PROC	C4CF	CODE	Length =000E
RD_LONG_CMD. . . . . . . . . . .	Number	00E5	
READ_AC_CURRENT. . . . . . . . .	N PROC	F395	CODE	Length =002A
READ_CMD . . . . . . . . . . . .	Number	0008	
READ_CURSOR. . . . . . . . . . .	N PROC	F230	CODE	Length =0017
READ_DOT . . . . . . . . . . . .	N PROC	F43F	CODE	Length =0011
READ_LPEN. . . . . . . . . . . .	N PROC	F7B6	CODE	Length =0098
READ_LPEN1 . . . . . . . . . . .	L NEAR 	F93F	CODE
RECAL_CMD. . . . . . . . . . . .	Number	0001	
RECORD_NOT_FND . . . . . . . . .	Number	0004	
REGEN. . . . . . . . . . . . . .	L BYTE 	0000	VIDEO_RAM
REGENW . . . . . . . . . . . . .	L WORD 	0000	VIDEO_RAM
RESET. . . . . . . . . . . . . .	L NEAR 	E05B	CODE
RESET_FLAG . . . . . . . . . . .	L WORD 	0072	DATA
RESULTS. . . . . . . . . . . . .	N PROC	EF6B	CODE	Length =0045
RES_FL . . . . . . . . . . . . .	L WORD 	0472	ABS0
RETURN_STATUS. . . . . . . . . .	N PROC	C34D	CODE	Length =0009
RET_2. . . . . . . . . . . . . .	L NEAR 	C25D	CODE
RIGHT_KEY. . . . . . . . . . . .	Number	0055	
RIGHT_SHIFT. . . . . . . . . . .	Number	0001	
ROM_CHECK. . . . . . . . . . . .	N PROC	C7BB	CODE	Length =0038
ROM_CHECK_1. . . . . . . . . . .	L NEAR 	C7DF	CODE
ROM_CHECK_END. . . . . . . . . .	L NEAR 	C7F2	CODE
ROM_ERR. . . . . . . . . . . . .	N PROC	C7F3	CODE	Length =001E
ROM_ERR_BEEP . . . . . . . . . .	L NEAR 	C809	CODE
ROM_ERR_END. . . . . . . . . . .	L NEAR 	C806	CODE
ROM_SCAN . . . . . . . . . . . .	L NEAR 	E44B	CODE
ROM_SCAN_1 . . . . . . . . . . .	L NEAR 	E44E	CODE
ROS. . . . . . . . . . . . . . .	L NEAR 	E0DB	CODE
ROS_CHECKSUM . . . . . . . . . .	N PROC	E1A2	CODE	Length =000E
ROS_CHECKSUM_CNT . . . . . . . .	N PROC	C854	CODE	Length =000A
RS232_BASE . . . . . . . . . . .	L WORD 	0000	DATA	Length =0004
RS232_IO . . . . . . . . . . . .	F PROC	C8F5	CODE	Length =01EE
RUST . . . . . . . . . . . . . .	L BYTE 	F8A7	CODE
RUST2. . . . . . . . . . . . . .	L BYTE 	E633	CODE
RUS_KEY. . . . . . . . . . . . .	Number	005B	
RW_OPN . . . . . . . . . . . . .	N PROC	ED4D	CODE	Length =0104
S1 . . . . . . . . . . . . . . .	L NEAR 	F5AC	CODE
S10. . . . . . . . . . . . . . .	L NEAR 	F614	CODE
S11. . . . . . . . . . . . . . .	L NEAR 	F630	CODE
S12. . . . . . . . . . . . . . .	L NEAR 	F660	CODE
S13. . . . . . . . . . . . . . .	L NEAR 	F678	CODE
S14. . . . . . . . . . . . . . .	L NEAR 	F67C	CODE
S15. . . . . . . . . . . . . . .	L NEAR 	F68E	CODE
S16. . . . . . . . . . . . . . .	L NEAR 	F69B	CODE
S17. . . . . . . . . . . . . . .	L NEAR 	F6A0	CODE
S18. . . . . . . . . . . . . . .	L NEAR 	F6C9	CODE
S19. . . . . . . . . . . . . . .	N PROC	F6CF	CODE	Length =0015
S2 . . . . . . . . . . . . . . .	L NEAR 	F5BB	CODE
S20. . . . . . . . . . . . . . .	L NEAR 	F6D8	CODE
S21. . . . . . . . . . . . . . .	N PROC	F6E4	CODE	Length =0023
S22. . . . . . . . . . . . . . .	L NEAR 	F6ED	CODE
S23. . . . . . . . . . . . . . .	N PROC	F707	CODE	Length =001D
S24. . . . . . . . . . . . . . .	L NEAR 	F711	CODE
S25. . . . . . . . . . . . . . .	L NEAR 	F717	CODE
S26. . . . . . . . . . . . . . .	N PROC	F724	CODE	Length =0016
S3 . . . . . . . . . . . . . . .	L NEAR 	F5CB	CODE
S4 . . . . . . . . . . . . . . .	L NEAR 	F5CF	CODE
S5 . . . . . . . . . . . . . . .	L NEAR 	F5D7	CODE
S6 . . . . . . . . . . . . . . .	L NEAR 	F5EB	CODE
S7 . . . . . . . . . . . . . . .	L NEAR 	F5F7	CODE
S8 . . . . . . . . . . . . . . .	L NEAR 	F5FE	CODE
S9 . . . . . . . . . . . . . . .	L NEAR 	F602	CODE
SCANIROV . . . . . . . . . . . .	L NEAR 	D319	CODE
SCROLL_DOWN. . . . . . . . . . .	N PROC	F359	CODE	Length =003C
SCROLL_KEY . . . . . . . . . . .	Number	0046	
SCROLL_POSITION. . . . . . . . .	N PROC	F302	CODE	Length =0047
SCROLL_SHIFT . . . . . . . . . .	Number	0010	
SCROLL_STATE . . . . . . . . . .	Number	0010	
SCROLL_UP. . . . . . . . . . . .	N PROC	F2B4	CODE	Length =004E
SEEK . . . . . . . . . . . . . .	N PROC	D4F3	CODE	Length =0066
SEEK_CMD . . . . . . . . . . . .	Number	000B	
SEEK_STATUS. . . . . . . . . . .	L BYTE 	003E	DATA
SENSE_ABORT. . . . . . . . . . .	L NEAR 	C5DC	CODE
SENSE_CMD. . . . . . . . . . . .	Number	0003	
SENSE_FAIL . . . . . . . . . . .	Number	00FF	
SETUP_A. . . . . . . . . . . . .	N PROC	C2C6	CODE	Length =0024
SET_COLOR. . . . . . . . . . . .	N PROC	F26B	CODE	Length =0026
SET_CPOS . . . . . . . . . . . .	N PROC	F206	CODE	Length =0019
SET_CTYPE. . . . . . . . . . . .	N PROC	F1E5	CODE	Length =0021
SET_MODE . . . . . . . . . . . .	N PROC	F111	CODE	Length =00D4
SML_LOW. . . . . . . . . . . . .	L NEAR 	FF29	CODE
SP_TEST. . . . . . . . . . . . .	L NEAR 	E5F8	CODE
START. . . . . . . . . . . . . .	L NEAR 	E05B	CODE
STATUS_BYTE. . . . . . . . . . .	L BYTE 	0000	XXDATA
STAT_ERR . . . . . . . . . . . .	L NEAR 	C5EB	CODE
STAT_OFFSET. . . . . . . . . . .	L BYTE 	007C	DATA
STGTST . . . . . . . . . . . . .	L NEAR 	D45D	CODE
STGTST_CNT . . . . . . . . . . .	N PROC	D460	CODE	Length =0093
STG_LOC0 . . . . . . . . . . . .	L BYTE 	0000	ABS0
SW2_AND. . . . . . . . . . . . .	L NEAR 	C7A8	CODE
SW2_OFFS . . . . . . . . . . . .	N PROC	C78D	CODE	Length =0026
SW2_OFFS_ERR . . . . . . . . . .	L NEAR 	C7B1	CODE
S_MAX_FILE . . . . . . . . . . .	Number	0002	
T1 . . . . . . . . . . . . . . .	L NEAR 	FE7F	CODE
T2 . . . . . . . . . . . . . . .	L NEAR 	FE82	CODE
T3 . . . . . . . . . . . . . . .	L NEAR 	FE95	CODE
T4 . . . . . . . . . . . . . . .	L NEAR 	FEB8	CODE
T5 . . . . . . . . . . . . . . .	L NEAR 	FED8	CODE
T6 . . . . . . . . . . . . . . .	L NEAR 	FEE9	CODE
TABL . . . . . . . . . . . . . .	L WORD 	00E0	DATA
TABL1. . . . . . . . . . . . . .	L WORD 	04E0	ABS0
TIMER. . . . . . . . . . . . . .	Number	0040	
TIMERO . . . . . . . . . . . . .	Number	0040	
TIMER_HIGH . . . . . . . . . . .	L WORD 	006E	DATA
TIMER_INT. . . . . . . . . . . .	F PROC	FEA5	CODE	Length =004E
TIMER_LOW. . . . . . . . . . . .	L WORD 	006C	DATA
TIMER_OFL. . . . . . . . . . . .	L BYTE 	0070	DATA
TIME_OF_DAY. . . . . . . . . . .	F PROC	FE6E	CODE	Length =0037
TIME_OUT . . . . . . . . . . . .	Number	0080	
TIM_CTL. . . . . . . . . . . . .	Number	0043	
TMINT. . . . . . . . . . . . . .	Number	0001	
TOS. . . . . . . . . . . . . . .	L WORD 	0100	STACK
TST12. . . . . . . . . . . . . .	L NEAR 	E3E8	CODE
TST6 . . . . . . . . . . . . . .	L NEAR 	E1D4	CODE
TST8 . . . . . . . . . . . . . .	L NEAR 	E297	CODE
TST_RDY. . . . . . . . . . . . .	N PROC	C515	CODE	Length =0007
TST_RDY_CMD. . . . . . . . . . .	Number	0000	
TYPE0_LEN. . . . . . . . . . . .	Number	0009	
TYPE0_TABLE. . . . . . . . . . .	L BYTE 	C602	CODE
TYPE1_LEN. . . . . . . . . . . .	Number	000A	
TYPE1_TABLE. . . . . . . . . . .	L BYTE 	C60B	CODE
TYPE2_LEN. . . . . . . . . . . .	Number	0002	
TYPE2_TABLE. . . . . . . . . . .	L BYTE 	C615	CODE
TYPE3_LEN. . . . . . . . . . . .	Number	0003	
TYPE3_TABLE. . . . . . . . . . .	L BYTE 	C617	CODE
TYPE_0 . . . . . . . . . . . . .	L NEAR 	C61A	CODE
TYPE_1 . . . . . . . . . . . . .	L NEAR 	C627	CODE
TYPE_2 . . . . . . . . . . . . .	L NEAR 	C66A	CODE
TYPE_3 . . . . . . . . . . . . .	L NEAR 	C677	CODE
T_0. . . . . . . . . . . . . . .	L WORD 	C5E3	CODE
T_1. . . . . . . . . . . . . . .	L WORD 	C5E5	CODE
T_2. . . . . . . . . . . . . . .	L WORD 	C5E7	CODE
T_3. . . . . . . . . . . . . . .	L WORD 	C5E9	CODE
U1 . . . . . . . . . . . . . . .	L NEAR 	D3E2	CODE
U10. . . . . . . . . . . . . . .	L NEAR 	D422	CODE
U11. . . . . . . . . . . . . . .	L NEAR 	D429	CODE
U2 . . . . . . . . . . . . . . .	L NEAR 	D3F5	CODE
U3 . . . . . . . . . . . . . . .	L NEAR 	D3FB	CODE
U4 . . . . . . . . . . . . . . .	L NEAR 	D409	CODE
U5 . . . . . . . . . . . . . . .	L NEAR 	D40B	CODE
U6 . . . . . . . . . . . . . . .	L NEAR 	D40F	CODE
U7 . . . . . . . . . . . . . . .	L NEAR 	D411	CODE
U8 . . . . . . . . . . . . . . .	L NEAR 	D415	CODE
U9 . . . . . . . . . . . . . . .	L NEAR 	D41E	CODE
UNDEF_ERR. . . . . . . . . . . .	Number	00BB	
UNDEF_ERR_L. . . . . . . . . . .	L NEAR 	C684	CODE
USTKUR . . . . . . . . . . . . .	L NEAR 	C8D8	CODE
V00. . . . . . . . . . . . . . .	L NEAR 	C941	CODE
V0A. . . . . . . . . . . . . . .	L NEAR 	C95E	CODE
V0A1 . . . . . . . . . . . . . .	L NEAR 	C98A	CODE
V0A2 . . . . . . . . . . . . . .	L NEAR 	C994	CODE
V0A3 . . . . . . . . . . . . . .	L NEAR 	C9AE	CODE
V0B. . . . . . . . . . . . . . .	L NEAR 	C9E6	CODE
V0B1 . . . . . . . . . . . . . .	L NEAR 	C9F2	CODE
V0B2 . . . . . . . . . . . . . .	L NEAR 	CA09	CODE
V0C. . . . . . . . . . . . . . .	L NEAR 	CA1B	CODE
V0C1 . . . . . . . . . . . . . .	L NEAR 	CA26	CODE
V0C2 . . . . . . . . . . . . . .	L NEAR 	CA33	CODE
V0D. . . . . . . . . . . . . . .	L NEAR 	CA45	CODE
V0E. . . . . . . . . . . . . . .	N PROC	CA7E	CODE	Length =0040
V0END. . . . . . . . . . . . . .	L NEAR 	CA12	CODE
V0END1 . . . . . . . . . . . . .	L NEAR 	CA15	CODE
V0OK . . . . . . . . . . . . . .	L NEAR 	C92F	CODE
V0P1 . . . . . . . . . . . . . .	L NEAR 	C909	CODE
V0P2 . . . . . . . . . . . . . .	L NEAR 	C910	CODE
V0P3 . . . . . . . . . . . . . .	L NEAR 	C91E	CODE
V0TO . . . . . . . . . . . . . .	L NEAR 	CA0F	CODE
V0Z. . . . . . . . . . . . . . .	N PROC	CABE	CODE	Length =0001
V1 . . . . . . . . . . . . . . .	L BYTE 	F7AE	CODE
V2 . . . . . . . . . . . . . . .	L NEAR 	F7F5	CODE
V3 . . . . . . . . . . . . . . .	L NEAR 	F81C	CODE
V4 . . . . . . . . . . . . . . .	L NEAR 	F828	CODE
V5 . . . . . . . . . . . . . . .	L NEAR 	F83A	CODE
V6 . . . . . . . . . . . . . . .	L NEAR 	F83C	CODE
V7 . . . . . . . . . . . . . . .	L NEAR 	F846	CODE
VECTOR_TABLE . . . . . . . . . .	L WORD 	CB82	CODE
VIDEO_INT. . . . . . . . . . . .	L WORD 	0040	ABS0
VIDEO_IO . . . . . . . . . . . .	N PROC	F06D	CODE	Length =004C
VIDEO_PARMS. . . . . . . . . . .	L BYTE 	F0B9	CODE
VIDEO_RETURN . . . . . . . . . .	L NEAR 	F1DC	CODE
VIDEO_STATE. . . . . . . . . . .	N PROC	F291	CODE	Length =0012
W1 . . . . . . . . . . . . . . .	L NEAR 	C737	CODE
W2 . . . . . . . . . . . . . . .	L NEAR 	C74B	CODE
W4 . . . . . . . . . . . . . . .	L NEAR 	C735	CODE
W5 . . . . . . . . . . . . . . .	L NEAR 	C72C	CODE
WAIT_BUSY. . . . . . . . . . . .	L NEAR 	C572	CODE
WAIT_INT . . . . . . . . . . . .	N PROC	EECE	CODE	Length =0024
WAIT_INTT. . . . . . . . . . . .	N PROC	C708	CODE	Length =0058
WEPORT . . . . . . . . . . . . .	L NEAR 	CB30	CODE
WID. . . . . . . . . . . . . . .	L NEAR 	CB33	CODE
WRITE_AC_CURRENT . . . . . . . .	N PROC	F3DB	CODE	Length =0033
WRITE_CMD. . . . . . . . . . . .	Number	000A	
WRITE_C_CURRENT. . . . . . . . .	N PROC	F40E	CODE	Length =0031
WRITE_DOT. . . . . . . . . . . .	N PROC	F450	CODE	Length =0023
WRITE_PROTECT. . . . . . . . . .	Number	0003	
WRITE_TTY. . . . . . . . . . . .	N PROC	D3AD	CODE	Length =0083
WR_BUFF. . . . . . . . . . . . .	N PROC	C507	CODE	Length =000E
WR_BUFF_CMD. . . . . . . . . . .	Number	000F	
WR_LONG. . . . . . . . . . . . .	N PROC	C4DD	CODE	Length =000E
WR_LONG_CMD. . . . . . . . . . .	Number	00E6	
X1 . . . . . . . . . . . . . . .	L NEAR 	ED8B	CODE
X2 . . . . . . . . . . . . . . .	L NEAR 	ED87	CODE
XLAT_PR. . . . . . . . . . . . .	N PROC	C836	CODE	Length =000A
XLAT_PRINT_COD . . . . . . . . .	N PROC	E3BD	CODE	Length =000F
XPC_BYTE . . . . . . . . . . . .	N PROC	C82B	CODE	Length =0015
Z0A. . . . . . . . . . . . . . .	L WORD 	CABF	CODE
Z0B. . . . . . . . . . . . . . .	L BYTE 	CADB	CODE
ZAGR8. . . . . . . . . . . . . .	L NEAR 	CB3B	CODE
ZAGRCW . . . . . . . . . . . . .	L NEAR 	CB63	CODE
ZAPBY. . . . . . . . . . . . . .	L NEAR 	CB16	CODE
ZAPTEL . . . . . . . . . . . . .	L NEAR 	C8B7	CODE
ZB . . . . . . . . . . . . . . .	L BYTE 	0000	ABS0
ZGR. . . . . . . . . . . . . . .	L NEAR 	CB07	CODE
ZNAK . . . . . . . . . . . . . .	L NEAR 	CAE3	CODE
ZW . . . . . . . . . . . . . . .	L WORD 	0000	ABS0

12140 Bytes free   

Warning Severe
Errors	Errors 
0	0
