Turbo Assembler	 Version 5.0	    04-03-22 00:37:58	    Page 1
1840v5-b.ASM



			     EXTERN  NEC_OUTPUT:near
			     EXTERN  KB_INT:near
			     EXTERN  KEYBOARD_IO:near
			     EXTERN  BOOT_STRAP:near
			     EXTERN  START:near
			     EXTERN  RESET:near
			     EXTERN  BEEP:near
			     EXTERN  PRT_STR:near
			     EXTERN  E1:near
			     EXTERN  P_MSG:near
			     EXTERN  TST12:near
			     EXTERN  F19B:near
			     EXTERN  F20B:near

			     PUBLIC  RUST
			     PUBLIC  K30
			     PUBLIC  OSH2
			     PUBLIC  SEEK
			     PUBLIC  F19A
			     PUBLIC  F20A
			     PUBLIC  PRINT_SCREEN
			     PUBLIC  BCT
			     PUBLIC  VECTOR_TABLE
			     PUBLIC  LOW866
			     PUBLIC  UP866


0000			     CODE    SEGMENT byte PUBLIC
			     assume cs:code, ds:data

0000  07*(00)				     db	7 dup(0)

			     ;--- int 13H---------
			     ;	 Программа обслуживания накопителя на гибком	    +
			     магнитном
			     ; диске выполняет шесть	функций,	код которых		    +
			     задается
			     ; в регистре AH:
			     ;	 AH=0 -	сбросить  НГМД;
			     ;	 AH=1 -	считать байт	состояния НГМД. Состояние		    +
			     соответствует
			     ; последней выполняемой операции и передается в	    +
			     регистр AL из
			     ; постоянно распределенной области оперативной	    +
			     памяти с адресом
			     ; 00441H;
			     ;	  AH=2H	- считать указанный сектор в память;
			     ;	  AH=3H	- записать указанный сектор из	памяти;
			     ;	  AH=4H	- верификация;
			     ;	  AH=5H	- форматизация.
			     ;	  Для выполнения функций записи, считывания,	    +
			     верификации,
			     ; форматизации	в регистрах задается следующая	    +
			     информация:
			     ;	  DL - номер устройства (0-3, контролируемое значение);
			     ;	  DH - номер головки (0-1, неконтролируемое	значение);
			     ;	  CH - номер дорожки (0-39,	неконтролируемое значение);
			     ;	  CL - номер сектора (1-8, неконтролируемое	значение);
			     ;	  AL - количество секторов (1-8, неконтролируемое	    +
			     значение).
			     ;
			     ;	  Для выполнения форматизации необходимо		    +
			     сформировать в
			     ; памяти четырехбайтную таблицу	для каждого		    +
			     сектора, содержащую
			     ; следующую информацию:
			     ;	  номер дорожки;
			     ;	  номер головки;
			     ;	  номер сектора;
			     ;	  количество байт	в секторе (00 -	128 байт, 01 - 256 байт,
			     ; 02 - 512	байт, 03 - 1024 байта).
			     ;	  Адрес таблицы задается в	регистрах ES:BX.
			     ;
			     ;	  После выполнения программы в	регистре AH		    +
			     находится
			     ; байт	состояния НГМД.
			     ;
			     ;	  Байт состояния НГМД имеет следующее значение:
			     ;	  80 - тайм-аут;
			     ;	  40 - сбой	позиционирования;
			     ;	  20 - сбой	контроллера;
			     ;	  10 - ошибка кода циклического контроля при		    +
			     считывании;
			     ;	  09 - переход адреса через сегмент (64К байт);
			     ;	  08 - переполнение;
			     ;	  04 - сектор не найден;
			     ;	  03 - защита записи;
			     ;	  02 - не обнаружен маркер идентификатора сектора;
			     ;	  01 - команда отвергнута.
			     ;	  При успешном завершении программы признак CF=0,	в  +
			     про-
			     ; тивном случае - признак CF=1 (регистр AH содержит код   +
			     ошибки).
			     ;	  Регистр AL содержит количество реально считанных +
			     секторов.
			     ;	  Адрес программы	обслуживания накопителя на	    +
			     гибком магнитном
			     ; диске записывается в вектор 40H в процедуре сброса   +
			     по включению
			     ; питания.
			     ;-------------------------
				     assume  cs:code,ds:data,es:data
0007			     diskette_io proc	     far
0007  FB			     sti		     ; установить признак прерывания
0008  53			     push    bx		     ; сохранить адрес
0009  51			     push    cx
000A  1E			     push    ds		; сохранить сегментное значение	    +
			     регистра
000B  56			     push    si		; сохранить все регистры во время	    +
			     операции
000C  57			     push    di
000D  55			     push    bp
000E  52			     push    dx
000F  8B EC			     mov     bp,sp	; установить указатель вершины стека
0011  BE 0040			     mov     si,dat
0014  8E DE			     mov     ds,si	     ; установить область данных
0016  E8 001C			     call    j1		     ;
0019  BB 0004			     mov     bx,4	     ; получить	параметры ожидания	    +
			     мотора
001C  E8 01E0			     call    get_parm
001F  88 26 0040r		     mov     motor_count,ah  ; уст время отсчета	для мотора
0023  8A 26 0041r		     mov     ah,diskette_status	 ; получить состояние операции
0027  80 FC 01			     cmp     ah,1	     ; уст признак CF	для индикации
002A  F5			     cmc		     ; успешной	операции
002B  5A			     pop     dx		     ; восстановить	все регистры
002C  5D			     pop     bp
002D  5F			     pop     di
002E  5E			     pop     si
002F  1F			     pop     ds
0030  59			     pop     cx
0031  5B			     pop     bx
0032  CA 0002			     ret     2
0035			     diskette_io     endp
0035			     j1	     proc    near
0035  8A F0			     mov     dh,al	     ; сохранить количество секторов
0037  80 26 003Fr 7F		     and     motor_status,07fh	 ; указать операцию считывания
003C  0A E4			     or	     ah,ah	     ; AH=0
003E  74 27			     jz	     disk_reset
0040  FE CC			     dec     ah		     ; AH=1
0042  74 74			     jz	     disk_status
0044  C6 06 0041r 00		     mov     diskette_status,0	 ; сброс состояния
0049  80 FA 04			     cmp     dl,4	     ; проверка	количества устройств
004C  73 13			     jae     j3		     ; переход по ошибке
004E  FE CC			     dec     ah		     ; AH=2
0050  74 6A			     jz	     disk_read
0052  FE CC			     dec     ah		     ; AH=3
0054  75 03			     jnz     j2
0056  E9 0096			     jmp     disk_write
0059			     j2:
0059  FE CC			     dec     ah		     ; AH=4
005B  74 68			     jz	     disk_verf
005D  FE CC			     dec     ah		     ; AH=5
005F  74 68			     jz	     disk_format
0061			     j3:
0061  C6 06 0041r 01		     mov     diskette_status,bad_cmd   ; неверная команда

0066  C3			     ret		     ; операция	не определена
0067			     j1	     endp

			     ;	 Сбросить НГМД

0067			     disk_reset	proc near
0067  BA 03F2			     mov     dx,03f2h
006A  FA			     cli		     ; сброс признака разрешения		    +
			     прерывания
006B  A0 003Fr			     mov     al,motor_status  ;	какой мотор включен
006E  B1 04			     mov     cl,4	     ; счетчик сдвига
0070  D2 E0			     sal     al,cl
0072  A8 20			     test    al,20h	     ; выбрать соответствующее		    +
			     устройство
0074  75 0C			     jnz     j5		     ; переход, если	включен мотор	    +
			     первого
							     ; устройства
0076  A8 40			     test    al,40h
0078  75 06			     jnz     j4		     ; переход, если	включен мотор	    +
			     второго
							     ; устройства
007A  A8 80			     test    al,80h
007C  74 06			     jz	     j6		     ; переход, если	включен мотор	    +
			     нулевого
							     ; устройства
007E  FE C0			     inc     al
0080  FE C0		     j4:     inc     al
0082  FE C0		     j5:     inc     al
0084  0C 08		     j6:     or	     al,8	     ; включить	доступность прерывания
0086  EE			     out     dx,al	     ; сброс адаптера
0087  C6 06 003Er 00		     mov     seek_status,0
008C  C6 06 0041r 00		     mov     diskette_status,0	; уст нормальное состояние НГМД
0091  0C 04			     or	     al,4	     ; выключить сброс
0093  EE			     out     dx,al
0094  FB			     sti		     ; установить бит разрешения		    +
			     прерывания
0095  E8 0225			     call    chk_stat_2	     ; выполнить прерывание после	    +
			     сброса
0098  A0 0042r			     mov     al,nec_status
009B  3C C0			     cmp     al,0c0h	; проверка готовности	устройства для +
			     передачи
009D  74 07			     jz	     j7		     ; устройство готово
009F  80 0E 0041r 20		     or	     diskette_status,bad_nec  ;	уст код ошибки
00A4  EB 11			     jmp     short j8

			     ;	 Послать	команду в контроллер

00A6			     j7:
00A6  B4 03			     mov     ah,03h	     ; установить команду
00A8  E8 0000e			     call    nec_output	     ; передать	команду
00AB  BB 0001			     mov     bx,1	     ; передача	первого байта		    +
			     параметров
00AE  E8 014E			     call    get_parm	     ; в контроллер
00B1  BB 0003			     mov     bx,3	     ; передача	второго байта		    +
			     параметров
00B4  E8 0148			     call    get_parm	     ; в контроллер
00B7			     j8:
00B7  C3			     ret		     ; возврат к прерванной программе
00B8			     disk_reset	     endp

			     ;
			     ; Считать байт состояния НГМД (AH=1)
			     ;

00B8			     disk_status proc near
00B8  A0 0041r			     mov     al,diskette_status
00BB  C3			     ret
00BC			     disk_status     endp

			     ;	 Считать	указанный сектор	в память	(AH=2)

00BC			     disk_read proc near
00BC  B0 46			     mov     al,046h	     ; установить команду
00BE			     j9:
00BE  E8 01B6			     call    dma_setup	     ; установить ПДП
00C1  B4 E6			     mov     ah,0e6h	 ; уст команду считывания  контроллера
00C3  EB 36			     jmp     short rw_opn    ; переход к выполнению операции
00C5			     disk_read	     endp

			     ;	 Верификация	(AH=4)

00C5			     disk_verf proc near
00C5  B0 42			     mov     al,042h	     ; установить команду
00C7  EB F5			     jmp     short j9
00C9			     disk_verf	     endp

			     ;	 Форматизация (AH=5)

00C9			     disk_format proc near
00C9  80 0E 003Fr 80		     or	     motor_status,80h  ; индикация операции записи
00CE  B0 4A			     mov     al,04ah	       ; установить команду
00D0  E8 01A4			     call    dma_setup	       ; установить ПДП
00D3  B4 4D			     mov     ah,04dh	       ; установить команду
00D5  EB 24			     jmp     short rw_opn
00D7			     j10:
00D7  BB 0007			     mov     bx,7	       ; получить значение сектора
00DA  E8 0122			     call    get_parm
00DD  BB 0009			     mov     bx,9	     ; получить	значение дорожки	на	    +
			     секторе
00E0  E8 011C			     call    get_parm
00E3  BB 000F			     mov     bx,15	     ; получить	значение длины		    +
			     интервала
00E6  E8 0116			     call    get_parm	     ; для контроллера
00E9  BB 0011			     mov     bx,17	     ; получить	полный байт
00EC  E9 00B8			     jmp     j16
00EF			     disk_format     endp

			     ;	 Записать указанный сектор из памяти (AH=3)

00EF			     disk_write	proc near
00EF  80 0E 003Fr 80		     or	     motor_status,80h	     ; индикация операции записи
00F4  B0 4A			     mov     al,04ah		     ; уст код операции записи
00F6  E8 017E			     call    dma_setup
00F9  B4 C5			     mov     ah,0c5h		     ; команда записи на	НГМД
00FB			     disk_write	     endp

			     ;______________________
			     ; rw_opn
			     ;	 Программа выполнения операций
			     ;	 считывания, записи, верификации
			     ;----------------------
00FB			     rw_opn  proc    near
00FB  73 08			     jnc     j11	     ; проверка	ошибки ПДП
00FD  C6 06 0041r 09		     mov     diskette_status,dma_boundary   ; установить ошибку
0102  B0 00			     mov     al,0	     ;
0104  C3			     ret		     ; возврат к основной программе
0105			     j11:
0105  50			     push    ax		     ; сохранить команду

			     ;	 Включить мотор и	выбрать устройство

0106  51			     push    cx
0107  8A CA			     mov     cl,dl	     ; уст номер устройства, как счетчик+
			     сдвига
0109  B0 01			     mov     al,1	     ; маска для определения	мотора	    +
			     устройства
010B  D2 E0			     sal     al,cl	     ; сдвиг
010D  FA			     cli		     ; сбросить	бит разрешения		    +
			     прерывания
010E  C6 06 0040r FF		     mov     motor_count,0ffh  ; установить счетчик
0113  84 06 003Fr		     test    al,motor_status
0117  75 3F			     jnz     j14
0119  80 26 003Fr F0		     and     motor_status,0f0h	; выключить все биты мотора
011E  08 06 003Fr		     or	     motor_status,al	; включить мотор
0122  FB			     sti		     ; установить бит разрешения		    +
			     прерывания
0123  B0 10			     mov     al,10h	     ; бит маски
0125  D2 E0			     sal     al,cl	     ; уст бит маски	для доступности	    +
			     мотора
0127  0A C2			     or	     al,dl	     ; включить	бит выбора устройства
0129  0C 0C			     or	     al,0ch	     ; нет сброса, доступность		    +
			     прерывания ПДП
012B  52			     push    dx
012C  BA 03F2			     mov     dx,03f2h	     ; установить адрес порта
012F  EE			     out     dx,al
0130  5A			     pop     dx		     ; восстановить	регистры
0131  51			     push    cx		     ;задержка для включения мотора	    +
			     устройства
0132  B9 0003			     mov     cx,3
0135  51		     x2:     push    cx
0136  B9 0000			     mov     cx,0
0139  E2 FE		     x1:     loop    x1
013B  59			     pop     cx
013C  E2 F7			     loop    x2
013E  59			     pop     cx

			     ;	 Ожидание включения мотора для операции записи

013F  F6 06 003Fr 80		     test    motor_status,80h  ; запись ?
0144  74 12			     jz	     j14     ; нет -	продолжать без ожидания
0146  BB 0014			     mov     bx,20	     ; установить ожидание включения	    +
			     мотора
0149  E8 00B3			     call    get_parm	     ; получить	параметры
014C  0A E4			     or	     ah,ah
014E			     j12:
014E  74 08			     jz	     j14	     ; выход по окончании времени	    +
			     ожидания
0150  2B C9			     sub     cx,cx	     ; установить счетчик
0152  E2 FE		     j13:    loop    j13	     ; ожидать требуемое время
0154  FE CC			     dec     ah		     ; уменьшеть значение времени
0156  EB F6			     jmp     short j12	     ; повторить цикл

0158			     j14:
0158  FB			     sti		     ; уст признак разрешения		    +
			     прерывания
0159  59			     pop     cx

			     ;	 Выполнить операцию поиска

015A  E8 00B8			     call    seek	     ; установить дорожку
015D  58			     pop     ax		     ; восстановить	команду
015E  8A FC			     mov     bh,ah	     ; сохранить команду в BH
0160  B6 00			     mov     dh,0	     ; уст 0	сектор в	случае ошибки
0162  72 4A			     jc	     j17	     ; выход, если ошибка
0164  BE 01AEr			     mov     si,offset j17

0167  56			     push    si

			     ;	 Послать	параметры в контроллер

0168  E8 0000e			     call    nec_output	     ; передача	команды
016B  8A 66 01			     mov     ah,byte ptr [bp+1]	 ; уст номер головки
016E  D0 E4			     sal     ah,1	     ; сдвиг на 2
0170  D0 E4			     sal     ah,1
0172  80 E4 04			     and     ah,4	     ; выделить	бит
0175  0A E2			     or	     ah,dl	     ; операция	OR с номером устройства
0177  E8 0000e			     call    nec_output

			     ;	 Проверка операции форматизации

017A  80 FF 4D			     cmp     bh,04dh	     ; форматизация	?
017D  75 03			     jne     j15    ; нет - продолжать					    +
			     запись/считывание/верификацию
017F  E9 FF55			     jmp     j10

0182  8A E5		     j15:    mov     ah,ch	     ; номер цилиндра
0184  E8 0000e			     call    nec_output
0187  8A 66 01			     mov     ah,byte ptr [bp+1]	 ; номер головки
018A  E8 0000e			     call    nec_output
018D  8A E1			     mov     ah,cl	     ; номер сектора
018F  E8 0000e			     call    nec_output
0192  BB 0007			     mov     bx,7
0195  E8 0067			     call    get_parm
0198  BB 0009			     mov     bx,9
019B  E8 0061			     call    get_parm
019E  BB 000B			     mov     bx,11
01A1  E8 005B			     call    get_parm
01A4  BB 000D			     mov     bx,13
01A7			     j16:
01A7  E8 0055			     call    get_parm
01AA  5E			     pop     si

			     ;	 Операция запущена

01AB  E8 0130			     call    wait_int	     ; ожидание	прерывания
01AE			     j17:
01AE  72 45			     jc	     j21	     ; поиск ошибки
01B0  E8 0166			     call    results	     ; получить	состояние контроллера
01B3  72 3F			     jc	     j20	     ; поиск ошибки

			     ;	 Проверка  состояния, полученного из контроллера

01B5  FC			     cld		     ; установить направление коррекции
01B6  BE 0042r			     mov     si,offset nec_status
01B9  AC			     lods    nec_status
01BA  24 C0			     and     al,0c0h	     ; проверить нормальное окончание
01BC  74 3B			     jz	     j22
01BE  3C 40			     cmp     al,040h	     ; проверить неверное окончание
01C0  75 29			     jnz     j18

			     ;	 Обнаруженно	неверное окончание

01C2  AC			     lods    nec_status
01C3  D0 E0			     sal     al,1
01C5  B4 04			     mov     ah,record_not_fnd
01C7  72 24			     jc	     j19
01C9  D0 E0			     sal     al,1
01CB  D0 E0			     sal     al,1
01CD  B4 10			     mov     ah,bad_crc
01CF  72 1C			     jc	     j19
01D1  D0 E0			     sal     al,1
01D3  B4 08			     mov     ah,bad_dma
01D5  72 16			     jc	     j19
01D7  D0 E0			     sal     al,1
01D9  D0 E0			     sal     al,1
01DB  B4 04			     mov     ah,record_not_fnd
01DD  72 0E			     jc	     j19
01DF  D0 E0			     sal     al,1
01E1  B4 03			     mov     ah,write_protect  ; проверка защиты записи
01E3  72 08			     jc	     j19
01E5  D0 E0			     sal     al,1
01E7  B4 02			     mov     ah,bad_addr_mark
01E9  72 02			     jc	     j19

			     ;	 Контроллер вышел из строя

01EB			     j18:
01EB  B4 20			     mov     ah,bad_nec
01ED			     j19:
01ED  08 26 0041r		     or	     diskette_status,ah
01F1  E8 016A			     call    num_trans
01F4			     j20:
01F4  C3			     ret	     ; возврат к программе, вызвавшей		    +
			     прерывание

01F5			     j21:
01F5  E8 0121			     call    results	     ; вызов результатов в буфер
01F8  C3			     ret

			     ;	 Операция была успешной

01F9			     j22:
01F9  E8 0162			     call    num_trans
01FC  32 E4			     xor     ah,ah	     ; нет ошибок
01FE  C3			     ret
01FF			     rw_opn  endp
			     ;------------------------
			     ;get_parm
			     ;
			     ;	 ВХОД   BX - индекс байта,деленный
			     ;		     на 2,который будет
			     ;		     выбран,если младший
			     ;		     бит BX установлен,то
			     ;		     байт немедленно пере-
			     ;		     дается контроллеру.
			     ;
			     ;	 ВЫХОД  AH	- байт из	блока.
			     ;-------------------------
01FF			     get_parm proc   near
01FF  1E			     push    ds		     ; сохранить сегмент
0200  2B C0			     sub     ax,ax	     ; AX=0
0202  8E D8			     mov     ds,ax
				     assume  ds:abs0
0204  C5 36 0078r		     lds     si,disk_pointer
0208  D1 EB			     shr     bx,1	     ; делить BX на 2, уст флаг для выхода
020A  8A A0 0000r		     mov     ah,zb[si+bx]    ; получить	слово
020E  1F			     pop     ds		     ; восстановить	сегмент
				     assume  ds:data
020F  72 01			     jc	     nec_op	      ;если	флаг установлен, выход
0211  C3			     ret	     ; возврат к программе, вызвавшей		    +
			     прерывание
0212  E9 0000e		     nec_op: jmp     nec_output
0215			     get_parm endp
			     ;----------------------------
			     ;	 Позиционирование
			     ;
			     ;	 Эта	программа позиционирует голов-
			     ; ку обозначенного устройства на нуж-
			     ; ную дорожку. Если устройство не
			     ; было	выбрано до тех пор, пока не
			     ; была	сброшена команда,то устройство
			     ; будет рекалибровано.
			     ;
			     ;	 ВВОД
			     ;	     (DL) - номер усройства для
			     ;		    позиционирования,
			     ;	     (CH) - номер дорожки.
			     ;
			     ;	 ВЫВОД
			     ;	      CY=0 - успешно,
			     ;	      CY=1 - сбой (состояние НГМД установить
			     ;		     согласно  AX).
			     ;----------------------------
0215			     seek    proc    near
0215  B0 01			     mov     al,1	     ; уст маску
0217  51			     push    cx
0218  8A CA			     mov     cl,dl	     ; установить номер устройства
021A  D2 C0			     rol     al,cl	     ; циклический сдвиг влево
021C  59			     pop     cx
021D  84 06 003Er		     test    al,seek_status
0221  75 20			     jnz     j28
0223  08 06 003Er		     or	     seek_status,al
0227  B4 07			     mov     ah,07h
0229  E8 0000e			     call    nec_output
022C  8A E2			     mov     ah,dl
022E  E8 0000e			     call    nec_output
0231  E8 0089			     call    chk_stat_2	  ; получить и	обработать прерывание
0234  B4 07			     mov     ah,07h	     ; команда рекалибровки
0236  E8 0000e			     call    nec_output
0239  8A E2			     mov     ah,dl
023B  E8 0000e			     call    nec_output
023E  E8 007C			     call    chk_stat_2
0241  72 33			     jc	     j32	     ; сбой	позиционирования


0243			     j28:
0243  B4 0F			     mov     ah,0fh
0245  E8 0000e			     call    nec_output
0248  8A E2			     mov     ah,dl	     ; номер устройства
024A  E8 0000e			     call    nec_output
024D  8A E5			     mov     ah,ch	     ; номер дорожки
024F  90				     nop
0250  F6 06 0010r 04		     test    byte ptr equip_flag,4
0255  75 02			     jnz     j300
0257  02 E4			     add     ah,ah	     ; удвоение	номера дорожки
0259			     j300:
0259  E8 0000e			     call    nec_output
025C  E8 005E			     call    chk_stat_2	     ; получить	конечное прерывание и
							     ; считать состояние


025F  9C			     pushf		     ; сохранить значение флажков
0260  BB 0012			     mov     bx,18
0263  E8 FF99			     call    get_parm
0266  51			     push    cx		     ; сохранить регистр
0267			     j29:
0267  B9 0226			     mov     cx,550	     ; организовать	цикл = 1 ms
026A  0A E4			     or	     ah,ah	     ; проверка	окончания времени
026C  74 06			     jz	     j31
026E  E2 FE		     j30:    loop    j30	     ; задержка	1ms
0270  FE CC			     dec     ah		     ; вычитание из счетчика
0272  EB F3			     jmp     short j29	     ; возврат к началу цикла
0274			     j31:
0274  59			     pop     cx		     ; восстановить	состояние
0275  9D			     popf
0276			     j32:			     ; ошибка позиционирования
0276  C3			     ret	     ; возврат к программе, вызвавшей		    +
			     прерывание
0277			     seek    endp
			     ;-----------------------
			     ; dma_setup
			     ;	 Программа установки ПДП для операций записи,	    +
			     считывания,верифи-
			     ; кации.
			     ;
			     ;	 ВВОД
			     ;
			     ;	     (AL) - байт режима для ПДП,
			     ;	     (ES:BX) - адрес считывания/записи информации.
			     ;
			     ;------------------------
0277			     dma_setup proc  near
0277  51			     push    cx		     ; сохранить регистр
0278  E6 0C			     out     dma+12,al
027A  E6 0B			     out     dma+11,al	     ; вывод байта состояния
027C  8C C0			     mov     ax,es	     ; получить	значение ES
027E  B1 04			     mov     cl,4	     ; счетчик для сдвига
0280  D3 C0			     rol ax,cl		     ; циклический сдвиг влево
0282  8A E8			     mov     ch,al	     ;
0284  24 F0			     and     al,0f0h	     ;
0286  03 C3			     add     ax,bx
0288  73 02			     jnc     j33
028A  FE C5			     inc     ch		     ; перенос означает,	что старшие 4	    +
			     бита
							     ; должны быть прибавлены
028C			     j33:
028C  50			     push    ax		     ; сохранить начальный адрес
028D  E6 04			     out     dma+4,al	     ; вывод младшей половины адреса
028F  8A C4			     mov     al,ah
0291  E6 04			     out     dma+4,al	     ; вывод старшей половины адреса
0293  8A C5			     mov     al,ch	     ; получить	4 старших бита
0295  24 0F			     and     al,0fh
0297  E6 81			     out     081h,al   ; вывод 4 старших бит на регистр		    +
			     страниц

			     ;	 Определение	счетчика

0299  8A E6			     mov     ah,dh	     ; номер сектора
029B  2A C0			     sub     al,al	     ;
029D  D1 E8			     shr     ax,1	     ;
029F  50			     push    ax
02A0  BB 0006			     mov     bx,6	     ; получить	параметры байт/сектор
02A3  E8 FF59			     call    get_parm
02A6  8A CC			     mov     cl,ah	     ; счетчик сдига (0=128, 1=256 и т.д)
02A8  58			     pop     ax
02A9  D3 E0			     shl     ax,cl	     ; сдвиг
02AB  48			     dec     ax		     ; -1
02AC  50			     push    ax		     ; сохранить значение счетчика
02AD  E6 05			     out     dma+5,al	     ; вывести младший байт счетчика
02AF  8A C4			     mov     al,ah
02B1  E6 05			     out     dma+5,al	     ; вывести старший байт счетчика
02B3  59			     pop     cx		     ; восстановить	значение счетчика
02B4  58			     pop     ax		     ; восстановить	значение адреса
02B5  03 C1			     add     ax,cx	     ; проверка	заполнения 64K
02B7  59			     pop     cx		     ; восстановить	регистр
02B8  B0 02			     mov     al,2	     ; режим для 8237
02BA  E6 0A			     out     dma+10,al	     ; инициализация канала НГМД
02BC  C3			     ret	     ; возврат к программе, вызвавшей		    +
			     прерывание
02BD			     dma_setup	     endp
			     ;-----------------------
			     ;chk_stat_2
			     ;	 Эта	программа обрабатывает прерывания ,		    +
			     полученные после
			     ; рекалибровки, позиционирования или сброса		    +
			     адаптера. Прерывание
			     ; ожидается, принимается, обрабатывается	и		    +
			     результат	выдается программе,
			     ; вызвавшей прерывание.
			     ;
			     ;	 ВЫВОД
			     ;	       CY=0 - успешно,
			     ;	       CY=1 - сбой (ошибка в	состоянии НГМД),
			     ;--------------------------
02BD			     chk_stat_2	proc near
02BD  E8 001E			     call    wait_int	     ; ожидание	прерывания
02C0  72 14			     jc	     j34	     ; если	ошибка, то возврат
02C2  B4 08			     mov     ah,08h	     ; команда получения состояния
02C4  E8 0000e			     call    nec_output
02C7  E8 004F			     call    results	     ; считать результаты
02CA  72 0A			     jc	     j34
02CC  A0 0042r			     mov     al,nec_status   ; получить	первый байт состояния
02CF  24 60			     and     al,060h	     ; выделить	биты
02D1  3C 60			     cmp     al,060h	     ; проверка
02D3  74 02			     jz	     j35	; если ошибка, то идти на метку
02D5  F8			     clc		     ; возврат
02D6			     j34:
02D6  C3			     ret	     ; возврат к программе, вызвавшей		    +
			     прерывание
02D7			     j35:
02D7  80 0E 0041r 40		     or	     diskette_status,bad_seek
02DC  F9			     stc		     ; ошибка в возвращенном	коде
02DD  C3			     ret
02DE			     chk_stat_2	     endp
			     ;---------------------------------
			     ; wait_int
			     ;	 Эта	программа ожидает прерывание,	которое		    +
			     возникает	во время
			     ; программы вывода.	Если устройство не готово,	    +
			     ошибка может быть
			     ; возвращена.
			     ;
			     ;
			     ;	 ВЫВОД
			     ;		   CY=0	- успешно,
			     ;		   CY=1	- сбой(состояние НГМД устанавливается),
			     ;-----------------------------------
02DE			     wait_int proc   near
02DE  FB			     sti		     ; установить признак разрешения	    +
			     прерывания
02DF  53			     push    bx
02E0  51			     push    cx		     ; сохранить регистр
02E1  B3 02			     mov     bl,2	     ; количество циклов
02E3  33 C9			     xor     cx,cx	     ; длителность одного цикла		    +
			     ожидания
02E5			     j36:
02E5  F6 06 003Er 80		     test    seek_status,int_flag  ; опрос	наличия прерывания
02EA  75 0C			     jnz     j37
02EC  E2 F7			     loop    j36	     ; возврат к началу цикла
02EE  FE CB			     dec     bl
02F0  75 F3			     jnz     j36
02F2  80 0E 0041r 80		     or	     diskette_status,time_out
02F7  F9			     stc		     ; возврат при ошибке
02F8			     j37:
02F8  9C			     pushf		     ; сохранить текущие признаки
02F9  80 26 003Er 7F		     and     seek_status,not int_flag
02FE  9D			     popf		     ; восстановить	признаки
02FF  59			     pop     cx
0300  5B			     pop     bx		     ; восстановить	регистр
0301  C3			     ret	     ; возврат к программе, вызвавшей		    +
			     прерывание
0302			     wait_int	     endp

0302  03*(00)				     db	3 dup(0)

			     ;---------------------------
			     ;disk_int
			     ;	 Эта	программа обрабатывает прерывания НГМД
			     ;
			     ;	 ВЫВОД  - признак прерывания устанавливается в	    +
			     SEEK_STATUS.
			     ;---------------------------
0305			     disk_int proc   far
0305  FB			     sti		     ; установить признак разрешения	    +
			     прерывания
0306  1E			     push    ds
0307  50			     push    ax
0308  B8 0040			     mov     ax,dat
030B  8E D8			     mov     ds,ax
030D  80 0E 003Er 80		     or	     seek_status,int_flag
0312  B0 20			     mov     al,20h	     ; установить конец прерывания
0314  E6 20			     out     20h,al	     ; послать конец прерывания в порт
0316  58			     pop     ax
0317  1F			     pop     ds
0318  CF			     iret		     ; возврат из прерывания
0319			     disk_int	     endp
			     ;----------------------------
			     ;
			     ;	 Эта	программа считывет все, что контроллер		    +
			     адаптера НГМД указывает
			     ; программе, следующей за прерыванием.
			     ;
			     ;
			     ;	 ВЫВОД
			     ;		CF=0 - успешно,
			     ;		CF=1 - сбой
			     ;----------------------------
0319			     results proc    near
0319  FC			     cld
031A  BF 0042r			     mov     di,offset nec_status
031D  51			     push    cx		     ; сохранить счетчик
031E  52			     push    dx
031F  53			     push    bx
0320  B3 07			     mov     bl,7	     ; установить длину области		    +
			     состояния


0322			     j38:
0322  33 C9			     xor     cx,cx	     ; длительность	одного цикла
0324  BA 03F4			     mov     dx,03f4h	     ; адрес порта
0327			     j39:
0327  EC			     in	     al,dx	     ; получить	состояние
0328  A8 80			     test    al,080h	     ; готово ?
032A  75 0C			     jnz     j40a
032C  E2 F9			     loop    j39
032E  80 0E 0041r 80		     or	     diskette_status,time_out
0333			     j40:			     ; ошибка
0333  F9			     stc		     ; возврат по ошибке
0334  5B			     pop     bx
0335  5A			     pop     dx
0336  59			     pop     cx
0337  C3			     ret

			     ;	 Проверка признака направления

0338  EC		     j40a:   in	     al,dx	     ; получить	регистр состояния
0339  A8 40			     test    al,040h	     ; сбой	позиционирования
033B  75 07			     jnz     j42     ; если	все нормально, считать состояние
033D			     j41:
033D  80 0E 0041r 20		     or	     diskette_status,bad_nec
0342  EB EF			     jmp     short j40	     ; ошибка

			     ;	 Считывание состояния

0344			     j42:
0344  42			     inc     dx		     ; указать порт
0345  EC			     in	     al,dx	     ; ввести данные
0346  88 05			     mov    byte ptr [di],al  ;	сохранить байт
0348  47			     inc     di		     ; увеличить адрес
0349  B9 000A			     mov     cx,000ah	     ; счетчик
034C  E2 FE		     j43:    loop    j43
034E  4A			     dec     dx
034F  EC			     in	     al,dx	     ; получить	состояние
0350  A8 10			     test    al,010h
0352  74 06			     jz	     j44
0354  FE CB			     dec     bl		     ; -1 из количества циклов
0356  75 CA			     jnz     j38
0358  EB E3			     jmp     short j41	     ; сигнал неверен

035A			     j44:
035A  5B			     pop     bx		     ; восстановить	регистры
035B  5A			     pop     dx
035C  59			     pop     cx
035D  C3			     ret		     ; возврат из прерывания
035E			     results endp
			     ;-----------------------------
			     ; num_trans
			     ;	 Эта	программа вычисляет количество секторов,	    +
			     которое действительно
			     ; было	записано или	считано с НГМД
			     ;
			     ;	 ВВОД
			     ;	      (CH) - цилиндр,
			     ;	      (CL) - сектор.
			     ;
			     ;	 ВЫВОД
			     ;	      (AL) - количество действительно переданных	    +
			     секторов.
			     ;
			     ;------------------------------
035E			     num_trans proc  near
035E  A0 0045r			     mov     al,nec_status+3  ;	получить последний цилиндр
0361  3A C5			     cmp     al,ch	     ; сравнить	со стартовым
0363  A0 0047r			     mov     al,nec_status+5  ;	получить последний сектор
0366  74 0A			     jz	     j45
0368  BB 0008			     mov     bx,8
036B  E8 FE91			     call    get_parm	     ; получить	значение EOT
036E  8A C4			     mov     al,ah	     ; AH в AL
0370  FE C0			     inc     al		     ; EOT+1
0372  2A C1		     j45:    sub     al,cl	 ; вычисление	стартового номера из	    +
			     конечного
0374  C3			     ret
0375			     num_trans endp

			     ;-------------------------------
			     ; disk_base
			     ;	 Эта	программа устанавливает параметры,требуемые +
			     для операций
			     ; НГМД.
			     ;--------------------------------

0375			     disk_base label byte
0375  CF			     db	     11001111b	     ;
0376  02			     db	     2		     ;
0377  25			     db	     motor_wait	     ;
0378  02			     db	     2		     ;
0379  08			     db	     8		     ;
037A  2A			     db	     02ah	     ;
037B  FF			     db	     0ffh	     ;
037C  50			     db	     050h	     ;
037D  F6			     db	     0f6h	     ;
037E  19			     db	     25		     ;
037F  04			     db	     4		     ;
			     ;--- int 17-------------------
			     ;	 Программа связи с печатающим устройством
			     ;
			     ;	 Эта	программа выполняет три функции, код которых  +
			     задается
			     ; в регистре AH:
			     ;	 AH=0 -	печать знака, заданного в регистре	AL. Если в
			     ; результате выполнения функции	знак не			    +
			     напечатается, то в регистре
			     ; AL устанавливается "1" (тайм-аут);
			     ;	 AH=1 -	инициализация порта печати. После выполнения +
			     функции
			     ; в регистре AH находится байт состояния печатающего +
			     устройства;
			     ;	 AH=2H - считывание байта состояния печатающего	    +
			     устройства.
			     ;	 В регистре DX	необходимо задать ноль.
			     ;	 Значение разрядов байта состояния печатающего	    +
			     устройства:
			     ;	 0 - тайм-аут;
			     ;	 3 - ошибка ввода-вывода;
			     ;	 4 - выбран (SLCT);
			     ;	 5 - конец	бумаги (PE);
			     ;	 6 - подтверждение;
			     ;	 7 - занято.
			     ;------------------------------

				     assume  cs:code,ds:data
0380			     printer_io	proc far
0380  FB			     sti		     ; установить признак разрешения	    +
			     прерывания
0381  1E			     push    ds		     ; сохранить сегмент
0382  52			     push    dx
0383  56			     push    si
0384  51			     push    cx
0385  53			     push    bx
0386  BE 0040			     mov     si,dat
0389  8E DE			     mov     ds,si	     ; установить сегмент
038B  8B F2			     mov     si,dx
038D  D1 E6			     shl     si,1
038F  8B 94 0008r		     mov     dx,printer_base[si]  ; получить базовый адрес
								  ; печатающего устройства
0393  0B D2			     or	     dx,dx		; печать подключена ?
0395  74 0C			     jz	     b1			; нет, возврат
0397  0A E4			     or	     ah,ah		; AH=0 ?
0399  74 0E			     jz	     b2			; да,	переход к печати знака
039B  FE CC			     dec     ah			; AH=1 ?
039D  74 42			     jz	     b8			; да,	переход к инициализации
039F  FE CC			     dec     ah			; AH=2 ?
03A1  74 2A			     jz	     b5		; да,	переход к считыванию байта	    +
			     состояния

			     ;	  Выход из программы

03A3			     b1:
03A3  5B			     pop     bx		     ; восстановить	регистры
03A4  59			     pop     cx
03A5  5E			     pop     si
03A6  5A			     pop     dx
03A7  1F			     pop     ds
03A8  CF			     iret

			     ;	 Печать знака, заданного в	AL

03A9			     b2:
03A9  50			     push    ax
03AA  B3 0A			     mov     bl,10	     ; количество циклов ожидания
03AC  33 C9			     xor     cx,cx	     ; длительность	одного цикла
03AE  EE			     out     dx,al	     ; вывести символ в порт
03AF  42			     inc     dx		     ; -1 из адреса порта
03B0			     b3:			     ; ожидание	BUSY
03B0  EC			     in	     al,dx	     ; получить	состояние
03B1  8A E0			     mov     ah,al	     ; переслать состояние в	AH
03B3  A8 80			     test    al,80h	     ; печать занята ?
03B5  75 0E			     jnz     b4		     ; переход, если	да
03B7  E2 F7			     loop    b3		     ; цикл	ожидания закончился ?
03B9  FE CB			     dec     bl		     ; да, -1	из количества циклов
03BB  75 F3			     jnz     b3		     ; время ожидания истекло ?
03BD  80 CC 01			     or	     ah,1	     ; да, уст бит "тайм-аут"
03C0  80 E4 F9			     and     ah,0f9h	     ;
03C3  EB 14			     jmp     short b7
03C5			     b4:			     ; OUT_STROBE
03C5  B0 0D			     mov     al,0dh	     ; установить высокий строб
03C7  42			     inc     dx	     ; стробирование битом 0 порта C для 8255
03C8  EE			     out     dx,al
03C9  B0 0C			     mov     al,0ch	     ; установить низкий строб
03CB  EE			     out     dx,al
03CC  58			     pop     ax		     ;

			     ;	 Считывание байта состояния печатающего		    +
			     устройства

03CD			     b5:
03CD  50			     push    ax		     ; сохранить регистр
03CE			     b6:
03CE  8B 94 0008r		     mov     dx,printer_base[si]  ; получить адрес	печати
03D2  42			     inc     dx
03D3  EC			     in	     al,dx	     ; получить	состояние печати
03D4  8A E0			     mov     ah,al
03D6  80 E4 F8			     and     ah,0f8h
03D9			     b7:
03D9  5A			     pop     dx
03DA  8A C2			     mov     al,dl
03DC  80 F4 48			     xor     ah,48h
03DF  EB C2			     jmp     short b1	     ; к выходу из программы

			     ;	 Инициализация порта печатающего устройства

03E1			     b8:
03E1  50			     push    ax
03E2  83 C2 02			     add     dx,2	     ; указать порт
03E5  B0 08			     mov     al,8
03E7  EE			     out     dx,al
03E8  B8 03E8			     mov     ax,1000	      ;	время задержки
03EB			     b9:
03EB  48			     dec     ax		      ;	цикл задержки
03EC  75 FD			     jnz     b9
03EE  B0 0C			     mov     al,0ch
03F0  EE			     out     dx,al
03F1  EB DB			     jmp     short b6	 ; переход к считыванию байта		    +
			     состояния
03F3			     printer_io	     endp
			     ;--- int 10------------------
			     ;
			     ;	 Программа обработки прерывания ЭЛИ
			     ;
			     ;	 Эта	программа обеспечивает выполнение функций	    +
			     обслуживания
			     ; адаптера	ЭЛИ,	код которых задается в регистре AH:
			     ;
			     ;	  AH=0	 - установить	режим работы	адаптера ЭЛИ. В	    +
			     результате
			     ; выполнения функции в регистре AL могут			    +
			     устанавливаться следу-
			     ; ющие	режимы:
			     ;	  0 - 40х25, черно-белый, алфавитно-цифровой;
			     ;	  1 - 40х25, цветной, алфавитно-цифровой;
			     ;	  2 - 80х25, черно-белый, алфавитно-цифровой;
			     ;	  3 - 80х25, цветной, алфавитно-цифровой;
			     ;	  4 - 320х200,	цветной,	графический;
			     ;	  5 - 320х200,	черно-белый, графический;
			     ;	  6 - 640х200,	черно-белый, графический;
			     ;	  7 - 80х25, черно-белый, алфавитно-цифровой.
			     ;	  Режимы 0 - 6 используются для ЭМ адаптера ЭЛИ,	    +
			     режим	7
			     ; используется	для монохромного	черно-белого	80х25	    +
			     адаптера.
			     ;
			     ;	  AH=1	 - установить	размер курсора. Функция задает    +
			     размер кур-
			     ; сора	и управление	им.
			     ;	 Разряды	0 - 4 регистра CL определяют конечную		    +
			     границу курсора,
			     ; разряды 0	- 4 регистра CH	- начальную границу курсора.
			     ;	  Разряды 6 и 5	задают управление курсором:
			     ;	  00 - курсор мерцает с частотой,	задаваемой		    +
			     аппаратурно;
			     ;	  01 - курсор отсутствует.
			     ;	  Аппаратурно всегда вызывается мерцание курсора  +
			     с	частотой,
			     ; равной 1/16 частоты	кадровой развертки.
			     ;
			     ;	  AH=2	 - установить	текущую позицию курсора. Для	    +
			     выполнения
			     ; функции необходимо задать	следующие координаты	    +
			     курсора:
			     ;	  BH - страница;
			     ;	  DX - строка и колонка.
			     ; При графическом режиме регистр BH=0.
			     ;
			     ;	  AH=3	 - считать текущее положение курсора. Функция  +
			     вос-
			     ; станавливает	текущее положение курсора. Перед	    +
			     выполнением
			     ; функции в регистре BH необходимо задать страницу.
			     ;	  После выполнения программы регистры содержат	    +
			     следующую
			     ; информацию:
			     ;	  DH - строка;
			     ;	  DL - колонка;
			     ;	  CX - размер курсора и управление им.
			     ;
			     ;	  AH=5	- установить активную	страницу буфера		    +
			     адаптера.
			     ; Функция используется только в алфавитно-цифровом  +
			     режиме.
			     ; Для ее выполнения	необходимо в	регистре AL задать    +
			     страницу:
			     ;	  0-7 -	для режимов 0	и 1;
			     ;	  0-3 -	для режимов 2	и 3.
			     ;	  Значения режимов те же, что и для функции AH=0.
			     ;
			     ;	  AH=6	 - переместить блок символов вверх по экрану.
			     ; Функция перемещает символы в пределах заданной	    +
			     области вверх
			     ; по экрану, заполняя нижние	строки пробелами	с	    +
			     заданным атрибу-
			     ; том.
			     ;	  Для выполнения функции необходимо задать		    +
			     следующие	пара-
			     ; метры;
			     ;	  AL - количество перемещаемых строк. Для	очистки	    +
			     блока	AL=0;
			     ;	  CX - координаты левого верхнего угла блока (строка,+
			     колонка);
			     ;	  DX - координаты правого нижнего угла блока;
			     ;	  BH - атрибут символа пробела.
			     ;
			     ;	  AH=7	 - переместить блок символов вниз. Функция	    +
			     перемещает
			     ; символы в пределах заданной области вниз по		    +
			     экрану, заполняя
			     ; верхние строки пробелами с заданным атрибутом.
			     ;	  Для выполнения функции необходимо задать те же    +
			     параметры,
			     ; что и для	функции AH=6H.
			     ;
			     ;	  AH=8	 - считать атрибут и код символа, находящегося +
			     в	теку-
			     ; щей позиции курсора. Функция считывает атрибут и    +
			     код символа
			     ; и помещает их	в регистр AX (AL - код символа, AH - атрибут
			     ; символа).
			     ;	  Для выполнения функции необходимо в регистре BH    +
			     задать
			     ; страницу	(только для алфавитно-цифрового режима).
			     ;
			     ;	  AH=9	 - записать атрибут и код символа в текущую	    +
			     позицию
			     ; курсора. Функция помещает код символа и	его		    +
			     атрибут в текущую
			     ; позицию курсора.
			     ;	  Для выполнения функции необходимо задать		    +
			     следующие	параметры:
			     ;	  BH - отображаемая	страница (только для			    +
			     алфавитно-цифрового
			     ; режима;
			     ;	  CX - количество записываемых символов;
			     ;	  AL - код символа;
			     ;	  BL - атрибут символа для алфавитно-цифрового	    +
			     режима или
			     ; цвет	знака для графики. При записи точки разряд 7	    +
			     регистра BL=1.    =1
			     ;
			     ;	  AH=10	- записать символ	в текущую позицию курсора.    +
			     Атрибут
			     ; не изменяется.
			     ;	  Для выполнения функции необходимо задать		    +
			     следующие	параметры:
			     ;	  BH - отображаемая	страница (только для			    +
			     алфавитно-цифрового
			     ; режима);
			     ;	  CX - количество повторений символа;
			     ;	  AL - код записываемого символа.				    +
			     ся
			     ;									   -
			     ;	  AH=11	- установить цветовую	палитру.				   ь
			     ;	  При выполнении функции используются два		    +
			     варианта.
			     ;	  Для первого	варианта в регистре BH	задается ноль,а+
			     в	регистре
			     ; BL - значения пяти младших разрядов, используемых	    +
			     для выбора
			     ; цветовой	палитры (цвет заднего	плана для цветного  +
			     графического
			     ; режима 320х200 или цвет каймы	для цветного			    +
			     графического режима
			     ; 40х25).
			     ;	  Для второго	варианта в регистре BH	задается "1", а в +
			     регистре
			     ; BL - номер цветовой	палитры (0 или 1).
			     ;	  Палитра 0 состоит из зеленого	(1), красного (2) и	    +
			     желтого (3)
			     ; цветов, палитра 1 -	из голубого (1), фиолетового (2) и    +
			     белого (3).
			     ; При работе с видеомонитором цвета палитры		    +
			     заменяются соответству-
			     ; ющими градациями цвета.
			     ;	  Результатом выполнения функции является		    +
			     установка	цветовой       )
			     ; палитры в регистре выбора цвета (3D9).
			     ;
			     ;	  AH=12	 - записать точку.	Функция определяет		    +
			     относительный
			     ; адрес байта внутри буфера ЭЛИ, по которому должна   +
			     быть записана
			     ; точка с заданными	координатами.
			     ;	  Для выполнения функции необходимо задать		    +
			     следующие	параметры:    ,
			     ;	  DX - строка;
			     ;	  CX - колонка;
			     ;	  AL - цвет	выводимой точки. Если	разряд 7 регистра	AL  +
			     уста-	     3)
			     ; новлен в "1", то выполняется	операция XOR над		    +
			     значением	точки
			     ; из буфера и значением точки из регистра	AL.
			     ;
			     ;	  AH=13	- считать точку. Функция определяет		    +
			     относительный
			     ; адрес байта внутри буфера ЭЛИ, по которому должна   +
			     быть считана
			     ; точка с заданными	координатами.
			     ;	  Перед выполнением программы в регистрах		    +
			     задаются те же	парамет-
			     ; ры, что и для функции AH=12.
			     ;	 После выполнения программы в регистре	AL		    +
			     находится	значение
			     ; считанной точки.
			     ;
			     ;	  AH=14	- записать телетайп. Функция выводит символ	в  +
			     буфер
			     ; ЭЛИ с одновременной установкой позиции	курсора и   +
			     передвижением
			     ; курсора на экране.
			     ;	  После записи символа в последнюю позицию строки  +
			     выполняется
			     ; автоматический переход на	новую строку. Если	    +
			     страница экрана
			     ; заполнена, выполняется перемещение на одну строку +
			     вверх. Осво-
			     ; бодившаяся строка заполняется	значением атрибута +
			     символа для
			     ; алфавитно-цифрового режима или нулями -	для		    +
			     графики.
			     ;	  После записи очередного символа курсор		    +
			     устанавливается
			     ; в следующую позицию.
			     ;	  Для выполнения программы необходимо задать	    +
			     следующие	параметры:
			     ;	  AL - код выводимого символа;
			     ;	  BL - цвет	переднего плана (для графического режима).
			     ;	  Программа обрабатывает следующие служебные	    +
			     символы:
			     ;	  0BH -	сдвиг курсора на одну	позицию (без очистки);
			     ;	  0DH -	перемещение курсора в начало строки;
			     ;	  0AH -	перемещение курсора на следующую строку;
			     ;	  07H -	звуковой сигнал.
			     ;
			     ;	  AH=15	- получить текущее состояние ЭЛИ. Функция	    +
			     считывает
			     ; текущее состояние ЭЛИ	из памяти и размещает	его в   +
			     следующих
			     ; регистрах;
			     ;	  AH - количество колонок (40 или 80);
			     ;	  AL - текущий режим (0-7).	Значения режимов	те же, что и+
			     для
			     ; функции AH=0;
			     ;	  BH - номер активной страницы.
			     ;
			     ;	 AH=17 - загрузить знакогенератор пользователя.	    +
			     Функция дает
			     ; возможность пользователю загружать			    +
			     знакогенератор любым, необ-
			     ; ходимым ему алфавитом.
			     ;	  Для выполнения программы необходимо задать	    +
			     следующие	параметры:
			     ;	  ES:BP	- адрес таблицы, сформированной пользователем;
			     ;	  CX	- количество передаваемых	символов;
			     ;	  BL	- код символа, начиная	с которого загружается  +
			     таблица
			     ; пользователя;
			     ;	  BH - количество байт на знакоместо;
			     ;	  DL - идентификатор таблицы пользователя;
			     ;	  AL - режим:
			     ;		       AL=0   -	 загрузить знакогенератор
			     ;		       AL=1   -	 выдать идентификатор таблицы
			     ;		       AL=3   -	 загрузить вторую половину		    +
			     знакогенератора:
			     ;				 BL=0 -	загрузить вторую	половину	    +
			     знакогене
			     ;				 ратора из ПЗУ кодовой таблицы	с	    +
			     русским
			     ;				 алфавитом,
			     ;				 BL=1 -	загрузить вторую	половину	    +
			     знакогене
			     ;				 ратора из ПЗУ стандартной кодовой	    +
			     таблицей
			     ;				 ASCII (USA)
			     ;	 На выходе:
			     ;	     AH	  -  количество байт на	знакоместо
			     ;	     AL	  -  идентификатор	таблицы пользователя
			     ;	     CF=1   -	операция завершена успешно
			     ;
			     ;	  AH=19	- переслать цепочку символов. Функция		    +
			     позволяет	пере-
			     ; сылать символы четырьмя способами,	тип которых	    +
			     задается в
			     ; регистре	AL:
			     ;	  AL=0 - символ, символ, символ, ...
			     ; В регистре BL задается атрибут, курсор не движется;
			     ;	  AL=1 - символ, символ, символ, ...
			     ; В регистре BL задается атрибут, курсор движется;
			     ;	  AL=2H	- символ,	атрибут,	символ, атрибут, ...
			     ; Курсор не движется;
			     ;	  AL=3H	- символ,	атрибут,	символ, атрибут, ...
			     ; Курсор движется.
			     ;	   Кроме того необходимо задать в регистрах:
			     ;	  ES:BP	- начальный адрес	цепочки символов;
			     ;	  CX	- количество символов;
			     ;	  DH,DL	- строку и колонку для	начала записи;
			     ;	  BH	- номер страницы.
			     ;-----------------------------------------------------------

				     assume cs:code,ds:data,es:video_ram

03F3			     m1	     label   word	     ; таблица функций адаптера ЭЛИ
03F3  04AAr			     dw	     offset  set_mode
03F5  057Dr			     dw	     offset  set_ctype
03F7  059Er			     dw	     offset  set_cpos
03F9  05C8r			     dw	     offset  read_cursor
03FB  0B57r			     dw	     offset  read_lpen
03FD  05DEr			     dw	     offset  act_disp_page
03FF  064Ar			     dw	     offset  scroll_up
0401  06EFr			     dw	     offset  scroll_down
0403  072Br			     dw	     offset  read_ac_current
0405  0771r			     dw	     offset  write_ac_current
0407  07A4r			     dw	     offset  write_c_current
0409  0602r			     dw	     offset  set_color
040B  07E6r			     dw	     offset  write_dot
040D  07D5r			     dw	     offset  read_dot
040F  0CE1r			     dw	     offset  write_tty2
0411  0628r			     dw	     offset  video_state
      =0020		     m1l     equ     20h

0413			     video_io proc   near
0413  FB			     sti		 ; установить	признак разрешения	    +
			     прерывания
0414  FC			     cld
0415  06			     push    es
0416  1E			     push    ds
0417  52			     push    dx
0418  51			     push    cx
0419  53			     push    bx
041A  56			     push    si
041B  57			     push    di
041C  50			     push    ax		     ; сохранить значение AX
041D  8A C4			     mov     al,ah	     ; переслать AH в	AL
041F  32 E4			     xor     ah,ah	     ; обнулить	старший байт
0421  D1 E0			     sal     ax,1	     ; умножить	на 2
0423  8B F0			     mov     si,ax	     ; поместить в SI
0425  3D 0020			     cmp     ax,m1l	     ; проверка	длины таблицы функций
0428  72 04			     jb	     m2		     ; адаптера	ЭЛИ
042A  58			     pop     ax		     ; восстановить	AX
042B  E9 0147			     jmp     video_return    ; выход, если AX неверно
042E  B8 0040		     m2:     mov     ax,dat
0431  8E D8			     mov     ds,ax
0433  B8 B800			     mov     ax,0b800h	     ; сегмент для цветного адаптера
0436  8B 3E 0010r		     mov     di,equip_flag   ; получить	тип адаптера
043A  81 E7 0030		     and     di,30h	     ; выделить	биты режима ;	db 81h,0E7h,30h,00h +
			     ; ###Gleb###
043E  83 FF 30			     cmp     di,30h	     ; есть	установка ч/б адаптера ?
0441  75 03			     jne     m3
0443  B8 B000			     mov     ax,0b000h	     ; уст адреса буфера	для ч/б адаптера
0446  8E C0		     m3:     mov     es,ax
0448  58			     pop     ax		     ; восстановить	значение
0449  8A 26 0049r		     mov     ah,crt_mode     ; получить	текущий режим в AH
044D  2E: FF A4	03F3r		     jmp   cs:m1[si]
0452			     video_io	     endp
			     ;-------------------------
			     ; set mode

			     ;	 Эта	программа устанавливает режим работы		    +
			     адаптера ЭЛИ
			     ;
			     ;	 ВХОД
			     ;		(AL) - содержит	значение режима.
			     ;
			     ;--------------------------

			     ;	 Таблицы	параметров ЭЛИ

0452			     video_parms label	     byte

			     ;	 Таблица	инициализации

0452  38 28 2D 0A 1F 06	19	     db	     38h,28h,2dh,0ah,1fh,6,19h	 ; уст для 40х25

0459  1C 02 07 06 07		     db	     1ch,2,7,6,7
045E  00 00 00 00		     db	     0,0,0,0
      =0010		     m4	     equ     10h

0462  71 50 5A 0A 1F 06	19	     db	     71h,50h,5ah,0ah,1fh,6,19h	 ; уст для 80х25

0469  1C 02 07 06 07		     db	     1ch,2,7,6,7
046E  00 00 00 00		     db	     0,0,0,0

0472  38 28 2D 0A 7F 06	64	     db	     38h,28h,2dh,0ah,7fh,6,64h	 ; уст для графики

0479  70 02 01 06 07		     db	     70h,2,1,6,7
047E  00 00 00 00		     db	     0,0,0,0

0482  62 50 50 0F 19 06	19	     db	     62h,50h,50h,0fh,19h,6,19h	 ; уст для 80х25	ч/б адаптера

0489  19 02 0D 0B 0C		     db	     19h,2,0dh,0bh,0ch
048E  00 00 00 00		     db	     0,0,0,0

0492			     m5	     label   word	     ; таблица для восстановления длины
0492  0800			     dw	     2048
0494  1000			     dw	     4096
0496  4000			     dw	     16384
0498  4000			     dw	     16384

			     ;	 Колонки
049A			     m6	     label   byte
049A  28 28 50 50 28 28	50+	     db	     40,40,80,80,40,40,80,80
      50


			     ;--- c_reg_tab
04A2			     m7	     label   byte	     ; таблица установки режима
04A2  2C 28 2D 29 2A 2E	1E+	     db	     2ch,28h,2dh,29h,2ah,2eh,1eh,29h
      29


04AA			     set_mode proc   near
04AA  BA 03D4			     mov     dx,03d4h	     ; адрес цветного адаптера
04AD  B3 00			     mov     bl,0     ;	уст значение	для цветного	адаптера
04AF  83 FF 30			     cmp     di,30h	     ; установлен ч/б адаптер ?
04B2  75 07			     jne     m8		     ; переход, если	указан цветной
04B4  B0 07			     mov     al,7	     ; указать ч/б режим
04B6  BA 03B4			     mov     dx,03b4h	     ; адрес для ч/б адаптера
04B9  FE C3			     inc     bl		     ; установить режим для ч/б адаптера
04BB  8A E0		     m8:     mov     ah,al	     ; сохранить режим в	AH
04BD  A2 0049r			     mov     crt_mode,al
04C0  89 16 0063r		     mov     addr_6845,dx    ; сохранить адрес управляющего	    +
			     порта
							     ; для активного дисплея
04C4  1E			     push    ds
04C5  50			     push    ax		     ; сохранить режим
04C6  52			     push    dx		     ; сохранить значение порта вывода
04C7  83 C2 04			     add     dx,4	     ; указать адрес регистра		    +
			     управления
04CA  8A C3			     mov     al,bl	     ; получить	режим для адаптера
04CC  EE			     out     dx,al	     ; сброс экрана
04CD  5A			     pop     dx		     ; восстановить	DX
04CE  2B C0			     sub     ax,ax
04D0  8E D8			     mov     ds,ax	     ; установить адрес таблицы		    +
			     векторов
				     assume  ds:abs0
04D2  C5 1E 0074r		     lds     bx,parm_ptr ; получить значение параметров	    +
			     адаптера ЭЛИ
04D6  58			     pop     ax		     ; восстановить	AX
				     assume  ds:code
04D7  B9 0010			     mov     cx,m4	; установить длину таблицы параметров
04DA  80 FC 02			     cmp     ah,2	     ; определение режима
04DD  72 10			     jc	     m9		     ; режим 0 или 1 ?
04DF  03 D9			     add     bx,cx	     ; уст начало таблицы параметров
04E1  80 FC 04			     cmp     ah,4
04E4  72 09			     jc	     m9		     ; режим 2 или 3
04E6  03 D9			     add     bx,cx	     ; начало таблицы для графики
04E8  80 FC 07			     cmp     ah,7
04EB  72 02			     jc	     m9		     ; режимы 4, 5 или	6 ?
04ED  03 D9			     add     bx,cx	     ; уст начало таблицы для ч/б		    +
			     адаптера

			     ;	 BX указывает на строку таблицы	инициализации

04EF			     m9:			     ; OUT_INIT
04EF  50			     push    ax		     ; сохранить режим в	AH
04F0  32 E4			     xor     ah,ah	     ;

			     ;	 Цикл таблицы, устанавливающий адреса регистров и +
			     выводящий	значения
			     ; из таблицы

04F2			     m10:
04F2  8A C4			     mov     al,ah	     ;
04F4  EE			     out     dx,al
04F5  42			     inc     dx		     ; указать адрес порта
04F6  FE C4			     inc     ah		     ;
04F8  8A 07			     mov     al,byte ptr [bx]	; получить значение таблицы
04FA  EE			     out     dx,al	     ; послать строку из	таблицы в порт
04FB  43			     inc     bx		     ; +1 к адресу таблицы
04FC  4A			     dec     dx		     ; -1 из адреса порта
04FD  E2 F3			     loop    m10	     ; передана	вся таблица ?
04FF  58			     pop     ax		     ; вернуть режимы
0500  1F			     pop     ds		     ; вернуть сегмент
				     assume  ds:data

			     ;	 Инициализация буфера дисплея

0501  33 FF			     xor     di,di	     ; DI=0
0503  89 3E 004Er		     mov     crt_start,di    ; сохранить начальный адрес
0507  C6 06 0062r 00		     mov     active_page,0   ; установить активную страницу
050C  B9 2000			     mov     cx,8192	     ; количество слов в	цветном		    +
			     адаптере
050F  80 FC 04			     cmp     ah,4	     ; опрос графики
0512  72 0C			     jc	     m12	     ; нет инициализации графики
0514  80 FC 07			     cmp     ah,7	     ; опрос ч/б	адаптера
0517  74 04			     je	     m11	     ; инициализация ч/б	адаптера
0519  33 C0			     xor     ax,ax	     ; для графического режима
051B  EB 06			     jmp     short m13	     ; очистить	буфер
051D			     m11:			     ; инициализация ч/б	адаптера
051D  B9 0800			     mov     cx,2048	     ; об'ем буфера ч/б адаптера
0520			     m12:
0520  B8 0720			     mov     ax,' '+7*256    ; заполнить характеристики для	    +
			     альфа
0523			     m13:			     ; очистить	буфер
0523  F3> AB			     rep     stosw	     ; заполнить область буфера		    +
			     пробелами

			     ;	 Формирование порта управления режимом

0525  C7 06 0060r 0067		     mov     cursor_mode,67h   ; установить режим текущего	    +
			     курсора (ERROR - MUS BE 607h)
052B  A0 0049r			     mov     al,crt_mode     ; получить	режим в регистре AX
052E  32 E4			     xor     ah,ah
0530  8B F0			     mov     si,ax	     ; таблица указателей режима
0532  8B 16 0063r		     mov     dx,addr_6845    ; подготовить адрес порта для	    +
			     вывода
0536  83 C2 04			     add     dx,4
0539  2E: 8A 84	04A2r		     mov al,cs:m7[si]
053E  EE			     out     dx,al
053F  A2 0065r			     mov     crt_mode_set,al

			     ;	 Форморование количества колонок

0542  2E: 8A 84	049Ar		     mov al,cs:m6[si]
0547  32 E4			     xor     ah,ah
0549  A3 004Ar			     mov     crt_cols,ax     ; коичество колонок на экране

			     ;	 Установить позицию курсора

054C  81 E6 000E		     and     si,0eh	     ; db 81h,0E6h,0Eh,00h   ; ###Gleb###
0550  2E: 8B 8C	0492r		     mov cx,cs:m5[si]  ; длина для очистки
0555  89 0E 004Cr		     mov     crt_len,cx
0559  B9 0008			     mov     cx,8	     ; очистить	все позиции курсора
055C  BF 0050r			     mov     di,offset cursor_posn
055F  1E			     push    ds		     ; восстановить	сегмент
0560  07			     pop     es
0561  33 C0			     xor     ax,ax
0563  F3> AB			     rep     stosw	     ; заполнить нулями

			     ;	 Установка регистра сканирования

0565  42			     inc     dx		     ; уст порт сканирования	по		    +
			     умолчанию
0566  B0 30			     mov     al,30h	     ; значение	30H для всех режимов,
							     ; исключая	640х200
0568  80 3E 0049r 06		     cmp     crt_mode,6	     ; режим ч/б	640х200
056D  75 02			     jnz     m14	     ; если	не 640х200
056F  B0 3F			     mov     al,3fh	     ; если	640х200, то поместить в 3FH
0571  EE		     m14:    out     dx,al	     ; вывод правильного значения в	    +
			     порт 3D9
0572  A2 0066r			     mov     crt_pallette,al   ; сохранить значение для		    +
			     использования

			     ;	 Нормальный возврат

0575			     video_return:
0575  5F			     pop     di
0576  5E			     pop     si
0577  5B			     pop     bx
0578			     m15:
0578  59			     pop     cx		     ; восстановление регистров
0579  5A			     pop     dx
057A  1F			     pop     ds
057B  07			     pop     es
057C  CF			     iret		     ; возврат из прерывания
057D			     set_mode	     endp
			     ;--------------------
			     ; set_ctype
			     ;
			     ;	 Эта	программа устанавливает размер курсора и	    +
			     управление им
			     ;
			     ;	 ВХОД
			     ;		(CX) - содержит	размер курсора. (CH - начальная	    +
			     граница,
			     ;		       CL - конечная граница)
			     ;
			     ;--------------------
057D			     set_ctype proc  near
057D  B4 0A			     mov     ah,10	     ; установить регистр 6845	для курсора
057F  89 0E 0060r		     mov     cursor_mode,cx   ;	сохранить в области данных
0583  E8 0002			     call    m16	     ; вывод регистра CX
0586  EB ED			     jmp     short video_return

0588			     m16:
0588  8B 16 0063r		     mov     dx,addr_6845    ; адрес регистра
058C  8A C4			     mov     al,ah	     ; получить	значение
058E  EE			     out     dx,al	     ; установить регистр
058F  42			     inc     dx		     ; регистр данных
0590  8A C5			     mov     al,ch	     ; данные
0592  EE			     out     dx,al
0593  4A			     dec     dx
0594  8A C4			     mov     al,ah
0596  FE C0			     inc     al		     ; указать другой регистр данных
0598  EE			     out     dx,al	     ; установить второй регистр
0599  42			     inc     dx
059A  8A C1			     mov     al,cl	     ; второе значение данных
059C  EE			     out     dx,al
059D  C3			     ret		     ; возврат
059E			     set_ctype	     endp
			     ;----------------------------
			     ; set_cpos
			     ;
			     ;	 Установить текущую позицию курсора
			     ;
			     ;	 ВХОД
			     ;		DX - строка, колонка,
			     ;		BH - номер	страницы.
			     ;
			     ;-----------------------------
059E			     set_cpos proc   near
059E  8A CF			     mov     cl,bh
05A0  32 ED			     xor     ch,ch	     ; установить счетчик
05A2  D1 E1			     sal     cx,1	     ; сдвиг слова
05A4  8B F1			     mov     si,cx
05A6  89 94 0050r		     mov word ptr [si +	offset cursor_posn],dx	;сохранить указатель
05AA  38 3E 0062r		     cmp     active_page,bh
05AE  75 05			     jnz     m17
05B0  8B C2			     mov     ax,dx	     ; получить	строку/колонку в AX
05B2  E8 0002			     call    m18	     ; установить курсор
05B5			     m17:
05B5  EB BE			     jmp     short video_return	 ; возврат
05B7			     set_cpos	     endp

			     ;	 Установить позицию курсора, AX	содержит		    +
			     строку/колонку

05B7			     m18     proc    near
05B7  E8 007F			     call    position
05BA  8B C8			     mov     cx,ax
05BC  03 0E 004Er		     add     cx,crt_start    ; сложить с начальным адресом	    +
			     страницы
05C0  D1 F9			     sar     cx,1	     ; делить на 2
05C2  B4 0E			     mov     ah,14
05C4  E8 FFC1			     call    m16
05C7  C3			     ret
05C8			     m18     endp
			     ;---------------------------
			     ; read_cursor
			     ;
			     ;	 Считать	текущее положение курсора
			     ;
			     ;	 Эта	программа восстанавливает текущее положение +
			     курсора
			     ;
			     ;	 ВХОД
			     ;		BH - номер	страницы
			     ;
			     ;	 ВЫХОД
			     ;		DX - строка/колонка текущей	позиции курсора,
			     ;		CX - размер курсора и управление им
			     ;
			     ;---------------------------
05C8			     read_cursor proc near
05C8  8A DF			     mov     bl,bh
05CA  32 FF			     xor     bh,bh
05CC  D1 E3			     sal     bx,1
05CE  8B 97 0050r		     mov dx,word ptr [bx+offset	cursor_posn]
05D2  8B 0E 0060r		     mov     cx,cursor_mode
05D6  5F			     pop     di		     ; восстановить	регистры
05D7  5E			     pop     si
05D8  5B			     pop     bx
05D9  58			     pop     ax
05DA  58			     pop     ax
05DB  1F			     pop     ds
05DC  07			     pop     es
05DD  CF			     iret
05DE			     read_cursor     endp
			     ;-----------------------------
			     ; act_disp_page
			     ;
			     ;	  Эта программа устанавливает активную	страницу    +
			     буфера адаптера ЭЛИ
			     ;
			     ;	 ВХОД
			     ;		AL - страница.
			     ;
			     ;	 ВЫХОД
			     ;		Выполняется сброс контроллера для	установки  +
			     новой	страницы.
			     ;
			     ;-----------------------------
05DE			     act_disp_page proc	     near
05DE  A2 0062r			     mov     active_page,al  ; сохранить значение активной	    +
			     страницы
05E1  8B 0E 004Cr		     mov     cx,crt_len	     ; получить	длину области буфера
05E5  98			     cbw		     ; преобразовать AL
05E6  50			     push    ax		     ; сохранить значение страницы
05E7  F7 E1			     mul     cx
05E9  A3 004Er			     mov     crt_start,ax    ; сохранить начальный адрес
							     ; для следующего требования
05EC  8B C8			     mov     cx,ax	     ; переслать начальный адрес	в CX
05EE  D1 F9			     sar     cx,1	     ; делить на 2
05F0  B4 0C			     mov     ah,12
05F2  E8 FF93			     call    m16
05F5  5B			     pop     bx		     ; восстановить	значение страницы
05F6  D1 E3			     sal     bx,1
05F8  8B 87 0050r		     mov ax,word ptr [bx+offset	cursor_posn]   ; получить курсор
05FC  E8 FFB8			     call    m18	     ; установить позицию курсора
05FF  E9 FF73			     jmp     video_return
0602			     act_disp_page   endp
			     ;------------------------------
			     ; set color
			     ;
			     ;	 Эта	программа устанавливает цветовую палитру.
			     ;
			     ;	 ВХОД
			     ;		BH=0
			     ;		     BL	- значение пяти младших бит, используемых +
			     для выбора
			     ;			  цветовой палитры (цвет заднего плана для+
			     цветной
			     ;			  графики 320х200 или цвет каймы для цветного+
			     40х25)
			     ;		BH=1
			     ;		     BL	- номер цветовой палитры
			     ;			  BL=0 - зеленый(1), красный(2), желтый(3),
			     ;			  BL=1 - голубой(1), фиолетовый(2), белый	(3)
			     ;
			     ;	 ВЫХОД
			     ;		Установленная цветовая палитра в порту 3D9.
			     ;------------------------------
0602			     set_color proc  near
0602  8B 16 0063r		     mov     dx,addr_6845    ; порт	для палитры
0606  83 C2 05			     add     dx,5	     ; установить порт
0609  A0 0066r			     mov     al,crt_pallette   ; получить текущее значение	    +
			     палитры
060C  0A FF			     or	     bh,bh	     ; цвет	0 ?
060E  75 0E			     jnz     m20	     ; вывод цвета 1

			     ;	 Обработка цветовой палитры 0

0610  24 E0			     and     al,0e0h	     ; сбросить	5 младших бит
0612  80 E3 1F			     and     bl,01fh	     ; сбросить	3 старших бита
0615  0A C3			     or	     al,bl
0617			     m19:
0617  EE			     out     dx,al	      ;	вывод выбранного	цвета в порт 3D9
0618  A2 0066r			     mov     crt_pallette,al  ;	сохранить значение цвета
061B  E9 FF57			     jmp     video_return

			     ;	 Обработка цветовой палитры 1

061E			     m20:
061E  24 DF			     and     al,0dfh	     ;
0620  D0 EB			     shr     bl,1	     ; проверить младший бит	BL
0622  73 F3			     jnc     m19
0624  0C 20			     or	     al,20h	     ;
0626  EB EF			     jmp     short m19	     ; переход
0628			     set_color	     endp
			     ;--------------------------
			     ; video state
			     ;
			     ;	 Эта	программа получает текущее состояние ЭЛИ в	AX.
			     ;
			     ;		AH - количество колонок,
			     ;		AL - текущий режим,
			     ;		BH - номер	активной страницы.
			     ;
			     ;---------------------------
0628			     video_state proc	     near
0628  8A 26 004Ar		     mov     ah,byte ptr crt_cols   ; получить количество колонок
062C  A0 0049r			     mov     al,crt_mode	     ; текущий режим
062F  8A 3E 0062r		     mov     bh,active_page  ; получить	текущую активную		    +
			     страницу
0633  5F			     pop     di		     ; восстановить	регистры
0634  5E			     pop     si
0635  59			     pop     cx
0636  E9 FF3F			     jmp     m15	     ; возврат к программе
0639			     video_state     endp
			     ;---------------------------
			     ; position
			     ;
			     ;	 Эта	программа вычисляет адрес буфера символа в	    +
			     режиме альфа.
			     ;
			     ;	 ВХОД
			     ;		AX - номер	строки, номер колонки,
			     ;
			     ;	 ВЫХОД
			     ;		AX - смещение символа с	координатами (AH, AL)	    +
			     относительно
			     ;		     начала страницы. Смещение измеряется в	    +
			     байтах.
			     ;
			     ;----------------------------
0639			     position proc   near
0639  53			     push    bx		     ; сохранить регистр
063A  8B D8			     mov     bx,ax
063C  8A C4			     mov     al,ah	     ; строки в AL
063E  F6 26 004Ar		     mul     byte ptr crt_cols
0642  32 FF			     xor     bh,bh
0644  03 C3			     add     ax,bx	     ; добавить	к значению колонки
0646  D1 E0			     sal     ax,1	     ; * 2 для байтов атрибута
0648  5B			     pop     bx
0649  C3			     ret
064A			     position	     endp
			     ;-------------------------------
			     ;scroll up
			     ;
			     ;	 Эта	программа перемещает	блок символов вверх по   +
			     экрану.
			     ;
			     ;	 ВХОД
			     ;		AH - текуший режим,
			     ;		AL - количество перемещаемых строк
			     ;		CX - координаты левого верхнего	угла блока
			     ;		     (строка, колонка),
			     ;		DX - координаты правого нижнего	угла
			     ;		BH - атрибут символа пробела (для опробеливания+
			     освобожда-
			     ;		     емых строк),
			     ;
			     ;	 ВЫХОД
			     ;		Модифицированный буфер дисплея.
			     ;
			     ;-----------------------------------
				     assume cs:code,ds:data,es:data
064A			     scroll_up proc  near
064A  8A D8			     mov     bl,al	 ; сохранить количество перемещаемых +
			     строк
064C  80 FC 04			     cmp     ah,4	     ; проверка	графического режима
064F  72 08			     jc	     n1
0651  80 FC 07			     cmp     ah,7	     ; проверка	ч/б адаптера
0654  74 03			     je	     n1
0656  E9 01F3			     jmp     graphics_up
0659			     n1:
0659  53			     push    bx		     ; сохранить полный атрибут в BH
065A  8B C1			     mov     ax,cx	     ; координаты левого верхнего угла
065C  E8 0039			     call    scroll_position
065F  74 33			     jz	     n7
0661  03 F0			     add     si,ax
0663  8A E6			     mov     ah,dh	     ; строка
0665  2A E3			     sub     ah,bl
0667			     n2:
0667  E8 0075			     call    n10	     ; сдвинуть	одну строку
066A  03 F5			     add     si,bp
066C  03 FD			     add     di,bp	     ; указать на следующую строку в	    +
			     блоке
066E  FE CC			     dec     ah		     ; счетчик строк для	сдвига
0670  75 F5			     jnz     n2		     ; цикл	строки
0672			     n3:			     ; очистка входа
0672  58			     pop     ax		     ; восстановить	атрибут в AH
0673  B0 20			     mov     al,' '	     ; заполнить пробелами
0675			     n4:			     ; очистка счетчика
0675  E8 0070			     call    n11	     ; очистка строки
0678  03 FD			     add     di,bp	     ; указать следующую строку
067A  FE CB			     dec     bl		     ; счетчик строк для	сдвига
067C  75 F7			     jnz     n4		     ; очистка счетчика
067E			     n5:			     ; конец сдвига
067E  B8 0040			     mov     ax,dat
0681  8E D8			     mov     ds,ax
0683  80 3E 0049r 07		     cmp     crt_mode,7	     ; ч/б адаптер ?
0688  74 07			     je	     n6		     ; если	да - пропуск режима сброса
068A  A0 0065r			     mov     al,crt_mode_set
068D  BA 03D8			     mov     dx,03d8h	     ; установить порт цветного		    +
			     адаптера
0690  EE			     out     dx,al
0691			     n6:
0691  E9 FEE1			     jmp     video_return
0694			     n7:
0694  8A DE			     mov     bl,dh
0696  EB DA			     jmp     short n3	     ; очистить
0698			     scroll_up	     endp

			     ;	 Обработка сдвига

0698			     scroll_position proc    near
0698  80 3E 0049r 02		     cmp     crt_mode,2
069D  72 19			     jb	     n9		     ; обработать 80х25 отдельно
069F  80 3E 0049r 03		     cmp     crt_mode,3
06A4  77 12			     ja	     n9

			     ;	 Сдиг для цветного адаптера в режиме 80х25

06A6  52			     push    dx
06A7  BA 03DA			     mov     dx,3dah	     ; обработка цветного адаптера
06AA  50			     push    ax
06AB			     n8:			     ; ожидание	доступности дисплея
06AB  EC			     in	     al,dx
06AC  A8 08			     test    al,8
06AE  74 FB			     jz	     n8		     ; ожидание	доступности дисплея
06B0  B0 25			     mov     al,25h
06B2  BA 03D8			     mov     dx,03d8h
06B5  EE			     out     dx,al	     ; выключить ЭЛИ
06B6  58			     pop     ax
06B7  5A			     pop     dx
06B8  E8 FF7E		     n9:     call    position
06BB  03 06 004Er		     add     ax,crt_start    ; смещение	активной страницы
06BF  8B F8			     mov     di,ax	     ; для адреса сдвига
06C1  8B F0			     mov     si,ax
06C3  2B D1			     sub     dx,cx	     ; DX=строка
06C5  FE C6			     inc     dh
06C7  FE C2			     inc     dl		     ; прибавление к началу
06C9  32 ED			     xor     ch,ch	     ; установить старший байт счетчика+
			     в	0
06CB  8B 2E 004Ar		     mov     bp,crt_cols     ; получить	число колонок дисплея
06CF  03 ED			     add     bp,bp	     ; увеличить на 2 байт атрибута
06D1  8A C3			     mov     al,bl	     ; получить	счетчик строки
06D3  F6 26 004Ar		     mul     byte ptr crt_cols	 ; определить	смещение из адреса,
06D7  03 C0			     add     ax,ax     ; умноженного	на 2,	для байта атрибута
06D9  06			     push    es	     ; установить адресацию для области	    +
			     буфера
06DA  1F			     pop     ds
06DB  80 FB 00			     cmp     bl,0	     ; 0 означает очистку блока
06DE  C3			     ret		     ; возврат с установкой флажков
06DF			     scroll_position endp

			     ;	 Перемещение	строки

06DF			     n10     proc    near
06DF  8A CA			     mov     cl,dl	     ; получить	колонки для передачи
06E1  56			     push    si
06E2  57			     push    di		     ; сохранить начальный адрес
06E3  F3> A5			     rep     movsw	     ; передать	эту строку на экран
06E5  5F			     pop     di
06E6  5E			     pop     si		     ; восстановить	адресацию
06E7  C3			     ret
06E8			     n10     endp

			     ;	 очистка	строки

06E8			     n11     proc    near
06E8  8A CA			     mov     cl,dl	     ; получить	колонки для очистки
06EA  57			     push    di
06EB  F3> AB			     rep     stosw	     ; запомнить полный знак
06ED  5F			     pop     di
06EE  C3			     ret
06EF			     n11     endp
			     ;------------------------
			     ; scroll_down
			     ;
			     ;	 Эта	программа перемещает	блок символов вниз по
			     ; экрану, заполняя верхние строки пробелом с		    +
			     заданным атрибутом
			     ;
			     ;	 ВХОД
			     ;		AH - текущий режим,
			     ;		AL - количество строк,
			     ;		CX - верхний левый угол	блока,
			     ;		DX - правый нижний угол	блока,
			     ;		BH - атрибут символа-заполнителя (пробела),
			     ;
			     ;-------------------------
06EF			     scroll_down proc near
06EF  FD			     std		     ; уст направление сдвига вниз
06F0  8A D8			     mov     bl,al	     ; количество строк в BL
06F2  80 FC 04			     cmp     ah,4	     ; проверка	графики
06F5  72 08			     jc	     n12
06F7  80 FC 07			     cmp     ah,7	     ; проверка	ч/б адаптера
06FA  74 03			     je	     n12
06FC  E9 01A6			     jmp     graphics_down
06FF			     n12:
06FF  53			     push    bx		     ; сохранить атрибут в BH
0700  8B C2			     mov     ax,dx	     ; нижний правый угол
0702  E8 FF93			     call    scroll_position
0705  74 20			     jz	     n16
0707  2B F0			     sub     si,ax	     ; SI для адресации
0709  8A E6			     mov     ah,dh
070B  2A E3			     sub     ah,bl	     ; передать	количество строк
070D			     n13:
070D  E8 FFCF			     call    n10	     ; передать	одну строку
0710  2B F5			     sub     si,bp
0712  2B FD			     sub     di,bp
0714  FE CC			     dec     ah
0716  75 F5			     jnz     n13
0718			     n14:
0718  58			     pop     ax		     ; восстановить	атрибут в AH
0719  B0 20			     mov     al,' '
071B			     n15:
071B  E8 FFCA			     call    n11	     ; очистка одной строки
071E  2B FD			     sub     di,bp	     ; перейти к следующей строке
0720  FE CB			     dec     bl
0722  75 F7			     jnz     n15
0724  E9 FF57			     jmp     n5		     ; конец сдвига
0727			     n16:
0727  8A DE			     mov     bl,dh
0729  EB ED			     jmp     short n14
072B			     scroll_down  endp
			     ;--------------------
			     ; read_ac_current
			     ;
			     ;	 Эта	программа считывает атрибут и	код символа,	    +
			     находящегося в теку-
			     ; щем положении курсора
			     ;
			     ;	 ВХОД
			     ;		AH - текущий режим,
			     ;		BH - номер	страницы (только для режима альфа),
			     ;
			     ;	 ВЫХОД
			     ;		AL - код символа,
			     ;		AH - атрибут символа.
			     ;
			     ;---------------------
				     assume cs:code,ds:data,es:data
072B			     read_ac_current proc near
072B  80 FC 04			     cmp     ah,4	     ; это графика ?
072E  72 08			     jc	     p1
0730  80 FC 07			     cmp     ah,7	     ; ч/б адаптер ?
0733  74 03			     je	     p1
0735  E9 02A9			     jmp     graphics_read
0738			     p1:			     ;
0738  E8 001A			     call    find_position
073B  8B F3			     mov     si,bx	     ; установить адресацию в SI


073D  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес
0741  83 C2 06			     add     dx,6	     ; порт	состояния
0744  06			     push    es
0745  1F			     pop     ds		     ; получить	сегмент
0746			     p2:
0746  EC			     in	     al,dx	     ; получить	состояние
0747  A8 01			     test    al,1
0749  75 FB			     jnz     p2		     ; ожидание
074B  FA			     cli		; сброс признака разрешения		    +
			     прерывания
074C			     p3:
074C  EC			     in	     al,dx	     ; получить	состояние
074D  A8 01			     test    al,1
074F  74 FB			     jz	     p3		     ; ожидание
0751  AD			     lodsw		     ; получить	символ/атрибут
0752  E9 FE20			     jmp     video_return
0755			     read_ac_current endp

0755			     find_position proc	near
0755  8A CF			     mov     cl,bh	     ; поместить страницу в CX
0757  32 ED			     xor     ch,ch
0759  8B F1			     mov     si,cx	     ; передать	в SI индекс, умноженный    +
			     на 2
075B  D1 E6			     sal     si,1	     ; для слова смещения
075D  8B 84 0050r		     mov ax,word ptr [si+offset	cursor_posn]   ; получить строку/ко-
							     ; лонку этой страницы
0761  33 DB			     xor     bx,bx	     ; установить начальный адрес в 0
0763  E3 06			     jcxz    p5
0765			     p4:
0765  03 1E 004Cr		     add     bx,crt_len	     ; длина буфера
0769  E2 FA			     loop    p4
076B			     p5:
076B  E8 FECB			     call    position
076E  03 D8			     add     bx,ax
0770  C3			     ret
0771			     find_position   endp
			     ;---------------------
			     ;write_ac_current
			     ;
			     ;	 Эта	программа записывает	атрибут и код символа	в  +
			     текущую позицию
			     ; курсора
			     ;
			     ;	 ВХОД
			     ;		AH - текущий режим,
			     ;		BH - номер	страницы,
			     ;		CX - счетчик (количество повторений символов),
			     ;		AL - код символа,
			     ;		BL - атрибут символа (для режимов альфа) или	    +
			     цвет символа
			     ;		     для графики.
			     ;
			     ;----------------------
0771			     write_ac_current proc near
0771  80 FC 04			     cmp     ah,4	     ; это графика ?
0774  72 08			     jc	     p6
0776  80 FC 07			     cmp     ah,7	     ; это ч/б адаптер ?
0779  74 03			     je	     p6
077B  E9 01B1			     jmp     graphics_write
077E			     p6:
077E  8A E3			     mov     ah,bl	     ; получить	атрибут в AH
0780  50			     push    ax		     ; хранить
0781  51			     push    cx		     ; хранить счетчик
0782  E8 FFD0			     call    find_position
0785  8B FB			     mov     di,bx	     ; адрес в DI
0787  59			     pop     cx		     ; вернуть счетчик
0788  5B			     pop     bx		     ; и символ
0789			     p7:			     ; цикл	записи


0789  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес
078D  83 C2 06			     add     dx,6	     ; указать порт состояния
0790			     p8:
0790  EC			     in	     al,dx	     ; получить	состояние
0791  A8 01			     test    al,1
0793  75 FB			     jnz     p8		     ; ожидать
0795  FA			     cli		  ; сброс признака	разрешения		    +
			     прерывания
0796			     p9:
0796  EC			     in	     al,dx	     ; получить	состояние
0797  A8 01			     test    al,1
0799  74 FB			     jz	     p9		     ; ожидать
079B  8B C3			     mov     ax,bx
079D  AB			     stosw		     ; записать	символ и	атрибут
079E  FB			     sti		     ; уст признак разрешения		    +
			     прерывания
079F  E2 E8			     loop    p7
07A1  E9 FDD1			     jmp     video_return
07A4			     write_ac_current  endp
			     ;---------------------
			     ;write_c_current
			     ;
			     ;	 Эта	программа записывает	символ в	текущую		    +
			     позицию курсора.
			     ;
			     ;	 ВХОД
			     ;		BH - номер	страницы (только для альфа режимов),
			     ;		CX - счетчик (количество повторений символа),
			     ;		AL - код символа,
			     ;
			     ;-----------------------
07A4			     write_c_current proc near
07A4  80 FC 04			     cmp     ah,4	     ; это графика ?
07A7  72 08			     jc	     p10
07A9  80 FC 07			     cmp     ah,7	     ; это ч/б адаптер ?
07AC  74 03			     je	     p10
07AE  E9 017E			     jmp     graphics_write
07B1			     p10:
07B1  50			     push    ax		     ; сохранить в стеке
07B2  51			     push    cx		     ; сохранить количество повторений
07B3  E8 FF9F			     call    find_position
07B6  8B FB			     mov     di,bx	     ; адрес в DI
07B8  59			     pop     cx		     ; вернуть количество повторений
07B9  5B			     pop     bx		     ; BL - код символа
07BA			     p11:


07BA  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес
07BE  83 C2 06			     add     dx,6	     ; указать порт состояния
07C1			     p12:
07C1  EC			     in	     al,dx	     ; получить	состояние
07C2  A8 01			     test    al,1
07C4  75 FB			     jnz     p12	     ; ожидать
07C6  FA			     cli		     ; сброс признака разрешения		    +
			     прерывания
07C7			     p13:
07C7  EC			     in	     al,dx	     ; получить	состояние
07C8  A8 01			     test    al,1
07CA  74 FB			     jz	     p13	     ; ожидание
07CC  8A C3			     mov     al,bl	     ; восстановить	символ
07CE  AA			     stosb		     ; записать	символ
07CF  47			     inc     di
07D0  E2 E8			     loop    p11	     ; цикл
07D2  E9 FDA0			     jmp     video_return
07D5			     write_c_current endp
			     ;---------------------
			     ; read dot	- write	dot
			     ;
			     ;	 Эта	программа считывает/записывает точку.
			     ;
			     ;	 ВХОД
			     ;		DX - строка (0-199),
			     ;		CX - колонка (0-639),
			     ;		AL - цвет выводимой точки.
			     ;		     Если бит 7=1, то выполняется операция
			     ;		     XOR над	значением точки из буфера	дисплея и   +
			     значением
			     ;		     точки	из регистра AL (при записи точки).
			     ;
			     ;	 ВЫХОД
			     ;		AL - значение считанной точки
			     ;
			     ;----------------------
				     assume cs:code,ds:data,es:data
07D5			     read_dot proc   near
07D5  E8 0031			     call    r3		     ; определить положение точки
07D8  26: 8A 04			     mov     al,es:[si]	     ; получить	байт
07DB  22 C4			     and     al,ah	     ; размаскировать другие биты в	    +
			     байте
07DD  D2 E0			     shl     al,cl	     ;
07DF  8A CE			     mov     cl,dh	     ; получить	число бит результата
07E1  D2 C0			     rol     al,cl
07E3  E9 FD8F			     jmp     video_return    ; выход из прерывания
07E6			     read_dot	     endp

07E6			     write_dot proc  near
07E6  50			     push    ax		     ; сохранить значение точки
07E7  50			     push    ax		     ; еще раз
07E8  E8 001E			     call    r3		     ; определить положение точки
07EB  D2 E8			     shr     al,cl	     ; сдвиг для установки бит при	    +
			     выводе
07ED  22 C4			     and     al,ah	     ; сбросить	другие биты
07EF  26: 8A 0C			     mov     cl,es:[si]	     ; получить	текущий байт
07F2  5B			     pop     bx
07F3  F6 C3 80			     test    bl,80h
07F6  75 0D			     jnz     r2
07F8  F6 D4			     not     ah	       ; установить маску для	передачи	    +
			     указанных	бит
07FA  22 CC			     and     cl,ah
07FC  0A C1			     or	     al,cl
07FE			     r1:
07FE  26: 88 04			     mov es:[si],al	     ; восстановить	байт в памяти
0801  58			     pop     ax
0802  E9 FD70			     jmp     video_return    ; к выходу из программы
0805			     r2:
0805  32 C1			     xor     al,cl	     ; исключающее ИЛИ над значениями    +
			     точки
0807  EB F5			     jmp     short r1	     ; конец записи
0809			     write_dot	     endp

			     ;-------------------------------------
			     ;
			     ;	 Эта	программа определяет	относительный адрес	    +
			     байта	(внутри буфера
			     ; дисплея),	из которого должна быть считана/записана +
			     точка,с заданными
			     ; координатами.
			     ;
			     ;	 ВХОД
			     ;		DX - строка (0-199),
			     ;		CX - колонка (0-639).
			     ;
			     ;	 ВЫХОД
			     ;		SI - относительный	адрес байта, содержащего	    +
			     точку	внутри
			     ;		     буфера дисплея,
			     ;		AH - маска	для выделения значения заданной	    +
			     точки	внутри байта
			     ;		CL - константа	сдвига маски	в AH в крайнюю	левую  +
			     позицию,
			     ;		DH - число	бит,	определяющих значение точки.
			     ;
			     ;--------------------------------------

0809			     r3	     proc    near
0809  53			     push    bx		     ; сохранить BX
080A  50			     push    ax		     ; сохранить AL

			     ;	 Вычисление первого байта	указанной строки		    +
			     умножением на 40.
			     ; Наименьший бит строки	определяет четно/нечетную    +
			     80-байтовую строку.

080B  B0 28			     mov     al,40
080D  52			     push    dx		     ; сохранить значение строки
080E  80 E2 FE			     and     dl,0feh	     ; сброс четно/нечетного	бита
0811  F6 E2			     mul     dl	  ; AX содержит	адрес первого байта		    +
			     указанной	строки
0813  5A			     pop     dx		     ; восстановить	его
0814  F6 C2 01			     test    dl,1	     ; проверить четность/нечетность
0817  74 03			     jz	     r4		     ; переход,если строка четная
0819  05 2000			     add     ax,2000h	     ; смещение	для нахождения нечетных+
			     строк
081C			     r4:			     ; четная строка
081C  8B F0			     mov     si,ax	     ; передать	указатель в SI
081E  58			     pop     ax		     ; восстановить	значение AL
081F  8B D1			     mov     dx,cx	     ; значение	колонки в DX

			     ;	 Определение	действительных графических режимов
			     ;
			     ;	 Установка регистров согласно	режимaм
			     ;
			     ;	       BH - количество бит, определяющее точку,
			     ;	       BL - константа выделения точки из левых бит	    +
			     байта,
			     ;	       CH - константа для выделения из номера колонки   +
			     номера позиции
			     ;		    первого бита, определяющего	точку в байте,   +
			     т.е. получение
			     ;		    остатка от	деления номера на 8 (для режима	    +
			     640х200) или
			     ;		    номера на 4	(для	режима 320х200),
			     ;	       CL - константа сдвига (для выполнения деления	на+
			     8 или на 4).

0821  BB 02C0			     mov     bx,2c0h
0824  B9 0302			     mov     cx,302h	     ; установка параметров
0827  80 3E 0049r 06		     cmp     crt_mode,6
082C  72 06			     jc	     r5		     ;
082E  BB 0180			     mov     bx,180h
0831  B9 0703			     mov     cx,703h	     ; уст параметры для	старшего	    +
			     регистра

			     ;	 Определение	бита смещения в байте	по маске
0834			     r5:
0834  22 EA			     and     ch,dl	     ;

			     ;	 Определение	байта смещения в колонке

0836  D3 EA			     shr     dx,cl	     ; сдвиг для коррекции
0838  03 F2			     add     si,dx	     ; получить	указатель
083A  8A F7			     mov     dh,bh   ; получить	указатель битов результата  +
			     в	DH

			     ;	 Умножение BH (количество бит в байте) на	CH (бит	    +
			     смещения)

083C  2A C9			     sub     cl,cl
083E			     r6:
083E  D0 C8			     ror     al,1    ; левое крайнее значение в AL	для записи
0840  02 CD			     add     cl,ch	     ; прибавить значение бита смещения
0842  FE CF			     dec     bh		     ; счетчик контроля
0844  75 F8			     jnz     r6	     ; на выходе CL содержит счетчик сдвига    +
			     для
							     ; восстановления
0846  8A E3			     mov     ah,bl	     ; получить	маску в AH
0848  D2 EC			     shr     ah,cl	     ; передать	маску в ячейку
084A  5B			     pop     bx		     ; восстановить	регистр
084B  C3			     ret		     ; возврат с восстановлением
084C			     r3	     endp

			     ;----------------------------------------
			     ;
			     ;
			     ;	  Программа перемещает блок символов вверх в	    +
			     режиме графики
			     ;
			     ;-----------------------------------------

084C			     graphics_up proc near
084C  8A D8			     mov     bl,al	     ; сохранить количество символов
084E  8B C1			     mov     ax,cx	     ; получить	верхний левый угол в AX


0850  E8 026A			     call    graph_posn
0853  8B F8			     mov     di,ax	     ; сохранить результат

			     ;	 Определить размеры блока

0855  2B D1			     sub     dx,cx
0857  81 C2 0101		     add     dx,101h
085B  D0 E6			     sal     dh,1
085D  D0 E6			     sal     dh,1

085F  80 3E 0049r 06		     cmp     crt_mode,6
0864  73 04			     jnc     r7

0866  D0 E2			     sal     dl,1
0868  D1 E7			     sal     di,1	     ;

			     ;	 Определение	адреса источника	в буфере
086A			     r7:
086A  06			     push    es
086B  1F			     pop     ds
086C  2A ED			     sub     ch,ch	     ; обнулить	старший байт	счетчика
086E  D0 E3			     sal     bl,1	     ; умножение числа строк	на 4
0870  D0 E3			     sal     bl,1
0872  74 2D			     jz	     r11	     ; если	0, занести пробелы
0874  8A C3			     mov     al,bl	     ; получить	число строк в AL
0876  B4 50			     mov     ah,80	     ; 80 байт/строк
0878  F6 E4			     mul     ah		     ; определить смещение источника
087A  8B F7			     mov     si,di	     ; установить источник
087C  03 F0			     add     si,ax	     ; сложить источник с ним
087E  8A E6			     mov     ah,dh	     ; количество строк
0880  2A E3			     sub     ah,bl	     ; определить число перемещений

0882			     r8:
0882  E8 0080			     call    r17	     ; перемещение одной строки
0885  81 EE 1FB0		     sub     si,2000h-80     ; перемещение в следующую строку
0889  81 EF 1FB0		     sub     di,2000h-80
088D  FE CC			     dec     ah		     ; количество строк для перемещения
088F  75 F1			     jnz     r8	     ; продолжать, пока все строки не		    +
			     переместятся

			     ;	 Заполнение освобожденных строк
0891			     r9:
0891  8A C7			     mov     al,bh
0893			     r10:
0893  E8 0088			     call    r18	     ; очистить	эту строку
0896  81 EF 1FB0		     sub     di,2000h-80     ; указать на следующую
089A  FE CB			     dec     bl		     ; количество строк для заполнения
089C  75 F5			     jnz     r10	     ; цикл	очистки
089E  E9 FCD4			     jmp     video_return    ; к выходу из программы

08A1			     r11:
08A1  8A DE			     mov     bl,dh	     ; установить количество пробелов
08A3  EB EC			     jmp     short r9	     ; очистить
08A5			     graphics_up     endp

			     ;---------------------------------
			     ;
			     ;	 Программа перемещает блок символов вниз в режиме +
			     графики
			     ;
			     ;----------------------------------

08A5			     graphics_down proc	     near
08A5  FD			     std		     ; установить направление
08A6  8A D8			     mov     bl,al	     ; сохранить количество строк
08A8  8B C2			     mov     ax,dx	     ; получить	нижнюю правую позицию в +
			     AX


08AA  E8 0210			     call    graph_posn
08AD  8B F8			     mov     di,ax	     ; сохранить результат

			     ;	 Определение	размера блока

08AF  2B D1			     sub     dx,cx
08B1  81 C2 0101		     add     dx,101h
08B5  D0 E6			     sal     dh,1
08B7  D0 E6			     sal     dh,1


08B9  80 3E 0049r 06		     cmp     crt_mode,6
08BE  73 05			     jnc     r12

08C0  D0 E2			     sal     dl,1
08C2  D1 E7			     sal     di,1
08C4  47			     inc     di

			     ;	 Определение	адреса источника	в буфере
08C5			     r12:
08C5  06			     push    es
08C6  1F			     pop     ds
08C7  2A ED			     sub     ch,ch	     ; обнулить	старший байт	счетчика
08C9  81 C7 00F0		     add     di,240	     ; указать последнюю строку
08CD  D0 E3			     sal     bl,1	     ; умножить	количество строк	на 4
08CF  D0 E3			     sal     bl,1
08D1  74 2E			     jz	     r16	     ; если	0, заполнить пробелом
08D3  8A C3			     mov     al,bl	     ; получить	количество строк	в AL
08D5  B4 50			     mov     ah,80	     ; 80 байт/строк
08D7  F6 E4			     mul     ah		     ; определить смещение источника
08D9  8B F7			     mov     si,di	     ; установить источник
08DB  2B F0			     sub     si,ax	     ; вычесть смещение
08DD  8A E6			     mov     ah,dh	     ; количество строк
08DF  2A E3			     sub     ah,bl	     ; определить число для перемещения

08E1			     r13:
08E1  E8 0021			     call    r17	     ; переместить одну строку
08E4  81 EE 2050		     sub     si,2000h+80     ; установить следующую строку
08E8  81 EF 2050		     sub     di,2000h+80
08EC  FE CC			     dec     ah		     ; количество строк для перемещения
08EE  75 F1			     jnz     r13	     ; продолжать, пока все не		    +
			     переместятся

			     ;	 Заполнение освобожденных строк
08F0			     r14:
08F0  8A C7			     mov     al,bh	     ; атрибут заполнения
08F2			     r15:
08F2  E8 0029			     call    r18	     ; очистить	строку
08F5  81 EF 2050		     sub     di,2000h+80     ; указать следующую строку
08F9  FE CB			     dec     bl		     ; число строк для заполнения
08FB  75 F5			     jnz     r15
08FD  FC			     cld		     ; сброс признака направления
08FE  E9 FC74			     jmp     video_return    ; к выходу из программы

0901			     r16:
0901  8A DE			     mov     bl,dh
0903  EB EB			     jmp     short r14	     ; очистить
0905			     graphics_down endp

			     ;	 Программа перемещения одной строки

0905			     r17     proc    near
0905  8A CA			     mov     cl,dl	     ; число байт в строке
0907  56			     push    si
0908  57			     push    di		     ; хранить указатели
0909  F3> A4			     rep     movsb	     ; переместить четное поле
090B  5F			     pop     di
090C  5E			     pop     si
090D  81 C6 2000		     add     si,2000h
0911  81 C7 2000		     add     di,2000h	     ; указать нечетное поле
0915  56			     push    si
0916  57			     push    di		     ; сохранить указатели
0917  8A CA			     mov     cl,dl	     ; возврат счвтчика
0919  F3> A4			     rep     movsb	     ; передать	нечетное поле
091B  5F			     pop     di
091C  5E			     pop     si		     ; возврат указателей
091D  C3			     ret		     ; возврат к программе
091E			     r17     endp

			     ;	 Заполнение пробелами строки

091E			     r18     proc    near
091E  8A CA			     mov     cl,dl	     ; число байт в поле
0920  57			     push    di		     ; хранить указатель
0921  F3> AA			     rep     stosb	     ; запомнить новое значение
0923  5F			     pop     di		     ; вернуть указатель
0924  81 C7 2000		     add     di,2000h	     ; указать нечетное поле
0928  57			     push    di
0929  8A CA			     mov     cl,dl
092B  F3> AA			     rep     stosb	     ; заполнить нечетное поле
092D  5F			     pop     di
092E  C3			     ret		     ; возврат к программе
092F			     r18     endp

			     ;--------------------------------------
			     ;
			     ;	graphics_write
			     ;
			     ;	 Эта	программа записывает	символ в	режиме графики
			     ;
			     ;	 ВХОД
			     ;		AL - код символа,
			     ;		BL - атрибут цвета,	который используется	в	    +
			     качестве цвета
			     ;		     переднего	плана (цвет символа). Если бит 7	    +
			     BL=1, то
			     ;		     выполняется операция XOR над	байтом в	буфере+
			     и	байтом
			     ;		     в	генераторе символов,
			     ;		CX - счетчик повторений символа
			     ;
			     ;----------------------------------------

				     assume cs:code,ds:data,es:data
092F			     graphics_write proc near
092F  B4 00			     mov     ah,0	     ; AH=0
0931  50			     push    ax		     ; сохранить значение кода символа

			     ;	 Определение	позиции в области буфера засылкой	    +
			     туда кода точек

0932  E8 0185			     call    s26	     ; найти ячейку в области буфера
0935  8B F8			     mov     di,ax	     ; указатель области в DI

			     ;	 Определение	области для получения кода точки

0937  58			     pop     ax		     ; восстановить	код точки
0938  3C 80			     cmp     al,80h	     ; во второй половине ?
093A  73 06			     jae     s1		     ; да

			     ;	 Изображение	есть в первой половине памяти

093C  BE 0E1Cr			     mov     si, offset	crt_char_gen  ;	смещение изображения
093F  0E			     push    cs		     ; хранить сегмент в	стеке
0940  EB 0F			     jmp     short s2	     ; определить режим

			     ;	 Изображение	есть во второй части памяти

0942			     s1:
0942  2C 80			     sub     al,80h	     ; 0 во вторую половину
0944  1E			     push    ds		     ; хранить указатель данных
0945  2B F6			     sub     si,si
0947  8E DE			     mov     ds,si	     ; установить адресацию
				     assume  ds:abs0
0949  C5 36 007Cr		     lds     si,ext_ptr	     ; получить	смещение
094D  8C DA			     mov     dx,ds	     ; получить	сегмент
				     assume  ds:data
094F  1F			     pop     ds		     ; восстановить	сегмент данных
0950  52			     push    dx		     ; хранить сегмент в	стеке

			     ;	 Опеделение графического режима операции

0951			     s2:			     ; определение режима
0951  D1 E0			     sal     ax,1	     ; умножить	указатель кода на 8
0953  D1 E0			     sal     ax,1
0955  D1 E0			     sal     ax,1
0957  03 F0			     add     si,ax	     ; SI содержит смещение
0959  80 3E 0049r 06		     cmp     crt_mode,6
095E  1F			     pop     ds		     ; восстановить	указатель таблицы
095F  72 2C			     jc	     s7	     ; проверка	для средней разрешающей	    +
			     способности

			     ;	 Высокая	разрешающая способность
0961			     s3:
0961  57			     push    di		     ; сохранить указатель области
0962  56			     push    si		     ; сохранить указатель кода
0963  B6 04			     mov     dh,4	     ; количество циклов
0965			     s4:
0965  AC			     lodsb		     ; выборка четного байта
0966  F6 C3 80			     test    bl,80h
0969  75 16			     jnz     s6
096B  AA			     stosb
096C  AC			     lodsb
096D			     s5:
096D  26: 88 85	1FFF		     mov es:[di+1fffh],al    ; запомнить во второй части
0972  83 C7 4F			     add     di,79	     ; передать	следующую строку
0975  FE CE			     dec     dh		     ; выполнить цикл
0977  75 EC			     jnz     s4
0979  5E			     pop     si
097A  5F			     pop     di		     ; восстановить	указатель области
097B  47			     inc     di	     ; указать на следующую позицию символа
097C  E2 E3			     loop    s3		     ; записать	последующие символы
097E  E9 FBF4			     jmp     video_return

0981			     s6:
0981  26: 32 05			     xor al,es:[di]
0984  AA			     stosb		     ; запомнить код
0985  AC			     lodsb		     ; выборка нечетного символа
0986  26: 32 85	1FFF		     xor  al,es:[di+1fffh]
098B  EB E0			     jmp     s5		     ; повторить

			     ;	 Средняя	разрешающая способность записи
098D			     s7:
098D  8A D3			     mov     dl,bl	     ; сохранить старший бит	цвета
098F  D1 E7			     sal     di,1    ; умножить	на 2,	т.к. два байта/символа
0991  E8 00D1			     call    s19	     ; расширение BL до полного слова	    +
			     цвета
0994			     s8:
0994  57			     push    di
0995  56			     push    si
0996  B6 04			     mov     dh,4	     ; число циклов
0998			     s9:
0998  AC			     lodsb		     ; получить	код точки
0999  E8 00DE			     call    s21	     ; продублировать
099C  23 C3			     and     ax,bx	     ; окрашивание в заданный цвет
099E  F6 C2 80			     test    dl,80h
09A1  74 07			     jz	     s10
09A3  26: 32 25			     xor     ah,es:[di]	     ; выполнить функцию XOR со "старым"
09A6  26: 32 45	01		     xor     al,es:[di+1]    ; и "новым" цветами
09AA  26: 88 25		     s10:    mov  es:[di],ah	     ; запомнить первый байт
09AD  26: 88 45	01		     mov es:[di+1],al	     ; запомнить второй байт
09B1  AC			     lodsb		     ; получить	код точки
09B2  E8 00C5			     call    s21
09B5  23 C3			     and     ax,bx	     ; окрашивание нечетного байта
09B7  F6 C2 80			     test    dl,80h
09BA  74 0A			     jz	 s11
09BC  26: 32 A5	2000		     xor     ah,es:[di+2000h]	; из первой половины
09C1  26: 32 85	2001		     xor     al,es:[di+2001h]	; и из второй половины
09C6  26: 88 A5	2000	     s11:    mov     es:[di+2000h],ah
09CB  26: 88 85	2001		     mov     es:[di+2001h],al	; запомнить вторую часть буфера
09D0  83 C7 50			     add     di,80	     ; указать следующую ячейку
09D3  FE CE			     dec     dh
09D5  75 C1			     jnz     s9		     ; повторить
09D7  5E			     pop     si
09D8  5F			     pop     di
09D9  83 C7 02			     add     di,2	     ; переход к следующему символу
09DC  E2 B6			     loop    s8		     ; режим записи
09DE  E9 FB94			     jmp     video_return
09E1			     graphics_write  endp
			     ;-------------------------------------
			     ;graphics_read
			     ;
			     ;	 Программа считывает символ в режиме графики
			     ;
			     ;-------------------------------------
09E1			     graphics_read   proc    near
09E1  E8 00D6			     call    s26
09E4  8B F0			     mov     si,ax	     ; сохранить в SI
09E6  83 EC 08			     sub     sp,8	     ; зарезервировать в стеке 8 байт для
							     ; записи символа из	буфера дисплея
09E9  8B EC			     mov     bp,sp	     ; указатель для хранения области

			     ;	 Определение	режима графики

09EB  80 3E 0049r 06		     cmp     crt_mode,6
09F0  06			     push    es
09F1  1F			     pop     ds		     ; указать сегмент
09F2  72 1A			     jc	     s13	     ; средняя разрешающая способность

			     ;	Высокая разрешающая способность для считавания

09F4  B6 04			     mov     dh,4
09F6			     s12:
09F6  8A 04			     mov     al,byte ptr [si]	; получить первый	байт
09F8  88 46 00			     mov byte ptr [bp],al	; запомнить в	памяти
09FB  45			     inc     bp
09FC  8A 84 2000		     mov al,byte ptr [si+2000h]	  ; получить младший байт
0A00  88 46 00			     mov byte ptr [bp],al
0A03  45			     inc     bp
0A04  83 C6 50			     add     si,80	     ; переход на следующую четную	    +
			     строку
0A07  FE CE			     dec     dh
0A09  75 EB			     jnz     s12	     ; повторить
0A0B  EB 17			     jmp     short s15	     ; переход к хранению кодов точек
0A0D  90			     nop

			     ;	 Средняя	разрешающая способность для считывания
0A0E			     s13:
0A0E  D1 E6			     sal     si,1      ; смещение умножить на	2, т.к. 2		    +
			     байта/символа
0A10  B6 04			     mov     dh,4
0A12			     s14:
0A12  E8 0088			     call    s23
0A15  81 C6 2000		     add     si,2000h
0A19  E8 0081			     call    s23
0A1C  81 EE 1FB0		     sub     si,2000h-80
0A20  FE CE			     dec     dh
0A22  75 EE			     jnz     s14	     ; повторить

			     ;	 Сохранить
0A24			     s15:
0A24  BF 0E1Cr			     mov     di,offset crt_char_gen   ;	смещение
0A27  0E			     push    cs
0A28  07			     pop     es
0A29  83 ED 08			     sub     bp,8	     ; восстановить	начальный адрес
0A2C  8B F5			     mov     si,bp
0A2E  FC			     cld		     ; установить направление
0A2F  B0 00			     mov     al,0
0A31			     s16:
0A31  16			     push    ss
0A32  1F			     pop     ds
0A33  BA 0080			     mov     dx,128	     ; количество символов
0A36			     s17:
0A36  56			     push    si
0A37  57			     push    di
0A38  B9 0008			     mov     cx,8	     ; количество байт в	символе
0A3B  F3> A6			     repe    cmpsb	     ; сравнить
0A3D  5F			     pop     di
0A3E  5E			     pop     si
0A3F  74 1E			     jz	     s18	     ; если	признак = 0,символы		    +
			     сравнились
0A41  FE C0			     inc     al		     ; не сравнились
0A43  83 C7 08			     add     di,8	     ; следующий код точки
0A46  4A			     dec     dx		     ; - 1 из	счетчика
0A47  75 ED			     jnz     s17	     ; повторить


0A49  3C 00			     cmp     al,0
0A4B  74 12			     je	     s18    ; переход, если все сканировано, но	    +
			     символ
						    ; не найден
0A4D  2B C0			     sub     ax,ax
0A4F  8E D8			     mov     ds,ax	     ; установить адресацию вектора
				     assume  ds:abs0
0A51  C4 3E 007Cr		     les     di,ext_ptr
0A55  8C C0			     mov     ax,es
0A57  0B C7			     or	     ax,di
0A59  74 04			     jz	     s18
0A5B  B0 80			     mov     al,128	     ; начало второй части
0A5D  EB D2			     jmp     short s16	     ; вернуться и повторить
				     assume  ds:data

0A5F			     s18:
0A5F  83 C4 08			     add     sp,8
0A62  E9 FB10			     jmp     video_return
0A65			     graphics_read   endp

			     ;---------------------------------
			     ;
			     ;	 Эта	программа заполняет регистр BX	двумя младшими +
			     битами
			     ; регистра	BL.
			     ;
			     ;	 ВХОД
			     ;		BL - используемый цвет (младшие два бита).
			     ;
			     ;	 ВЫХОД
			     ;		BX - используемый цвет (восемь повторений двух  +
			     битов	цвета).
			     ;
			     ;---------------------------------
0A65			     s19     proc    near
0A65  80 E3 03			     and     bl,3	     ; выделить	биты цвета
0A68  8A C3			     mov     al,bl	     ; переписать в AL
0A6A  51			     push    cx		     ; сохранить регистр
0A6B  B9 0003			     mov     cx,3	     ; количество повторений
0A6E			     s20:
0A6E  D0 E0			     sal     al,1
0A70  D0 E0			     sal     al,1	     ; сдвиг влево на 2
0A72  0A D8			     or	     bl,al	     ; в BL накапливается	результат
0A74  E2 F8			     loop    s20	     ; цикл
0A76  8A FB			     mov     bh,bl	     ; заполнить
0A78  59			     pop     cx
0A79  C3			     ret		     ; все выполнено
0A7A			     s19     endp
			     ;--------------------------------------
			     ;
			     ;	 Эта	программа берет байт в AL и	удваивает все биты, +
			     превращая
			     ; 8 бит	в 16 бит. Результат помещается в AX.
			     ;--------------------------------------
0A7A			     s21     proc    near
0A7A  52			     push    dx		     ; сохранить регистры
0A7B  51			     push    cx
0A7C  53			     push    bx
0A7D  BA 0000			     mov     dx,0	     ; результат удвоения
0A80  B9 0001			     mov     cx,1	     ; маска
0A83			     s22:
0A83  8B D8			     mov     bx,ax
0A85  23 D9			     and     bx,cx	     ; выделение бита
0A87  0B D3			     or	     dx,bx	     ; накапливание	результата
0A89  D1 E0			     shl     ax,1
0A8B  D1 E1			     shl     cx,1	     ; сдвинуть	базу и маску на 1
0A8D  8B D8			     mov     bx,ax
0A8F  23 D9			     and     bx,cx
0A91  0B D3			     or	     dx,bx
0A93  D1 E1			     shl     cx,1    ; сдиг	маски, для выделения следующего  +
			     бита
0A95  73 EC			     jnc     s22
0A97  8B C2			     mov     ax,dx
0A99  5B			     pop     bx		     ; восстановить	регистры
0A9A  59			     pop     cx
0A9B  5A			     pop     dx
0A9C  C3			     ret		     ; к выходу из прерывания
0A9D			     s21     endp

			     ;----------------------------------
			     ;
			     ;	 Эта	программа преобразовывает двух-битовое	    +
			     представление	точки
			     ; (C1,C0) в однобитовое
			     ; (C1,C0) к однобитовому.
			     ;
			     ;----------------------------------
0A9D			     s23     proc    near
0A9D  8A 24			     mov     ah,byte ptr [si]	; получить первый	байт
0A9F  8A 44 01			     mov     al,byte ptr [si+1]	  ; получить второй байт
0AA2  B9 C000			     mov     cx,0c000h	     ; 2 бита маски
0AA5  B2 00			     mov     dl,0	     ; регистр результата
0AA7			     s24:
0AA7  85 C1			     test    ax,cx	     ; проверка	2 младших бит	AX на	0
0AA9  F8			     clc		     ; сбросить	признак переноса	CF
0AAA  74 01			     jz	     s25	     ; переход если 0
0AAC  F9			     stc		     ; нет -	установить CF
0AAD  D0 D2		     s25:    rcl     dl,1	     ; циклический сдвиг
0AAF  D1 E9			     shr     cx,1
0AB1  D1 E9			     shr     cx,1
0AB3  73 F2			     jnc     s24	     ; повторить, если CF=1
0AB5  88 56 00			     mov byte ptr [bp],dl    ; запомнить результат
0AB8  45			     inc     bp
0AB9  C3			     ret		     ; к выходу из прерывания
0ABA			     s23     endp

			     ;---------------------------------------
			     ;
			     ;	 Эта	программа определает	положение курсора	    +
			     относительно	 мяти и
			     ; начала буфера в режиме графики					    +
			     /символ
			     ;
			     ;	 ВЫХОД
			     ;		AX  содержит смещение курсора
			     ;
			     ;-----------------------------------------
0ABA			     s26     proc    near
0ABA  A1 0050r			     mov     ax,cursor_posn  ; получить	текущее положение	    +
			     курсора
0ABD			     graph_posn	     label   near
0ABD  53			     push    bx		     ; сохранить регистр
0ABE  8B D8			     mov     bx,ax	     ; сохранить текущее положение	    +
			     курсора
0AC0  8A C4			     mov     al,ah	     ; строка
0AC2  F6 26 004Ar		     mul     byte ptr crt_cols	 ; умножить на байт/колонку
0AC6  D1 E0			     shl     ax,1	     ; умножить	на 4
0AC8  D1 E0			     shl     ax,1
0ACA  2A FF			     sub     bh,bh	     ; выделить	значение колонки
0ACC  03 C3			     add     ax,bx	     ; определить смещение
0ACE  5B			     pop     bx
0ACF  C3			     ret		     ; к выходу из прерывания
0AD0			     s26     endp

			     ;----------------------------------------
			     ;
			     ;	 Записать телетайп (INT	10H, AH=14)
			     ;
			     ;	 Эта	программа выводит символ в буфер ЭЛИ с		    +
			     одновременной	уста-
			     ; новкой позиции курсора и передвижением	курсора на +
			     экране.
			     ;	 После записи символа	в последнюю позицию строки   +
			     выполняется ав-
			     ; томатический	переход на новую строку. Если		    +
			     страница экрана за-
			     ; полнена (позиция курсора 24,79/39),	выполняется		    +
			     перемещение экрана
			     ; на одну строку вверх. Освободившаяся строка		    +
			     заполняется значением
			     ; атрибута	символа (для алфавитно-цифрового режима). +
			     Для графики цвет=00
			     ; После записи очередного символа курсор	установлен+
			     в	следующую позицию.
			     ;
			     ;	 ВХОД
			     ;		AL - код выводимого символа,
			     ;		BL - цвет переднего плана для графики.
			     ;
			     ;----------------------------------------

				     assume  cs:code,ds:data
0AD0			     write_tty	     proc    near
0AD0  50			     push    ax		     ; сохранить регистры
0AD1  50			     push    ax
0AD2  B4 03			     mov     ah,3
0AD4  CD 10			     int     10h	     ; считать положение текущего	    +
			     курсора
0AD6  58			     pop     ax		     ; восстановить	символ

			     ;	 DX содержит текущую позицию курсора

0AD7  3C 08			     cmp     al,8	     ; есть	возврат на одну позицию ?
0AD9  74 59			     je	     u8		     ; возврат на одну позицию
0ADB  3C 0D			     cmp     al,0dh	     ; есть	возврат каретки ?
0ADD  74 5E			     je	     u9		     ; возврат каретки
0ADF  3C 0A			     cmp     al,0ah	     ; есть	граница поля	?
0AE1  74 5E			     je	     u10	     ; граница поля
0AE3  3C 07			     cmp     al,07h	     ; звуковой	сигнал ?
0AE5  74 61			     je	     u11	     ; звуковой	сигнал

			     ;	 Запись символа на экран

0AE7  8A 3E 0062r		     mov     bh,active_page
0AEB  B4 0A			     mov     ah,10	     ; запись символа без атрибута
0AED  B9 0001			     mov     cx,1
0AF0  CD 10			     int     10h

			     ;	 Положение курсора для следующего символа

0AF2  FE C2			     inc     dl
0AF4  3A 16 004Ar		     cmp     dl,byte ptr crt_cols
0AF8  75 36			     jnz     u7		     ; переход к установке курсора
0AFA  B2 00			     mov     dl,0
0AFC  80 FE 18			     cmp     dh,24	     ; проверка	граничной строки
0AFF  75 2D			     jnz     u6		     ; установить курсор

			     ;	 Сдвиг экрана
0B01			     u1:

0B01  B4 02			     mov     ah,2
0B03  B7 00			     mov     bh,0
0B05  CD 10			     int     10h	     ; установить курсор


0B07  A0 0049r			     mov     al,crt_mode     ; получить	текущий режим
0B0A  3C 04			     cmp     al,4
0B0C  72 06			     jc	     u2		     ; считывание курсора
0B0E  3C 07			     cmp     al,7
0B10  B7 00			     mov     bh,0	     ; цвет	заднего плана
0B12  75 06			     jne     u3

0B14			     u2:			     ; считывание курсора
0B14  B4 08			     mov     ah,8
0B16  CD 10			     int     10h	; считать символ/атрибут текущего	    +
			     курсора
0B18  8A FC			     mov     bh,ah	     ; запомнить в BH

			     ;	 Перемещение	экрана на одну строку	вверх

0B1A			     u3:
0B1A  B8 0601			     mov     ax,601h
0B1D  B9 0000			     mov     cx,0	     ; верхний левый угол
0B20  B6 18			     mov     dh,24	     ; координаты нижнего правого
0B22  8A 16 004Ar		     mov     dl,byte ptr crt_cols    ; угла
0B26  FE CA			     dec     dl
0B28			     u4:
0B28  CD 10			     int     10h

			     ;	 Выход из прерывания

0B2A			     u5:
0B2A  58			     pop     ax		     ; восстановить	символ
0B2B  E9 FA47			     jmp     video_return    ; возврат к программе

0B2E			     u6:			     ; установить курсор
0B2E  FE C6			     inc     dh		     ; следующая строка
0B30			     u7:			     ; установить курсор
0B30  B4 02			     mov     ah,2
0B32  EB F4			     jmp     short u4	     ; установить новый курсор

			     ;	 Сдвиг курсора на	одну позицию	влево

0B34			     u8:
0B34  80 FA 00			     cmp     dl,0
0B37  74 F7			     je	     u7		     ; установить курсор
0B39  FE CA			     dec     dl		     ; нет -	снова его передать
0B3B  EB F3			     jmp     short u7

			     ;	 Перемещение	курсора в начало строки

0B3D			     u9:
0B3D  B2 00			     mov     dl,0
0B3F  EB EF			     jmp     short u7	     ; установить курсор

			     ;	 Перемещение	курсора на следующую строку

0B41			     u10:
0B41  80 FE 18			     cmp     dh,24	     ; последняя строка экрана
0B44  75 E8			     jne     u6		     ; да - сдвиг экрана
0B46  EB B9			     jmp     short u1	     ; нет -	снова установить	курсор

			     ;	 Звуковой сигнал

0B48			     u11:
0B48  B3 02			     mov     bl,2	     ; уст длительность звукового	    +
			     сигнала
0B4A  E8 0000e			     call    beep	     ; звук
0B4D  EB DB			     jmp     short u5	     ; возврат
0B4F			     write_tty	     endp

			     ;
			     ;----------------------------------------
			     ;
			     ;	 Эта	программа считывает положение светового пера.
			     ; Проверяется переключатель и триггер светового	    +
			     пера. Если	бит 1 ре-
			     ; гистра состояния (порт 3DA)=1, то триггер установлен.  +
			     Если бит 2 порта
			     ; 3DA=0, то установлен	переключатель.
			     ;	 Порты 3BD	и 3DC используются	для установки и сброса   +
			     триггера и пере-
			     ; ключателя светового пера.
			     ;	 В регистрах R16 и R17 контроллера содержится адрес    +
			     координат	пера
			     ; относительно	начала буфера дисплея.
			     ;	 Если триггер и переключатель установлены, то	    +
			     программа	определяет
			     ; положение светового пера, в противном случае,	    +
			     возврат без выдачи
			     ; информации.
			     ;
			     ;	 В ППЭВМ ЕС1841	функция не поддерживается
			     ;-------------------------------------------------




				     assume  cs:code,ds:data

			     ;	 Таблица	поправок для	получения фактических	    +
			     координат	светового пера

0B4F			     v1	     label   byte
0B4F  03 03 05 05 03 03	03+	     db	     3,3,5,5,3,3,3,4
      04

0B57			     read_lpen	     proc    near


0B57  B4 00			     mov     ah,0	     ; код возврата,	если перо не		    +
			     включено
0B59  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес 6845
0B5D  83 C2 06			     add     dx,6	     ; указать регистр состояния
0B60  EC			     in	     al,dx	     ; получить	регистр состояния
0B61  A8 04			     test    al,4	     ; проверить переключатель		    +
			     светового	пера
0B63  75 78			     jnz     v6		     ; не установлено, возврат

			     ;	 Проверка триггера светового пера

0B65  A8 02			     test    al,2	     ; проверить триггер светового пера
0B67  74 7E			     jz	     v7		     ; возврат без сброса триггера

			     ;	 Триггер	был установлен, считать значение в	AH

0B69  B4 10			     mov     ah,16	     ; уст регистры светового пера 6845

			     ;	 Ввод регистров, указанных AH и преобразование в	    +
			     строки колонки в DX

0B6B  8B 16 0063r		     mov     dx,addr_6845
0B6F  8A C4			     mov     al,ah
0B71  EE			     out     dx,al	     ; вывести в порт
0B72  42			     inc     dx
0B73  EC			     in	     al,dx	     ; получить	значение из порта
0B74  8A E8			     mov     ch,al	     ; сохранить его в CX
0B76  4A			     dec     dx		     ; регистр адреса
0B77  FE C4			     inc     ah
0B79  8A C4			     mov     al,ah	     ; второй регистр данных
0B7B  EE			     out     dx,al
0B7C  42			     inc     dx
0B7D  EC			     in	     al,dx	     ; получить	второе значение данных
0B7E  8A E5			     mov     ah,ch	     ; AX содержит координаты	светового  +
			     пера


0B80  8A 1E 0049r		     mov     bl,crt_mode
0B84  2A FF			     sub     bh,bh	     ; выделить	значение режима в BX
0B86  2E: 8A 9F	0B4Fr		     mov     bl,cs:v1[bx]    ; значение	поправки
0B8B  2B C3			     sub     ax,bx
0B8D  2B 06 004Er		     sub     ax,crt_start

0B91  79 03			     jns     v2
0B93  B8 0000			     mov     ax,0	     ; поместить 0

			     ;	 Определить режим

0B96			     v2:
0B96  B1 03			     mov     cl,3	     ; установить счетчик
0B98  80 3E 0049r 04		     cmp     crt_mode,4	     ; определить, режим	графики или
							     ; альфа
0B9D  72 2A			     jb	     v4		     ; альфа-перо
0B9F  80 3E 0049r 07		     cmp     crt_mode,7
0BA4  74 23			     je	     v4		     ; альфа-перо

			     ;	 Графический	режим

0BA6  B2 28			     mov     dl,40	     ; делитель	для графики
0BA8  F6 F2			     div     dl	     ; определение строки (AL)	и колонки (AH)
							     ; пределы AL 0-99, AH 0-39

			     ;	 Определение	положения строки	для графики

0BAA  8A E8			     mov     ch,al	     ; сохранить значение строки	в CH
0BAC  02 ED			     add     ch,ch	     ; умножить	на 2 четно/нечетное поле
0BAE  8A DC			     mov     bl,ah	     ; значение	колонки в BX
0BB0  2A FF			     sub     bh,bh	     ; умножить	на 8 для среднего		    +
			     результата
0BB2  80 3E 0049r 06		     cmp     crt_mode,6	     ; определить среднюю или наивысшую
							     ; разрешающую способность
0BB7  75 04			     jne     v3		     ; не наивысшая разрешающая		    +
			     способность
0BB9  B1 04			     mov     cl,4     ;	сдвинуть значение наивысшей		    +
			     разрешающей
						      ;	способности
0BBB  D0 E4			     sal     ah,1    ; сдвиг на 1 разряд влево значения	    +
			     колонки
0BBD			     v3:			     ; не наивысшая разрешающая		    +
			     способность
0BBD  D3 E3			     shl     bx,cl   ; умножить	на 16	для наивысшей		    +
			     разрешающей
						     ; способности

			     ;	 Определение	положения символа для альфа

0BBF  8A D4			     mov     dl,ah	     ; значение	колонки для возврата
0BC1  8A F0			     mov     dh,al	     ; значение	строки
0BC3  D0 EE			     shr     dh,1	     ; делить на 4
0BC5  D0 EE			     shr     dh,1	     ; для значения в пределах 0-24
0BC7  EB 12			     jmp     short v5	     ; возврат светового пера

			     ;	 Режим альфа светового пера

0BC9			     v4:			     ; альфа светового пера
0BC9  F6 36 004Ar		     div     byte ptr crt_cols	; строка,	колонка
0BCD  8A F0			     mov     dh,al	     ; строка в DH
0BCF  8A D4			     mov     dl,ah	     ; колонка в DL
0BD1  D2 E0			     sal     al,cl	     ; умножение строк на 8
0BD3  8A E8			     mov     ch,al
0BD5  8A DC			     mov     bl,ah
0BD7  32 FF			     xor     bh,bh
0BD9  D3 E3			     sal     bx,cl
0BDB			     v5:
0BDB  B4 01			     mov     ah,1	     ; указать, что все установлено
0BDD			     v6:
0BDD  52			     push    dx		     ; сохранить значение возврата
0BDE  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес
0BE2  83 C2 07			     add     dx,7
0BE5  EE			     out     dx,al	     ; вывод
0BE6  5A			     pop     dx		     ; восстановить	значение
0BE7			     v7:
0BE7  5F			     pop     di		      ;	восстановить регистры
0BE8  5E			     pop     si
0BE9  1F			     pop     ds
0BEA  1F			     pop     ds
0BEB  1F			     pop     ds
0BEC  1F			     pop     ds
0BED  07			     pop     es
0BEE  CF			     iret
0BEF			     read_lpen	     endp

			     ;--- int 12 ------------------------------------
			     ;
			     ;	  Программа определения размера памяти.
			     ;
			     ;	  Эта программа передает в	регистр AX об'ем памяти в +
			     Кбайтах.
			     ;
			     ;-----------------------------------------

				     assume  cs:code,ds:data
0BEF			     memory_size_determine   proc    far
0BEF  FB			     sti		     ; установить бит разрешения		    +
			     прерывания
0BF0  1E			     push    ds		     ; сохранить сегмент
0BF1  B8 0040			     mov     ax,dat	     ; установить адресацию
0BF4  8E D8			     mov     ds,ax
0BF6  A1 0013r			     mov     ax,memory_size  ; получить	значение размера	памяти
0BF9  1F			     pop     ds		     ; восстановить	сегмент
0BFA  CF			     iret		     ; возврат из прерывания
0BFB			     memory_size_determine   endp

			     ;--- int 11-------------------------------
			     ;
			     ;	  Программа определения состава оборудования.
			     ;
			     ;	 Эта	программа передает в регистр AX конфигурацию   +
			     системы.
			     ;
			     ;	 Разряды	регистра AX имеют следующее значение:
			     ;	 0	 - загрузка системы с НГМД;
			     ;	 5,4	 - тип подключенного ЭЛИ и режим его работы:
			     ;		   00 -	не используется;
			     ;		   01 -	40х25,	черно-белый режим цветного		    +
			     графического
			     ;			ЭЛИ;
			     ;		   10 -	80х25,	черно-белый режим цветного		    +
			     графического
			     ;			ЭЛИ;
			     ;		   11 -	80х25,	черно-белый режим монохромного ЭЛИ.
			     ;	 7,6	 - количество	НГМД;
			     ;	 11,10,9 - количество	адаптеров стыка С2;
			     ;	 12	 - адаптер игр;
			     ;	 15,14	 - количество	печатающих устройств.
			     ;	 Разряды	6 и 7 устанавливаются только в том случае,  +
			     если
			     ; разряд 0 установлен в "1".
			     ;
			     ;----------------------------------------------

				     assume  cs:code,ds:data
0BFB			     equipment	     proc    far
0BFB  FB			     sti		     ; установить признак разрешения	    +
			     прерывания
0BFC  1E			     push    ds		     ; сохранить сегмент
0BFD  B8 0040			     mov     ax,dat	     ; установить адресацию
0C00  8E D8			     mov     ds,ax
0C02  A1 0010r			     mov     ax,equip_flag   ; получить	конфигурацию системы
0C05  1F			     pop     ds		     ; восстановить	сегмент
0C06  CF			     iret		     ; возврат из прерывания
0C07			     equipment	     endp

			     ;****************************************
			     ;
			     ;	 Загрузка знакогенератора
			     ;
			     ;****************************************

0C07			     bct     proc    near
0C07  B8 DC00			     mov     ax,0dc00h
0C0A  8E C0			     mov     es,ax
0C0C  B9 1400			     mov     cx,1400h
0C0F  BA 03B8			     mov     dx,3b8h
0C12  33 C0			     xor     ax,ax
0C14  EE			     out     dx,al
0C15  33 FF			     xor     di,di
0C17  FC			     cld
0C18  F3> AB			     rep     stosw
0C1A  BE 0E1Cr			     mov     si,offset crt_char_gen
0C1D  33 FF			     xor     di,di
0C1F  B1 80			     mov     cl,128
0C21			     bct1:
0C21  B3 08			     mov     bl,8
0C23  2E		     bct2:   db	     02eh	     ;cs:  segment prefix (not handled by Turbo	Assembler)
0C24  AC			     lodsb
0C25  AB			     stosw
0C26  4B			     dec     bx
0C27  75 FA			     jnz     bct2
0C29  83 C7 10			     add     di,10h
0C2C  E2 F3			     loop    bct1
0C2E  B0 01			     mov     al, 1
0C30  EE			     out     dx, al
			     ;CGA loader
0C31  B8 B800				     mov     ax, 0B800h
0C34  8E C0				     mov     es, ax
0C36  B0 01				     mov     al, 1
0C38  B2 DF				     mov     dl, 0DFh	     ;leading "3" (3DFh) already set before
0C3A  EE				     out     dx, al
0C3B  B2 D8				     mov     dl, 0D8h
0C3D  B0 00				     mov     al, 0
0C3F  EE				     out     dx, al
0C40  33 FF				     xor     di, di
0C42  B9 0400				     mov     cx, 1024
0C45  BE 0E1Cr				     mov     si, offset	crt_char_gen
0C48  33 FF				     xor     di, di
0C4A  2E				     db	     02eh	     ;cs: segment prefix (not handled by Turbo Assembler)
0C4B  F3> A4				     rep movsb
0C4D  B0 09				     mov     al, 00001001b
0C4F  EE				     out     dx, al
0C50  B0 00				     mov     al,0
0C52  B2 DF				     mov     dl, 0DFh
0C54  EE				     out     dx, al
0C55  C3				     ret
0C56			     bct     endp

			     ;rc продолжение	обработчика ошибки теста памяти
0C56			     osh2:
0C56  BE 0C71r			     mov si,offset membank
0C59  B9 0004			     mov cx,4
0C5C  D1 EF			     shr di,1
0C5E  73 02			     jnc evn
0C60  03 F1			     add si,cx
0C62  E8 0000e		     evn:    call prt_str
0C65  BE 0000e			     mov     si,offset e1    ; установить адрес поля	сообщения
							     ; об ошибке
0C68  B9 0004			     mov     cx,e1l	     ; получить	счетчик поля	сообщения  +
			     об ошибке
0C6B  E8 0000e			     call    p_msg	     ; печать ошибки
0C6E  E9 0000e			     jmp     tst12	     ; переход к следующему тесту

0C71  20 28 30 29	     membank	     db	' (0)'		     ;rc для	теста памяти
0C75  20 28 31 29			     db	' (1)'

			     ;
			     ;	 Таблица	кодов русских маленьких букв (строчных)
			     ;
0C79			     rust    label   byte
0C79  1B 31 32 33 34 35	36+	     db	     1bh,'1234567890-='
      37 38 39 30 2D 3D


0C86  08 09			     db	     08h,09h
0C88  D9 E6 E3 DA D5 DD	D3+	     db	     0d9h,0e6h,0e3h,0dah,0d5h,0ddh,0d3h,0e8h
      E8

0C90  E9 D7 D6 ED 0D FF	E4+	     db	     0e9h,0d7h,0d6h,0edh,0dh,-1,0e4h,0ebh
      EB

0C98  D2 D0 DF E0 DE DB	D4+	     db	     0d2h,0d0h,0dfh,0e0h,0deh,0dbh,0d4h,';:'
      3B 3A

0CA1  D1 EE 5C EF E7 E1	DC+	     db	     0d1h,0eeh,5ch,0efh,0e7h,0e1h,0dch,0d8h
      D8

0CA9  E2 EC 2C 2E 2F E5	2A	     db	     0e2h,0ech,',./',0e5h,'*'

0CB0  FF 20 EA			     db	     -1,' ',0eah


0CB3			     k30     label   byte
0CB3  52 4F 50 51 4B 4C	4D	     db	     82,79,80,81,75,76,77

0CBA  47 48 49			     db	     71,72,73
			     ;---
0CBD  10 11 12 13 14 15	16+	     db	     16,17,18,19,20,21,22,23
      17

0CC5  18 19 1E 1F 20 21	22+	     db	     24,25,30,31,32,33,34,35
      23

0CCD  24 25 26 2C 2D 2E	2F+	     db	     36,37,38,44,45,46,47,48
      30

0CD5  31 32			     db	     49,50

			     ;	     Временный	обработчик прерываний стыка С2

0CD7			     rs232_io:
0CD7  B8 61F0				     mov     ax, 61F0h
0CDA  CF				     iret

0CDB			     int15h:
0CDB  F9				     stc
0CDC  B4 86				     mov     ah, 86h
0CDE  CA 0002				     retf    2

			     ;---
0CE1			     write_tty2:
0CE1  8A 3E 0062r			     mov     bh, ds:active_page
0CE5  E9 FDE8				     jmp     write_tty

0CE8			     f19a:
0CE8  42				     inc     dx
0CE9  B0 08				     mov     al, 8
0CEB  EE				     out     dx, al
0CEC  BA 03FE				     mov     dx, 3FEh
0CEF  EE				     out     dx, al
0CF0  B0 A4				     mov     al, 0A4h
0CF2  E6 21				     out     inta01, al
0CF4  8B C6				     mov     ax, si
0CF6  B1 03				     mov     cl, 3
0CF8  E9 0000e				     jmp     f19b

0CFB			     f20a:
0CFB  B0 80				     mov     al, 80h
0CFD  E6 A0				     out     0A0h, al
0CFF  B0 BC				     mov     al, 0BCh
0D01  E6 21				     out     21h, al
0D03  E9 0000e				     jmp     f20b
			     ;
0D06  50		     dummm_return:   push    ax
0D07  B0 20				     mov     al,20h
0D09  E6 20				     out     20h,al
0D0B  58				     pop     ax
0D0C  CF				     iret

0D0D  9B*(00)				     db	155 dup(0)
			     include 866tbl.inc
			     ;
			     ;	 Таблица	кодов русских маленьких букв (строчных)
			     ;
0DA8			     low866  label   byte
0DA8  1B 31 32 33 34 35	36+	     db	     1bh,'1234567890-='
      37 38 39 30 2D 3D
0DB5  08 09			     db	     08h,09h
			     ;866 кодировка, строчные,	сканкоды
0DB7  A9 E6 E3 AA A5 AD	A3+	     db	     0A9h,0E6h,0E3h,0AAh,0A5h,0ADh,0A3h,0E8h ;'йцукенгш'
      E8
0DBF  E9 A7 A6 ED 0D FF	E4+	     db	     0E9h,0A7h,0A6h,0EDh,00Dh,0FFh,0E4h,0EBh ;'щзжэ',0dh,-1,'фы'
      EB
0DC7  A2 A0 AF E0 AE AB	A4+	     db	     0A2h,0A0h,0AFh,0E0h,0AEh,0ABh,0A4h,03Bh ;'вапролд',';'
      3B
0DCF  3A A1 EE 5C EF E7	E1+	     db	     03Ah,0A1h,0EEh,05Ch,0EFh,0E7h,0E1h,0ACh ;':бю',5ch,'ячсм'
      AC
0DD7  A8 E2 EC 2C 2E 2F	E5+	     db	     0A8h,0E2h,0ECh,02Ch,02Eh,02Fh,0E5h,02Ah ;'ить',',./','х*'
      2A
0DDF  FF 20 EA			     db	     0FFh,020h,0EAh			     ;-1,' ъ'

			     ;
			     ;	 Таблица	кодов русских больших букв (заглавных)
			     ;
0DE2			     up866   label   byte
0DE2  1B 21 40 FC 24 25	5E+	     db	     1bh,'!@',0FCH,'$',37,05eh,'&*()_+'	     ;RCgoff поставлен	знак    +
      26 2A 28 29 5F 2B	     номера
0DEF  08 00			     db	     08h,0
			     ;866 кодировка, заглавные, сканкоды
0DF1  89 96 93 8A 85 8D	83+	     db	     089h,096h,093h,08Ah,085h,08Dh,083h,098h ;'ЙЦУКЕНГШ'
      98
0DF9  99 87 86 9D 0D FF	94+	     db	     099h,087h,086h,09Dh,00Dh,0FFh,094h,09Bh ;'ЩЗЖЭ',0dh,-1,'ФЫ'
      9B
0E01  82 80 8F 90 8E 8B	84+	     db	     082h,080h,08Fh,090h,08Eh,08Bh,084h,027h ;'ВАПРОЛД',27h
      27
0E09  22 81 9E 7C 9F 97	91+	     db	     022h,081h,09Eh,07Ch,09Fh,097h,091h,08Ch ;'"БЮ',7ch,'ЯЧСМ'
      8C
0E11  88 92 9C 3C 3E 3F	95+	     db	     088h,092h,09Ch,03Ch,03Eh,03Fh,095h,000h ;'ИТЬ','<>?','Х',0
      00
0E19  FF 20 9A			     db	     0FFh,020h,09Ah			     ;-1,' Ъ'


			     ;**************************************
			     ;
			     ;	 Знакогенератор графический 320х200 и 640х200
			     ;
			     ;***************************************



0E1C			     crt_char_gen  label  byte
0E1C  00 00 00 00 00 00	00+	     db	     000h,000h,000h,000h,000h,000h,000h,000h ;d_00
      00

0E24  7E 81 A5 81 BD 99	81+	     db	     07eh,081h,0a5h,081h,0bdh,099h,081h,07eh ;d_01
      7E

0E2C  7E FF DB FF C3 E7	FF+	     db	     07eh,0ffh,0dbh,0ffh,0c3h,0e7h,0ffh,07eh ;d_02
      7E

0E34  6C FE FE FE 7C 38	10+	     db	     06ch,0feh,0feh,0feh,07ch,038h,010h,000h ;d_03
      00

0E3C  10 38 7C FE 7C 38	10+	     db	     010h,038h,07ch,0feh,07ch,038h,010h,000h ;d_04
      00

0E44  38 7C 38 FE FE 7C	38+	     db	     038h,07ch,038h,0feh,0feh,07ch,038h,07ch ;d_05
      7C

0E4C  10 10 38 7C FE 7C	38+	     db	     010h,010h,038h,07ch,0feh,07ch,038h,07ch ;d_06
      7C

0E54  00 00 18 3C 3C 18	00+	     db	     000h,000h,018h,03ch,03ch,018h,000h,000h ;d_07
      00

0E5C  FF FF E7 C3 C3 E7	FF+	     db	     0ffh,0ffh,0e7h,0c3h,0c3h,0e7h,0ffh,0ffh ;d_08
      FF

0E64  00 3C 66 42 42 66	3C+	     db	     000h,03ch,066h,042h,042h,066h,03ch,000h ;d_09
      00

0E6C  FF C3 99 BD BD 99	C3+	     db	     0ffh,0c3h,099h,0bdh,0bdh,099h,0c3h,0ffh ;d_0a
      FF

0E74  0F 07 0F 7D CC CC	CC+	     db	     00fh,007h,00fh,07dh,0cch,0cch,0cch,078h ;d_0b
      78

0E7C  3C 66 66 66 3C 18	7E+	     db	     03ch,066h,066h,066h,03ch,018h,07eh,018h ;d_0c
      18

0E84  3F 33 3F 30 30 70	F0+	     db	     03fh,033h,03fh,030h,030h,070h,0f0h,0e0h ;d_0d
      E0

0E8C  7F 63 7F 63 63 67	E6+	     db	     07fh,063h,07fh,063h,063h,067h,0e6h,0c0h ;d_0e
      C0

0E94  99 5A 3C E7 E7 3C	5A+	     db	     099h,05ah,03ch,0e7h,0e7h,03ch,05ah,099h ;d_0f
      99


0E9C  80 E0 F8 FE F8 E0	80+	     db	     080h,0e0h,0f8h,0feh,0f8h,0e0h,080h,000h ;d_10
      00

0EA4  02 0E 3E FE 3E 0E	02+	     db	     002h,00eh,03eh,0feh,03eh,00eh,002h,000h ;d_11
      00

0EAC  18 3C 7E 18 18 7E	3C+	     db	     018h,03ch,07eh,018h,018h,07eh,03ch,018h ;d_12
      18

0EB4  66 66 66 66 66 00	66+	     db	     066h,066h,066h,066h,066h,000h,066h,000h ;d_13
      00

0EBC  7F DB DB 7B 1B 1B	1B+	     db	     07fh,0dbh,0dbh,07bh,01bh,01bh,01bh,000h ;d_14
      00

0EC4  3E 63 38 6C 6C 38	CC+	     db	     03eh,063h,038h,06ch,06ch,038h,0cch,078h ;d_15
      78

0ECC  00 00 00 00 7E 7E	7E+	     db	     000h,000h,000h,000h,07eh,07eh,07eh,000h ;d_16
      00

0ED4  18 3C 7E 18 7E 3C	18+	     db	     018h,03ch,07eh,018h,07eh,03ch,018h,0ffh ;d_17
      FF

0EDC  18 3C 7E 18 18 18	18+	     db	     018h,03ch,07eh,018h,018h,018h,018h,000h ;d_18
      00

0EE4  18 18 18 18 7E 3C	18+	     db	     018h,018h,018h,018h,07eh,03ch,018h,000h ;d_19
      00

0EEC  00 18 0C FE 0C 18	00+	     db	     000h,018h,00ch,0feh,00ch,018h,000h,000h ;d_1a
      00

0EF4  00 30 60 FE 60 30	00+	     db	     000h,030h,060h,0feh,060h,030h,000h,000h ;d_1b
      00

0EFC  00 00 C0 C0 C0 FE	00+	     db	     000h,000h,0c0h,0c0h,0c0h,0feh,000h,000h ;d_1c
      00

0F04  00 24 66 FF 66 24	00+	     db	     000h,024h,066h,0ffh,066h,024h,000h,000h ;d_1d
      00

0F0C  00 18 3C 7E FF FF	00+	     db	     000h,018h,03ch,07eh,0ffh,0ffh,000h,000h ;d_1e
      00

0F14  00 FF FF 7E 3C 18	00+	     db	     000h,0ffh,0ffh,07eh,03ch,018h,000h,000h ;d_1f
      00


0F1C  00 00 00 00 00 00	00+	     db	     000h,000h,000h,000h,000h,000h,000h,000h ;sp d_20
      00

0F24  30 78 78 30 30 00	30+	     db	     030h,078h,078h,030h,030h,000h,030h,000h ;!	d_21
      00

0F2C  6C 6C 6C 00 00 00	00+	     db	     06ch,06ch,06ch,000h,000h,000h,000h,000h ;"d_22
      00

0F34  6C 6C FE 6C FE 6C	6C+	     db	     06ch,06ch,0feh,06ch,0feh,06ch,06ch,000h ;#	d_23
      00

0F3C  30 7C C0 78 0C F8	30+	     db	     030h,07ch,0c0h,078h,00ch,0f8h,030h,000h ;$	d_24
      00

0F44  00 C6 CC 18 30 66	C6+	     db	     000h,0c6h,0cch,018h,030h,066h,0c6h,000h ;per cent d_25
      00

0F4C  38 6C 38 76 DC CC	76+	     db	     038h,06ch,038h,076h,0dch,0cch,076h,000h ;&	d_26
      00

0F54  60 60 C0 00 00 00	00+	     db	     060h,060h,0c0h,000h,000h,000h,000h,000h ;'	d_27
      00

0F5C  18 30 60 60 60 30	18+	     db	     018h,030h,060h,060h,060h,030h,018h,000h ;(	d_28
      00

0F64  60 30 18 18 18 30	60+	     db	     060h,030h,018h,018h,018h,030h,060h,000h ;)	d_29
      00

0F6C  00 66 3C FF 3C 66	00+	     db	     000h,066h,03ch,0ffh,03ch,066h,000h,000h ;*	d_2a
      00

0F74  00 30 30 FC 30 30	00+	     db	     000h,030h,030h,0fch,030h,030h,000h,000h ;+	d_2b
      00

0F7C  00 00 00 00 00 30	30+	     db	     000h,000h,000h,000h,000h,030h,030h,060h ;,	d_2c
      60

0F84  00 00 00 FC 00 00	00+	     db	     000h,000h,000h,0fch,000h,000h,000h,000h ;-	d_2d
      00

0F8C  00 00 00 00 00 30	30+	     db	     000h,000h,000h,000h,000h,030h,030h,000h ;.	d_2e
      00

0F94  06 0C 18 30 60 C0	80+	     db	     006h,00ch,018h,030h,060h,0c0h,080h,000h ;/	d_2f
      00


0F9C  7C C6 CE DE F6 E6	7C+	     db	     07ch,0c6h,0ceh,0deh,0f6h,0e6h,07ch,000h ;0	d_30
      00

0FA4  30 70 30 30 30 30	FC+	     db	     030h,070h,030h,030h,030h,030h,0fch,000h ;1	d_31
      00

0FAC  78 CC 0C 38 60 CC	FC+	     db	     078h,0cch,00ch,038h,060h,0cch,0fch,000h ;2	d_32
      00

0FB4  78 CC 0C 38 0C CC	78+	     db	     078h,0cch,00ch,038h,00ch,0cch,078h,000h ;3	d_33
      00

0FBC  1C 3C 6C CC FE 0C	1E+	     db	     01ch,03ch,06ch,0cch,0feh,00ch,01eh,000h ;4	d_34
      00

0FC4  FC C0 F8 0C 0C CC	78+	     db	     0fch,0c0h,0f8h,00ch,00ch,0cch,078h,000h ;5	d_35
      00

0FCC  38 60 C0 F8 CC CC	78+	     db	     038h,060h,0c0h,0f8h,0cch,0cch,078h,000h ;6	d_36
      00

0FD4  FC CC 0C 18 30 30	30+	     db	     0fch,0cch,00ch,018h,030h,030h,030h,000h ;7	d_37
      00

0FDC  78 CC CC 78 CC CC	78+	     db	     078h,0cch,0cch,078h,0cch,0cch,078h,000h ;8	d_38
      00

0FE4  78 CC CC 7C 0C 18	70+	     db	     078h,0cch,0cch,07ch,00ch,018h,070h,000h ;9	d_39
      00

0FEC  00 30 30 00 00 30	30+	     db	     000h,030h,030h,000h,000h,030h,030h,000h ;:	d_3a
      00

0FF4  00 30 30 00 00 30	30+	     db	     000h,030h,030h,000h,000h,030h,030h,060h ;;	d_3b
      60

0FFC  18 30 60 C0 60 30	18+	     db	     018h,030h,060h,0c0h,060h,030h,018h,000h ;<	d_3c
      00

1004  00 00 FC 00 00 FC	00+	     db	     000h,000h,0fch,000h,000h,0fch,000h,000h ;=	d_3d
      00

100C  60 30 18 0C 18 30	60+	     db	     060h,030h,018h,00ch,018h,030h,060h,000h ;>	d_3e
      00

1014  78 CC 0C 18 30 00	30+	     db	     078h,0cch,00ch,018h,030h,000h,030h,000h ;?	d_3f
      00


101C  7C C6 DE DE DE C0	78+	     db	     07ch,0c6h,0deh,0deh,0deh,0c0h,078h,000h ;@	d_40
      00

1024  30 78 CC CC FC CC	CC+	     db	     030h,078h,0cch,0cch,0fch,0cch,0cch,000h ;A	d_41
      00

102C  FC 66 66 7C 66 66	FC+	     db	     0fch,066h,066h,07ch,066h,066h,0fch,000h ;B	d_42
      00

1034  3C 66 C0 C0 C0 66	3C+	     db	     03ch,066h,0c0h,0c0h,0c0h,066h,03ch,000h ;C	d_43
      00

103C  F8 6C 66 66 66 6C	F8+	     db	     0f8h,06ch,066h,066h,066h,06ch,0f8h,000h ;D	d_44
      00

1044  FE 62 68 78 68 62	FE+	     db	     0feh,062h,068h,078h,068h,062h,0feh,000h ;E	d_45
      00

104C  FE 62 68 78 68 60	F0+	     db	     0feh,062h,068h,078h,068h,060h,0f0h,000h ;F	d_46
      00

1054  3C 66 C0 C0 CE 66	3E+	     db	     03ch,066h,0c0h,0c0h,0ceh,066h,03eh,000h ;G	d_47
      00

105C  CC CC CC FC CC CC	CC+	     db	     0cch,0cch,0cch,0fch,0cch,0cch,0cch,000h ;H	d_48
      00

1064  78 30 30 30 30 30	78+	     db	     078h,030h,030h,030h,030h,030h,078h,000h ;I	d_49
      00

106C  1E 0C 0C 0C CC CC	78+	     db	     01eh,00ch,00ch,00ch,0cch,0cch,078h,000h ;J	d_4a
      00

1074  E6 66 6C 78 6C 66	E6+	     db	     0e6h,066h,06ch,078h,06ch,066h,0e6h,000h ;K	d_4b
      00

107C  F0 60 60 60 62 66	FE+	     db	     0f0h,060h,060h,060h,062h,066h,0feh,000h ;L	d_4c
      00

1084  C6 EE FE FE D6 C6	C6+	     db	     0c6h,0eeh,0feh,0feh,0d6h,0c6h,0c6h,000h ;M	d_4d
      00

108C  C6 E6 F6 DE CE C6	C6+	     db	     0c6h,0e6h,0f6h,0deh,0ceh,0c6h,0c6h,000h ;N	d_4e
      00

1094  38 6C C6 C6 C6 6C	38+	     db	     038h,06ch,0c6h,0c6h,0c6h,06ch,038h,000h ;O	d_4f
      00


109C  FC 66 66 7C 60 60	F0+	     db	     0fch,066h,066h,07ch,060h,060h,0f0h,000h ;P	d_50
      00

10A4  78 CC CC CC DC 78	1C+	     db	     078h,0cch,0cch,0cch,0dch,078h,01ch,000h ;Q	d_51
      00

10AC  FC 66 66 7C 6C 66	E6+	     db	     0fch,066h,066h,07ch,06ch,066h,0e6h,000h ;R	d_52
      00

10B4  78 CC E0 70 1C CC	78+	     db	     078h,0cch,0e0h,070h,01ch,0cch,078h,000h ;S	d_53
      00

10BC  FC B4 30 30 30 30	78+	     db	     0fch,0b4h,030h,030h,030h,030h,078h,000h ;T	d_54
      00

10C4  CC CC CC CC CC CC	FC+	     db	     0cch,0cch,0cch,0cch,0cch,0cch,0fch,000h ;U	d_55
      00

10CC  CC CC CC CC CC 78	30+	     db	     0cch,0cch,0cch,0cch,0cch,078h,030h,000h ;V	d_56
      00

10D4  C6 C6 C6 D6 FE EE	C6+	     db	     0c6h,0c6h,0c6h,0d6h,0feh,0eeh,0c6h,000h ;W	d_57
      00

10DC  C6 C6 6C 38 38 6C	C6+	     db	     0c6h,0c6h,06ch,038h,038h,06ch,0c6h,000h ;X	d_58
      00

10E4  CC CC CC 78 30 30	78+	     db	     0cch,0cch,0cch,078h,030h,030h,078h,000h ;Y	d_59
      00

10EC  FE C6 8C 18 32 66	FE+	     db	     0feh,0c6h,08ch,018h,032h,066h,0feh,000h ;Z	d_5a
      00

10F4  78 60 60 60 60 60	78+	     db	     078h,060h,060h,060h,060h,060h,078h,000h ;(	d_5b
      00

10FC  C0 60 30 18 0C 06	02+	     db	     0c0h,060h,030h,018h,00ch,006h,002h,000h ;backslash
      00

1104  78 18 18 18 18 18	78+	     db	     078h,018h,018h,018h,018h,018h,078h,000h ;)	d_5d
      00

110C  10 38 6C C6 00 00	00+	     db	     010h,038h,06ch,0c6h,000h,000h,000h,000h ;cimpqumflex
      00

1114  00 00 00 00 00 00	00+	     db	     000h,000h,000h,000h,000h,000h,000h,0ffh ;_	d_5f
      FF


111C  30 30 18 00 00 00	00+	     db	     030h,030h,018h,000h,000h,000h,000h,000h ;	d_60
      00

1124  00 00 78 0C 7C CC	76+	     db	     000h,000h,078h,00ch,07ch,0cch,076h,000h ;lower case a
      00

112C  E0 60 60 7C 66 66	DC+	     db	     0e0h,060h,060h,07ch,066h,066h,0dch,000h ;b	d_62
      00

1134  00 00 78 CC C0 CC	78+	     db	     000h,000h,078h,0cch,0c0h,0cch,078h,000h ;c	d_63
      00

113C  1C 0C 0C 7C CC CC	76+	     db	     01ch,00ch,00ch,07ch,0cch,0cch,076h,000h ;d	d_64
      00

1144  00 00 78 CC FC C0	78+	     db	     000h,000h,078h,0cch,0fch,0c0h,078h,000h ;e	d_65
      00

114C  38 6C 60 F0 60 60	F0+	     db	     038h,06ch,060h,0f0h,060h,060h,0f0h,000h ;f	d_66
      00

1154  00 00 76 CC CC 7C	0C+	     db	     000h,000h,076h,0cch,0cch,07ch,00ch,0f8h ;g	d_67
      F8

115C  E0 60 6C 76 66 66	E6+	     db	     0e0h,060h,06ch,076h,066h,066h,0e6h,000h ;h	d_68
      00

1164  30 00 70 30 30 30	78+	     db	     030h,000h,070h,030h,030h,030h,078h,000h ;i	d_69
      00

116C  0C 00 0C 0C 0C CC	CC+	     db	     00ch,000h,00ch,00ch,00ch,0cch,0cch,078h ;j	d_6a
      78

1174  E0 60 66 6C 78 6C	E6+	     db	     0e0h,060h,066h,06ch,078h,06ch,0e6h,000h ;k	d_6b
      00

117C  70 30 30 30 30 30	78+	     db	     070h,030h,030h,030h,030h,030h,078h,000h ;l	d_6c
      00

1184  00 00 CC FE FE D6	C6+	     db	     000h,000h,0cch,0feh,0feh,0d6h,0c6h,000h ;m	d_6d
      00

118C  00 00 F8 CC CC CC	CC+	     db	     000h,000h,0f8h,0cch,0cch,0cch,0cch,000h ;n	d_6e
      00

1194  00 00 78 CC CC CC	78+	     db	     000h,000h,078h,0cch,0cch,0cch,078h,000h ;o	d_6f
      00


119C  00 00 DC 66 66 7C	60+	     db	     000h,000h,0dch,066h,066h,07ch,060h,0f0h ;p	d_70
      F0

11A4  00 00 76 CC CC 7C	0C+	     db	     000h,000h,076h,0cch,0cch,07ch,00ch,01eh ;q	d_71
      1E

11AC  00 00 DC 76 66 60	F0+	     db	     000h,000h,0dch,076h,066h,060h,0f0h,000h ;r	d_72
      00

11B4  00 00 7C C0 78 0C	F8+	     db	     000h,000h,07ch,0c0h,078h,00ch,0f8h,000h ;s	d_73
      00

11BC  10 30 7C 30 30 34	18+	     db	     010h,030h,07ch,030h,030h,034h,018h,000h ;t	d_74
      00

11C4  00 00 CC CC CC CC	76+	     db	     000h,000h,0cch,0cch,0cch,0cch,076h,000h ;u	d_75
      00

11CC  00 00 CC CC CC 78	30+	     db	     000h,000h,0cch,0cch,0cch,078h,030h,000h ;v	d_76
      00

11D4  00 00 C6 D6 FE FE	6C+	     db	     000h,000h,0c6h,0d6h,0feh,0feh,06ch,000h ;w	d_77
      00

11DC  00 00 C6 6C 38 6C	C6+	     db	     000h,000h,0c6h,06ch,038h,06ch,0c6h,000h ;x	d_78
      00

11E4  00 00 CC CC CC 7C	0C+	     db	     000h,000h,0cch,0cch,0cch,07ch,00ch,0f8h ;y	d_79
      F8

11EC  00 00 FC 98 30 64	FC+	     db	     000h,000h,0fch,098h,030h,064h,0fch,000h ;z	d_7a
      00

11F4  1C 30 30 E0 30 30	1C+	     db	     01ch,030h,030h,0e0h,030h,030h,01ch,000h ;	d_7b
      00

11FC  18 18 18 00 18 18	18+	     db	     018h,018h,018h,000h,018h,018h,018h,000h ;	d_7c
      00

1204  E0 30 30 1C 30 30	E0+	     db	     0e0h,030h,030h,01ch,030h,030h,0e0h,000h ;	d_7d
      00

120C  76 DC 00 00 00 00	00+	     db	     076h,0dch,000h,000h,000h,000h,000h,000h ;	d_7e
      00

1214  00 10 38 6C C6 C6	FE+	     db	     000h,010h,038h,06ch,0c6h,0c6h,0feh,000h ;delta d_7f
      00


			     ;---int 1a-------------------------------
			     ;
			     ;	 Программа установки-считывания времени суток
			     ;
			     ;	 Эта	программа обеспечивает выполнение двух	    +
			     функций, код которых
			     ; задается	в регистре AH:
			     ;	 AH=0 -	считать текущее состояние часов. После		    +
			     выполнения коман-
			     ; ды регистры CX	и DX содержат старшую и младшую	части  +
			     счетчика.
			     ;	 Если регистр AL содержит "0", то счет	идет в течение  +
			     одних
			     ; суток, при любом другом значении счет переходит на +
			     следующие
			     ; сутки;
			     ;
			     ;	 AH=1 -	записать текущее	состояние часов. Регистры	CX  +
			     и	DX
			     ; содержат	старшую и младшую части счетчика.
			     ;
			     ;------------------------------------------
				     assume  cs:code,ds:data
121C			     time_of_day     proc    far
121C  FB			     sti	     ; уст признак разрешения прерывания
121D  1E			     push    ds	     ; сохранить сегмент
121E  50			     push    ax	     ; сохранить параметры
121F  B8 0040			     mov     ax,dat
1222  8E D8			     mov     ds,ax
1224  58			     pop     ax
1225  0A E4			     or	     ah,ah   ; AH=0 ?
1227  74 07			     jz	     t2	 ; да, переход	к считыванию	текущего	    +
			     состояния
1229  FE CC			     dec     ah	     ; AH=1 ?
122B  74 16			     jz	     t3	 ; да, переход	к установке текущего		    +
			     состояния

122D			     t1:     ; Возврат из программы

122D  FB			     sti	     ; уст признак разрешения прерывания
122E  1F			     pop     ds	     ; возврат сегмента
122F  CF			     iret	     ; возврат к программе,вызвавшей		    +
			     процедуру

1230			     t2:     ; Считать текущее состояния	часов

1230  FA			     cli	     ; сбросить	признак разрешения		    +
			     прерывания
1231  A0 0070r			     mov     al,timer_ofl  ; считать в AL флажок перехода	на сле-
1234  C6 06 0070r 00		     mov     timer_ofl,0   ; дующие сутки и	сбросить его	в	    +
			     памяти
1239  8B 0E 006Er		     mov     cx,timer_high	     ; установить старшую и младшую
123D  8B 16 006Cr		     mov     dx,timer_low	     ; части счетчика
1241  EB EA			     jmp     short t1

1243			     t3:     ; Установить текущее состояние часов

1243  FA			     cli	     ; сброс признака разрешения	прерывания
1244  89 16 006Cr		     mov     timer_low,dx	     ; установить младшую и старшую
1248  89 0E 006Er		     mov     timer_high,cx	     ; части счетчика
124C  C6 06 0070r 00		     mov     timer_ofl,0     ; сброс флажка перехода	через сутки
1251  EB DA			     jmp     short t1	     ; возврат из программы отсчета	    +
			     времени
1253			     time_of_day     endp

			     ;-------int 08-------------------
			     ;
			     ;	 Программа обработки прерывания таймера КР580ВИ53    +
			     (INT 8H) об-
			     ; рабатывает прерывания, аппаратурно возникающие	от+
			     нулевого канала
			     ; таймера, на вход которого подаются сигналы с	    +
			     частотой 1,228 МГц,
			     ; делящиеся на 56263 для обеспечения 18,2	прерываний в	    +
			     секунду.
			     ;	 При	обработке прерывания	корректируется		    +
			     программный счетчик,
			     ; хранящийся в памяти по адресу 0046CH (младшая часть	    +
			     счетчика) и
			     ; адресу 0047EH (старшая часть счетчика)	и используемый +
			     для уста-
			     ; новки времени суток.
			     ;	 В функции программы входит коррекция счетчика,	    +
			     управляющего
			     ; двигателем НГМД. После обнуления счетчика		    +
			     двигатель	выключается.
			     ;	 Вектор 1CH дает возможность пользователю входить в+
			     заданную
			     ; программу с частотой прерывания таймера (18.2		    +
			     прерываний в секун-
			     ; ду). Для этого	в таблице векторов прерываний	по	    +
			     адресу 007CH
			     ; необходимо задать адрес пользовательской		    +
			     программы.
			     ;
			     ;---------------------------------------------------

1253			     timer_int	     proc    far
1253  FB			     sti	     ; уст признак разрешения прерывания
1254  1E			     push    ds
1255  50			     push    ax
1256  52			     push    dx
1257  B8 0040			     mov     ax,dat
125A  8E D8			     mov     ds,ax
125C  FF 06 006Cr		     inc     timer_low	  ; +1 к старшей части счетчика
1260  75 04			     jnz     t4
1262  FF 06 006Er		     inc     timer_high	  ; +1 к старшей части счетчика

1266			     t4:     ; Опрос счетчика = 24	часам

1266  83 3E 006Er 18		     cmp     timer_high,018h
126B  75 19			     jnz     t5
126D  81 3E 006Cr 00B0		     cmp     timer_low,0b0h
1273  75 11			     jnz     t5

			     ;	 Таймер исчерпал 24 часа

1275  C7 06 006Er 0000		     mov     timer_high,0   ; сброс старшей	и младшей частей
127B  C7 06 006Cr 0000		     mov     timer_low,0    ; счетчика и установка флажка пере-
1281  C6 06 0070r 01		     mov     timer_ofl,1    ; хода счета на следующие сутки

			     ;	 Выключение мотора НГМД, если счетчик управления   +
			     мотором
			     ; исчерпан

1286			     t5:
1286  FE 0E 0040r		     dec     motor_count
128A  75 0B			     jnz     t6		     ; переход, если	счетчик не		    +
			     установлен
128C  80 26 003Fr F0		     and     motor_status,0f0h
1291  B0 0C			     mov     al,0ch
1293  BA 03F2			     mov     dx,03f2h
1296  EE			     out     dx,al	     ; выключить мотор

1297			     t6:
1297  CD 1C			     int     1ch     ; передача	управления программе		    +
			     пользователя
1299  B0 20			     mov     al,eoi
129B  E6 20			     out     020h,al	    ; конец прерывания
129D  5A			     pop     dx
129E  58			     pop     ax
129F  1F			     pop     ds
12A0  CF			     iret		     ; возврат из прерывания
12A1			     timer_int	     endp
			     ;---------------------------------
			     ;
			     ;	 Эти	вектора передаются в область прерывания 8086	во+
			     время
			     ; включения питания.
			     ;
			     ;---------------------------------
12A1			     vector_table    label   word    ; таблица векторов прерываний

12A1  1253r			     dw	     offset timer_int	     ; прерывание 8
12A3  0000e			     dw	     offset kb_int	     ; прерывание 9
12A5  1301r			     dw	     offset dummy_return     ; прерывание А
12A7  0D06r			     dw	     offset dummm_return     ; прерывание B
12A9  0D06r			     dw	     offset dummm_return     ; прерывание C
12AB  1301r			     dw	     offset dummy_return     ; прерывание D
12AD  0305r			     dw	     offset disk_int	     ; прерывание E
12AF  1301r			     dw	     offset dummy_return     ; прерывание F
12B1  0413r			     dw	     offset video_io	     ; прерывание 10H
12B3  0BFBr			     dw	     offset equipment	     ; прерывание 11H
12B5  0BEFr			     dw	     offset memory_size_determine    ; прерывание 12H
12B7  0007r			     dw	     offset diskette_io	     ; прерывание 13H
12B9  0CD7r			     dw	     offset rs232_io	     ; прерывание  14H
12BB  0CDBr			     dw	     offset int15h	     ; int 15h (rc заглушка)
12BD  0000e			     dw	     offset keyboard_io	     ; прерывание 16H
12BF  0380r			     dw	     offset printer_io	     ; прерывание 17H
12C1  0000e			     dw	     offset start	     ; rc перывание 18h, поставил как в+
			     1841 перезагрузку
12C3  0000e			     dw	     offset boot_strap	     ; прерывание 19H
12C5  121Cr			     dw	     time_of_day     ; прерывание 1АH - время суток
12C7  1301r			     dw	     dummy_return    ; прерывание 1BH	- прерывание		    +
			     клавиатуры
12C9  1301r			     dw	     dummy_return    ; прерывание 1C - прерывание таймера
12CB  0452r			     dw	     video_parms     ; прерывание 1D - параметры видео
12CD  0375r			     dw	     offset  disk_base	 ;прерывание 1EH - параметры	НГМД
12CF  0000			     dw	     0		     ; 1FH - адрес	таблицы пользов.		    +
			     знакогенер. (не инициализируется)

12D1  30*(00)			     db	     30h dup (0)     ;rc для	того, чтобы не съехало при	    +
			     сокращении таблицы векторов
1301			     dummy_return:
1301  CF			     iret

			     ;---int 5----------------------
			     ;
			     ;	 Программа вывода на печать содержимого буфера	    +
			     ЭЛИ вызывается
			     ; одновременным нажатием клавиши ПЕЧ и клавиши	    +
			     переключения регист-
			     ; ров. Позиция курсора сохраняется до завершения	    +
			     процедуры	обработки
			     ; прерывания. Повторное	нажатие названных клавиш во +
			     время	обработки
			     ; прерывания игнорируется.
			     ;	 При	выполнении программы	в постоянно			    +
			     распределенной рабочей
			     ; области памяти по	адресу 0500H устанавливается	    +
			     следующая
			     ; информация:
			     ;	 0    -	содержимое буфера ЭЛИ еще	не выведено на	    +
			     печать, либо
			     ; вывод уже завершен;
			     ;	 1    -	в процессе вывода содержимого	буфера ЭЛИ на    +
			     печать;
			     ;	 255  -	при печати обнаружена ошибка.
			     ;-----------------------------------------------------

				     assume  cs:code,ds:xxdata

1302			     print_screen    proc    far
1302  FB			     sti		  ; уст признак разрешения прерывания
1303  1E			     push    ds
1304  50			     push    ax
1305  53			     push    bx
1306  51			     push    cx	  ; будет использоваться заглавная буква   +
			     для курсора
1307  52			     push    dx	  ; будет содержать текущее положение	    +
			     курсора
1308  B8 0050			     mov     ax,xxdat	     ; адрес 50
130B  8E D8			     mov     ds,ax
130D  80 3E 0000r 01		     cmp     status_byte,1   ; печать готова ?
1312  74 5F			     jz	     exit	     ; переход, если	печать готова
1314  C6 06 0000r 01		     mov     status_byte,1   ;
1319  B4 0F			     mov     ah,15	     ; требуется текущий режим экрана
131B  CD 10			     int     10h	     ; AL - режим,	AH - число	строк/колонок
							     ; BH - страница,выведенная на экран


			     ;*************************************8
			     ;
			     ;	 В этом месте:
			     ;			 AX - колонка, строка,
			     ;			 BH - номер отображаемой страницы.
			     ;
			     ;	 Стек содержит DS, AX, BX, CX, DX.
			     ;
			     ;			 AL - режим
			     ;
			     ;**************************************

131D  8A CC			     mov     cl,ah
131F  B5 19			     mov     ch,25
1321  E8 0055			     call    crlf
1324  51			     push    cx
1325  B4 03			     mov     ah,3
1327  CD 10			     int     10h
1329  59			     pop     cx
132A  52			     push    dx
132B  33 D2			     xor     dx,dx

			     ;**************************************
			     ;
			     ;	  Считывание знака, находящегося в текущей позиции+
			     курсора
			     ; и вывод на печать
			     ;
			     ;**************************************

132D  B4 02		     pri10:  mov     ah,2
132F  CD 10			     int     10h
1331  B4 08			     mov     ah,8
1333  CD 10			     int     10h
1335  0A C0			     or	     al,al
1337  75 02			     jnz     pri15
1339  B0 20			     mov     al,' '
133B			     pri15:
133B  52			     push    dx
133C  33 D2			     xor     dx,dx
133E  32 E4			     xor     ah,ah
1340  CD 17			     int     17h
1342  5A			     pop     dx
1343  F6 C4 25			     test    ah,25h
1346  75 21			     jnz     err10
1348  FE C2			     inc     dl
134A  3A CA			     cmp     cl,dl
134C  75 DF			     jnz     pri10
134E  32 D2			     xor     dl,dl
1350  8A E2			     mov     ah,dl
1352  52			     push    dx
1353  E8 0023			     call    crlf
1356  5A			     pop     dx
1357  FE C6			     inc     dh
1359  3A EE			     cmp     ch,dh
135B  75 D0			     jnz     pri10
135D  5A			     pop     dx
135E  B4 02			     mov     ah,2
1360  CD 10			     int     10h
1362  C6 06 0000r 00		     mov     status_byte,0
1367  EB 0A			     jmp     short exit
1369  5A		     err10:  pop     dx
136A  B4 02			     mov     ah,2
136C  CD 10			     int     10h
136E  C6 06 0000r FF		     mov     status_byte,0ffh

1373  5A		     exit:   pop     dx
1374  59			     pop     cx
1375  5B			     pop     bx
1376  58			     pop     ax
1377  1F			     pop     ds
1378  CF			     iret
1379			     print_screen    endp

			     ;	 Возврат	каретки

1379			     crlf    proc    near
1379  33 D2			     xor     dx,dx
137B  32 E4			     xor     ah,ah
137D  B0 0A			     mov     al,12q
137F  CD 17			     int     17h
1381  32 E4			     xor     ah,ah
1383  B0 0D			     mov     al,15q
1385  CD 17			     int     17h
1387  C3			     ret
1388			     crlf    endp

1388  16*(00)				     db	22 dup(0)

			     ;--------------------------------------
			     ;
			     ;	 Включение питания
			     ;
			     ;--------------------------------------

			     ;vector segment at	0ffffh

			     ;	 Переход	по включению	питания

139E  EA		     POST:	     db	     0eah	     ; db    0eah,5bh,0e0h,00h,0f0h  ; jmp reset
139F  0000e F000			     dw	     offset reset, cod	     ; ###Gleb###

13A3  30 34 2F 32 34 2F	38+		     db	'04/24/81'
      31

13AB  00 00				     db	   0, 0

13AD  00				     db	   0 ;
			     ;vector ends






13AE			     code    ends
				     end     POST

Symbol Name			  Type	 Value

??DATE				  Text	 "04-03-22"
??FILENAME			  Text	 "1840v5-b"
??TIME				  Text	 "00:37:58"
??VERSION			  Number 0500
@CPU				  Text	 0101H
@CURSEG				  Text	 CODE
@FILENAME			  Text	 1840V5-B
@WORDSIZE			  Text	 2
ACTIVE_PAGE			  Byte	 DATA:0062
ACT_DISP_PAGE			  Near16 CODE:05DE
ADDR_6845			  Word	 DATA:0063
ALT_INPUT			  Byte	 DATA:0019
ALT_KEY				  Number 0038
ALT_SHIFT			  Number 0008
B1				  Near16 CODE:03A3
B2				  Near16 CODE:03A9
B3				  Near16 CODE:03B0
B4				  Near16 CODE:03C5
B5				  Near16 CODE:03CD
B6				  Near16 CODE:03CE
B7				  Near16 CODE:03D9
B8				  Near16 CODE:03E1
B9				  Near16 CODE:03EB
BAD_ADDR_MARK			  Number 0002
BAD_CMD				  Number 0001
BAD_CRC				  Number 0010
BAD_DMA				  Number 0008
BAD_NEC				  Number 0020
BAD_SEEK			  Number 0040
BCT				  Near16 CODE:0C07
BCT1				  Near16 CODE:0C21
BCT2				  Near16 CODE:0C23
BEEP				  Near16 ----:---- Extern
BIOS_BREAK			  Byte	 DATA:0071
BOOT_LOCN			  Far16	 ABS0:7C00
BOOT_STRAP			  Near16 ----:---- Extern
BOOT_VEC			  Dword	 ABS0:0064
BUFFER_END			  Word	 DATA:0082
BUFFER_HEAD			  Word	 DATA:001A
BUFFER_START			  Word	 DATA:0080
BUFFER_TAIL			  Word	 DATA:001C
CAPS_KEY			  Number 0056
CAPS_SHIFT			  Number 0040
CAPS_STATE			  Number 0040
CHK_STAT_2			  Near16 CODE:02BD
CMD_BLOCK			  Byte	 DATA:0042
CMD_PORT			  Number 0063
COD				  Number F000
CONTROL_BYTE			  Byte	 DATA:0076
CRLF				  Near16 CODE:1379
CRT_CHAR_GEN			  Byte	 CODE:0E1C
CRT_COLS			  Word	 DATA:004A
CRT_LEN				  Word	 DATA:004C
CRT_MODE			  Byte	 DATA:0049
CRT_MODE_SET			  Byte	 DATA:0065
CRT_PALLETTE			  Byte	 DATA:0066
CRT_START			  Word	 DATA:004E
CSI				  Word	 ABS0:04D0
CTL_KEY				  Number 001D
CTL_SHIFT			  Number 0004
CURSOR_MODE			  Word	 DATA:0060
CURSOR_POSN			  Word	 DATA:0050
DAT				  Number 0040
DEL_KEY				  Number 0053
DISKETTE_IO			  Far16	 CODE:0007
DISKETTE_PARM			  Dword	 ABS0:0078
DISKETTE_STATUS			  Byte	 DATA:0041
DISKW_STATUS			  Byte	 DATA:0074
DISK_BASE			  Byte	 CODE:0375
DISK_FORMAT			  Near16 CODE:00C9
DISK_INT			  Far16	 CODE:0305
DISK_POINTER			  Dword	 ABS0:0078
DISK_READ			  Near16 CODE:00BC
DISK_RESET			  Near16 CODE:0067
DISK_STATUS			  Near16 CODE:00B8
DISK_VECTOR			  Dword	 ABS0:0100
DISK_VERF			  Near16 CODE:00C5
DISK_WRITE			  Near16 CODE:00EF
DMA				  Number 0000
DMA08				  Number 0008
DMA_BOUNDARY			  Number 0009
DMA_SETUP			  Near16 CODE:0277
DUMMM_RETURN			  Near16 CODE:0D06
DUMMY_RETURN			  Near16 CODE:1301
E1				  Near16 ----:---- Extern
E1L				  Number 0004
EOI				  Number 0020
EQUIPMENT			  Far16	 CODE:0BFB
EQUIP_FLAG			  Word	 DATA:0010
EQ_FL				  Byte	 ABS0:0410
ERR10				  Near16 CODE:1369
EVN				  Near16 CODE:0C62
EXIT				  Near16 CODE:1373
EXT_PTR				  Dword	 ABS0:007C
F19A				  Near16 CODE:0CE8
F19B				  Near16 ----:---- Extern
F20A				  Near16 CODE:0CFB
F20B				  Near16 ----:---- Extern
FIND_POSITION			  Near16 CODE:0755
GET_PARM			  Near16 CODE:01FF
GRAPHICS_DOWN			  Near16 CODE:08A5
GRAPHICS_READ			  Near16 CODE:09E1
GRAPHICS_UP			  Near16 CODE:084C
GRAPHICS_WRITE			  Near16 CODE:092F
GRAPH_POSN			  Near16 CODE:0ABD
HDISK_INT			  Dword	 ABS0:0034
HD_ERROR			  Byte	 DATA:0042
HF_NUM				  Byte	 DATA:0075
HF_TBL_VEC			  Dword	 ABS0:0104
HOLD_STATE			  Number 0008
IDNPOL				  Word	 DATA:0090
INF_KEY				  Number 0059
INS_KEY				  Number 0052
INS_SHIFT			  Number 0080
INS_STATE			  Number 0080
INT15H				  Near16 CODE:0CDB
INT5_PTR			  Word	 ABS0:0014
INTA00				  Number 0020
INTA01				  Number 0021
INT_ADDR			  Word	 ABS0:0020
INT_FLAG			  Number 0080
INT_PTR				  Dword	 ABS0:0020
INV_KEY_L			  Number 0058
INV_KEY_R			  Number 005A
INV_SHIFT			  Number 0004
IO_RAM_SIZE			  Word	 DATA:0015
IO_ROM_INIT			  Word	 DATA:0067
IO_ROM_SEG			  Word	 DATA:0069
J1				  Near16 CODE:0035
J10				  Near16 CODE:00D7
J11				  Near16 CODE:0105
J12				  Near16 CODE:014E
J13				  Near16 CODE:0152
J14				  Near16 CODE:0158
J15				  Near16 CODE:0182
J16				  Near16 CODE:01A7
J17				  Near16 CODE:01AE
J18				  Near16 CODE:01EB
J19				  Near16 CODE:01ED
J2				  Near16 CODE:0059
J20				  Near16 CODE:01F4
J21				  Near16 CODE:01F5
J22				  Near16 CODE:01F9
J28				  Near16 CODE:0243
J29				  Near16 CODE:0267
J3				  Near16 CODE:0061
J30				  Near16 CODE:026E
J300				  Near16 CODE:0259
J31				  Near16 CODE:0274
J32				  Near16 CODE:0276
J33				  Near16 CODE:028C
J34				  Near16 CODE:02D6
J35				  Near16 CODE:02D7
J36				  Near16 CODE:02E5
J37				  Near16 CODE:02F8
J38				  Near16 CODE:0322
J39				  Near16 CODE:0327
J4				  Near16 CODE:0080
J40				  Near16 CODE:0333
J40A				  Near16 CODE:0338
J41				  Near16 CODE:033D
J42				  Near16 CODE:0344
J43				  Near16 CODE:034C
J44				  Near16 CODE:035A
J45				  Near16 CODE:0372
J5				  Near16 CODE:0082
J6				  Near16 CODE:0084
J7				  Near16 CODE:00A6
J8				  Near16 CODE:00B7
J9				  Near16 CODE:00BE
K30				  Byte	 CODE:0CB3
KBDINT				  Number 0002
KBD_IN				  Number 0060
KB_BUFFER			  Word	 DATA:001E
KB_BUFFER_END			  Word	 DATA:003E
KB_CTL				  Number 0061
KB_DAT				  Number 0060
KB_FLAG				  Byte	 DATA:0017
KB_FLAG_1			  Byte	 DATA:0018
KB_INT				  Near16 ----:---- Extern
KEYBOARD_IO			  Near16 ----:---- Extern
LAST_VAL			  Byte	 DATA:006B
LAT				  Number 0002
LAT_KEY				  Number 0057
LAT_SHIFT			  Number 0001
LEFT_KEY			  Number 0054
LEFT_SHIFT			  Number 0002
LOW866				  Byte	 CODE:0DA8
M1				  Word	 CODE:03F3
M10				  Near16 CODE:04F2
M11				  Near16 CODE:051D
M12				  Near16 CODE:0520
M13				  Near16 CODE:0523
M14				  Near16 CODE:0571
M15				  Near16 CODE:0578
M16				  Near16 CODE:0588
M17				  Near16 CODE:05B5
M18				  Near16 CODE:05B7
M19				  Near16 CODE:0617
M1L				  Number 0020
M2				  Near16 CODE:042E
M20				  Near16 CODE:061E
M3				  Near16 CODE:0446
M4				  Number 0010
M5				  Word	 CODE:0492
M6				  Byte	 CODE:049A
M7				  Byte	 CODE:04A2
M8				  Near16 CODE:04BB
M9				  Near16 CODE:04EF
MAX_PERIOD			  Number 0540
MEMBANK				  Byte	 CODE:0C71
MEMORY_SIZE			  Word	 DATA:0013
MEMORY_SIZE_DETERMINE		  Far16	 CODE:0BEF
MEM_SIZ				  Word	 ABS0:0413
MFG_TST				  Byte	 DATA:0012
MIN_PERIOD			  Number 0410
MOTOR_COUNT			  Byte	 DATA:0040
MOTOR_STATUS			  Byte	 DATA:003F
MOTOR_WAIT			  Number 0025
N1				  Near16 CODE:0659
N10				  Near16 CODE:06DF
N11				  Near16 CODE:06E8
N12				  Near16 CODE:06FF
N13				  Near16 CODE:070D
N14				  Near16 CODE:0718
N15				  Near16 CODE:071B
N16				  Near16 CODE:0727
N2				  Near16 CODE:0667
N3				  Near16 CODE:0672
N4				  Near16 CODE:0675
N5				  Near16 CODE:067E
N6				  Near16 CODE:0691
N7				  Near16 CODE:0694
N8				  Near16 CODE:06AB
N9				  Near16 CODE:06B8
NEC_OP				  Near16 CODE:0212
NEC_OUTPUT			  Near16 ----:---- Extern
NEC_STATUS			  Byte	 DATA:0042
NMI_PTR				  Word	 ABS0:0008
NUM_KEY				  Number 0045
NUM_SHIFT			  Number 0020
NUM_STATE			  Number 0020
NUM_TRANS			  Near16 CODE:035E
ORG_VECTOR			  Dword	 ABS0:004C
OSH2				  Near16 CODE:0C56
P1				  Near16 CODE:0738
P10				  Near16 CODE:07B1
P11				  Near16 CODE:07BA
P12				  Near16 CODE:07C1
P13				  Near16 CODE:07C7
P2				  Near16 CODE:0746
P3				  Near16 CODE:074C
P4				  Near16 CODE:0765
P5				  Near16 CODE:076B
P6				  Near16 CODE:077E
P7				  Near16 CODE:0789
P8				  Near16 CODE:0790
P9				  Near16 CODE:0796
PARM_PTR			  Dword	 ABS0:0074
PORT_A				  Number 0060
PORT_B				  Number 0061
PORT_C				  Number 0062
PORT_OFF			  Byte	 DATA:0077
POSITION			  Near16 CODE:0639
POST				  Near16 CODE:139E
PRI10				  Near16 CODE:132D
PRI15				  Near16 CODE:133B
PRINTER_BASE			  Word	 DATA:0008
PRINTER_IO			  Far16	 CODE:0380
PRINT_SCREEN			  Far16	 CODE:1302
PRT_STR				  Near16 ----:---- Extern
P_MSG				  Near16 ----:---- Extern
R1				  Near16 CODE:07FE
R10				  Near16 CODE:0893
R11				  Near16 CODE:08A1
R12				  Near16 CODE:08C5
R13				  Near16 CODE:08E1
R14				  Near16 CODE:08F0
R15				  Near16 CODE:08F2
R16				  Near16 CODE:0901
R17				  Near16 CODE:0905
R18				  Near16 CODE:091E
R2				  Near16 CODE:0805
R3				  Near16 CODE:0809
R4				  Near16 CODE:081C
R5				  Near16 CODE:0834
R6				  Near16 CODE:083E
R7				  Near16 CODE:086A
R8				  Near16 CODE:0882
R9				  Near16 CODE:0891
READ_AC_CURRENT			  Near16 CODE:072B
READ_CURSOR			  Near16 CODE:05C8
READ_DOT			  Near16 CODE:07D5
READ_LPEN			  Near16 CODE:0B57
RECORD_NOT_FND			  Number 0004
REGEN				  Byte	 VIDEO_RAM:0000
REGENW				  Word	 VIDEO_RAM:0000
RESET				  Near16 ----:---- Extern
RESET_FLAG			  Word	 DATA:0072
RESULTS				  Near16 CODE:0319
RES_FL				  Word	 ABS0:0472
RIGHT_KEY			  Number 0055
RIGHT_SHIFT			  Number 0001
RS232_BASE			  Word	 DATA:0000
RS232_IO			  Near16 CODE:0CD7
RUST				  Byte	 CODE:0C79
RUS_KEY				  Number 005B
RW_OPN				  Near16 CODE:00FB
S1				  Near16 CODE:0942
S10				  Near16 CODE:09AA
S11				  Near16 CODE:09C6
S12				  Near16 CODE:09F6
S13				  Near16 CODE:0A0E
S14				  Near16 CODE:0A12
S15				  Near16 CODE:0A24
S16				  Near16 CODE:0A31
S17				  Near16 CODE:0A36
S18				  Near16 CODE:0A5F
S19				  Near16 CODE:0A65
S2				  Near16 CODE:0951
S20				  Near16 CODE:0A6E
S21				  Near16 CODE:0A7A
S22				  Near16 CODE:0A83
S23				  Near16 CODE:0A9D
S24				  Near16 CODE:0AA7
S25				  Near16 CODE:0AAD
S26				  Near16 CODE:0ABA
S3				  Near16 CODE:0961
S4				  Near16 CODE:0965
S5				  Near16 CODE:096D
S6				  Near16 CODE:0981
S7				  Near16 CODE:098D
S8				  Near16 CODE:0994
S9				  Near16 CODE:0998
SCROLL_DOWN			  Near16 CODE:06EF
SCROLL_KEY			  Number 0046
SCROLL_POSITION			  Near16 CODE:0698
SCROLL_SHIFT			  Number 0010
SCROLL_STATE			  Number 0010
SCROLL_UP			  Near16 CODE:064A
SEEK				  Near16 CODE:0215
SEEK_STATUS			  Byte	 DATA:003E
SET_COLOR			  Near16 CODE:0602
SET_CPOS			  Near16 CODE:059E
SET_CTYPE			  Near16 CODE:057D
SET_MODE			  Near16 CODE:04AA
STA				  Number 0030
START				  Near16 ----:---- Extern
STATUS_BYTE			  Byte	 XXDATA:0000
STAT_OFFSET			  Byte	 DATA:007C
STG_LOC0			  Byte	 ABS0:0000
T1				  Near16 CODE:122D
T2				  Near16 CODE:1230
T3				  Near16 CODE:1243
T4				  Near16 CODE:1266
T5				  Near16 CODE:1286
T6				  Near16 CODE:1297
TABL				  Word	 DATA:00E0
TABL1				  Word	 ABS0:04E0
TIMER				  Number 0040
TIMERO				  Number 0040
TIMER_HIGH			  Word	 DATA:006E
TIMER_INT			  Far16	 CODE:1253
TIMER_LOW			  Word	 DATA:006C
TIMER_OFL			  Byte	 DATA:0070
TIME_OF_DAY			  Far16	 CODE:121C
TIME_OUT			  Number 0080
TIM_CTL				  Number 0043
TMINT				  Number 0001
TMP_TOS				  Word	 DATA:3FF0
TOS				  Word	 STAC:0100
TST12				  Near16 ----:---- Extern
U1				  Near16 CODE:0B01
U10				  Near16 CODE:0B41
U11				  Near16 CODE:0B48
U2				  Near16 CODE:0B14
U3				  Near16 CODE:0B1A
U4				  Near16 CODE:0B28
U5				  Near16 CODE:0B2A
U6				  Near16 CODE:0B2E
U7				  Near16 CODE:0B30
U8				  Near16 CODE:0B34
U9				  Near16 CODE:0B3D
UP866				  Byte	 CODE:0DE2
V1				  Byte	 CODE:0B4F
V2				  Near16 CODE:0B96
V3				  Near16 CODE:0BBD
V4				  Near16 CODE:0BC9
V5				  Near16 CODE:0BDB
V6				  Near16 CODE:0BDD
V7				  Near16 CODE:0BE7
VECTOR_TABLE			  Word	 CODE:12A1
VIDEO_INT			  Word	 ABS0:0040
VIDEO_IO			  Near16 CODE:0413
VIDEO_PARMS			  Byte	 CODE:0452
VIDEO_RETURN			  Near16 CODE:0575
VIDEO_STATE			  Near16 CODE:0628
WAIT_INT			  Near16 CODE:02DE
WRITE_AC_CURRENT		  Near16 CODE:0771
WRITE_C_CURRENT			  Near16 CODE:07A4
WRITE_DOT			  Near16 CODE:07E6
WRITE_PROTECT			  Number 0003
WRITE_TTY			  Near16 CODE:0AD0
WRITE_TTY2			  Near16 CODE:0CE1
X1				  Near16 CODE:0139
X2				  Near16 CODE:0135
XXDAT				  Number 0050
ZB				  Byte	 ABS0:0000
ZW				  Word	 ABS0:0000

Groups & Segments		  Bit Size Align  Combine Class

ABS0				  16  7C00  AT 0000
CODE				  16  13AE Byte	  Public
DATA				  16  3FF0  AT 0040
STAC				  16  0100  AT 0030
VIDEO_RAM			  16  4000  AT B800
XXDATA				  16  0001  AT 0050

