Turbo Assembler	 Version 5.0	    02-17-22 22:06:34	    Page 1
keybrd.ASM



				     PUBLIC keyboard_io
				     PUBLIC kb_int
				     PUBLIC k61
				     PUBLIC error_beep

				     EXTERN k89:near
				     EXTERN rust:near
				     EXTERN rust2:near
				     EXTERN k30:near
				     EXTERN reset:near


			     ;___int 16_________________
			     ;
			     ;	 Программа поддержки клавиатуры
			     ;
			     ;	 Эта	программа считывает в регистр
			     ; AX код сканирования клавиши и код
			     ; ASCII из буфера клавиатуры.
			     ;
			     ;	 Программа выполняет три функции, код
			     ; которых задается в регистре AH:
			     ;
			     ;	  AH=0 - считать	следующий символ
			     ;		  из буфера.При выходе	код
			     ;		  сканирования в AH,код
			     ;		  ASCII	в AL.
			     ;	 AH=1 -	установить ZF, если код
			     ;		  ASCII	прочитан:
			     ;
			     ;		  ZF=0 - буфер заполнен,
			     ;		  ZF=1 - буфер пустой.
			     ;	 При	выходе в	AX помещен адрес вершины буфера	    +
			     клавиатуры.
			     ;	 AH=2 -	возврат текущего	состояния в регистр AL
			     ;		   из	постоянно распределенной	области памяти +
			     с
			     ;		адресом 00417H.
			     ;
			     ;	 При	выполнении программ клавиатуры используются +
			     флажки,
			     ; которые устанавливаются в	постоянно			    +
			     распределенной области
			     ; памяти по адресам	00417H и 00418H и имеют значение:
			     ;	 00417H
			     ;	       0 - правое	переключение регистра;
			     ;	       1 - левое переключение регистра;
			     ;		  2 - УПР;
			     ;	       3 - ДОП;
			     ;	       4 - ФСД;
			     ;	       5 - ЦИФ;
			     ;	       6 - ФПБ;
			     ;	       7 - ВСТ;
			     ;	 00418H
			     ;	       0 - состояние клавиши ЛАТ между нажатием	и	    +
			     отжатием;
			     ;	       1 - ЛАТ;
			     ;	       2 - Р/Л;
			     ;	       3 - пауза;
			     ;	       4 - ФСД;
			     ;	       5 - ЦИФ;
			     ;	       6 - ФПБ;
			     ;	       7 - ВСТ.
			     ;
			     ;	 Флажки, соответствующие разрядам 4-7 постоянно	    +
			     распределенной
			     ; области памяти с адресом 00417H, устанавливаются по    +
			     нажатию
			     ; клавиш ВСТ, ФПБ, ЦИФ, ФСД и сохраняют свои значения  +
			     до сле-
			     ; дующего нажатия соответствующей клавиши.
			     ; Одноименные флажки, соответствующие разрядам 4-7	    +
			     постоянно
			     ; распределенной области памяти	с адресом 00418H, и	    +
			     флажки
			     ; ДОП, УПР, левое переключение регистра, правое	    +
			     переключение
			     ; регистра, Р/Л устанавливаются по нажатию клавиш и   +
			     сбрасываются
			     ; по отжатию.
			     ;
			     ;------------------------------
0000			     code    segment byte public
				     assume  cs:code,ds:data

0000			     k4	     proc    near
0000  83 C3 02			     add     bx,2
			     ;1841   cmp  bx,buffer_end		      ;	конец буфера	?
0003  81 FB 003Er		     cmp  bx,offset kb_buffer_end     ;	конец буфера	?
0007  75 03			     jne     k5			      ;	нет - продолжить
			     ;1841   mov     bx,buffer_start	      ;	да - уст начала буфера
0009  BB 001Er			     mov     bx,offset kb_buffer      ;	да - уст начала буфера
000C			     k5:
000C  C3			     ret
000D			     k4	     endp

000D			     error_beep	proc near
000D  50			     push    ax
000E  53			     push    bx
000F  51			     push    cx
0010  BB 00C0			     mov     bx,0c0h
0013  E4 61			     in	     al,kb_ctl
0015  50			     push    ax
0016			     k65:
0016  24 FC			     and     al,0fch
0018  E6 61			     out     kb_ctl,al
001A  B9 0048			     mov     cx,48h
001D  E2 FE		     k66:    loop    k66
001F  0C 02			     or	     al,2
0021  E6 61			     out     kb_ctl,al
0023  B9 0048			     mov     cx,48h
0026  E2 FE		     k67:    loop    k67
0028  4B			     dec     bx
0029  75 EB			     jnz     k65
002B  58			     pop     ax
002C  E6 61			     out     kb_ctl,al
002E  59			     pop     cx
002F  5B			     pop     bx
0030  58			     pop     ax
0031  C3			     ret
0032			     error_beep	     endp

			     ;------ PLAIN OLD LOWER CASE

0032			     k54:				     ;rc обычный	нижний регистр
0032  3C 3B			     cmp     al,59		     ; TEST FOR	FUNCTION KEYS
0034  72 05			     jb	     k55		     ; NOT-LOWER-FUNCTION
0036  B0 00			     mov     al,0		     ; SCAN CODE IN AH ALREADY
0038  EB 0F 90			     jmp      k57		     ; BUFFER_FILL

003B  BB 0181r		     k55:    mov     bx,offset k10
003E  F6 06 0018r 02		     test    kb_flag_1,lat
0043  74 57			     jz	     k99		     ;rc переход	по отсутствию флага+
			     ЛАТ

			     ;------TRANSLATE THE CHARACTER

0045			     k56:				     ; TRANSLATE-CHAR
0045  FE C8			     dec     al			     ; CONVERT ORIGIN
0047  2E: D7			     xlat    cs:k11		     ; CONVERT THE SCAN	CODE TO	ASCII

			     ;------ PUT CHARACTER INTO	BUFFER

0049			     k57:				     ; BUFFER-FILL
0049  3C FF			     cmp     al,-1		     ; IS THIS AN IGNORE CHAR
004B  74 34			     je	     k59		     ; YES, DO NOTHING WITH IT
004D  80 FC FF			     cmp     ah,-1		     ; LOOK FOR	-1 PSEUDO SCAN
0050  74 2F			     je	     k59		     ; NEAR_INTERRUPT_RETURN

			     ;------ HANDLE THE	CAPS LOCK PROBLEM

0052			     k58:				     ; BUFFER-FILL-NOTEST
0052  F6 06 0017r 40		     test    kb_flag,caps_state	     ; ARE WE IN CAPS LOCK STATE
0057  74 2B			     jz	     k61		     ; SKIP IF NOT


			     ;------ IN	CAPS LOCK STATE
0059  F6 06 0018r 02		     test    kb_flag_1,lat
005E  75 24			     jnz     k61		     ;lat mode - skip caps conversion
0060  E9 0000e			     jmp     k89

			     org     0081h
0081			     k59:				     ; NEAR-INTERRUPT-RETURN
0081  E9 030C			     jmp     k26		     ; INTERRUPT_RETURN

0084			     k61:				     ; NOT-CAPS-STATE
0084  8B 1E 001Cr		     mov     bx,buffer_tail	     ; GET THE END POINTER TO THE BUFFER
0088  8B F3			     mov     si,bx		     ; SAVE THE	VALUE
008A  E8 FF73			     call   k4			     ; ADVANCE THE TAIL
008D  3B 1E 001Ar		     cmp     bx,buffer_head	     ; HAS THE BUFFER WRAPPED AROUND
0091  74 0E			     je	     k62		     ; BUFFER_FULL_BEEP
0093  89 04			     mov     word ptr [si],ax	     ; STORE THE VALUE
0095  89 1E 001Cr		     mov     buffer_tail,bx	     ; MOVE THE	POINTER	UP
0099  E9 02F4			     jmp     k26		     ; INTERRUPT_RETURN
009C  BB 0000e		     k99:    mov     bx,offset rust		     ;rc маленькие рус буквы	    +
			     (kb_flag_1.lat=0)
009F  EB A4			     jmp k56

			     ;------ BUFFER IS FULL, SOUND THE BEEPER

00A1			     k62:				     ; BUFFER-FULL-BEEP
00A1  E8 FF69			     call    error_beep
00A4  E9 02E9			     jmp     k26		     ; INTERRUPT_RETURN

			     ;------ TRANSLATE SCAN FOR	PSEUDO SCAN CODES

00A7			     k63:				     ; TRANSLATE-SCAN
00A7  2C 3B			     sub     al,59		     ; CONVERT ORIGIN TO FUNCTION KEYS
00A9			     k64:				     ; TRANSLATE-SCAN-ORGD
00A9  2E: D7			     xlat    cs:k9		     ; CTL TABLE SCAN
00AB  8A E0			     mov     ah,al		     ; PUT VALUE INTO AH
00AD  B0 00			     mov     al,0		     ; ZERO ASCII CODE
00AF  EB 98			     jmp      k57		     ; PUT IT INTO THE BUFFER


			     ;---
00B1  22*(00)			     db	     34	dup (0)
			     ;1841   org     0e82eh
00D3			     keyboard_io proc	     far
00D3  FB			     sti		     ;
00D4  1E			     push    ds
00D5  53			     push    bx
00D6  BB 0000s			     mov     bx,data
00D9  8E DB			     mov     ds,bx	     ; установить сегмент данных
00DB  0A E4			     or	     ah,ah	     ; AH=0
00DD  74 0B			     jz	     k1		  ; переход к считыванию следующего	    +
			     символа
00DF  FE CC			     dec     ah		     ; AH=1
00E1  74 20			     jz	     k2		  ; переход к считыванию кода ASCII
00E3  FE CC			     dec     ah			  ; AH=2
00E5  74 2D			     jz	     k3		  ; переход к получению байта		    +
			     состояния
00E7  5B			     pop     bx			  ; восстановить регистр
00E8  1F			     pop     ds
00E9  CF			     iret

			     ;	 Считывание кода сканирования	и кода ASCII из буфера +
			     клавиатуры
			     ;
00EA			     k1:
00EA  FB			     sti	     ; уст признака разрешения прерывания
00EB  90			     nop		     ; задержка
00EC  FA			     cli	     ; сброс признака разрешения	прерывания
00ED  8B 1E 001Ar		     mov     bx,buffer_head  ; уст вершину буфера по чтению
00F1  3B 1E 001Cr		     cmp     bx,buffer_tail  ; сравнить	с вершиной буфера по	    +
			     записи
00F5  74 F3			     jz	     k1
00F7  8B 07			     mov     ax,word ptr [bx] ;	получить код	сканирования и код  +
			     ASCII
00F9  E8 FF04			     call    k4
00FC  89 1E 001Ar		     mov     buffer_head,bx  ; запомнить вершину буфера по	    +
			     чтению
0100  5B			     pop     bx		     ; восстановить	регистр
0101  1F			     pop     ds		     ; восстановить	сегмент
0102  CF			     iret		     ; возврат к программе

			     ;	 Считать	код ASCII

0103			     k2:
0103  FA			     cli	     ; Сброс признака разрешения	прерывания
0104  8B 1E 001Ar		     mov     bx,buffer_head  ; получить	указатель вершины	    +
			     буфера
							     ; по чтению
0108  3B 1E 001Cr		     cmp     bx,buffer_tail  ; сравнить	с вершиной буфера по	    +
			     записи
010C  8B 07			     mov     ax,word ptr [bx]
010E  FB			     sti		     ; уст признак разрешения		    +
			     прерывания
010F  5B			     pop     bx		     ; восстановить	регистр
0110  1F			     pop     ds		     ; восстановить	сегмент
0111  CA 0002			     ret     2

			     ;	 Получение младшего байта	состояния (флажков)

0114			     k3:
0114  A0 0017r			     mov     al,kb_flag	     ; получить	младший байт	состояния  +
			     на
0117  5B			     pop     bx		     ; восстановить	регистр
0118  1F			     pop     ds		     ; восстановить	сегмент
0119  CF			     iret		     ; возврат к программе
011A			     keyboard_io     endp

			     ;	 Таблица	кодов сканирования управляющих клавиш

011A			     k6	     label   byte
011A  52			     db	     ins_key
011B  56 45 46 38 1D		     db	     caps_key,num_key,scroll_key,alt_key,ctl_key
0120  54 55			     db	     left_key,right_key
0122  58			     db	     inv_key_l
0123  5A 57 5B			     db	     inv_key_r,lat_key,rus_key
      =000C		     k6l     equ     0ch

			     ;	 Таблица	масок нажатых управляющих клавиш

0126			     k7	     label   byte
0126  80			     db	     ins_shift
0127  40 20 10 08 04		     db	     caps_shift,num_shift,scroll_shift,alt_shift,ctl_shift
012C  02 01			     db	     left_shift,right_shift


			     ;	 Таблица	кодов сканирования при нажатой клавише    +
			     УПР для
			     ; кодов сканирования клавиш	меньше 59

012E  1B FF 00 FF FF FF	1E+  k8	     db	     27,-1,0,-1,-1,-1,30,-1
      FF
0136  FF FF FF 1F FF 7F	FF+	     db	     -1,-1,-1,31,-1,127,-1,17
      11
013E  17 05 12 14 19 15	09+	     db	     23,5,18,20,25,21,9,15
      0F
0146  10 1B 1D 0A FF 01	13	     db	     16,27,29,10,-1,1,19
014D  04 06 07 08 0A 0B	0C+	     db	     4,6,7,8,10,11,12,-1,-1
      FF FF
0156  FF FF 1C 1A 18 03	16+	     db	     -1,-1,28,26,24,3,22,2
      02
015E  0E 0D FF FF FF FF	FF+	     db	     14,13,-1,-1,-1,-1,-1,-1
      FF
0166  20 FF			     db	     ' ',-1

			     ;	 Таблица	кодов сканирования при нажатой клавише    +
			     УПР для
			     ; кодов сканирования клавиш	больше 59
0168			     k9	     label   byte
0168  5E 5F 60 61 62 63	64+	     db	     94,95,96,97,98,99,100,101
      65
0170  66 67 FF FF 77 FF	84+	     db	     102,103,-1,-1,119,-1,132,-1
      FF
0178  73 FF 74 FF 75 FF	76+	     db	     115,-1,116,-1,117,-1,118,-1
      FF
0180  FF			     db	     -1

			     ;	 Таблица	кодов ASCII нижнего	регистра клавиатуры

0181			     k10     label   byte
0181  1B 31 32 33 34 35	36+	     db	     27,'1234567'	     ;byte1
      37
0189  38 39 30 2D 3D 08	09+	     db	     '890-=',08h,09h,'q'     ;byte2
      71
0191  77 65 72 74 79 75	69+	     db	     'wertyuio'		     ;byte3
      6F
0199  70 5B 5D 0D FF 61	73+	     db	     'p[]',0dh,-1,'asd'	     ;byte4
      64
01A1  66 67 68 6A 6B 6C	3B+	     db	     'fghjkl;:'		     ;byte5
      3A
01A9  60 7E 5C 7A 78 63	76+	     db	     60h,7eh,05ch,'zxcvb'    ;byte6
      62
01B1  6E 6D 2C 2E 2F 7B	2A+	     db	     'nm,./{*',-1	     ;byte7
      FF
01B9  20 7D			     db	     ' }'		     ;byte8

			     ;	 Таблица	кодов ASCII верхнего регистра клавиатуры

01BB			     k11     label   byte
01BB  1B 21 40 23 24 25	5E+	     db	     27,'!@#$',37,05eh,'&'   ;byte1
      26
01C3  2A 28 29 5F 2B 08	00+	     db	     '*()_+',08h,0,'Q'	     ;byte2
      51
01CB  57 45 52 54 59 55	49+	     db	     'WERTYUIO'		     ;byte3
      4F
01D3  50 FF FF 0D FF 41	53+	     db	     'P',-1,-1,0dh,-1,'ASD'  ;byte4
      44
01DB  46 47 48 4A 4B 4C	27+	     db	     'FGHJKL',027h,'"'	     ;byte5
      22
01E3  FF FF 7C 5A 58 43	56+	     db	     -1,-1,7ch,'ZXCVB'	     ;byte6
      42
01EB  4E 4D 3C 3E 3F FF	00+	     db	     'NM<>?',-1,0,-1	     ;byte7
      FF
01F3  20 FF			     db	     ' ',-1		     ;byte8

			     ;	 Таблица	кодов сканирования клавиш Ф11 -	Ф20 (на	    +
			     верхнем
			     ; регистре	Ф1 - Ф10)

01F5			     k12     label   byte
01F5  54 55 56 57 58 59	5A	     db	     84,85,86,87,88,89,90
01FC  5B 5C 5D			     db	     91,92,93

			     ;	 Таблица	кодов сканирования одновременно нажатых +
			     клавиш
			     ; ДОП и Ф1 - Ф10

01FF			     k13     label byte
01FF  68 69 6A 6B 6C		     db	     104,105,106,107,108
0204  6D 6E 6F 70 71		     db	     109,110,111,112,113

			     ;	 Таблица	кодов правого пятнадцатиклавишного поля +
			     на верхнем
			     ; регистре

0209			     k14     label   byte
0209  37 38 39 2D 34 35	36+	     db	     '789-456+1230.'
      2B 31 32 33 30 2E

			     ;	 Таблица	кодов правого пятнадцатиклавишного поля +
			     на нижнем
			     ; регистре

0216			     k15     label byte
0216  47 48 49 FF 4B FF	4D	     db	     71,72,73,-1,75,-1,77
021D  FF 4F 50 51 52 53		     db	     -1,79,80,81,82,83

			     ;1841   org     0e987h
0223  09*(00)			     db	     9 dup (0)

			     ;----INT 9--------------------------
			     ;
			     ;	  Программа обработки	прерывания клавиатуры
			     ;
			     ; Программа считывает код сканирования клавиши в	    +
			     регистр AL.
			     ; Единичное состояние разряда 7 в коде сканирования  +
			     означает,
			     ; что клавиша отжата.
			     ;	 В результате выполнения программы в регистре AX	    +
			     формируется
			     ; слово, старший байт которого (AH) содержит код	    +
			     сканирования,
			     ; а младший (AL) -	код ASCII. Эта информация помещается в   +
			     буфер
			     ; клавиатуры. После	заполнения буфера подается	    +
			     звуковой сигнал.
			     ;
			     ;-----------------------------------

022C			     kb_int proc far
022C  FB			     sti		; установка признака разрешения	    +
			     прерывания
022D  50			     push    ax
022E  53			     push    bx
022F  51			     push    cx
0230  52			     push    dx
0231  56			     push    si
0232  57			     push    di
0233  1E			     push    ds
0234  06			     push    es
0235  FC			     cld		    ; установить признак направления    +
			     вперед
0236  B8 0000s			     mov     ax,data	    ; установить адресацию
0239  8E D8			     mov     ds,ax
023B  E4 60			     in	     al,kb_dat	    ; считать код сканирования
023D  50			     push    ax
023E  E4 61			     in	     al,kb_ctl	    ; считать значение порта 61
0240  8A E0			     mov     ah,al	    ; сохранить считанное значение
0242  0C 80			     or	     al,80h	    ; установить бит 7 порта 61
0244  E6 61			     out     kb_ctl,al	    ; для работы с клавиатурой
0246  86 E0			     xchg    ah,al	    ; восстановить значение	порта 61
0248  E6 61			     out     kb_ctl,al
024A  58			     pop     ax		    ; восстановить код сканирования
024B  8A E0			     mov     ah,al	    ; и сохранить его в AH

			     ;---

024D  3C FF			     cmp     al,0ffh  ;	сравнение с кодом заполнения буфера
						      ;	клавиатуры
024F  75 03			     jnz     k16	     ; продолжить
0251  E9 FE4D			     jmp     k62     ; переход на звуковой сигнал по		    +
			     заполнению
						     ; буфера клавиатуры

0254			     k16:
0254  24 7F			     and     al,07fh	     ; сброс бита отжатия клавиши
0256  0E			     push    cs
0257  07			     pop     es
0258  BF 011Ar			     mov     di,offset k6  ; установить адрес таблицы		    +
			     сканирования
							   ; управляющих клавиш
025B  B9 000C			     mov     cx,k6l
025E  F2> AE			     repne   scasb   ; сравнение полученного кода		    +
			     сканирования с содержимым таблицы
0260  8A C4			     mov     al,ah	     ; запомнить код сканирования
0262  74 1A			     je	     k17	     ; переход по совпадению
0264  E9 010A			     jmp     k25	     ; переход по несовпадению

0267			     k406:				     ;rc это	обработчик клавиши Ё
0267  F6 06 0018r 02		     test    kb_flag_1,lat
026C  75 7F			     jnz     k26a		     ;rc в ЛАТ-режиме	клавиша не	    +
			     генерирует ничего,	выход
026E  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
0273  B8 5CF1			     mov     ax,5cf1h		     ;rc ё
0276  74 03			     jz	     k407
0278  B8 5CF0			     mov     ax,5cf0h		     ;rc Ё
027B			     k407:				     ;rc передвинул сюда,	двумя	    +
			     строками выше	(это	ж не	получение маски)
027B  E9 FDCB			     jmp     k57

			     ;	 Получение маски нажатой управляющей клавиши


027E  81 EF 011Br	     k17:    sub     di,offset k6+1	     ;rc получить индекс упр клавиши+
			     в	табл k6, начиная с 0
0282  83 FF 08			     cmp     di,8
0285  72 3B			     jb	     k300		     ;rc меньше 8	(это	совместимые	    +
			     клавиши) обрабатываются как в IBM
0287  B4 06			     mov     ah,6		     ;rc маска 0b00000110 для руслат	    +
			     (inv_shift	+ lat)
0289  83 FF 0A			     cmp     di,0ah
028C  72 39			     jb	     k301		     ;rc если inv_key (Р/Л)
028E  A8 80			     test    al,80h
0290  74 5B			     jz	     k26a		     ;rc если не отпускание РУС или   +
			     ЛАТ -> вых (борьба с автоповтором?)

							     ;rc здесь мы после отпускания РУС	    +
			     или ЛАТ
0292  80 26 0018r FC		     and     kb_flag_1,not lat+lat_shift   ;rc not действует на оба,	    +
			     сбрасываем lat и "светодиодный" lat
0297  83 FF 0B			     cmp     di,0bh
029A  74 17			     je	     k401		     ;rc переход, если РУС
							     ;rc если ЛАТ:
029C  F6 06 0018r 04		     test    kb_flag_1,inv_shift
02A1  74 08			     jz	     k400		     ;rc переход	по ненажатию	Р/Л
02A3  80 0E 0018r 01		     or	     kb_flag_1,lat_shift     ;rc нажата Р/Л->отметить нажатие+
			     ("светодиодный") ЛАТа и всё
02A8  EB 43 90			     jmp     k26a
02AB  80 0E 0018r 03	     k400:   or	     kb_flag_1,lat+lat_shift ;rc не нажата Р/Л и нажат		    +
			     ЛАТ->включить ЛАТ и	факт нажатия	("светодиодный")
02B0  EB 3B 90			     jmp     k26a

							     ;РУС:
02B3  F6 06 0018r 04	     k401:   test    kb_flag_1,inv_shift
02B8  74 33			     jz	     k26a		     ;rc по ненажатию Р/Л выход	    +
			     ("светодиодный" выключен заранее)
02BA  80 0E 0018r 02		     or	     kb_flag_1,lat	     ;rc нажата Р/Л и отпущена	РУС:	    +
			     включить lat ///???
02BF  EB 2C 90			     jmp     k26a

							     ;rc далее IBM-ский код
02C2  2E: 8A A5	0126r	     k300:   mov     ah,cs:k7[di]	     ;rc аналогично IBM считыаем	    +
			     маску	из k7	для совместимых упр клавиш
02C7			     k301:
02C7  A8 80			     test    al,80h	     ; клавиша отжата ?
02C9  75 79			     jnz     k23     ; переход, если	клавиша отжата

			     ;	 Управляющая	клавиша нажата

02CB  80 FC 10			     cmp     ah,scroll_shift ; нажата управляющая клавиша с
							     ;	запоминанием ?
02CE  73 20			     jae     k18	     ; переход, если	да

			     ;---
02D0  80 FC 06			     cmp     ah,6
02D3  74 07			     je	     k302	     ; rc нажата Р/Л

02D5  08 26 0017r		     or	     kb_flag,ah	     ; установка масок управляющих	    +
			     клавиш
							     ; без запоминания
02D9  E9 00B4			     jmp     k26	     ; к выходу из прерывания

02DC  80 0E 0018r 06	     k302:   or	     kb_flag_1,inv_shift+lat ;rc обработка нажатия Р/Л:	    +
			     ставим факт нажатия и латиницу
02E1  F6 06 0018r 01		     test    kb_flag_1,lat_shift     ;rc светодиодный ЛАТ есть?
02E6  74 05			     jz	     k26a		     ;rc нет	-> выходим
02E8  80 26 0018r FD		     and     kb_flag_1,not lat	     ;rc есть -> сбрасываем латиницу
02ED			     k26a:
02ED  E9 00A0			     jmp     k26

			     ;	 Опрос нажатия клавиши с запоминанием

02F0			     k18:
02F0  F6 06 0017r 04		     test    kb_flag,ctl_shift	       ; опрос клавиши УПР
02F5  75 7A			     jnz     k25
02F7  3C 52			     cmp     al,ins_key		       ; опрос клавиши ВСТ
02F9  75 25			     jnz     k22
02FB  F6 06 0017r 08		     test    kb_flag,alt_shift	       ; опрос клавиши ДОП
0300  74 03			     jz	     k19
0302  EB 6D 90			     jmp     k25
0305  F6 06 0017r 20	     k19:    test    kb_flag,num_state	; опрос клавиши ЦИФ
030A  75 0D			     jnz     k21
030C  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift ; опрос клавиш левого
							  ; и правого переключения регистров
0311  74 0D			     jz	     k22

0313			     k20:
0313  B8 5230			     mov     ax,5230h
0316  E9 FD30			     jmp     k57	   ; установка	кода нуля
0319			     k21:
0319  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
031E  74 F3			     jz	     k20

0320			     k22:
0320  84 26 0018r		     test    ah,kb_flag_1
0324  75 6A			     jnz     k26
0326  08 26 0018r		     or	     kb_flag_1,ah
032A  30 26 0017r		     xor     kb_flag,ah
032E  3C 52			     cmp     al,ins_key
0330  75 5E			     jne     k26
0332  B8 5200			     mov     ax,ins_key*256
0335  E9 FD11			     jmp     k57

0338			     k303:					     ;rc отжатие	Р/Л
0338  80 26 0018r FB		     and     kb_flag_1,not inv_shift	     ;rc сброс флажка нажатия	Р/Л
033D  80 36 0018r 02		     xor     kb_flag_1,lat		     ;rc переключение раскладки
0342  EB 10			     jmp     short k304

			     ;	 Управляющая	клавиша отжата
						     ;rc если сюда попали	при нажатии		    +
			     ЕС-клавиши Р/Л,	то ah=6
0344			     k23:

0344  80 FC 10			     cmp     ah,scroll_shift
0347  73 1F			     jae     k24			     ;rc это	были переключатели +
			     с	фиксацией?
0349  F6 D4			     not     ah				     ;rc да -	переходим к ним
034B  80 FC F9			     cmp     ah,0f9h			     ;rc было ah=6?	Р/Л?
034E  74 E8			     je	     k303			     ;rc да->обрабатываем
0350  20 26 0017r		     and     kb_flag,ah			     ;rc это	и далее -			    +
			     продолжение IBM-ского кода
0354			     k304:
0354  3C B8			     cmp     al,alt_key+80h
0356  75 38			     jne     k26

			     ;---

0358  A0 0019r			     mov     al,alt_input
035B  B4 00			     mov     ah,0
035D  88 26 0019r		     mov     alt_input,ah
0361  3C 00			     cmp     al,0
0363  74 2B			     je	     k26
0365  E9 FCEA			     jmp     k58

0368			     k24:
0368  F6 D4			     not     ah
036A  20 26 0018r		     and     kb_flag_1,ah
036E  EB 20 90			     jmp      k26
			     ;---

0371			     k25:					     ;rc как	и в IBM, здесь мы, если+
			     не управляющая клавиша
									     ;rc (т.е. ее код не в k6) или	    +
			     если мы нажали	ins-num-caps-scroll,
									     ;rc когда ранее была	зажата+
			     ctrl или alt
0371  3C 80			     cmp     al,80h
0373  73 1B			     jae     k26
0375  3C 59			     cmp     al,inf_key
0377  74 25			     je	     k307			     ;rc обработчик клавиши ИНФ +
			     (выдает 0a00h расшир код)
0379  3C 5C			     cmp     al,92
037B  75 03			     jne     k406b
037D  E9 FEE7			     jmp     k406			     ;rc обработчик клавиши Ё	    +
			     (выдает ASCII F0h/F1h в режиме РУС)
0380			     k406b:					     ;rc далее как в IBM
0380  F6 06 0018r 08		     test    kb_flag_1,hold_state
0385  74 1D			     jz	     k28
0387  3C 45			     cmp     al,num_key
0389  74 05			     je	     k26
038B  80 26 0018r F7		     and     kb_flag_1,not hold_state

0390			     k26:
0390  FA			     cli
0391  B0 20			     mov     al,eoi
0393  E6 20			     out     020h,al
0395			     k27:
0395  07			     pop     es
0396  1F			     pop     ds
0397  5F			     pop     di
0398  5E			     pop     si
0399  5A			     pop     dx
039A  59			     pop     cx
039B  5B			     pop     bx
039C  58			     pop     ax
039D  CF			     iret

039E  B8 A000		     k307:   mov     ax,0a000h			     ;rc клавиша	ИНФ,			    +
			     расширенный скан-код
			     ;1841   jmp     inf_rc		 ;rc обработаем смену кодовой	    +
			     таблицы, если Ctrl-Инф
03A1  E9 FCA5			     jmp     k57


			     ;---

03A4			     k28:
03A4  F6 06 0017r 08		     test    kb_flag,alt_shift
03A9  75 03			     jnz     k29
03AB  EB 6D 90			     jmp     k38

			     ;---

03AE			     k29:
03AE  F6 06 0017r 04		     test    kb_flag,ctl_shift
03B3  74 0F			     jz	     k31
03B5  3C 53			     cmp     al,del_key
03B7  75 0B			     jne     k31

			     ;---
03B9			     k306:
03B9  C7 06 0072r 1234		     mov     reset_flag,1234h
03BF  EA			     db	     0eah
03C0  0000e F000		     dw	     offset reset,cod
			     ;---




03C4			     k31:
03C4  3C 39			     cmp     al,57
03C6  75 05			     jne     k32
03C8  B0 20			     mov     al,' '
03CA  E9 FC7C			     jmp     k57

			     ;---

03CD			     k32:
03CD  BF 0000e			     mov     di,offset k30
03D0  B9 000A			     mov     cx,10
03D3  F2> AE			     repne scasb
03D5  75 12			     jne     k33
03D7  81 EF 0001e		     sub     di,offset k30+1
03DB  A0 0019r			     mov     al,alt_input
03DE  B4 0A			     mov     ah,10
03E0  F6 E4			     mul     ah
03E2  03 C7			     add     ax,di
03E4  A2 0019r			     mov     alt_input,al
03E7  EB A7			     jmp      k26

			     ;---

03E9			     k33:
03E9  C6 06 0019r 00		     mov     alt_input,00h
03EE  B9 001A			     mov     cx,0026
03F1  F2> AE			     repne scasb
03F3  75 05			     jne     k34
03F5  B0 00			     mov     al,0
03F7  E9 FC4F			     jmp     k57

			     ;---

03FA			     k34:
03FA  3C 02			     cmp     al,2
03FC  72 0C			     jb	     k35
03FE  3C 0E			     cmp     al,14
0400  73 08			     jae     k35
0402  80 C4 76			     add     ah,118
0405  B0 00			     mov     al,0
0407  E9 FC3F			     jmp     k57

			     ;---

040A			     k35:
040A  3C 3B			     cmp     al,59
040C  73 02			     jae     k37
040E			     k36:
040E  EB 80			     jmp     short k26	     ;в 1841 masm автоматически поставил	    +
			     короткий переход
0410			     k37:
0410  3C 47			     cmp     al,71
0412  73 FA			     jae     k36
0414  BB 01FFr			     mov     bx,offset k13
0417  E9 FC8D			     jmp     k63

			     ;---

041A			     k38:
041A  F6 06 0017r 04		     test    kb_flag,ctl_shift
041F  74 5B			     jz	     k44

			     ;---
			     ;---

0421  3C 46			     cmp     al,scroll_key
0423  75 18			     jne     k39
0425  BB 001Er			     mov     bx,offset kb_buffer
0428  89 1E 001Ar		     mov     buffer_head,bx
042C  89 1E 001Cr		     mov     buffer_tail,bx
0430  C6 06 0071r 80		     mov     bios_break,80h
0435  CD 1B			     int     1bh
0437  B8 0000			     mov     ax,0
043A  E9 FC0C			     jmp     k57

043D			     k39:
043D  3C 45			     cmp     al,num_key
043F  75 21			     jne     k41
0441  80 0E 0018r 08		     or	     kb_flag_1,hold_state
0446  B0 20			     mov     al,eoi
0448  E6 20			     out     020h,al

			     ;---

044A  80 3E 0049r 07		     cmp     crt_mode,7
044F  74 07			     je	     k40
0451  BA 03D8			     mov     dx,03d8h
0454  A0 0065r			     mov     al,crt_mode_set
0457  EE			     out     dx,al
0458			     k40:
0458  F6 06 0018r 08		     test    kb_flag_1,hold_state
045D  75 F9			     jnz     k40
045F  E9 FF33			     jmp     k27
0462			     k41:

			     ;---

0462  3C 37			     cmp     al,55
0464  75 06			     jne     k42
0466  B8 7200			     mov     ax,114*256
0469  E9 FBDD			     jmp     k57

			     ;---

046C			     k42:
046C  BB 012Er			     mov     bx,offset k8
046F  3C 3B			     cmp     al,59
0471  73 03			     jae     k43
0473  E9 FBCF			     jmp     k56
0476			     k43:
0476  BB 0168r			     mov     bx,offset k9
0479  E9 FC2B			     jmp     k63

			     ;------ NOT IN CONTROL SHIFT

047C			     k44:				     ; NOT-CTL-SHIFT

047C  3C 47			     cmp     al,71		     ; TEST FOR	KEYPAD REGION
047E  73 3E			     jae     k48		     ; HANDLE KEYPAD REGION
0480  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
0485  74 0A			     jz	     k54a		     ; TEST FOR	SHIFT STATE

			     ;------ UPPER CASE, HANDLE	SPECIAL	CASES

0487  3C 0F			     cmp     al,15		     ; BACK TAB	KEY
0489  75 09			     jne     k45		     ; NOT-BACK-TAB
048B  B8 0F00			     mov     ax,15*256		     ; SET PSEUDO SCAN CODE
048E  E9 FBB8			     jmp     k57		     ; BUFFER_FILL

0491			     k54a:
0491  E9 FB9E			     jmp k54

0494			     k45:				     ; NOT-BACK-TAB
0494  3C 37			     cmp     al,55		     ; PRINT SCREEN KEY
0496  75 09			     jne     k46		     ; NOT-PRINT-SCREEN

			     ;------ ISSUE INTERRUPT TO	INDICATE PRINT SCREEN FUNCTION

0498  B0 20			     mov     al,eoi		     ; END OF CURRENT INTERRUPT
049A  E6 20			     out     020h,al		     ;	SO FURTHER THINGS CAN HAPPEN
049C  CD 05			     int     5h			     ; ISSUE PRINT SCREEN INTERRUPT
049E  E9 FEF4			     jmp     k27		     ; GO BACK WITHOUT EOI OCCURRING

04A1			     k46:				     ; NOT-PRINT-SCREEN
04A1  3C 3B			     cmp     al,59		     ; FUNCTION	KEYS
04A3  72 06			     jb	     k47		     ; NOT-UPPER-FUNCTION
04A5  BB 01F5r			     mov     bx,offset k12	     ; UPPER CASE PSEUDO SCAN CODES
04A8  E9 FBFC			     jmp     k63		     ; TRANSLATE_SCAN

04AB			     k47:				     ; NOT-UPPER-FUNCTION
04AB  F6 06 0018r 02		     test    kb_flag_1,lat
04B0  74 06			     jz	     k98
04B2  BB 01BBr			     mov     bx,offset k11	     ; POINT TO	UPPER CASE TABLE
04B5  E9 FB8D			     jmp      k56		     ; OK, TRANSLATE THE CHAR
04B8  BB 0000e		     k98:    mov     bx,offset rust2
04BB  E9 FB87			     jmp     k56

			     ;------ KEYPAD KEYS, MUST TEST NUM	LOCK FOR DETERMINATION

04BE			     k48:				     ; KEYPAD-REGION
04BE  F6 06 0017r 20		     test    kb_flag,num_state	     ; ARE WE IN NUM_LOCK
04C3  75 23			     jnz     k52		     ; TEST FOR	SURE
04C5  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift ; ARE WE IN	SHIFT STATE
04CA  75 23			     jnz     k53		     ; IF SHIFTED, REALLY NUM STATE

			     ;------ BASE CASE FOR KEYPAD

04CC			     k49:				     ; BASE-CASE

04CC  3C 4A			     cmp     al,74		     ; SPECIAL CASE FOR	A COUPLE OF KEYS
04CE  74 0C			     je	     k50		     ; MINUS
04D0  3C 4E			     cmp     al,78
04D2  74 0E			     je	     k51
04D4  2C 47			     sub     al,71		     ; CONVERT ORIGIN
04D6  BB 0216r			     mov     bx,offset k15	     ; BASE CASE TABLE
04D9  E9 FBCD			     jmp       k64		     ; CONVERT TO PSEUDO SCAN

04DC  B8 4A2D		     k50:    mov     ax,74*256+'-'	     ; MINUS
04DF  E9 FB67			     jmp      k57		     ; BUFFER_FILL

04E2  B8 4E2B		     k51:    mov     ax,78*256+'+'	     ; PLUS
04E5  E9 FB61			     jmp      k57		     ; BUFFER_FILL

			     ;------ MIGHT BE NUM LOCK,	TEST SHIFT STATUS

04E8			     k52:				     ; ALMOST-NUM-STATE
04E8  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
04ED  75 DD			     jnz     k49		     ; SHIFTED TEMP OUT	OF NUM STATE

04EF			     k53:				     ; REALLY_NUM_STATE
04EF  2C 46			     sub     al,70		     ; CONVERT ORIGIN
04F1  BB 0209r			     mov     bx,offset k14	     ; NUM STATE TABLE
04F4  E9 FB4E			     jmp      k56		     ; TRANSLATE_CHAR
04F7			     kb_int  endp

04F7			     code    ends
				     end

Symbol Name			  Type	 Value

??DATE				  Text	 "02-17-22"
??FILENAME			  Text	 "keybrd  "
??TIME				  Text	 "22:06:34"
??VERSION			  Number 0500
@CPU				  Text	 0101H
@CURSEG				  Text	 CODE
@FILENAME			  Text	 KEYBRD
@WORDSIZE			  Text	 2
ACTIVE_PAGE			  Byte	 DATA:0062
ADDR_6845			  Word	 DATA:0063
ALT_INPUT			  Byte	 DATA:0019
ALT_KEY				  Number 0038
ALT_SHIFT			  Number 0008
BAD_ADDR_MARK			  Number 0002
BAD_CMD				  Number 0001
BAD_CRC				  Number 0010
BAD_DMA				  Number 0008
BAD_NEC				  Number 0020
BAD_SEEK			  Number 0040
BIOS_BREAK			  Byte	 DATA:0071
BOOT_LOCN			  Far16	 ABS0:7C00
BOOT_VEC			  Dword	 ABS0:0064
BUFFER_END			  Word	 DATA:0082
BUFFER_HEAD			  Word	 DATA:001A
BUFFER_START			  Word	 DATA:0080
BUFFER_TAIL			  Word	 DATA:001C
CAPS_KEY			  Number 0056
CAPS_SHIFT			  Number 0040
CAPS_STATE			  Number 0040
CMD_BLOCK			  Byte	 DATA:0042
CMD_PORT			  Number 0063
COD				  Number F000
CONTROL_BYTE			  Byte	 DATA:0076
CRT_COLS			  Word	 DATA:004A
CRT_LEN				  Word	 DATA:004C
CRT_MODE			  Byte	 DATA:0049
CRT_MODE_SET			  Byte	 DATA:0065
CRT_PALLETTE			  Byte	 DATA:0066
CRT_START			  Word	 DATA:004E
CSI				  Word	 ABS0:04D0
CTL_KEY				  Number 001D
CTL_SHIFT			  Number 0004
CURSOR_MODE			  Word	 DATA:0060
CURSOR_POSN			  Word	 DATA:0050
DAT				  Number 0040
DEL_KEY				  Number 0053
DISKETTE_PARM			  Dword	 ABS0:0078
DISKETTE_STATUS			  Byte	 DATA:0041
DISKW_STATUS			  Byte	 DATA:0074
DISK_POINTER			  Dword	 ABS0:0078
DISK_VECTOR			  Dword	 ABS0:0100
DMA				  Number 0000
DMA08				  Number 0008
DMA_BOUNDARY			  Number 0009
E1L				  Number 0004
EOI				  Number 0020
EQUIP_FLAG			  Word	 DATA:0010
EQ_FL				  Byte	 ABS0:0410
ERROR_BEEP			  Near16 CODE:000D
EXT_PTR				  Dword	 ABS0:007C
HDISK_INT			  Dword	 ABS0:0034
HD_ERROR			  Byte	 DATA:0042
HF_NUM				  Byte	 DATA:0075
HF_TBL_VEC			  Dword	 ABS0:0104
HOLD_STATE			  Number 0008
IDNPOL				  Word	 DATA:0090
INF_KEY				  Number 0059
INS_KEY				  Number 0052
INS_SHIFT			  Number 0080
INS_STATE			  Number 0080
INT5_PTR			  Word	 ABS0:0014
INTA00				  Number 0020
INTA01				  Number 0021
INT_ADDR			  Word	 ABS0:0020
INT_FLAG			  Number 0080
INT_PTR				  Dword	 ABS0:0020
INV_KEY_L			  Number 0058
INV_KEY_R			  Number 005A
INV_SHIFT			  Number 0004
IO_RAM_SIZE			  Word	 DATA:0015
IO_ROM_INIT			  Word	 DATA:0067
IO_ROM_SEG			  Word	 DATA:0069
K1				  Near16 CODE:00EA
K10				  Byte	 CODE:0181
K11				  Byte	 CODE:01BB
K12				  Byte	 CODE:01F5
K13				  Byte	 CODE:01FF
K14				  Byte	 CODE:0209
K15				  Byte	 CODE:0216
K16				  Near16 CODE:0254
K17				  Near16 CODE:027E
K18				  Near16 CODE:02F0
K19				  Near16 CODE:0305
K2				  Near16 CODE:0103
K20				  Near16 CODE:0313
K21				  Near16 CODE:0319
K22				  Near16 CODE:0320
K23				  Near16 CODE:0344
K24				  Near16 CODE:0368
K25				  Near16 CODE:0371
K26				  Near16 CODE:0390
K26A				  Near16 CODE:02ED
K27				  Near16 CODE:0395
K28				  Near16 CODE:03A4
K29				  Near16 CODE:03AE
K3				  Near16 CODE:0114
K30				  Near16 ----:---- Extern
K300				  Near16 CODE:02C2
K301				  Near16 CODE:02C7
K302				  Near16 CODE:02DC
K303				  Near16 CODE:0338
K304				  Near16 CODE:0354
K306				  Near16 CODE:03B9
K307				  Near16 CODE:039E
K31				  Near16 CODE:03C4
K32				  Near16 CODE:03CD
K33				  Near16 CODE:03E9
K34				  Near16 CODE:03FA
K35				  Near16 CODE:040A
K36				  Near16 CODE:040E
K37				  Near16 CODE:0410
K38				  Near16 CODE:041A
K39				  Near16 CODE:043D
K4				  Near16 CODE:0000
K40				  Near16 CODE:0458
K400				  Near16 CODE:02AB
K401				  Near16 CODE:02B3
K406				  Near16 CODE:0267
K406B				  Near16 CODE:0380
K407				  Near16 CODE:027B
K41				  Near16 CODE:0462
K42				  Near16 CODE:046C
K43				  Near16 CODE:0476
K44				  Near16 CODE:047C
K45				  Near16 CODE:0494
K46				  Near16 CODE:04A1
K47				  Near16 CODE:04AB
K48				  Near16 CODE:04BE
K49				  Near16 CODE:04CC
K5				  Near16 CODE:000C
K50				  Near16 CODE:04DC
K51				  Near16 CODE:04E2
K52				  Near16 CODE:04E8
K53				  Near16 CODE:04EF
K54				  Near16 CODE:0032
K54A				  Near16 CODE:0491
K55				  Near16 CODE:003B
K56				  Near16 CODE:0045
K57				  Near16 CODE:0049
K58				  Near16 CODE:0052
K59				  Near16 CODE:0081
K6				  Byte	 CODE:011A
K61				  Near16 CODE:0084
K62				  Near16 CODE:00A1
K63				  Near16 CODE:00A7
K64				  Near16 CODE:00A9
K65				  Near16 CODE:0016
K66				  Near16 CODE:001D
K67				  Near16 CODE:0026
K6L				  Number 000C
K7				  Byte	 CODE:0126
K8				  Byte	 CODE:012E
K89				  Near16 ----:---- Extern
K9				  Byte	 CODE:0168
K98				  Near16 CODE:04B8
K99				  Near16 CODE:009C
KBDINT				  Number 0002
KBD_IN				  Number 0060
KB_BUFFER			  Word	 DATA:001E
KB_BUFFER_END			  Word	 DATA:003E
KB_CTL				  Number 0061
KB_DAT				  Number 0060
KB_FLAG				  Byte	 DATA:0017
KB_FLAG_1			  Byte	 DATA:0018
KB_INT				  Far16	 CODE:022C
KEYBOARD_IO			  Far16	 CODE:00D3
LAST_VAL			  Byte	 DATA:006B
LAT				  Number 0002
LAT_KEY				  Number 0057
LAT_SHIFT			  Number 0001
LEFT_KEY			  Number 0054
LEFT_SHIFT			  Number 0002
MAX_PERIOD			  Number 0540
MEMORY_SIZE			  Word	 DATA:0013
MEM_SIZ				  Word	 ABS0:0413
MFG_TST				  Byte	 DATA:0012
MIN_PERIOD			  Number 0410
MOTOR_COUNT			  Byte	 DATA:0040
MOTOR_STATUS			  Byte	 DATA:003F
MOTOR_WAIT			  Number 0025
NEC_STATUS			  Byte	 DATA:0042
NMI_PTR				  Word	 ABS0:0008
NUM_KEY				  Number 0045
NUM_SHIFT			  Number 0020
NUM_STATE			  Number 0020
ORG_VECTOR			  Dword	 ABS0:004C
PARM_PTR			  Dword	 ABS0:0074
PORT_A				  Number 0060
PORT_B				  Number 0061
PORT_C				  Number 0062
PORT_OFF			  Byte	 DATA:0077
PRINTER_BASE			  Word	 DATA:0008
RECORD_NOT_FND			  Number 0004
REGEN				  Byte	 VIDEO_RAM:0000
REGENW				  Word	 VIDEO_RAM:0000
RESET				  Near16 ----:---- Extern
RESET_FLAG			  Word	 DATA:0072
RES_FL				  Word	 ABS0:0472
RIGHT_KEY			  Number 0055
RIGHT_SHIFT			  Number 0001
RS232_BASE			  Word	 DATA:0000
RUST				  Near16 ----:---- Extern
RUST2				  Near16 ----:---- Extern
RUS_KEY				  Number 005B
SCROLL_KEY			  Number 0046
SCROLL_SHIFT			  Number 0010
SCROLL_STATE			  Number 0010
SEEK_STATUS			  Byte	 DATA:003E
STA				  Number 0030
STATUS_BYTE			  Byte	 XXDATA:0000
STAT_OFFSET			  Byte	 DATA:007C
STG_LOC0			  Byte	 ABS0:0000
TABL				  Word	 DATA:00E0
TABL1				  Word	 ABS0:04E0
TIMER				  Number 0040
TIMERO				  Number 0040
TIMER_HIGH			  Word	 DATA:006E
TIMER_LOW			  Word	 DATA:006C
TIMER_OFL			  Byte	 DATA:0070
TIME_OUT			  Number 0080
TIM_CTL				  Number 0043
TMINT				  Number 0001
TMP_TOS				  Word	 DATA:3FF0
TOS				  Word	 STAC:0100
VIDEO_INT			  Word	 ABS0:0040
WRITE_PROTECT			  Number 0003
XXDAT				  Number 0050
ZB				  Byte	 ABS0:0000
ZW				  Word	 ABS0:0000

Groups & Segments		  Bit Size Align  Combine Class

ABS0				  16  7C00  AT 0000
CODE				  16  04F7 Byte	  Public
DATA				  16  3FF0  AT 0040
STAC				  16  0100  AT 0030
VIDEO_RAM			  16  4000  AT B800
XXDATA				  16  0001  AT 0050

