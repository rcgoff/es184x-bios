Turbo Assembler	 Version 5.0	    08-05-22 07:15:07	    Page 1
keybrd.ASM



				     PUBLIC keyboard_io
				     PUBLIC kb_int
				     PUBLIC error_beep

				     EXTERN rust:near	     ;RUS ISO LCASE
				     EXTERN rust2:near	     ;RUS ISO UCASE
				     EXTERN k30:near
				     EXTERN reset:near
				     EXTERN low866:near	     ;RUS 866 LCASE
				     EXTERN up866:near	     ;RUS 866 UCASE


			     ;___int 16_________________
			     ;
			     ;  Программа поддержки клавиатуры
			     ;
			     ;  Эта программа считывает в регистр
			     ; AX код сканирования клавиши и код
			     ; ASCII из буфера клавиатуры.
			     ;
			     ;  Программа выполняет три функции, код
			     ; которых задается в регистре AH:
			     ;
			     ;   AH=0 - считать следующий символ
			     ;    из буфера.При выходе код
			     ;    сканирования в AH,код
			     ;    ASCII в AL.
			     ;  AH=1 - установить ZF, если код
			     ;    ASCII прочитан:
			     ;
			     ;    ZF=0 - буфер заполнен,
			     ;    ZF=1 - буфер пустой.
			     ;  При выходе в AX помещен адрес вершины буфера клавиатуры.
			     ;  AH=2 - возврат текущего состояния в регистр AL
			     ;     из постоянно распределенной области памяти с
			     ;  адресом 00417H.
			     ;
			     ;  При выполнении программ клавиатуры используются флажки,
			     ; которые устанавливаются в постоянно распределенной области
			     ; памяти по адресам 00417H и 00418H и имеют значение:
			     ;  00417H
			     ;	       0 - правое	переключение регистра;
			     ;	       1 - левое переключение регистра;
			     ;		  2 - УПР;
			     ;	       3 - ДОП;
			     ;	       4 - ФСД;
			     ;	       5 - ЦИФ;
			     ;	       6 - ФПБ;
			     ;	       7 - ВСТ;
			     ;  00418H
			     ;	       0 - состояние клавиши ЛАТ между нажатием	и отжатием;
			     ;	       1 - ЛАТ;
			     ;	       2 - Р/Л;
			     ;	       3 - пауза;
			     ;	       4 - ФСД;
			     ;	       5 - ЦИФ;
			     ;	       6 - ФПБ;
			     ;        7 - ВСТ.
			     ;
			     ;  Флажки, соответствующие разрядам 4-7 постоянно распределенной
			     ; области памяти с адресом 00417H, устанавливаются по нажатию
			     ; клавиш ВСТ, ФПБ, ЦИФ, ФСД и сохраняют свои значения до сле-
			     ; дующего нажатия соответствующей клавиши.
			     ; Одноименные флажки, соответствующие разрядам 4-7 постоянно
			     ; распределенной области памяти с адресом 00418H, и флажки
			     ; ДОП, УПР, левое переключение регистра, правое переключение
			     ; регистра, Р/Л устанавливаются по нажатию клавиш и сбрасываются
			     ; по отжатию.
			     ;
			     ;------------------------------
0000			     code    segment byte public
				     assume  cs:code,ds:data

0000			     k4	     proc    near
0000  83 C3 02			     add     bx,2
			     ;1841   cmp  bx,buffer_end		      ; конец буфера ?
0003  81 FB 003Er		     cmp  bx,offset kb_buffer_end     ; конец буфера ?
0007  75 03			     jne     k5			      ; нет - продолжить
			     ;1841   mov     bx,buffer_start	      ; да - уст начала буфера
0009  BB 001Er			     mov     bx,offset kb_buffer      ; да - уст начала буфера
000C			     k5:
000C  C3			     ret
000D			     k4	     endp

000D			     error_beep	proc near
000D  50			     push    ax
000E  53			     push    bx
000F  51			     push    cx
0010  BB 00C0			     mov     bx,0c0h
0013  E4 61			     in	     al,kb_ctl
0015  50			     push    ax
0016			     k65:
0016  24 FC			     and     al,0fch
0018  E6 61			     out     kb_ctl,al
001A  B9 0048			     mov     cx,48h
001D  E2 FE		     k66:    loop    k66
001F  0C 02			     or	     al,2
0021  E6 61			     out     kb_ctl,al
0023  B9 0048			     mov     cx,48h
0026  E2 FE		     k67:    loop    k67
0028  4B			     dec     bx
0029  75 EB			     jnz     k65
002B  58			     pop     ax
002C  E6 61			     out     kb_ctl,al
002E  59			     pop     cx
002F  5B			     pop     bx
0030  58			     pop     ax
0031  C3			     ret
0032			     error_beep	     endp

			     ;------ PLAIN OLD LOWER CASE

0032			     k54:				     ;rc обычный нижний регистр
0032  3C 3B			     cmp     al,59		     ; TEST FOR FUNCTION KEYS
0034  72 3E			     jb	     caps		     ; NOT-LOWER-FUNCTION
0036  B0 00			     mov     al,0		     ; SCAN CODE IN AH ALREADY
0038  EB 04			     jmp     short k57		     ; BUFFER_FILL

			     ;------TRANSLATE THE CHARACTER

003A			     k56:				     ; TRANSLATE-CHAR
003A  FE C8			     dec     al			     ; CONVERT ORIGIN
003C  2E: D7			     xlat    cs:k11		     ; CONVERT THE SCAN CODE TO ASCII

			     ;------ PUT CHARACTER INTO BUFFER

003E			     k57:				     ; BUFFER-FILL
003E  3C FF			     cmp     al,-1		     ; IS THIS AN IGNORE CHAR
0040  74 07			     je	     k59		     ; YES, DO NOTHING WITH IT
0042  80 FC FF			     cmp     ah,-1		     ; LOOK FOR -1 PSEUDO SCAN
0045  74 02			     je	     k59		     ; NEAR_INTERRUPT_RETURN

0047			     k58:				     ; BUFFER-FILL-NOTEST
0047  EB 03			     jmp     short k61		     ;old caps processing removed

0049			     k59:				     ; NEAR-INTERRUPT-RETURN
0049  E9 0347			     jmp     k26		     ; INTERRUPT_RETURN

004C			     k61:				     ; NOT-CAPS-STATE
004C  8B 1E 001Cr		     mov     bx,buffer_tail	     ; GET THE END POINTER TO THE BUFFER
0050  8B F3			     mov     si,bx		     ; SAVE THE VALUE
0052  E8 FFAB			     call   k4			     ; ADVANCE THE TAIL
0055  3B 1E 001Ar		     cmp     bx,buffer_head	     ; HAS THE BUFFER WRAPPED AROUND
0059  74 09			     je	     k62		     ; BUFFER_FULL_BEEP
005B  89 04			     mov     word ptr [si],ax	     ; STORE THE VALUE
005D  89 1E 001Cr		     mov     buffer_tail,bx	     ; MOVE THE POINTER UP
0061  E9 032F			     jmp     k26		     ; INTERRUPT_RETURN

			     ;------ BUFFER IS FULL, SOUND THE BEEPER

0064			     k62:				     ; BUFFER-FULL-BEEP
0064  E8 FFA6			     call    error_beep
0067  E9 0329			     jmp     k26		     ; INTERRUPT_RETURN

			     ;------ TRANSLATE SCAN FOR PSEUDO SCAN CODES

006A			     k63:				     ; TRANSLATE-SCAN
006A  2C 3B			     sub     al,59		     ; CONVERT ORIGIN TO FUNCTION KEYS
006C			     k64:				     ; TRANSLATE-SCAN-ORGD
006C  2E: D7			     xlat    cs:k9		     ; CTL TABLE SCAN
006E  8A E0			     mov     ah,al		     ; PUT VALUE INTO AH
0070  B0 00			     mov     al,0		     ; ZERO ASCII CODE
0072  EB CA			     jmp     k57		     ; PUT IT INTO THE BUFFER

			     ;------ set keyb boolean value: 0=lower, 1=upper case

0074  8A 16 0018r	     caps:   mov     dl,kb_flag_1			     ;bit 1 set =lat
0078  80 E2 02			     and     dl,lat
007B  80 F2 02			     xor     dl,lat				     ;DL:=rus*2 (bit 1 set=rus)
007E  BB 0207r			     mov     bx,offset capst			     ;lat caps-able table
0081  74 03			     jz	     decd				     ;Z=lat
0083  BB 020Fr			     mov     bx,offset capstru			     ;rus caps-able table
0086  50		     decd:   push    ax					     ;save scancode in AL and AH
										     ;(later code destroys AH, DECODE - dec al)
			     ;------ decode necessary byte in array
			     ;and position in the byte
			     ;on call, AL contains scan-code
			     ;BX contains pointer to array
			     ;on return, we have boolean value:
			     ;is this code CapsLock-influenced (CY=0) or not (CY=1)
			     ;ax and cx will be destroyed

0087			     decode  proc near
0087  53			     push bx
0088  B4 00			     mov ah,0
008A  48			     dec ax	     ;dec because scancodes starts from 1 (not 0). ax (not al) i.e. 1 byte instead of 2
008B  B5 00			     mov ch,0
008D  B3 08			     mov bl,8
008F  F6 F3			     div bl	     ;now quotient (byte nr) is in AL and the remainder (index in byte) is in AH
			     ;get byte from table
0091  8A CC			     mov cl,ah	     ;remainder (index in byte)
0093  5B			     pop bx	     ;restore pointer to array
0094  2E: D7			     xlat cs:capst
			     ;set necessary bit to 1 in mask
0096  FE C1			     inc cl	     ;index in byte starts from 0, but we're shifting from CY
0098  F9			     stc
0099  D2 DD			     rcr ch,cl	     ;index=0 means bit 7 (CAPST filled in tha way) - shift to RIGHT
			     ;get necessary bit in carry flag
009B  22 C5			     and al,ch
009D  D2 D0			     rcl al,cl
009F			     decode  endp
			     ;now CY = code in AL is /caps_able

009F  E8 002D			     call    upplow				     ;returns CY = uppercase, CL=2
			     ;prepare pointer for keyboard table selection
00A2  B7 00			     mov     bh,0
00A4  8A DA			     mov     bl,dl				     ;DL=2 if rus table, see above
00A6  D3 D3			     rcl     bx,cl				     ;make offset for tables: BX.1=1 if uppercase, BX.3=1 if rus
00A8  80 3E 0091r 02		     cmp     byte ptr idnpol+1,02		     ;idnpol=0800:iso, =0802:866
00AD  75 04			     jnz     setbl				     ;skip if not 866
			     ;offset for 866 tables
00AF  D0 E2			     shl     dl,1				     ;DL=rus*4
00B1  02 DA			     add     bl,dl				     ;if rus,switch to 866
			     ;table selection
00B3  2E 8B 9F		     setbl:  db	     2eh,8bh,9fh
00B6  00BFr			     dw	     scode_tbl_sel			     ;this is equal to: "setbl: mov  bx,cs: [offset scode_tbl_sel+bx]"
00B8  58			     pop     ax					     ;restore scancode in AL and AH
00B9  E9 FF7E			     jmp     k56

00BC  03*(00)			     db	     3 dup (0)

00BF			     scode_tbl_sel label word
00BF  0193r			     dw	     k10		     ;LAT LCASE
00C1  01CDr			     dw	     k11		     ;LAT UCSASE
00C3  0000			     dw	     0			     ;empty space for Alpha-DOS v1.05 ES1840.SYS compartibility:
00C5  0000			     dw	     0			     ;  byte at F000:E820 should be 00h if "new keyboard"
00C7  0000e			     dw	     rust		     ;RUS ISO LCASE
00C9  0000e			     dw	     rust2		     ;RUS ISO UCASE
00CB  0000e			     dw	     low866		     ;RUS 866 LCASE
00CD  0000e			     dw	     up866		     ;RUS 866 UCASE


			     ;------ check if we need to use UPPER or LOWER keys
			     ;on call, CY= /this-scancode-is-caps-able
			     ;on return, CY=UPPERCASE, CL=2
			     ;in other words, CY=SHIFT xor (CAPS & CAPS_ABLE)
			     ;AX,BX,CL are destroyed

00CF  B1 02		     upplow: mov     cl,2
00D1  D2 DB			     rcr     bl,cl				     ;bl = /caps_able in Z position (bit 6)
00D3  A0 0017r			     mov     al,kb_flag
00D6  A8 03			     test    al,left_shift+right_shift		     ;z flag=0 if SHIFT
00D8  9F			     lahf
00D9  8A FC			     mov     bh,ah				     ;bh = /shift
00DB  A8 40			     test    al,caps_state			     ;z flag=0 if CAPS
00DD  9F			     lahf					     ;ah = /caps

			     ;formula is: value= SHIFT xor (CAPS & CAPS_ABLE)
			     ;that is equal to: /SHIFT xor (/CAPS or /CAPS_ABLE)

			     ;now, calculate by formula
00DE  0A E3			     or	     ah,bl
00E0  32 E7			     xor     ah,bh				     ;now bit6 (Z-position) of ah contains answer
00E2  D2 D4			     rcl     ah,cl				     ;now CY contains answer
00E4  C3			     retn

			     ;---
00E5			     keyboard_io proc	     far
00E5  FB			     sti		     ;
00E6  1E			     push    ds
00E7  53			     push    bx
00E8  BB 0000s			     mov     bx,data
00EB  8E DB			     mov     ds,bx	     ; установить сегмент данных
00ED  0A E4			     or	     ah,ah	     ; AH=0
00EF  74 0B			     jz	     k1		  ; переход к считыванию следующего символа
00F1  FE CC			     dec     ah		     ; AH=1
00F3  74 20			     jz	     k2		  ; переход к считыванию кода ASCII
00F5  FE CC			     dec     ah			  ; AH=2
00F7  74 2D			     jz	     k3		  ; переход к получению байта состояния
00F9  5B			     pop     bx			  ; восстановить регистр
00FA  1F			     pop     ds
00FB  CF			     iret

			     ;  Считывание кода сканирования и кода ASCII из буфера клавиатуры
			     ;
00FC			     k1:
00FC  FB			     sti	     ; уст признака разрешения прерывания
00FD  90			     nop		     ; задержка
00FE  FA			     cli	     ; сброс признака разрешения прерывания
00FF  8B 1E 001Ar		     mov     bx,buffer_head  ; уст вершину буфера по чтению
0103  3B 1E 001Cr		     cmp     bx,buffer_tail  ; сравнить с вершиной буфера по записи
0107  74 F3			     jz	     k1
0109  8B 07			     mov     ax,word ptr [bx] ; получить код сканирования и код ASCII
010B  E8 FEF2			     call    k4
010E  89 1E 001Ar		     mov     buffer_head,bx  ; запомнить вершину буфера по чтению
0112  5B			     pop     bx		     ; восстановить регистр
0113  1F			     pop     ds		     ; восстановить сегмент
0114  CF			     iret		     ; возврат к программе

			     ;  Считать код ASCII

0115			     k2:
0115  FA			     cli	     ; Сброс признака разрешения прерывания
0116  8B 1E 001Ar		     mov     bx,buffer_head  ; получить указатель вершины буфера
							     ; по чтению
011A  3B 1E 001Cr		     cmp     bx,buffer_tail  ; сравнить с вершиной буфера по записи
011E  8B 07			     mov     ax,word ptr [bx]
0120  FB			     sti		     ; уст признак разрешения прерывания
0121  5B			     pop     bx		     ; восстановить регистр
0122  1F			     pop     ds		     ; восстановить сегмент
0123  CA 0002			     ret     2

			     ;  Получение младшего байта состояния (флажков)

0126			     k3:
0126  A0 0017r			     mov     al,kb_flag	     ; получить младший байт состояния на
0129  5B			     pop     bx		     ; восстановить регистр
012A  1F			     pop     ds		     ; восстановить сегмент
012B  CF			     iret		     ; возврат к программе
012C			     keyboard_io     endp

			     ;  Таблица кодов сканирования управляющих клавиш

012C			     k6	     label   byte
012C  52			     db	     ins_key
012D  56 45 46 38 1D		     db	     caps_key,num_key,scroll_key,alt_key,ctl_key
0132  54 55			     db	     left_key,right_key
0134  58			     db	     inv_key_l
0135  5A 57 5B			     db	     inv_key_r,lat_key,rus_key
      =000C		     k6l     equ     0ch

			     ;  Таблица масок нажатых управляющих клавиш

0138			     k7	     label   byte
0138  80			     db	     ins_shift
0139  40 20 10 08 04		     db	     caps_shift,num_shift,scroll_shift,alt_shift,ctl_shift
013E  02 01			     db	     left_shift,right_shift


			     ;  Таблица кодов сканирования при нажатой клавише УПР для
			     ; кодов сканирования клавиш меньше 59

0140  1B FF 00 FF FF FF	1E+  k8	     db	     27,-1,0,-1,-1,-1,30,-1
      FF
0148  FF FF FF 1F FF 7F	FF+	     db	     -1,-1,-1,31,-1,127,-1,17
      11
0150  17 05 12 14 19 15	09+	     db	     23,5,18,20,25,21,9,15
      0F
0158  10 1B 1D 0A FF 01	13	     db	     16,27,29,10,-1,1,19
015F  04 06 07 08 0A 0B	0C+	     db	     4,6,7,8,10,11,12,-1,-1
      FF FF
0168  FF FF 1C 1A 18 03	16+	     db	     -1,-1,28,26,24,3,22,2
      02
0170  0E 0D FF FF FF FF	FF+	     db	     14,13,-1,-1,-1,-1,-1,-1
      FF
0178  20 FF			     db	     ' ',-1

			     ;  Таблица кодов сканирования при нажатой клавише УПР для
			     ; кодов сканирования клавиш больше 59
017A			     k9	     label   byte
017A  5E 5F 60 61 62 63	64+	     db	     94,95,96,97,98,99,100,101
      65
0182  66 67 FF FF 77 FF	84+	     db	     102,103,-1,-1,119,-1,132,-1
      FF
018A  73 FF 74 FF 75 FF	76+	     db	     115,-1,116,-1,117,-1,118,-1
      FF
0192  FF			     db	     -1

			     ;  Таблица кодов ASCII нижнего регистра клавиатуры

0193			     k10     label   byte
0193  1B 31 32 33 34 35	36+	     db	     27,'1234567'	     ;byte1
      37
019B  38 39 30 2D 3D 08	09+	     db	     '890-=',08h,09h,'q'     ;byte2
      71
01A3  77 65 72 74 79 75	69+	     db	     'wertyuio'		     ;byte3
      6F
01AB  70 5B 5D 0D FF 61	73+	     db	     'p[]',0dh,-1,'asd'	     ;byte4
      64
01B3  66 67 68 6A 6B 6C	3B+	     db	     'fghjkl;:'		     ;byte5
      3A
01BB  60 7E 5C 7A 78 63	76+	     db	     '`~\zxcvb'		     ;byte6
      62
01C3  6E 6D 2C 2E 2F 7B	2A+	     db	     'nm,./{*',-1	     ;byte7
      FF
01CB  20 7D			     db	     ' }'		     ;byte8

			     ;  Таблица кодов ASCII верхнего регистра клавиатуры

01CD			     k11     label   byte
01CD  1B 21 40 23 24 25	5E+	     db	     27,'!@#$%^&'	     ;byte1
      26
01D5  2A 28 29 5F 2B 08	00+	     db	     '*()_+',08h,0,'Q'	     ;byte2
      51
01DD  57 45 52 54 59 55	49+	     db	     'WERTYUIO'		     ;byte3
      4F
01E5  50 FF FF 0D FF 41	53+	     db	     'P',-1,-1,0dh,-1,'ASD'  ;byte4
      44
01ED  46 47 48 4A 4B 4C	27+	     db	     'FGHJKL',027h,'"'	     ;byte5
      22
01F5  FF FF 7C 5A 58 43	56+	     db	     -1,-1,'|ZXCVB'	     ;byte6
      42
01FD  4E 4D 3C 3E 3F FF	00+	     db	     'NM<>?',-1,0,-1	     ;byte7
      FF
0205  20 FF			     db	     ' ',-1		     ;byte8


			     ;------ CapsLock table (latin)

0207			     capst   label   byte
			     ;		     27,'1234567'	     ;byte1
0207  FF			     db	     0ffh

			     ;		     '890-='08h,09h,'q'	     ;byte2
0208  FE			     db	     11111110b

			     ;		     'wertyuio'		     ;byte3
0209  00			     db	     0

			     ;		     'p[]',0dh,-1,'asd'	     ;byte4
020A  78			     db	     01111000b

			     ;		     'fghjkl;:'		     ;byte5
020B  03			     db	     00000011b

			     ;		     '`~\zxcvb'		     ;byte6
020C  E0			     db	     11100000b

			     ;		     'nm,./{*',-1	     ;byte7
020D  3F			     db	     00111111b

			     ;		     ' }'		     ;byte8
020E  FF			     db	     0ffh


			     ;------ CapsLock table (cyrillic)
			     ;first 3 bytes are the same

020F			     capstru label   byte
			     ;					     ;byte1
020F  FF			     db	     0ffh

			     ;		     последняя	- Й	     ;byte2
0210  FE			     db	     11111110b

			     ;		     'ЦУКЕНГШЩ'		     ;byte3
0211  00			     db	     0

			     ;		     'ЗЖЭ',0dh,-1,'ФЫВ'	     ;byte4
0212  18			     db	     00011000b

			     ;		     'АПРОЛД',27h,'"'  ;byte5
0213  03			     db	     00000011b

			     ;		     'БЮ|ЯЧСМИ'		     ;byte6
0214  20			     db	     00100000b

			     ;		     'ТЬ<>?Х',0,-1		     ;byte7
0215  3B			     db	     00111011b

			     ;		     ' Ъ'		     ;byte8
0216  BF			     db	     10111111b



			     ;  Таблица кодов сканирования клавиш Ф11 - Ф20 (на верхнем
			     ; регистре Ф1 - Ф10)

0217			     k12     label   byte
0217  54 55 56 57 58 59	5A	     db	     84,85,86,87,88,89,90
021E  5B 5C 5D			     db	     91,92,93

			     ;  Таблица кодов сканирования одновременно нажатых клавиш
			     ; ДОП и Ф1 - Ф10

0221			     k13     label byte
0221  68 69 6A 6B 6C		     db	     104,105,106,107,108
0226  6D 6E 6F 70 71		     db	     109,110,111,112,113

			     ;  Таблица кодов правого пятнадцатиклавишного поля на верхнем
			     ; регистре

022B			     k14     label   byte
022B  37 38 39 2D 34 35	36+	     db	     '789-456+1230.'
      2B 31 32 33 30 2E

			     ;  Таблица кодов правого пятнадцатиклавишного поля на нижнем
			     ; регистре

0238			     k15     label byte
0238  47 48 49 FF 4B FF	4D	     db	     71,72,73,-1,75,-1,77
023F  FF 4F 50 51 52 53		     db	     -1,79,80,81,82,83

			     ;1841   org     0e987h

			     ;----INT 9--------------------------
			     ;
			     ;   Программа обработки прерывания клавиатуры
			     ;
			     ; Программа считывает код сканирования клавиши в регистр AL.
			     ; Единичное состояние разряда 7 в коде сканирования означает,
			     ; что клавиша отжата.
			     ;  В результате выполнения программы в регистре AX формируется
			     ; слово, старший байт которого (AH) содержит код сканирования,
			     ; а младший (AL) - код ASCII. Эта информация помещается в буфер
			     ; клавиатуры. После заполнения буфера подается звуковой сигнал.
			     ;
			     ;-----------------------------------

0245			     kb_int proc far
0245  FB			     sti		; установка признака разрешения прерывания
0246  50			     push    ax
0247  53			     push    bx
0248  51			     push    cx
0249  52			     push    dx
024A  56			     push    si
024B  57			     push    di
024C  1E			     push    ds
024D  06			     push    es
024E  FC			     cld		    ; установить признак направления вперед
024F  B8 0000s			     mov     ax,data	    ; установить адресацию
0252  8E D8			     mov     ds,ax
0254  E4 60			     in	     al,kb_dat	    ; считать код сканирования
0256  50			     push    ax
0257  E4 61			     in	     al,kb_ctl	    ; считать значение порта 61
0259  8A E0			     mov     ah,al	    ; сохранить считанное значение
025B  0C 80			     or	     al,80h	    ; установить бит 7 порта 61
025D  E6 61			     out     kb_ctl,al	    ; для работы с клавиатурой
025F  86 E0			     xchg    ah,al	    ; восстановить значение порта 61
0261  E6 61			     out     kb_ctl,al
0263  58			     pop     ax		    ; восстановить код сканирования
0264  8A E0			     mov     ah,al	    ; и сохранить его в AH

			     ;---

0266  3C FF			     cmp     al,0ffh  ; сравнение с кодом заполнения буфера
						      ; клавиатуры
0268  75 03			     jnz     k16	     ; продолжить
026A  E9 FDF7			     jmp     k62     ; переход на звуковой сигнал по заполнению
						     ; буфера клавиатуры

026D			     k16:
026D  24 7F			     and     al,07fh	     ; сброс бита отжатия клавиши
026F  0E			     push    cs
0270  07			     pop     es
0271  BF 012Cr			     mov     di,offset k6  ; установить адрес таблицы сканирования
							   ; управляющих клавиш
0274  B9 000C			     mov     cx,k6l
0277  F2> AE			     repne   scasb   ; сравнение полученного кода сканирования с содержимым таблицы
0279  8A C4			     mov     al,ah	     ; запомнить код сканирования
027B  74 17			     je	     k17	     ; переход по совпадению
027D  E9 00F4			     jmp     k25	     ; переход по несовпадению

0280			     k406:				     ;rc это обработчик клавиши Ё
0280  F6 06 0018r 02		     test    kb_flag_1,lat
0285  75 6B			     jnz     k26a		     ;rc в ЛАТ-режиме клавиша не генерирует ничего, выход
0287  E8 FE45			     call    upplow		     ;rc CY=1: верхний регистр
028A  B8 5CF1			     mov     ax,5cf1h		     ;rc ё
028D  73 02			     jnc     k407
028F  B0 F0			     mov     al,0f0h		     ;rc Ё (5ch в AH уже есть)
0291			     k407:				     ;rc передвинул сюда, двумя строками выше (это ж не получение маски)
0291  E9 FDAA			     jmp     k57

			     ;  Получение маски нажатой управляющей клавиши


0294  81 EF 012Dr	     k17:    sub     di,offset k6+1	     ;rc получить индекс упр клавиши в табл k6, начиная с 0
0298  83 FF 08			     cmp     di,8
029B  72 2E			     jb	     k300		     ;rc меньше 8 (это совместимые клавиши) обрабатываются как в IBM
029D  B4 06			     mov     ah,6		     ;rc маска 0b00000110 для руслат (inv_shift + lat)
029F  83 FF 0A			     cmp     di,0ah
02A2  72 2C			     jb	     k301		     ;rc если inv_key (Р/Л)
02A4  A8 80			     test    al,80h
02A6  74 4A			     jz	     k26a		     ;rc если не отпускание РУС или ЛАТ -> вых (борьба с автоповтором?)

							     ;rc здесь мы после отпускания РУС или ЛАТ
02A8  50			     push    ax
02A9  A0 0018r			     mov     al,kb_flag_1
02AC  24 FC			     and     al,not lat+lat_shift    ;rc not действует на оба, сбрасываем lat и "светодиодный" lat
02AE  83 FF 0B			     cmp     di,0bh
02B1  74 0C			     je	     k401		     ;rc переход, если РУС
							     ;rc если ЛАТ:
02B3  A8 04			     test    al,inv_shift
02B5  74 04			     jz	     k400		     ;rc переход по ненажатию Р/Л
02B7  0C 01			     or	     al,lat_shift	     ;rc нажата Р/Л->отметить нажатие ("светодиодный") ЛАТа и всё
02B9  EB 0A			     jmp     short k402
02BB  0C 03		     k400:   or	     al,lat+lat_shift	     ;rc не нажата Р/Л и нажат ЛАТ->включить ЛАТ и факт нажатия ("светодиодный")
02BD  EB 06			     jmp     short k402

							     ;РУС:
02BF  A8 04		     k401:   test    al,inv_shift
02C1  74 02			     jz	     k402		     ;rc по ненажатию Р/Л выход ("светодиодный" выключен заранее)
02C3  0C 02			     or	     al,lat		     ;rc нажата Р/Л и отпущена РУС: включить lat ///???
02C5  A2 0018r		     k402:   mov     kb_flag_1,al
02C8  58			     pop     ax
02C9  EB 27			     jmp     short k26a

							     ;rc далее IBM-ский код
02CB  2E: 8A A5	0138r	     k300:   mov     ah,cs:k7[di]	     ;rc аналогично IBM считыаем маску из k7 для совместимых упр клавиш
02D0			     k301:
02D0  A8 80			     test    al,80h	     ; клавиша отжата ?
02D2  75 74			     jnz     k23     ; переход, если клавиша отжата

			     ;  Управляющая клавиша нажата

02D4  80 FC 10			     cmp     ah,scroll_shift ; нажата управляющая клавиша с
							     ; запоминанием ?
02D7  73 1C			     jae     k18	     ; переход, если да

			     ;---
02D9  80 FC 06			     cmp     ah,6
02DC  74 06			     je	     k302	     ; rc нажата Р/Л

02DE  08 26 0017r		     or	     kb_flag,ah	     ; установка масок управляющих клавиш
							     ; без запоминания
02E2  EB 0E			     jmp     short k26a	     ; к выходу из прерывания

02E4			     k302:
02E4  50			     push    ax
02E5  A0 0018r			     mov     al,kb_flag_1
02E8  0C 06			     or	     al,inv_shift+lat	     ;rc обработка нажатия Р/Л: ставим факт нажатия и латиницу
02EA  A8 01			     test    al,lat_shift	     ;rc светодиодный ЛАТ есть?
02EC  74 D7			     jz	     k402		     ;rc нет -> выходим
02EE  24 FD			     and     al,not lat		     ;rc есть -> сбрасываем латиницу
02F0  EB D3			     jmp     short k402
			     ;---------------------
02F2			     k26a:
02F2  E9 009E			     jmp     k26
			     ;---------------------

			     ;  Опрос нажатия клавиши с запоминанием

02F5			     k18:
02F5  F6 06 0017r 04		     test    kb_flag,ctl_shift	       ; опрос клавиши УПР
02FA  75 78			     jnz     k25
02FC  3C 52			     cmp     al,ins_key		       ; опрос клавиши ВСТ
02FE  75 24			     jnz     k22
0300  F6 06 0017r 08		     test    kb_flag,alt_shift	       ; опрос клавиши ДОП
0305  74 02			     jz	     k19
0307  EB 6B			     jmp     short k25
0309  F6 06 0017r 20	     k19:    test    kb_flag,num_state	; опрос клавиши ЦИФ
030E  75 0D			     jnz     k21
0310  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift ; опрос клавиш левого
							  ; и правого переключения регистров
0315  74 0D			     jz	     k22

0317			     k20:
0317  B8 5230			     mov     ax,5230h
031A  E9 FD21			     jmp     k57	   ; установка кода нуля

031D			     k21:
031D  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
0322  74 F3			     jz	     k20

0324			     k22:
0324  84 26 0018r		     test    ah,kb_flag_1
0328  75 69			     jnz     k26
032A  08 26 0018r		     or	     kb_flag_1,ah
032E  30 26 0017r		     xor     kb_flag,ah
0332  3C 52			     cmp     al,ins_key
0334  75 5D			     jne     k26
0336  B8 5200			     mov     ax,ins_key*256
0339  E9 FD02			     jmp     k57

033C			     k303:					     ;rc отжатие Р/Л
033C  80 26 0018r FB		     and     kb_flag_1,not inv_shift	     ;rc сброс флажка нажатия Р/Л
0341  80 36 0018r 02		     xor     kb_flag_1,lat		     ;rc переключение раскладки
0346  EB 10			     jmp     short k304

			     ;  Управляющая клавиша отжата
						     ;rc если сюда попали при нажатии ЕС-клавиши Р/Л, то ah=6
0348			     k23:

0348  80 FC 10			     cmp     ah,scroll_shift
034B  73 1F			     jae     k24			     ;rc это были переключатели с фиксацией?
034D  F6 D4			     not     ah				     ;rc да - переходим к ним
034F  80 FC F9			     cmp     ah,0f9h			     ;rc было ah=6? Р/Л?
0352  74 E8			     je	     k303			     ;rc да->обрабатываем
0354  20 26 0017r		     and     kb_flag,ah			     ;rc это и далее - продолжение IBM-ского кода
0358			     k304:
0358  3C B8			     cmp     al,alt_key+80h
035A  75 37			     jne     k26

			     ;---

035C  A0 0019r			     mov     al,alt_input
035F  B4 00			     mov     ah,0
0361  88 26 0019r		     mov     alt_input,ah
0365  3C 00			     cmp     al,0
0367  74 2A			     je	     k26
0369  E9 FCDB			     jmp     k58

036C			     k24:
036C  F6 D4			     not     ah
036E  20 26 0018r		     and     kb_flag_1,ah
0372  EB 1F			     jmp     short k26
			     ;---

0374			     k25:					     ;rc как и в IBM, здесь мы, если не управляющая клавиша
									     ;rc (т.е. ее код не в k6) или если мы нажали ins-num-caps-scroll,
									     ;rc когда ранее была зажата ctrl или alt
0374  3C 80			     cmp     al,80h
0376  73 1B			     jae     k26
0378  3C 59			     cmp     al,inf_key
037A  74 25			     je	     k307			     ;rc обработчик клавиши ИНФ (выдает 0a00h расшир код)
037C  3C 5C			     cmp     al,92
037E  75 03			     jne     k406b
0380  E9 FEFD			     jmp     k406			     ;rc обработчик клавиши Ё (выдает ASCII F0h/F1h в режиме РУС)
0383			     k406b:					     ;rc далее как в IBM
0383  F6 06 0018r 08		     test    kb_flag_1,hold_state
0388  74 2A			     jz	     k28
038A  3C 45			     cmp     al,num_key
038C  74 05			     je	     k26
038E  80 26 0018r F7		     and     kb_flag_1,not hold_state

0393			     k26:
0393  FA			     cli
0394  B0 20			     mov     al,eoi
0396  E6 20			     out     020h,al
0398			     k27:
0398  07			     pop     es
0399  1F			     pop     ds
039A  5F			     pop     di
039B  5E			     pop     si
039C  5A			     pop     dx
039D  59			     pop     cx
039E  5B			     pop     bx
039F  58			     pop     ax
03A0  CF			     iret

03A1  B8 A000		     k307:   mov     ax,0a000h		     ;rc клавиша ИНФ, расширенный скан-код
								     ;rc обработаем смену кодовой таблицы, если Ctrl-Инф
03A4  F6 06 0017r 04		     test    kb_flag,ctl_shift
03A9  74 06			     jz	     inf_ret
03AB  81 36 0091r 0002		     xor     idnpol+1,02h	     ;rc инвертируем id таблицы
03B1  E9 FC8A		     inf_ret:jmp     k57


			     ;---

03B4			     k28:
03B4  F6 06 0017r 08		     test    kb_flag,alt_shift
03B9  75 02			     jnz     k29
03BB  EB 6D			     jmp     short k38

			     ;---

03BD			     k29:
03BD  F6 06 0017r 04		     test    kb_flag,ctl_shift
03C2  74 0F			     jz	     k31
03C4  3C 53			     cmp     al,del_key
03C6  75 0B			     jne     k31

			     ;---
03C8			     k306:
03C8  C7 06 0072r 1234		     mov     reset_flag,1234h
03CE  EA			     db	     0eah
03CF  0000e F000		     dw	     offset reset,cod
			     ;---




03D3			     k31:
03D3  3C 39			     cmp     al,57
03D5  75 05			     jne     k32
03D7  B0 20			     mov     al,' '
03D9  E9 FC62			     jmp     k57

			     ;---

03DC			     k32:
03DC  BF 0000e			     mov     di,offset k30
03DF  B9 000A			     mov     cx,10
03E2  F2> AE			     repne scasb
03E4  75 12			     jne     k33
03E6  81 EF 0001e		     sub     di,offset k30+1
03EA  A0 0019r			     mov     al,alt_input
03ED  B4 0A			     mov     ah,10
03EF  F6 E4			     mul     ah
03F1  03 C7			     add     ax,di
03F3  A2 0019r			     mov     alt_input,al
03F6  EB 9B			     jmp      k26

			     ;---

03F8			     k33:
03F8  C6 06 0019r 00		     mov     alt_input,00h
03FD  B9 001A			     mov     cx,0026
0400  F2> AE			     repne scasb
0402  75 05			     jne     k34
0404  B0 00			     mov     al,0
0406  E9 FC35			     jmp     k57

			     ;---

0409			     k34:
0409  3C 02			     cmp     al,2
040B  72 0C			     jb	     k35
040D  3C 0E			     cmp     al,14
040F  73 08			     jae     k35
0411  80 C4 76			     add     ah,118
0414  B0 00			     mov     al,0
0416  E9 FC25			     jmp     k57

			     ;---

0419			     k35:
0419  3C 3B			     cmp     al,59
041B  73 03			     jae     k37
041D			     k36:
041D  E9 FF73			     jmp     k26	     ;в 1841 masm автоматически поставил короткий переход (ранее, когда он был)
0420			     k37:
0420  3C 47			     cmp     al,71
0422  73 F9			     jae     k36
0424  BB 0221r			     mov     bx,offset k13
0427  E9 FC40			     jmp     k63

			     ;---

042A			     k38:
042A  F6 06 0017r 04		     test    kb_flag,ctl_shift
042F  74 5B			     jz	     k44

			     ;---
			     ;---

0431  3C 46			     cmp     al,scroll_key
0433  75 18			     jne     k39
0435  BB 001Er			     mov     bx,offset kb_buffer
0438  89 1E 001Ar		     mov     buffer_head,bx
043C  89 1E 001Cr		     mov     buffer_tail,bx
0440  C6 06 0071r 80		     mov     bios_break,80h
0445  CD 1B			     int     1bh
0447  B8 0000			     mov     ax,0
044A  E9 FBF1			     jmp     k57

044D			     k39:
044D  3C 45			     cmp     al,num_key
044F  75 21			     jne     k41
0451  80 0E 0018r 08		     or	     kb_flag_1,hold_state
0456  B0 20			     mov     al,eoi
0458  E6 20			     out     020h,al

			     ;---

045A  80 3E 0049r 07		     cmp     crt_mode,7
045F  74 07			     je	     k40
0461  BA 03D8			     mov     dx,03d8h
0464  A0 0065r			     mov     al,crt_mode_set
0467  EE			     out     dx,al
0468			     k40:
0468  F6 06 0018r 08		     test    kb_flag_1,hold_state
046D  75 F9			     jnz     k40
046F  E9 FF26			     jmp     k27
0472			     k41:

			     ;---

0472  3C 37			     cmp     al,55
0474  75 06			     jne     k42
0476  B8 7200			     mov     ax,114*256
0479  E9 FBC2			     jmp     k57

			     ;---

047C			     k42:
047C  BB 0140r			     mov     bx,offset k8
047F  3C 3B			     cmp     al,59
0481  73 03			     jae     k43
0483  E9 FBB4			     jmp     k56
0486			     k43:
0486  BB 017Ar			     mov     bx,offset k9
0489  E9 FBDE			     jmp     k63

			     ;------ NOT IN CONTROL SHIFT

048C			     k44:				     ; NOT-CTL-SHIFT

048C  3C 47			     cmp     al,71		     ; TEST FOR KEYPAD REGION
048E  73 2E			     jae     k48		     ; HANDLE KEYPAD REGION
0490  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
0495  74 0A			     jz	     k54a		     ; TEST FOR SHIFT STATE

			     ;------ UPPER CASE, HANDLE SPECIAL CASES

0497  3C 0F			     cmp     al,15		     ; BACK TAB KEY
0499  75 09			     jne     k45		     ; NOT-BACK-TAB
049B  B8 0F00			     mov     ax,15*256		     ; SET PSEUDO SCAN CODE
049E  E9 FB9D			     jmp     k57		     ; BUFFER_FILL

04A1			     k54a:
04A1  E9 FB8E			     jmp k54

04A4			     k45:				     ; NOT-BACK-TAB
04A4  3C 37			     cmp     al,55		     ; PRINT SCREEN KEY
04A6  75 09			     jne     k46		     ; NOT-PRINT-SCREEN

			     ;------ ISSUE INTERRUPT TO INDICATE PRINT SCREEN FUNCTION

04A8  B0 20			     mov     al,eoi		     ; END OF CURRENT INTERRUPT
04AA  E6 20			     out     020h,al		     ; SO FURTHER THINGS CAN HAPPEN
04AC  CD 05			     int     5h			     ; ISSUE PRINT SCREEN INTERRUPT
04AE  E9 FEE7			     jmp     k27		     ; GO BACK WITHOUT EOI OCCURRING

04B1			     k46:				     ; NOT-PRINT-SCREEN
04B1  3C 3B			     cmp     al,59		     ; FUNCTION KEYS
04B3  72 06			     jb	     k47		     ; NOT-UPPER-FUNCTION
04B5  BB 0217r			     mov     bx,offset k12	     ; UPPER CASE PSEUDO SCAN CODES
04B8  E9 FBAF			     jmp     k63		     ; TRANSLATE_SCAN

04BB			     k47:				     ; NOT-UPPER-FUNCTION
04BB  E9 FBB6			     jmp     caps

			     ;------ KEYPAD KEYS, MUST TEST NUM LOCK FOR DETERMINATION

04BE			     k48:				     ; KEYPAD-REGION
04BE  F6 06 0017r 20		     test    kb_flag,num_state	     ; ARE WE IN NUM_LOCK
04C3  75 23			     jnz     k52		     ; TEST FOR SURE
04C5  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift ; ARE WE IN SHIFT STATE
04CA  75 23			     jnz     k53		     ; IF SHIFTED, REALLY NUM STATE

			     ;------ BASE CASE FOR KEYPAD

04CC			     k49:				     ; BASE-CASE

04CC  3C 4A			     cmp     al,74		     ; SPECIAL CASE FOR A COUPLE OF KEYS
04CE  74 0C			     je	     k50		     ; MINUS
04D0  3C 4E			     cmp     al,78
04D2  74 0E			     je	     k51
04D4  2C 47			     sub     al,71		     ; CONVERT ORIGIN
04D6  BB 0238r			     mov     bx,offset k15	     ; BASE CASE TABLE
04D9  E9 FB90			     jmp       k64		     ; CONVERT TO PSEUDO SCAN

04DC  B8 4A2D		     k50:    mov     ax,74*256+'-'	     ; MINUS
04DF  E9 FB5C			     jmp      k57		     ; BUFFER_FILL

04E2  B8 4E2B		     k51:    mov     ax,78*256+'+'	     ; PLUS
04E5  E9 FB56			     jmp      k57		     ; BUFFER_FILL

			     ;------ MIGHT BE NUM LOCK, TEST SHIFT STATUS

04E8			     k52:				     ; ALMOST-NUM-STATE
04E8  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
04ED  75 DD			     jnz     k49		     ; SHIFTED TEMP OUT OF NUM STATE

04EF			     k53:				     ; REALLY_NUM_STATE
04EF  2C 46			     sub     al,70		     ; CONVERT ORIGIN
04F1  BB 022Br			     mov     bx,offset k14	     ; NUM STATE TABLE
04F4  E9 FB43			     jmp      k56		     ; TRANSLATE_CHAR
04F7			     kb_int  endp

04F7			     code    ends
				     end

Symbol Name			  Type	 Value

??DATE				  Text	 "08-05-22"
??FILENAME			  Text	 "keybrd  "
??TIME				  Text	 "07:15:07"
??VERSION			  Number 0500
@CPU				  Text	 0101H
@CURSEG				  Text	 CODE
@FILENAME			  Text	 KEYBRD
@WORDSIZE			  Text	 2
ACTIVE_PAGE			  Byte	 DATA:0062
ADDR_6845			  Word	 DATA:0063
ALT_INPUT			  Byte	 DATA:0019
ALT_KEY				  Number 0038
ALT_SHIFT			  Number 0008
BAD_ADDR_MARK			  Number 0002
BAD_CMD				  Number 0001
BAD_CRC				  Number 0010
BAD_DMA				  Number 0008
BAD_NEC				  Number 0020
BAD_SEEK			  Number 0040
BIOS_BREAK			  Byte	 DATA:0071
BOOT_LOCN			  Far16	 ABS0:7C00
BOOT_VEC			  Dword	 ABS0:0064
BUFFER_END			  Word	 DATA:0082
BUFFER_HEAD			  Word	 DATA:001A
BUFFER_START			  Word	 DATA:0080
BUFFER_TAIL			  Word	 DATA:001C
CAPS				  Near16 CODE:0074
CAPST				  Byte	 CODE:0207
CAPSTRU				  Byte	 CODE:020F
CAPS_KEY			  Number 0056
CAPS_SHIFT			  Number 0040
CAPS_STATE			  Number 0040
CMD_BLOCK			  Byte	 DATA:0042
CMD_PORT			  Number 0063
COD				  Number F000
CONTROL_BYTE			  Byte	 DATA:0076
CRT_COLS			  Word	 DATA:004A
CRT_LEN				  Word	 DATA:004C
CRT_MODE			  Byte	 DATA:0049
CRT_MODE_SET			  Byte	 DATA:0065
CRT_PALLETTE			  Byte	 DATA:0066
CRT_START			  Word	 DATA:004E
CSI				  Word	 ABS0:04D0
CTL_KEY				  Number 001D
CTL_SHIFT			  Number 0004
CURSOR_MODE			  Word	 DATA:0060
CURSOR_POSN			  Word	 DATA:0050
DAT				  Number 0040
DECD				  Near16 CODE:0086
DECODE				  Near16 CODE:0087
DEL_KEY				  Number 0053
DISKETTE_PARM			  Dword	 ABS0:0078
DISKETTE_STATUS			  Byte	 DATA:0041
DISKW_STATUS			  Byte	 DATA:0074
DISK_POINTER			  Dword	 ABS0:0078
DISK_VECTOR			  Dword	 ABS0:0100
DMA				  Number 0000
DMA08				  Number 0008
DMA_BOUNDARY			  Number 0009
E1L				  Number 0004
EOI				  Number 0020
EQUIP_FLAG			  Word	 DATA:0010
EQ_FL				  Byte	 ABS0:0410
ERROR_BEEP			  Near16 CODE:000D
EXT_PTR				  Dword	 ABS0:007C
HDISK_INT			  Dword	 ABS0:0034
HD_ERROR			  Byte	 DATA:0042
HF_NUM				  Byte	 DATA:0075
HF_TBL_VEC			  Dword	 ABS0:0104
HOLD_STATE			  Number 0008
IDNPOL				  Word	 DATA:0090
INF_KEY				  Number 0059
INF_RET				  Near16 CODE:03B1
INS_KEY				  Number 0052
INS_SHIFT			  Number 0080
INS_STATE			  Number 0080
INT5_PTR			  Word	 ABS0:0014
INTA00				  Number 0020
INTA01				  Number 0021
INT_ADDR			  Word	 ABS0:0020
INT_FLAG			  Number 0080
INT_PTR				  Dword	 ABS0:0020
INV_KEY_L			  Number 0058
INV_KEY_R			  Number 005A
INV_SHIFT			  Number 0004
IO_RAM_SIZE			  Word	 DATA:0015
IO_ROM_INIT			  Word	 DATA:0067
IO_ROM_SEG			  Word	 DATA:0069
K1				  Near16 CODE:00FC
K10				  Byte	 CODE:0193
K11				  Byte	 CODE:01CD
K12				  Byte	 CODE:0217
K13				  Byte	 CODE:0221
K14				  Byte	 CODE:022B
K15				  Byte	 CODE:0238
K16				  Near16 CODE:026D
K17				  Near16 CODE:0294
K18				  Near16 CODE:02F5
K19				  Near16 CODE:0309
K2				  Near16 CODE:0115
K20				  Near16 CODE:0317
K21				  Near16 CODE:031D
K22				  Near16 CODE:0324
K23				  Near16 CODE:0348
K24				  Near16 CODE:036C
K25				  Near16 CODE:0374
K26				  Near16 CODE:0393
K26A				  Near16 CODE:02F2
K27				  Near16 CODE:0398
K28				  Near16 CODE:03B4
K29				  Near16 CODE:03BD
K3				  Near16 CODE:0126
K30				  Near16 ----:---- Extern
K300				  Near16 CODE:02CB
K301				  Near16 CODE:02D0
K302				  Near16 CODE:02E4
K303				  Near16 CODE:033C
K304				  Near16 CODE:0358
K306				  Near16 CODE:03C8
K307				  Near16 CODE:03A1
K31				  Near16 CODE:03D3
K32				  Near16 CODE:03DC
K33				  Near16 CODE:03F8
K34				  Near16 CODE:0409
K35				  Near16 CODE:0419
K36				  Near16 CODE:041D
K37				  Near16 CODE:0420
K38				  Near16 CODE:042A
K39				  Near16 CODE:044D
K4				  Near16 CODE:0000
K40				  Near16 CODE:0468
K400				  Near16 CODE:02BB
K401				  Near16 CODE:02BF
K402				  Near16 CODE:02C5
K406				  Near16 CODE:0280
K406B				  Near16 CODE:0383
K407				  Near16 CODE:0291
K41				  Near16 CODE:0472
K42				  Near16 CODE:047C
K43				  Near16 CODE:0486
K44				  Near16 CODE:048C
K45				  Near16 CODE:04A4
K46				  Near16 CODE:04B1
K47				  Near16 CODE:04BB
K48				  Near16 CODE:04BE
K49				  Near16 CODE:04CC
K5				  Near16 CODE:000C
K50				  Near16 CODE:04DC
K51				  Near16 CODE:04E2
K52				  Near16 CODE:04E8
K53				  Near16 CODE:04EF
K54				  Near16 CODE:0032
K54A				  Near16 CODE:04A1
K56				  Near16 CODE:003A
K57				  Near16 CODE:003E
K58				  Near16 CODE:0047
K59				  Near16 CODE:0049
K6				  Byte	 CODE:012C
K61				  Near16 CODE:004C
K62				  Near16 CODE:0064
K63				  Near16 CODE:006A
K64				  Near16 CODE:006C
K65				  Near16 CODE:0016
K66				  Near16 CODE:001D
K67				  Near16 CODE:0026
K6L				  Number 000C
K7				  Byte	 CODE:0138
K8				  Byte	 CODE:0140
K9				  Byte	 CODE:017A
KBDINT				  Number 0002
KBD_IN				  Number 0060
KB_BUFFER			  Word	 DATA:001E
KB_BUFFER_END			  Word	 DATA:003E
KB_CTL				  Number 0061
KB_DAT				  Number 0060
KB_FLAG				  Byte	 DATA:0017
KB_FLAG_1			  Byte	 DATA:0018
KB_INT				  Far16	 CODE:0245
KEYBOARD_IO			  Far16	 CODE:00E5
LAST_VAL			  Byte	 DATA:006B
LAT				  Number 0002
LAT_KEY				  Number 0057
LAT_SHIFT			  Number 0001
LEFT_KEY			  Number 0054
LEFT_SHIFT			  Number 0002
LOW866				  Near16 ----:---- Extern
MAX_PERIOD			  Number 0540
MEMORY_SIZE			  Word	 DATA:0013
MEM_SIZ				  Word	 ABS0:0413
MFG_TST				  Byte	 DATA:0012
MIN_PERIOD			  Number 0410
MOTOR_COUNT			  Byte	 DATA:0040
MOTOR_STATUS			  Byte	 DATA:003F
MOTOR_WAIT			  Number 0025
NEC_STATUS			  Byte	 DATA:0042
NMI_PTR				  Word	 ABS0:0008
NUM_KEY				  Number 0045
NUM_SHIFT			  Number 0020
NUM_STATE			  Number 0020
ORG_VECTOR			  Dword	 ABS0:004C
PARM_PTR			  Dword	 ABS0:0074
PORT_A				  Number 0060
PORT_B				  Number 0061
PORT_C				  Number 0062
PORT_OFF			  Byte	 DATA:0077
PRINTER_BASE			  Word	 DATA:0008
RECORD_NOT_FND			  Number 0004
REGEN				  Byte	 VIDEO_RAM:0000
REGENW				  Word	 VIDEO_RAM:0000
RESET				  Near16 ----:---- Extern
RESET_FLAG			  Word	 DATA:0072
RES_FL				  Word	 ABS0:0472
RIGHT_KEY			  Number 0055
RIGHT_SHIFT			  Number 0001
RS232_BASE			  Word	 DATA:0000
RUST				  Near16 ----:---- Extern
RUST2				  Near16 ----:---- Extern
RUS_KEY				  Number 005B
SCODE_TBL_SEL			  Word	 CODE:00BF
SCROLL_KEY			  Number 0046
SCROLL_SHIFT			  Number 0010
SCROLL_STATE			  Number 0010
SEEK_STATUS			  Byte	 DATA:003E
SETBL				  Near16 CODE:00B3
STA				  Number 0030
STATUS_BYTE			  Byte	 XXDATA:0000
STAT_OFFSET			  Byte	 DATA:007C
STG_LOC0			  Byte	 ABS0:0000
TABL				  Word	 DATA:00E0
TABL1				  Word	 ABS0:04E0
TIMER				  Number 0040
TIMERO				  Number 0040
TIMER_HIGH			  Word	 DATA:006E
TIMER_LOW			  Word	 DATA:006C
TIMER_OFL			  Byte	 DATA:0070
TIME_OUT			  Number 0080
TIM_CTL				  Number 0043
TMINT				  Number 0001
TMP_TOS				  Word	 DATA:3FF0
TOS				  Word	 STAC:0100
UP866				  Near16 ----:---- Extern
UPPLOW				  Near16 CODE:00CF
VIDEO_INT			  Word	 ABS0:0040
WRITE_PROTECT			  Number 0003
XXDAT				  Number 0050
ZB				  Byte	 ABS0:0000
ZW				  Word	 ABS0:0000

Groups & Segments		  Bit Size Align  Combine Class

ABS0				  16  7C00  AT 0000
CODE				  16  04F7 Byte	  Public
DATA				  16  3FF0  AT 0040
STAC				  16  0100  AT 0030
VIDEO_RAM			  16  4000  AT B800
XXDATA				  16  0001  AT 0050

