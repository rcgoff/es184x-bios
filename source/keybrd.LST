Turbo Assembler	 Version 5.0	    02-19-22 12:23:37	    Page 1
keybrd.ASM



				     PUBLIC keyboard_io
				     PUBLIC kb_int
				     PUBLIC k61
				     PUBLIC error_beep

				     EXTERN k89:near
				     EXTERN rust:near
				     EXTERN rust2:near
				     EXTERN k30:near
				     EXTERN reset:near


			     ;___int 16_________________
			     ;
			     ;	 Программа поддержки клавиатуры
			     ;
			     ;	 Эта	программа считывает в регистр
			     ; AX код сканирования клавиши и код
			     ; ASCII из буфера клавиатуры.
			     ;
			     ;	 Программа выполняет три функции, код
			     ; которых задается в регистре AH:
			     ;
			     ;	  AH=0 - считать	следующий символ
			     ;		  из буфера.При выходе	код
			     ;		  сканирования в AH,код
			     ;		  ASCII	в AL.
			     ;	 AH=1 -	установить ZF, если код
			     ;		  ASCII	прочитан:
			     ;
			     ;		  ZF=0 - буфер заполнен,
			     ;		  ZF=1 - буфер пустой.
			     ;	 При	выходе в	AX помещен адрес вершины буфера	    +
			     клавиатуры.
			     ;	 AH=2 -	возврат текущего	состояния в регистр AL
			     ;		   из	постоянно распределенной	области памяти +
			     с
			     ;		адресом 00417H.
			     ;
			     ;	 При	выполнении программ клавиатуры используются +
			     флажки,
			     ; которые устанавливаются в	постоянно			    +
			     распределенной области
			     ; памяти по адресам	00417H и 00418H и имеют значение:
			     ;	 00417H
			     ;	       0 - правое	переключение регистра;
			     ;	       1 - левое переключение регистра;
			     ;		  2 - УПР;
			     ;	       3 - ДОП;
			     ;	       4 - ФСД;
			     ;	       5 - ЦИФ;
			     ;	       6 - ФПБ;
			     ;	       7 - ВСТ;
			     ;	 00418H
			     ;	       0 - состояние клавиши ЛАТ между нажатием	и	    +
			     отжатием;
			     ;	       1 - ЛАТ;
			     ;	       2 - Р/Л;
			     ;	       3 - пауза;
			     ;	       4 - ФСД;
			     ;	       5 - ЦИФ;
			     ;	       6 - ФПБ;
			     ;	       7 - ВСТ.
			     ;
			     ;	 Флажки, соответствующие разрядам 4-7 постоянно	    +
			     распределенной
			     ; области памяти с адресом 00417H, устанавливаются по    +
			     нажатию
			     ; клавиш ВСТ, ФПБ, ЦИФ, ФСД и сохраняют свои значения  +
			     до сле-
			     ; дующего нажатия соответствующей клавиши.
			     ; Одноименные флажки, соответствующие разрядам 4-7	    +
			     постоянно
			     ; распределенной области памяти	с адресом 00418H, и	    +
			     флажки
			     ; ДОП, УПР, левое переключение регистра, правое	    +
			     переключение
			     ; регистра, Р/Л устанавливаются по нажатию клавиш и   +
			     сбрасываются
			     ; по отжатию.
			     ;
			     ;------------------------------
0000			     code    segment byte public
				     assume  cs:code,ds:data

0000			     k4	     proc    near
0000  83 C3 02			     add     bx,2
			     ;1841   cmp  bx,buffer_end		      ;	конец буфера	?
0003  81 FB 003Er		     cmp  bx,offset kb_buffer_end     ;	конец буфера	?
0007  75 03			     jne     k5			      ;	нет - продолжить
			     ;1841   mov     bx,buffer_start	      ;	да - уст начала буфера
0009  BB 001Er			     mov     bx,offset kb_buffer      ;	да - уст начала буфера
000C			     k5:
000C  C3			     ret
000D			     k4	     endp

000D			     error_beep	proc near
000D  50			     push    ax
000E  53			     push    bx
000F  51			     push    cx
0010  BB 00C0			     mov     bx,0c0h
0013  E4 61			     in	     al,kb_ctl
0015  50			     push    ax
0016			     k65:
0016  24 FC			     and     al,0fch
0018  E6 61			     out     kb_ctl,al
001A  B9 0048			     mov     cx,48h
001D  E2 FE		     k66:    loop    k66
001F  0C 02			     or	     al,2
0021  E6 61			     out     kb_ctl,al
0023  B9 0048			     mov     cx,48h
0026  E2 FE		     k67:    loop    k67
0028  4B			     dec     bx
0029  75 EB			     jnz     k65
002B  58			     pop     ax
002C  E6 61			     out     kb_ctl,al
002E  59			     pop     cx
002F  5B			     pop     bx
0030  58			     pop     ax
0031  C3			     ret
0032			     error_beep	     endp

			     ;------ PLAIN OLD LOWER CASE

0032			     k54:				     ;rc обычный	нижний регистр
0032  3C 3B			     cmp     al,59		     ; TEST FOR	FUNCTION KEYS
0034  72 04			     jb	     k55		     ; NOT-LOWER-FUNCTION
0036  B0 00			     mov     al,0		     ; SCAN CODE IN AH ALREADY
0038  EB 0D			     jmp     short k57		     ; BUFFER_FILL

003A			     k55:    ;mov    bx,offset k10
003A  F6 06 0018r 02		     test    kb_flag_1,lat
003F  74 3B			     jz	     k99		     ;rc переход	по отсутствию флага+
			     ЛАТ
0041  EB 4E			     jmp     short caps

			     ;------TRANSLATE THE CHARACTER

0043			     k56:				     ; TRANSLATE-CHAR
0043  FE C8			     dec     al			     ; CONVERT ORIGIN
0045  2E: D7			     xlat    cs:k11		     ; CONVERT THE SCAN	CODE TO	ASCII

			     ;------ PUT CHARACTER INTO	BUFFER

0047			     k57:				     ; BUFFER-FILL
0047  3C FF			     cmp     al,-1		     ; IS THIS AN IGNORE CHAR
0049  74 16			     je	     k59		     ; YES, DO NOTHING WITH IT
004B  80 FC FF			     cmp     ah,-1		     ; LOOK FOR	-1 PSEUDO SCAN
004E  74 11			     je	     k59		     ; NEAR_INTERRUPT_RETURN

			     ;------ HANDLE THE	CAPS LOCK PROBLEM

0050			     k58:				     ; BUFFER-FILL-NOTEST
0050  F6 06 0017r 40		     test    kb_flag,caps_state	     ; ARE WE IN CAPS LOCK STATE
0055  74 0D			     jz	     k61		     ; SKIP IF NOT


			     ;------ IN	CAPS LOCK STATE
0057  F6 06 0018r 02		     test    kb_flag_1,lat
005C  75 06			     jnz     k61		     ;lat mode - skip caps conversion
005E  E9 0000e			     jmp     k89

0061			     k59:				     ; NEAR-INTERRUPT-RETURN
0061  E9 0330			     jmp     k26		     ; INTERRUPT_RETURN

			     ;org    0084h
0064			     k61:				     ; NOT-CAPS-STATE
0064  8B 1E 001Cr		     mov     bx,buffer_tail	     ; GET THE END POINTER TO THE BUFFER
0068  8B F3			     mov     si,bx		     ; SAVE THE	VALUE
006A  E8 FF93			     call   k4			     ; ADVANCE THE TAIL
006D  3B 1E 001Ar		     cmp     bx,buffer_head	     ; HAS THE BUFFER WRAPPED AROUND
0071  74 0E			     je	     k62		     ; BUFFER_FULL_BEEP
0073  89 04			     mov     word ptr [si],ax	     ; STORE THE VALUE
0075  89 1E 001Cr		     mov     buffer_tail,bx	     ; MOVE THE	POINTER	UP
0079  E9 0318			     jmp     k26		     ; INTERRUPT_RETURN
007C  BB 0000e		     k99:    mov     bx,offset rust		     ;rc маленькие рус буквы	    +
			     (kb_flag_1.lat=0)
007F  EB C2			     jmp     k56

			     ;------ BUFFER IS FULL, SOUND THE BEEPER

0081			     k62:				     ; BUFFER-FULL-BEEP
0081  E8 FF89			     call    error_beep
0084  E9 030D			     jmp     k26		     ; INTERRUPT_RETURN

			     ;------ TRANSLATE SCAN FOR	PSEUDO SCAN CODES

0087			     k63:				     ; TRANSLATE-SCAN
0087  2C 3B			     sub     al,59		     ; CONVERT ORIGIN TO FUNCTION KEYS
0089			     k64:				     ; TRANSLATE-SCAN-ORGD
0089  2E: D7			     xlat    cs:k9		     ; CTL TABLE SCAN
008B  8A E0			     mov     ah,al		     ; PUT VALUE INTO AH
008D  B0 00			     mov     al,0		     ; ZERO ASCII CODE
008F  EB B6			     jmp     k57		     ; PUT IT INTO THE BUFFER

			     ;------ set keyb boolean value: 0=lower, 1=upper case

0091  E8 0022		     caps:   call    decode				     ;CY = /caps_able
0094  B1 02			     mov     cl,2
0096  D2 DB			     rcr     bl,cl				     ;bl = /caps_able in Z position (bit 6)
0098  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift	     ;z	flag=0 if SHIFT
009D  9F			     lahf
009E  8A FC			     mov     bh,ah				     ;bh = /shift
00A0  F6 06 0017r 40		     test    kb_flag,caps_state			     ;z	flag=0 if CAPS
00A5  9F			     lahf					     ;ah = /caps

			     ;formula is: value= SHIFT xor (CAPS & CAPS_ABLE)
			     ;that is equal to:	/SHIFT xor (/CAPS or /CAPS_ABLE)

			     ;now, calculate by	formula
00A6  0A E3			     or	     ah,bl
00A8  32 E7			     xor     ah,bh				     ;now bit6 (Z-position) of ah contains  +
			     answer
00AA  D2 D4			     rcl     ah,cl				     ;now CY contains answer
			     ;select keyboard table
00AC  BB 0182r			     mov     bx,offset k10			     ;lower case (CY=0)
00AF  73 03			     jnc     both
00B1  BB 01BCr			     mov     bx,offset k11			     ;upper case (CY=1)
00B4  EB 8D		     both:   jmp     short k56

			     ;------ decode necessary byte in array
			     ;and position in the byte
			     ;on call, AL contains scan-code
			     ;on return, we have boolean value:
			     ;is this code CapsLock-influenced (CY=0) or not (CY=1)
			     ;bx and cx	will be	destroyed

00B6			     decode:
00B6  50			     push ax
00B7  B4 00			     mov ah,0
00B9  48			     dec ax	     ;dec because scancodes starts from	1 (not 0). ax (not al) i.e. 1 byte  +
			     instead of	2
00BA  B5 00			     mov ch,0
00BC  B3 08			     mov bl,8
00BE  F6 F3			     div bl	     ;now quotient (byte nr) is	in AL and the remainder	(index in byte)	is  +
			     in	AH
			     ;get byte from table
00C0  8A CC			     mov cl,ah	     ;remainder	(index in byte)
00C2  BB 01F6r			     mov bx,offset capst
00C5  2E: D7			     xlat cs:capst
			     ;set necessary bit	to 1 in	mask
00C7  FE C1			     inc cl	     ;index in byte starts from	0, but we're shifting from CY
00C9  F9			     stc
00CA  D2 DD			     rcr ch,cl	     ;index=0 means bit	7 (CAPST filled	in tha way) - shift to RIGHT
			     ;get necessary bit	in carry flag
00CC  22 C5			     and al,ch
00CE  D2 D0			     rcl al,cl
00D0  58			     pop ax
00D1  C3			     retn

00D2  90			     NOP
00D3  90			     NOP
			     ;---
			     ;org    00d3h
			     ;	     db	     34	dup (0)
			     ;1841   org     0e82eh
00D4			     keyboard_io proc	     far
00D4  FB			     sti		     ;
00D5  1E			     push    ds
00D6  53			     push    bx
00D7  BB 0000s			     mov     bx,data
00DA  8E DB			     mov     ds,bx	     ; установить сегмент данных
00DC  0A E4			     or	     ah,ah	     ; AH=0
00DE  74 0B			     jz	     k1		  ; переход к считыванию следующего	    +
			     символа
00E0  FE CC			     dec     ah		     ; AH=1
00E2  74 20			     jz	     k2		  ; переход к считыванию кода ASCII
00E4  FE CC			     dec     ah			  ; AH=2
00E6  74 2D			     jz	     k3		  ; переход к получению байта		    +
			     состояния
00E8  5B			     pop     bx			  ; восстановить регистр
00E9  1F			     pop     ds
00EA  CF			     iret

			     ;	 Считывание кода сканирования	и кода ASCII из буфера +
			     клавиатуры
			     ;
00EB			     k1:
00EB  FB			     sti	     ; уст признака разрешения прерывания
00EC  90			     nop		     ; задержка
00ED  FA			     cli	     ; сброс признака разрешения	прерывания
00EE  8B 1E 001Ar		     mov     bx,buffer_head  ; уст вершину буфера по чтению
00F2  3B 1E 001Cr		     cmp     bx,buffer_tail  ; сравнить	с вершиной буфера по	    +
			     записи
00F6  74 F3			     jz	     k1
00F8  8B 07			     mov     ax,word ptr [bx] ;	получить код	сканирования и код  +
			     ASCII
00FA  E8 FF03			     call    k4
00FD  89 1E 001Ar		     mov     buffer_head,bx  ; запомнить вершину буфера по	    +
			     чтению
0101  5B			     pop     bx		     ; восстановить	регистр
0102  1F			     pop     ds		     ; восстановить	сегмент
0103  CF			     iret		     ; возврат к программе

			     ;	 Считать	код ASCII

0104			     k2:
0104  FA			     cli	     ; Сброс признака разрешения	прерывания
0105  8B 1E 001Ar		     mov     bx,buffer_head  ; получить	указатель вершины	    +
			     буфера
							     ; по чтению
0109  3B 1E 001Cr		     cmp     bx,buffer_tail  ; сравнить	с вершиной буфера по	    +
			     записи
010D  8B 07			     mov     ax,word ptr [bx]
010F  FB			     sti		     ; уст признак разрешения		    +
			     прерывания
0110  5B			     pop     bx		     ; восстановить	регистр
0111  1F			     pop     ds		     ; восстановить	сегмент
0112  CA 0002			     ret     2

			     ;	 Получение младшего байта	состояния (флажков)

0115			     k3:
0115  A0 0017r			     mov     al,kb_flag	     ; получить	младший байт	состояния  +
			     на
0118  5B			     pop     bx		     ; восстановить	регистр
0119  1F			     pop     ds		     ; восстановить	сегмент
011A  CF			     iret		     ; возврат к программе
011B			     keyboard_io     endp

			     ;	 Таблица	кодов сканирования управляющих клавиш

011B			     k6	     label   byte
011B  52			     db	     ins_key
011C  56 45 46 38 1D		     db	     caps_key,num_key,scroll_key,alt_key,ctl_key
0121  54 55			     db	     left_key,right_key
0123  58			     db	     inv_key_l
0124  5A 57 5B			     db	     inv_key_r,lat_key,rus_key
      =000C		     k6l     equ     0ch

			     ;	 Таблица	масок нажатых управляющих клавиш

0127			     k7	     label   byte
0127  80			     db	     ins_shift
0128  40 20 10 08 04		     db	     caps_shift,num_shift,scroll_shift,alt_shift,ctl_shift
012D  02 01			     db	     left_shift,right_shift


			     ;	 Таблица	кодов сканирования при нажатой клавише    +
			     УПР для
			     ; кодов сканирования клавиш	меньше 59

012F  1B FF 00 FF FF FF	1E+  k8	     db	     27,-1,0,-1,-1,-1,30,-1
      FF
0137  FF FF FF 1F FF 7F	FF+	     db	     -1,-1,-1,31,-1,127,-1,17
      11
013F  17 05 12 14 19 15	09+	     db	     23,5,18,20,25,21,9,15
      0F
0147  10 1B 1D 0A FF 01	13	     db	     16,27,29,10,-1,1,19
014E  04 06 07 08 0A 0B	0C+	     db	     4,6,7,8,10,11,12,-1,-1
      FF FF
0157  FF FF 1C 1A 18 03	16+	     db	     -1,-1,28,26,24,3,22,2
      02
015F  0E 0D FF FF FF FF	FF+	     db	     14,13,-1,-1,-1,-1,-1,-1
      FF
0167  20 FF			     db	     ' ',-1

			     ;	 Таблица	кодов сканирования при нажатой клавише    +
			     УПР для
			     ; кодов сканирования клавиш	больше 59
0169			     k9	     label   byte
0169  5E 5F 60 61 62 63	64+	     db	     94,95,96,97,98,99,100,101
      65
0171  66 67 FF FF 77 FF	84+	     db	     102,103,-1,-1,119,-1,132,-1
      FF
0179  73 FF 74 FF 75 FF	76+	     db	     115,-1,116,-1,117,-1,118,-1
      FF
0181  FF			     db	     -1

			     ;	 Таблица	кодов ASCII нижнего	регистра клавиатуры

0182			     k10     label   byte
0182  1B 31 32 33 34 35	36+	     db	     27,'1234567'	     ;byte1
      37
018A  38 39 30 2D 3D 08	09+	     db	     '890-=',08h,09h,'q'     ;byte2
      71
0192  77 65 72 74 79 75	69+	     db	     'wertyuio'		     ;byte3
      6F
019A  70 5B 5D 0D FF 61	73+	     db	     'p[]',0dh,-1,'asd'	     ;byte4
      64
01A2  66 67 68 6A 6B 6C	3B+	     db	     'fghjkl;:'		     ;byte5
      3A
01AA  60 7E 5C 7A 78 63	76+	     db	     60h,7eh,05ch,'zxcvb'    ;byte6
      62
01B2  6E 6D 2C 2E 2F 7B	2A+	     db	     'nm,./{*',-1	     ;byte7
      FF
01BA  20 7D			     db	     ' }'		     ;byte8

			     ;	 Таблица	кодов ASCII верхнего регистра клавиатуры

01BC			     k11     label   byte
01BC  1B 21 40 23 24 25	5E+	     db	     27,'!@#$',37,05eh,'&'   ;byte1
      26
01C4  2A 28 29 5F 2B 08	00+	     db	     '*()_+',08h,0,'Q'	     ;byte2
      51
01CC  57 45 52 54 59 55	49+	     db	     'WERTYUIO'		     ;byte3
      4F
01D4  50 FF FF 0D FF 41	53+	     db	     'P',-1,-1,0dh,-1,'ASD'  ;byte4
      44
01DC  46 47 48 4A 4B 4C	27+	     db	     'FGHJKL',027h,'"'	     ;byte5
      22
01E4  FF FF 7C 5A 58 43	56+	     db	     -1,-1,7ch,'ZXCVB'	     ;byte6
      42
01EC  4E 4D 3C 3E 3F FF	00+	     db	     'NM<>?',-1,0,-1	     ;byte7
      FF
01F4  20 FF			     db	     ' ',-1		     ;byte8

			     ;------ CapsLock table (latin)

01F6			     capst   label   byte
			     ;		     27,'1234567'	     ;byte1
01F6  FF			     db	     0ffh

			     ;		     '890-='08h,09h,'q'	     ;byte2
01F7  FE			     db	     11111110b

			     ;		     'wertyuio'		     ;byte3
01F8  00			     db	     0

			     ;		     'p[]',0dh,-1,'asd'	     ;byte4
01F9  78			     db	     01111000b

			     ;		     'fghjkl;:'		     ;byte5
01FA  03			     db	     00000011b

			     ;		     60h,7eh,05ch,'zxcvb'    ;byte6
01FB  E0			     db	     11100000b

			     ;		     'nm,./{*',-1	     ;byte7
01FC  3F			     db	     00111111b

			     ;		     ' }'		     ;byte8
01FD  FF			     db	     0ffh


			     ;	 Таблица	кодов сканирования клавиш Ф11 -	Ф20 (на	    +
			     верхнем
			     ; регистре	Ф1 - Ф10)

01FE			     k12     label   byte
01FE  54 55 56 57 58 59	5A	     db	     84,85,86,87,88,89,90
0205  5B 5C 5D			     db	     91,92,93

			     ;	 Таблица	кодов сканирования одновременно нажатых +
			     клавиш
			     ; ДОП и Ф1 - Ф10

0208			     k13     label byte
0208  68 69 6A 6B 6C		     db	     104,105,106,107,108
020D  6D 6E 6F 70 71		     db	     109,110,111,112,113

			     ;	 Таблица	кодов правого пятнадцатиклавишного поля +
			     на верхнем
			     ; регистре

0212			     k14     label   byte
0212  37 38 39 2D 34 35	36+	     db	     '789-456+1230.'
      2B 31 32 33 30 2E

			     ;	 Таблица	кодов правого пятнадцатиклавишного поля +
			     на нижнем
			     ; регистре

021F			     k15     label byte
021F  47 48 49 FF 4B FF	4D	     db	     71,72,73,-1,75,-1,77
0226  FF 4F 50 51 52 53		     db	     -1,79,80,81,82,83

			     ;1841   org     0e987h
022C  09*(00)			     db	     9 dup (0)

			     ;----INT 9--------------------------
			     ;
			     ;	  Программа обработки	прерывания клавиатуры
			     ;
			     ; Программа считывает код сканирования клавиши в	    +
			     регистр AL.
			     ; Единичное состояние разряда 7 в коде сканирования  +
			     означает,
			     ; что клавиша отжата.
			     ;	 В результате выполнения программы в регистре AX	    +
			     формируется
			     ; слово, старший байт которого (AH) содержит код	    +
			     сканирования,
			     ; а младший (AL) -	код ASCII. Эта информация помещается в   +
			     буфер
			     ; клавиатуры. После	заполнения буфера подается	    +
			     звуковой сигнал.
			     ;
			     ;-----------------------------------

0235			     kb_int proc far
0235  FB			     sti		; установка признака разрешения	    +
			     прерывания
0236  50			     push    ax
0237  53			     push    bx
0238  51			     push    cx
0239  52			     push    dx
023A  56			     push    si
023B  57			     push    di
023C  1E			     push    ds
023D  06			     push    es
023E  FC			     cld		    ; установить признак направления    +
			     вперед
023F  B8 0000s			     mov     ax,data	    ; установить адресацию
0242  8E D8			     mov     ds,ax
0244  E4 60			     in	     al,kb_dat	    ; считать код сканирования
0246  50			     push    ax
0247  E4 61			     in	     al,kb_ctl	    ; считать значение порта 61
0249  8A E0			     mov     ah,al	    ; сохранить считанное значение
024B  0C 80			     or	     al,80h	    ; установить бит 7 порта 61
024D  E6 61			     out     kb_ctl,al	    ; для работы с клавиатурой
024F  86 E0			     xchg    ah,al	    ; восстановить значение	порта 61
0251  E6 61			     out     kb_ctl,al
0253  58			     pop     ax		    ; восстановить код сканирования
0254  8A E0			     mov     ah,al	    ; и сохранить его в AH

			     ;---

0256  3C FF			     cmp     al,0ffh  ;	сравнение с кодом заполнения буфера
						      ;	клавиатуры
0258  75 03			     jnz     k16	     ; продолжить
025A  E9 FE24			     jmp     k62     ; переход на звуковой сигнал по		    +
			     заполнению
						     ; буфера клавиатуры

025D			     k16:
025D  24 7F			     and     al,07fh	     ; сброс бита отжатия клавиши
025F  0E			     push    cs
0260  07			     pop     es
0261  BF 011Br			     mov     di,offset k6  ; установить адрес таблицы		    +
			     сканирования
							   ; управляющих клавиш
0264  B9 000C			     mov     cx,k6l
0267  F2> AE			     repne   scasb   ; сравнение полученного кода		    +
			     сканирования с содержимым таблицы
0269  8A C4			     mov     al,ah	     ; запомнить код сканирования
026B  74 1A			     je	     k17	     ; переход по совпадению
026D  E9 0105			     jmp     k25	     ; переход по несовпадению

0270			     k406:				     ;rc это	обработчик клавиши Ё
0270  F6 06 0018r 02		     test    kb_flag_1,lat
0275  75 7C			     jnz     k26a		     ;rc в ЛАТ-режиме	клавиша не	    +
			     генерирует ничего,	выход
0277  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
027C  B8 5CF1			     mov     ax,5cf1h		     ;rc ё
027F  74 03			     jz	     k407
0281  B8 5CF0			     mov     ax,5cf0h		     ;rc Ё
0284			     k407:				     ;rc передвинул сюда,	двумя	    +
			     строками выше	(это	ж не	получение маски)
0284  E9 FDC0			     jmp     k57

			     ;	 Получение маски нажатой управляющей клавиши


0287  81 EF 011Cr	     k17:    sub     di,offset k6+1	     ;rc получить индекс упр клавиши+
			     в	табл k6, начиная с 0
028B  83 FF 08			     cmp     di,8
028E  72 38			     jb	     k300		     ;rc меньше 8	(это	совместимые	    +
			     клавиши) обрабатываются как в IBM
0290  B4 06			     mov     ah,6		     ;rc маска 0b00000110 для руслат	    +
			     (inv_shift	+ lat)
0292  83 FF 0A			     cmp     di,0ah
0295  72 36			     jb	     k301		     ;rc если inv_key (Р/Л)
0297  A8 80			     test    al,80h
0299  74 58			     jz	     k26a		     ;rc если не отпускание РУС или   +
			     ЛАТ -> вых (борьба с автоповтором?)

							     ;rc здесь мы после отпускания РУС	    +
			     или ЛАТ
029B  80 26 0018r FC		     and     kb_flag_1,not lat+lat_shift   ;rc not действует на оба,	    +
			     сбрасываем lat и "светодиодный" lat
02A0  83 FF 0B			     cmp     di,0bh
02A3  74 15			     je	     k401		     ;rc переход, если РУС
							     ;rc если ЛАТ:
02A5  F6 06 0018r 04		     test    kb_flag_1,inv_shift
02AA  74 07			     jz	     k400		     ;rc переход	по ненажатию	Р/Л
02AC  80 0E 0018r 01		     or	     kb_flag_1,lat_shift     ;rc нажата Р/Л->отметить нажатие+
			     ("светодиодный") ЛАТа и всё
02B1  EB 40			     jmp     short k26a
02B3  80 0E 0018r 03	     k400:   or	     kb_flag_1,lat+lat_shift ;rc не нажата Р/Л и нажат		    +
			     ЛАТ->включить ЛАТ и	факт нажатия	("светодиодный")
02B8  EB 39			     jmp     short k26a

							     ;РУС:
02BA  F6 06 0018r 04	     k401:   test    kb_flag_1,inv_shift
02BF  74 32			     jz	     k26a		     ;rc по ненажатию Р/Л выход	    +
			     ("светодиодный" выключен заранее)
02C1  80 0E 0018r 02		     or	     kb_flag_1,lat	     ;rc нажата Р/Л и отпущена	РУС:	    +
			     включить lat ///???
02C6  EB 2B			     jmp     short k26a

							     ;rc далее IBM-ский код
02C8  2E: 8A A5	0127r	     k300:   mov     ah,cs:k7[di]	     ;rc аналогично IBM считыаем	    +
			     маску	из k7	для совместимых упр клавиш
02CD			     k301:
02CD  A8 80			     test    al,80h	     ; клавиша отжата ?
02CF  75 78			     jnz     k23     ; переход, если	клавиша отжата

			     ;	 Управляющая	клавиша нажата

02D1  80 FC 10			     cmp     ah,scroll_shift ; нажата управляющая клавиша с
							     ;	запоминанием ?
02D4  73 20			     jae     k18	     ; переход, если	да

			     ;---
02D6  80 FC 06			     cmp     ah,6
02D9  74 07			     je	     k302	     ; rc нажата Р/Л

02DB  08 26 0017r		     or	     kb_flag,ah	     ; установка масок управляющих	    +
			     клавиш
							     ; без запоминания
02DF  E9 00B2			     jmp     k26	     ; к выходу из прерывания

02E2  80 0E 0018r 06	     k302:   or	     kb_flag_1,inv_shift+lat ;rc обработка нажатия Р/Л:	    +
			     ставим факт нажатия и латиницу
02E7  F6 06 0018r 01		     test    kb_flag_1,lat_shift     ;rc светодиодный ЛАТ есть?
02EC  74 05			     jz	     k26a		     ;rc нет	-> выходим
02EE  80 26 0018r FD		     and     kb_flag_1,not lat	     ;rc есть -> сбрасываем латиницу
02F3			     k26a:
02F3  E9 009E			     jmp     k26

			     ;	 Опрос нажатия клавиши с запоминанием

02F6			     k18:
02F6  F6 06 0017r 04		     test    kb_flag,ctl_shift	       ; опрос клавиши УПР
02FB  75 78			     jnz     k25
02FD  3C 52			     cmp     al,ins_key		       ; опрос клавиши ВСТ
02FF  75 24			     jnz     k22
0301  F6 06 0017r 08		     test    kb_flag,alt_shift	       ; опрос клавиши ДОП
0306  74 02			     jz	     k19
0308  EB 6B			     jmp     short k25
030A  F6 06 0017r 20	     k19:    test    kb_flag,num_state	; опрос клавиши ЦИФ
030F  75 0D			     jnz     k21
0311  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift ; опрос клавиш левого
							  ; и правого переключения регистров
0316  74 0D			     jz	     k22

0318			     k20:
0318  B8 5230			     mov     ax,5230h
031B  E9 FD29			     jmp     k57	   ; установка	кода нуля
031E			     k21:
031E  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
0323  74 F3			     jz	     k20

0325			     k22:
0325  84 26 0018r		     test    ah,kb_flag_1
0329  75 69			     jnz     k26
032B  08 26 0018r		     or	     kb_flag_1,ah
032F  30 26 0017r		     xor     kb_flag,ah
0333  3C 52			     cmp     al,ins_key
0335  75 5D			     jne     k26
0337  B8 5200			     mov     ax,ins_key*256
033A  E9 FD0A			     jmp     k57

033D			     k303:					     ;rc отжатие	Р/Л
033D  80 26 0018r FB		     and     kb_flag_1,not inv_shift	     ;rc сброс флажка нажатия	Р/Л
0342  80 36 0018r 02		     xor     kb_flag_1,lat		     ;rc переключение раскладки
0347  EB 10			     jmp     short k304

			     ;	 Управляющая	клавиша отжата
						     ;rc если сюда попали	при нажатии		    +
			     ЕС-клавиши Р/Л,	то ah=6
0349			     k23:

0349  80 FC 10			     cmp     ah,scroll_shift
034C  73 1F			     jae     k24			     ;rc это	были переключатели +
			     с	фиксацией?
034E  F6 D4			     not     ah				     ;rc да -	переходим к ним
0350  80 FC F9			     cmp     ah,0f9h			     ;rc было ah=6?	Р/Л?
0353  74 E8			     je	     k303			     ;rc да->обрабатываем
0355  20 26 0017r		     and     kb_flag,ah			     ;rc это	и далее -			    +
			     продолжение IBM-ского кода
0359			     k304:
0359  3C B8			     cmp     al,alt_key+80h
035B  75 37			     jne     k26

			     ;---

035D  A0 0019r			     mov     al,alt_input
0360  B4 00			     mov     ah,0
0362  88 26 0019r		     mov     alt_input,ah
0366  3C 00			     cmp     al,0
0368  74 2A			     je	     k26
036A  E9 FCE3			     jmp     k58

036D			     k24:
036D  F6 D4			     not     ah
036F  20 26 0018r		     and     kb_flag_1,ah
0373  EB 1F			     jmp     short k26
			     ;---

0375			     k25:					     ;rc как	и в IBM, здесь мы, если+
			     не управляющая клавиша
									     ;rc (т.е. ее код не в k6) или	    +
			     если мы нажали	ins-num-caps-scroll,
									     ;rc когда ранее была	зажата+
			     ctrl или alt
0375  3C 80			     cmp     al,80h
0377  73 1B			     jae     k26
0379  3C 59			     cmp     al,inf_key
037B  74 25			     je	     k307			     ;rc обработчик клавиши ИНФ +
			     (выдает 0a00h расшир код)
037D  3C 5C			     cmp     al,92
037F  75 03			     jne     k406b
0381  E9 FEEC			     jmp     k406			     ;rc обработчик клавиши Ё	    +
			     (выдает ASCII F0h/F1h в режиме РУС)
0384			     k406b:					     ;rc далее как в IBM
0384  F6 06 0018r 08		     test    kb_flag_1,hold_state
0389  74 1D			     jz	     k28
038B  3C 45			     cmp     al,num_key
038D  74 05			     je	     k26
038F  80 26 0018r F7		     and     kb_flag_1,not hold_state

0394			     k26:
0394  FA			     cli
0395  B0 20			     mov     al,eoi
0397  E6 20			     out     020h,al
0399			     k27:
0399  07			     pop     es
039A  1F			     pop     ds
039B  5F			     pop     di
039C  5E			     pop     si
039D  5A			     pop     dx
039E  59			     pop     cx
039F  5B			     pop     bx
03A0  58			     pop     ax
03A1  CF			     iret

03A2  B8 A000		     k307:   mov     ax,0a000h			     ;rc клавиша	ИНФ,			    +
			     расширенный скан-код
			     ;1841   jmp     inf_rc		 ;rc обработаем смену кодовой	    +
			     таблицы, если Ctrl-Инф
03A5  E9 FC9F			     jmp     k57


			     ;---

03A8			     k28:
03A8  F6 06 0017r 08		     test    kb_flag,alt_shift
03AD  75 02			     jnz     k29
03AF  EB 6C			     jmp     short k38

			     ;---

03B1			     k29:
03B1  F6 06 0017r 04		     test    kb_flag,ctl_shift
03B6  74 0F			     jz	     k31
03B8  3C 53			     cmp     al,del_key
03BA  75 0B			     jne     k31

			     ;---
03BC			     k306:
03BC  C7 06 0072r 1234		     mov     reset_flag,1234h
03C2  EA			     db	     0eah
03C3  0000e F000		     dw	     offset reset,cod
			     ;---




03C7			     k31:
03C7  3C 39			     cmp     al,57
03C9  75 05			     jne     k32
03CB  B0 20			     mov     al,' '
03CD  E9 FC77			     jmp     k57

			     ;---

03D0			     k32:
03D0  BF 0000e			     mov     di,offset k30
03D3  B9 000A			     mov     cx,10
03D6  F2> AE			     repne scasb
03D8  75 12			     jne     k33
03DA  81 EF 0001e		     sub     di,offset k30+1
03DE  A0 0019r			     mov     al,alt_input
03E1  B4 0A			     mov     ah,10
03E3  F6 E4			     mul     ah
03E5  03 C7			     add     ax,di
03E7  A2 0019r			     mov     alt_input,al
03EA  EB A8			     jmp      k26

			     ;---

03EC			     k33:
03EC  C6 06 0019r 00		     mov     alt_input,00h
03F1  B9 001A			     mov     cx,0026
03F4  F2> AE			     repne scasb
03F6  75 05			     jne     k34
03F8  B0 00			     mov     al,0
03FA  E9 FC4A			     jmp     k57

			     ;---

03FD			     k34:
03FD  3C 02			     cmp     al,2
03FF  72 0C			     jb	     k35
0401  3C 0E			     cmp     al,14
0403  73 08			     jae     k35
0405  80 C4 76			     add     ah,118
0408  B0 00			     mov     al,0
040A  E9 FC3A			     jmp     k57

			     ;---

040D			     k35:
040D  3C 3B			     cmp     al,59
040F  73 02			     jae     k37
0411			     k36:
0411  EB 81			     jmp     short k26	     ;в 1841 masm автоматически поставил	    +
			     короткий переход
0413			     k37:
0413  3C 47			     cmp     al,71
0415  73 FA			     jae     k36
0417  BB 0208r			     mov     bx,offset k13
041A  E9 FC6A			     jmp     k63

			     ;---

041D			     k38:
041D  F6 06 0017r 04		     test    kb_flag,ctl_shift
0422  74 5B			     jz	     k44

			     ;---
			     ;---

0424  3C 46			     cmp     al,scroll_key
0426  75 18			     jne     k39
0428  BB 001Er			     mov     bx,offset kb_buffer
042B  89 1E 001Ar		     mov     buffer_head,bx
042F  89 1E 001Cr		     mov     buffer_tail,bx
0433  C6 06 0071r 80		     mov     bios_break,80h
0438  CD 1B			     int     1bh
043A  B8 0000			     mov     ax,0
043D  E9 FC07			     jmp     k57

0440			     k39:
0440  3C 45			     cmp     al,num_key
0442  75 21			     jne     k41
0444  80 0E 0018r 08		     or	     kb_flag_1,hold_state
0449  B0 20			     mov     al,eoi
044B  E6 20			     out     020h,al

			     ;---

044D  80 3E 0049r 07		     cmp     crt_mode,7
0452  74 07			     je	     k40
0454  BA 03D8			     mov     dx,03d8h
0457  A0 0065r			     mov     al,crt_mode_set
045A  EE			     out     dx,al
045B			     k40:
045B  F6 06 0018r 08		     test    kb_flag_1,hold_state
0460  75 F9			     jnz     k40
0462  E9 FF34			     jmp     k27
0465			     k41:

			     ;---

0465  3C 37			     cmp     al,55
0467  75 06			     jne     k42
0469  B8 7200			     mov     ax,114*256
046C  E9 FBD8			     jmp     k57

			     ;---

046F			     k42:
046F  BB 012Fr			     mov     bx,offset k8
0472  3C 3B			     cmp     al,59
0474  73 03			     jae     k43
0476  E9 FBCA			     jmp     k56
0479			     k43:
0479  BB 0169r			     mov     bx,offset k9
047C  E9 FC08			     jmp     k63

			     ;------ NOT IN CONTROL SHIFT

047F			     k44:				     ; NOT-CTL-SHIFT

047F  3C 47			     cmp     al,71		     ; TEST FOR	KEYPAD REGION
0481  73 3B			     jae     k48		     ; HANDLE KEYPAD REGION
0483  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
0488  74 0A			     jz	     k54a		     ; TEST FOR	SHIFT STATE

			     ;------ UPPER CASE, HANDLE	SPECIAL	CASES

048A  3C 0F			     cmp     al,15		     ; BACK TAB	KEY
048C  75 09			     jne     k45		     ; NOT-BACK-TAB
048E  B8 0F00			     mov     ax,15*256		     ; SET PSEUDO SCAN CODE
0491  E9 FBB3			     jmp     k57		     ; BUFFER_FILL

0494			     k54a:
0494  E9 FB9B			     jmp k54

0497			     k45:				     ; NOT-BACK-TAB
0497  3C 37			     cmp     al,55		     ; PRINT SCREEN KEY
0499  75 09			     jne     k46		     ; NOT-PRINT-SCREEN

			     ;------ ISSUE INTERRUPT TO	INDICATE PRINT SCREEN FUNCTION

049B  B0 20			     mov     al,eoi		     ; END OF CURRENT INTERRUPT
049D  E6 20			     out     020h,al		     ;	SO FURTHER THINGS CAN HAPPEN
049F  CD 05			     int     5h			     ; ISSUE PRINT SCREEN INTERRUPT
04A1  E9 FEF5			     jmp     k27		     ; GO BACK WITHOUT EOI OCCURRING

04A4			     k46:				     ; NOT-PRINT-SCREEN
04A4  3C 3B			     cmp     al,59		     ; FUNCTION	KEYS
04A6  72 06			     jb	     k47		     ; NOT-UPPER-FUNCTION
04A8  BB 01FEr			     mov     bx,offset k12	     ; UPPER CASE PSEUDO SCAN CODES
04AB  E9 FBD9			     jmp     k63		     ; TRANSLATE_SCAN

04AE			     k47:				     ; NOT-UPPER-FUNCTION
04AE  F6 06 0018r 02		     test    kb_flag_1,lat
04B3  74 03			     jz	     k98
04B5  E9 FBD9			     jmp     caps
			     ;	     mov     bx,offset k11	     ; POINT TO	UPPER CASE TABLE
			     ;	     jmp      k56		     ; OK, TRANSLATE THE CHAR
04B8  BB 0000e		     k98:    mov     bx,offset rust2
04BB  E9 FB85			     jmp     k56

			     ;------ KEYPAD KEYS, MUST TEST NUM	LOCK FOR DETERMINATION

04BE			     k48:				     ; KEYPAD-REGION
04BE  F6 06 0017r 20		     test    kb_flag,num_state	     ; ARE WE IN NUM_LOCK
04C3  75 23			     jnz     k52		     ; TEST FOR	SURE
04C5  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift ; ARE WE IN	SHIFT STATE
04CA  75 23			     jnz     k53		     ; IF SHIFTED, REALLY NUM STATE

			     ;------ BASE CASE FOR KEYPAD

04CC			     k49:				     ; BASE-CASE

04CC  3C 4A			     cmp     al,74		     ; SPECIAL CASE FOR	A COUPLE OF KEYS
04CE  74 0C			     je	     k50		     ; MINUS
04D0  3C 4E			     cmp     al,78
04D2  74 0E			     je	     k51
04D4  2C 47			     sub     al,71		     ; CONVERT ORIGIN
04D6  BB 021Fr			     mov     bx,offset k15	     ; BASE CASE TABLE
04D9  E9 FBAD			     jmp       k64		     ; CONVERT TO PSEUDO SCAN

04DC  B8 4A2D		     k50:    mov     ax,74*256+'-'	     ; MINUS
04DF  E9 FB65			     jmp      k57		     ; BUFFER_FILL

04E2  B8 4E2B		     k51:    mov     ax,78*256+'+'	     ; PLUS
04E5  E9 FB5F			     jmp      k57		     ; BUFFER_FILL

			     ;------ MIGHT BE NUM LOCK,	TEST SHIFT STATUS

04E8			     k52:				     ; ALMOST-NUM-STATE
04E8  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
04ED  75 DD			     jnz     k49		     ; SHIFTED TEMP OUT	OF NUM STATE

04EF			     k53:				     ; REALLY_NUM_STATE
04EF  2C 46			     sub     al,70		     ; CONVERT ORIGIN
04F1  BB 0212r			     mov     bx,offset k14	     ; NUM STATE TABLE
04F4  E9 FB4C			     jmp      k56		     ; TRANSLATE_CHAR
04F7			     kb_int  endp

04F7			     code    ends
				     end

Symbol Name			  Type	 Value

??DATE				  Text	 "02-19-22"
??FILENAME			  Text	 "keybrd  "
??TIME				  Text	 "12:23:37"
??VERSION			  Number 0500
@CPU				  Text	 0101H
@CURSEG				  Text	 CODE
@FILENAME			  Text	 KEYBRD
@WORDSIZE			  Text	 2
ACTIVE_PAGE			  Byte	 DATA:0062
ADDR_6845			  Word	 DATA:0063
ALT_INPUT			  Byte	 DATA:0019
ALT_KEY				  Number 0038
ALT_SHIFT			  Number 0008
BAD_ADDR_MARK			  Number 0002
BAD_CMD				  Number 0001
BAD_CRC				  Number 0010
BAD_DMA				  Number 0008
BAD_NEC				  Number 0020
BAD_SEEK			  Number 0040
BIOS_BREAK			  Byte	 DATA:0071
BOOT_LOCN			  Far16	 ABS0:7C00
BOOT_VEC			  Dword	 ABS0:0064
BOTH				  Near16 CODE:00B4
BUFFER_END			  Word	 DATA:0082
BUFFER_HEAD			  Word	 DATA:001A
BUFFER_START			  Word	 DATA:0080
BUFFER_TAIL			  Word	 DATA:001C
CAPS				  Near16 CODE:0091
CAPST				  Byte	 CODE:01F6
CAPS_KEY			  Number 0056
CAPS_SHIFT			  Number 0040
CAPS_STATE			  Number 0040
CMD_BLOCK			  Byte	 DATA:0042
CMD_PORT			  Number 0063
COD				  Number F000
CONTROL_BYTE			  Byte	 DATA:0076
CRT_COLS			  Word	 DATA:004A
CRT_LEN				  Word	 DATA:004C
CRT_MODE			  Byte	 DATA:0049
CRT_MODE_SET			  Byte	 DATA:0065
CRT_PALLETTE			  Byte	 DATA:0066
CRT_START			  Word	 DATA:004E
CSI				  Word	 ABS0:04D0
CTL_KEY				  Number 001D
CTL_SHIFT			  Number 0004
CURSOR_MODE			  Word	 DATA:0060
CURSOR_POSN			  Word	 DATA:0050
DAT				  Number 0040
DECODE				  Near16 CODE:00B6
DEL_KEY				  Number 0053
DISKETTE_PARM			  Dword	 ABS0:0078
DISKETTE_STATUS			  Byte	 DATA:0041
DISKW_STATUS			  Byte	 DATA:0074
DISK_POINTER			  Dword	 ABS0:0078
DISK_VECTOR			  Dword	 ABS0:0100
DMA				  Number 0000
DMA08				  Number 0008
DMA_BOUNDARY			  Number 0009
E1L				  Number 0004
EOI				  Number 0020
EQUIP_FLAG			  Word	 DATA:0010
EQ_FL				  Byte	 ABS0:0410
ERROR_BEEP			  Near16 CODE:000D
EXT_PTR				  Dword	 ABS0:007C
HDISK_INT			  Dword	 ABS0:0034
HD_ERROR			  Byte	 DATA:0042
HF_NUM				  Byte	 DATA:0075
HF_TBL_VEC			  Dword	 ABS0:0104
HOLD_STATE			  Number 0008
IDNPOL				  Word	 DATA:0090
INF_KEY				  Number 0059
INS_KEY				  Number 0052
INS_SHIFT			  Number 0080
INS_STATE			  Number 0080
INT5_PTR			  Word	 ABS0:0014
INTA00				  Number 0020
INTA01				  Number 0021
INT_ADDR			  Word	 ABS0:0020
INT_FLAG			  Number 0080
INT_PTR				  Dword	 ABS0:0020
INV_KEY_L			  Number 0058
INV_KEY_R			  Number 005A
INV_SHIFT			  Number 0004
IO_RAM_SIZE			  Word	 DATA:0015
IO_ROM_INIT			  Word	 DATA:0067
IO_ROM_SEG			  Word	 DATA:0069
K1				  Near16 CODE:00EB
K10				  Byte	 CODE:0182
K11				  Byte	 CODE:01BC
K12				  Byte	 CODE:01FE
K13				  Byte	 CODE:0208
K14				  Byte	 CODE:0212
K15				  Byte	 CODE:021F
K16				  Near16 CODE:025D
K17				  Near16 CODE:0287
K18				  Near16 CODE:02F6
K19				  Near16 CODE:030A
K2				  Near16 CODE:0104
K20				  Near16 CODE:0318
K21				  Near16 CODE:031E
K22				  Near16 CODE:0325
K23				  Near16 CODE:0349
K24				  Near16 CODE:036D
K25				  Near16 CODE:0375
K26				  Near16 CODE:0394
K26A				  Near16 CODE:02F3
K27				  Near16 CODE:0399
K28				  Near16 CODE:03A8
K29				  Near16 CODE:03B1
K3				  Near16 CODE:0115
K30				  Near16 ----:---- Extern
K300				  Near16 CODE:02C8
K301				  Near16 CODE:02CD
K302				  Near16 CODE:02E2
K303				  Near16 CODE:033D
K304				  Near16 CODE:0359
K306				  Near16 CODE:03BC
K307				  Near16 CODE:03A2
K31				  Near16 CODE:03C7
K32				  Near16 CODE:03D0
K33				  Near16 CODE:03EC
K34				  Near16 CODE:03FD
K35				  Near16 CODE:040D
K36				  Near16 CODE:0411
K37				  Near16 CODE:0413
K38				  Near16 CODE:041D
K39				  Near16 CODE:0440
K4				  Near16 CODE:0000
K40				  Near16 CODE:045B
K400				  Near16 CODE:02B3
K401				  Near16 CODE:02BA
K406				  Near16 CODE:0270
K406B				  Near16 CODE:0384
K407				  Near16 CODE:0284
K41				  Near16 CODE:0465
K42				  Near16 CODE:046F
K43				  Near16 CODE:0479
K44				  Near16 CODE:047F
K45				  Near16 CODE:0497
K46				  Near16 CODE:04A4
K47				  Near16 CODE:04AE
K48				  Near16 CODE:04BE
K49				  Near16 CODE:04CC
K5				  Near16 CODE:000C
K50				  Near16 CODE:04DC
K51				  Near16 CODE:04E2
K52				  Near16 CODE:04E8
K53				  Near16 CODE:04EF
K54				  Near16 CODE:0032
K54A				  Near16 CODE:0494
K55				  Near16 CODE:003A
K56				  Near16 CODE:0043
K57				  Near16 CODE:0047
K58				  Near16 CODE:0050
K59				  Near16 CODE:0061
K6				  Byte	 CODE:011B
K61				  Near16 CODE:0064
K62				  Near16 CODE:0081
K63				  Near16 CODE:0087
K64				  Near16 CODE:0089
K65				  Near16 CODE:0016
K66				  Near16 CODE:001D
K67				  Near16 CODE:0026
K6L				  Number 000C
K7				  Byte	 CODE:0127
K8				  Byte	 CODE:012F
K89				  Near16 ----:---- Extern
K9				  Byte	 CODE:0169
K98				  Near16 CODE:04B8
K99				  Near16 CODE:007C
KBDINT				  Number 0002
KBD_IN				  Number 0060
KB_BUFFER			  Word	 DATA:001E
KB_BUFFER_END			  Word	 DATA:003E
KB_CTL				  Number 0061
KB_DAT				  Number 0060
KB_FLAG				  Byte	 DATA:0017
KB_FLAG_1			  Byte	 DATA:0018
KB_INT				  Far16	 CODE:0235
KEYBOARD_IO			  Far16	 CODE:00D4
LAST_VAL			  Byte	 DATA:006B
LAT				  Number 0002
LAT_KEY				  Number 0057
LAT_SHIFT			  Number 0001
LEFT_KEY			  Number 0054
LEFT_SHIFT			  Number 0002
MAX_PERIOD			  Number 0540
MEMORY_SIZE			  Word	 DATA:0013
MEM_SIZ				  Word	 ABS0:0413
MFG_TST				  Byte	 DATA:0012
MIN_PERIOD			  Number 0410
MOTOR_COUNT			  Byte	 DATA:0040
MOTOR_STATUS			  Byte	 DATA:003F
MOTOR_WAIT			  Number 0025
NEC_STATUS			  Byte	 DATA:0042
NMI_PTR				  Word	 ABS0:0008
NUM_KEY				  Number 0045
NUM_SHIFT			  Number 0020
NUM_STATE			  Number 0020
ORG_VECTOR			  Dword	 ABS0:004C
PARM_PTR			  Dword	 ABS0:0074
PORT_A				  Number 0060
PORT_B				  Number 0061
PORT_C				  Number 0062
PORT_OFF			  Byte	 DATA:0077
PRINTER_BASE			  Word	 DATA:0008
RECORD_NOT_FND			  Number 0004
REGEN				  Byte	 VIDEO_RAM:0000
REGENW				  Word	 VIDEO_RAM:0000
RESET				  Near16 ----:---- Extern
RESET_FLAG			  Word	 DATA:0072
RES_FL				  Word	 ABS0:0472
RIGHT_KEY			  Number 0055
RIGHT_SHIFT			  Number 0001
RS232_BASE			  Word	 DATA:0000
RUST				  Near16 ----:---- Extern
RUST2				  Near16 ----:---- Extern
RUS_KEY				  Number 005B
SCROLL_KEY			  Number 0046
SCROLL_SHIFT			  Number 0010
SCROLL_STATE			  Number 0010
SEEK_STATUS			  Byte	 DATA:003E
STA				  Number 0030
STATUS_BYTE			  Byte	 XXDATA:0000
STAT_OFFSET			  Byte	 DATA:007C
STG_LOC0			  Byte	 ABS0:0000
TABL				  Word	 DATA:00E0
TABL1				  Word	 ABS0:04E0
TIMER				  Number 0040
TIMERO				  Number 0040
TIMER_HIGH			  Word	 DATA:006E
TIMER_LOW			  Word	 DATA:006C
TIMER_OFL			  Byte	 DATA:0070
TIME_OUT			  Number 0080
TIM_CTL				  Number 0043
TMINT				  Number 0001
TMP_TOS				  Word	 DATA:3FF0
TOS				  Word	 STAC:0100
VIDEO_INT			  Word	 ABS0:0040
WRITE_PROTECT			  Number 0003
XXDAT				  Number 0050
ZB				  Byte	 ABS0:0000
ZW				  Word	 ABS0:0000

Groups & Segments		  Bit Size Align  Combine Class

ABS0				  16  7C00  AT 0000
CODE				  16  04F7 Byte	  Public
DATA				  16  3FF0  AT 0040
STAC				  16  0100  AT 0030
VIDEO_RAM			  16  4000  AT B800
XXDATA				  16  0001  AT 0050

