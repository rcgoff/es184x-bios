Turbo Assembler	 Version 5.0	    10-14-21 00:09:58	    Page 1
1840v4.asm



      1				     ;This source code made by Gleb Larionov, Prague.
      2				     ;Changed by Leonid	Yadrennikov, Tyumen.
      3				     ;v1 - 05.10.2021 -	ros_checksum removed, ES1841 memory switching-on added
      4				     ;v2 - 13.10.2021 -	int vector table loader	and table itself shortened (like in PCBIOSv3),
      5				     ;			BX register in STGTST is free
      6				     ;___________________
      7				     ; v4 - ??/??/???? (Other version than 24/04/1981) новая клавиатура
      8				     ;	БАЗОВАЯ СИСТЕМА ВВОДА/ВЫВОДА (БСУВВ)
      9				     ;___________________
     10	      =0060		     port_a  equ     60h
     11	      =F000		     cod     equ     0f000h
     12	      =0040		     dat     equ     0040h
     13	      =0030		     sta     equ     0030h
     14	      =0050		     xxdat   equ     0050h
     15	      =B800		     video_ra equ    0b800h
     16	      =0061		     port_b  equ     61h
     17	      =0062		     port_c  equ     62h
     18	      =0063		     cmd_port equ    63h
     19	      =0020		     inta00  equ     20h
     20	      =0021		     inta01  equ     21h
     21	      =0020		     eoi     equ     20h
     22	      =0040		     timer   equ     40h
     23	      =0043		     tim_ctl equ     43h
     24	      =0040		     timero  equ     40h
     25	      =0001		     tmint   equ     01
     26	      =0008		     dma08   equ     08
     27	      =0000		     dma     equ     00
     28	      =0540		     max_period	equ  540h
     29	      =0410		     min_period	equ  410h
     30	      =0060		     kbd_in  equ     60h
     31	      =0002		     kbdint  equ     02
     32	      =0060		     kb_dat  equ     60h
     33	      =0061		     kb_ctl  equ     61h
     34				     ;_______________
     35				     ;	Расположение прерываний 8086
     36				     ;_________________________
     37	0000			     abs0    segment para
     38	0000			     zb	     label   byte
     39	0000			     zw	     label   word
     40	0000			     stg_loc0 label  byte
     41					     org     2*4
     42	0008			     nmi_ptr label   word
     43					     org     5*4
     44	0014			     int5_ptr label  word
     45					     org     8*4
     46	0020			     int_addr label  word
     47	0020			     int_ptr label   dword
     48					     org     0dh*4
     49	0034			     hdisk_int	label  dword
     50					     org     10h*4
     51	0040			     video_int label word
     52					     org     13h*4
     53	004C			     org_vector	 label	dword
     54					     org     19h*4
     55	0064			     boot_vec  label  dword
     56					     org     1dh*4
     57	0074			     parm_ptr label  dword
     58					     org     01eh*4
     59	0078			     disk_pointer label	dword
     60	0078			     diskette_parm  label  dword
     61					     org     01fh*4
     62	007C			     ext_ptr label   dword
     63					     org     040h*4
     64	0100			     disk_vector  label	 dword
     65					     org     041h*4
     66
     67	0104			     hf_tbl_vec	 label	dword
     68					     org     410h
     69	0410			     eq_fl   label   byte
     70
     71					     org     413h
     72	0413			     mem_siz label   word
     73					     org     472h
     74	0472			     res_fl  label   word
     75					     org     4d0h
     76	04D0			     csi     label   word
     77					     org     4e0h
     78	04E0			     tabl1   label   word
     79					     org     7c00h
     80	7C00			     boot_locn label far
     81	7C00			     abs0    ends
     82
     83				     ;______________________
     84				     ;	Использование стека только во	время	       +
     85				     инициализации
     86				     ;______________________
     87	0000			     stac    segment para stack
     88	0000  80*(????)			     dw	     128 dup(?)
     89
     90
     91
     92	0100			     tos     label   word
     93	0100			     stac    ends
     94
     95				     ;______________________
     96				     ;	Область данных ПЗУ
     97				     ;____________________
     98	0000			     data segment    para
     99	0000  04*(????)		     rs232_base	dw 4 dup(?)
    100
    101
    102
    103	0008  04*(????)		     printer_base dw 4 dup(?)
    104
    105
    106
    107	0010  ????		     equip_flag	dw ?
    108	0012  ??		     mfg_tst db	     ?
    109	0013  ????		     memory_size dw  ?
    110	0015  ????		     io_ram_size dw  ?
    111				     ;_______________
    112				     ;	Область данных клавиатуры
    113				     ;_________________
    114	0017  ??		     kb_flag db	     ?
    115
    116				     ;	Размещение флажков в kb_flag
    117
    118	      =0080		     ins_state equ   80h
    119	      =0040		     caps_state	equ  40h
    120	      =0020		     num_state equ   20h
    121	      =0010		     scroll_state equ 10h
    122	      =0008		     alt_shift equ   08h
    123	      =0004		     ctl_shift equ   04h
    124	      =0002		     left_shift	equ  02h
    125	      =0001		     right_shift equ 01h
    126
    127	0018  ??		     kb_flag_1 db    ?
    128
    129	      =0080		     ins_shift equ   80h
    130	      =0040		     caps_shift	equ  40h
    131	      =0020		     num_shift equ   20h
    132	      =0010		     scroll_shift equ 10h
    133	      =0008		     hold_state	equ  08h
    134	      =0004		     inv_shift equ   04h
    135	      =0002		     lat	     equ     02h
    136	      =0001		     lat_shift	     equ     01h
    137
    138
    139
    140	0019  ??		     alt_input db    ?
    141	001A  ????		     buffer_head dw  ?
    142	001C  ????		     buffer_tail dw  ?
    143	001E  10*(????)		     kb_buffer dw    16	dup(?)
    144
    145
    146
    147	003E			     kb_buffer_end label word
    148
    149				     ;	head=tail указывает на заполнение буфера
    150
    151	      =0045		     num_key equ     69
    152	      =0046		     scroll_key	equ  70
    153	      =0038		     alt_key equ     56
    154	      =001D		     ctl_key equ     29
    155	      =0056		     caps_key equ    86
    156	      =0054		     left_key equ    84
    157	      =0055		     right_key equ   85
    158	      =0052		     ins_key equ     82
    159	      =0053		     del_key equ     83
    160	      =0059		     inf_key   equ   89
    161	      =0058		     inv_key_l	equ  88
    162	      =005A		     inv_key_r equ   90
    163	      =005B		     rus_key	equ  91
    164	      =0057		     lat_key equ     87
    165
    166				     ;____________________
    167				     ;	Область данных НГМД
    168				     ;____________________
    169	003E  ??		     seek_status db  ?
    170				     ;
    171				     ;
    172	      =0080		     int_flag equ    080h
    173	003F  ??		     motor_status db ?
    174				     ;
    175				     ;
    176	0040  ??		     motor_count db  ?
    177	      =0025		     motor_wait	equ  37
    178
    179				     ;
    180	0041  ??		     diskette_status db	?
    181	      =0080		     time_out equ    80h
    182	      =0040		     bad_seek equ    40h
    183	      =0020		     bad_nec  equ    20h
    184	      =0010		     bad_crc  equ    10h
    185	      =0009		     dma_boundary equ 09h
    186	      =0008		     bad_dma  equ    08h
    187	      =0004		     record_not_fnd equ	04h
    188	      =0003		     write_protect equ 03h
    189	      =0002		     bad_addr_mark equ 02h
    190	      =0001		     bad_cmd equ     01h
    191
    192	0042			     cmd_block	label  byte
    193	0042			     hd_error  label  byte
    194	0042  07*(??)		     nec_status	db   7 dup(?)
    195
    196
    197
    198
    199				     ;_____________________
    200				     ;	Область данных ЭЛИ
    201				     ;_____________________
    202	0049  ??		     crt_mode db     ?
    203	004A  ????		     crt_cols dw     ?
    204	004C  ????		     crt_len  dw     ?
    205	004E  ????		     crt_start dw    ?
    206	0050  08*(????)		     cursor_posn dw  8 dup(?)
    207
    208
    209
    210	0060  ????		     cursor_mode dw  ?
    211	0062  ??		     active_page db  ?
    212	0063  ????		     addr_6845 dw    ?
    213	0065  ??		     crt_mode_set db ?
    214	0066  ??		     crt_pallette db ?
    215
    216				     ;___________________
    217				     ;	Область данных НМД
    218				     ;___________________
    219	0067  ????		     io_rom_init dw  ?
    220	0069  ????		     io_rom_seg	dw   ?
    221	006B  ??		     last_val db     ?
    222
    223				     ;___________________
    224				     ;	Область данных таймера
    225				     ;___________________
    226	006C  ????		     timer_low dw    ?
    227	006E  ????		     timer_high	dw   ?
    228	0070  ??		     timer_ofl db    ?
    229				     ;___________________
    230				     ;	Область данных системы
    231				     ;___________________
    232	0071  ??		     bios_break	db   ?
    233	0072  ????		     reset_flag	dw   ?
    234	0074  ??		     diskw_status  db  ?
    235	0075  ??		     hf_num  db	  ?
    236	0076  ??		     control_byte  db  ?
    237	0077  ??		     port_off  db  ?
    238						     org     7ch
    239	007C			     stat_offset     label   byte ; смещение для хранения	       +
    240				     состояний	модема
    241
    242					     org     80h
    243	0080  ????		     buffer_start    dw	     ?
    244	0082  ????		     buffer_end	     dw	     ?
    245					     org     0090h
    246	0090  ????		     idnpol  dw	     ?
    247					     org     0e0h
    248	00E0			     tabl    label   word
    249
    250					     org     3ff0h
    251	3FF0			     tmp_tos label   word
    252				     ;
    253	3FF0			     data    ends
    254
    255				     ;___________________
    256				     ;	Область расширения данных
    257				     ;_________________________________
    258	0000			     xxdata segment  para
    259	0000  ??		     status_byte db  ?
    260	0001			     xxdata  ends
    261
    262				     ;_________________
    263				     ;	Буфер ЭЛИ
    264				     ;___________________
    265	0000			     video_ram segment para
    266	0000			     regen   label   byte
    267	0000			     regenw  label   word
    268	0000  4000*(??)			     db	     16384 dup(?)
    269
    270
    271
    272	4000			     video_ram ends
    273				     ;____________________
    274				     ;	Основной массив в ПЗУ	(сегмент	code)
    275				     ;____________________
    276
    277	0000			     code segment para
    278
    279						     org 0E000h
    280
    281	E000  35 37 30 30 30 35	31+  a5700051Copr_Ib db	'5700051 copr. ibm 1981'
    282	      20 63 6F 70 72 2E	20+
    283	      69 62 6D 20 31 39	38+
    284	      31
    285	E016  E0E5r		     c1		     dw	offset c11	     ; адрес    возврата
    286	E018  E1F2r		     caw	     dw	offset ca3
    287					     assume cs:code,ss:code,es:abs0,ds:data
    288
    289	E01A			     stgtst:
    290	E01A  B9 4000				     mov     cx,4000h
    291
    292	E01D			     stgtst_cnt	     proc    near
    293	E01D  D1 E9				     shr     cx,1	     ;rc words count is	2x less	than bytes
    294	E01F  FC				     cld
    295	E020  8E D9				     mov     ds, cx
    296	E022  B8 FFFF				     mov     ax, 0FFFFh
    297	E025  BA AA55				     mov     dx, 0AA55h
    298	E028  2B FF				     sub     di, di
    299	E02A  F3> AB				     repe stosw
    300
    301	E02C			     c2a:
    302	E02C  4F				     dec     di
    303	E02D  4F				     dec     di
    304	E02E  FD				     std
    305
    306	E02F			     c2b:
    307	E02F  8B F7				     mov     si, di
    308	E031  8C D9				     mov     cx, ds
    309				     ;---------------rc:
    310	E033  8A FC				     mov     bh, ah
    311	E035  8A DF				     mov     bl, bh	     ;rc now old pattern is in BX
    312
    313	E037			     c3:
    314	E037  26				     db	     26h	     ;rc ES segment prefix
    315	E038  AD				     lodsw
    316	E039  33 C3				     xor     ax, bx
    317	E03B  75 29				     jnz     c7x
    318	E03D  E4 62				     in	     al, 62h
    319	E03F  24 40				     and     al, 40h
    320	E041  B0 00				     mov     al, 0
    321	E043  75 21				     jnz     c7x
    322	E045  83 FB 00				     cmp     bx, 0
    323	E048  74 05				     jz	     c3a
    324	E04A  8A C2				     mov     al, dl
    325	E04C  8A E0				     mov     ah, al	     ;rc now new pattern is in AX
    326	E04E  AB				     stosw
    327
    328	E04F			     c3a:
    329	E04F  E2 E6				     loop    c3
    330	E051  83 FB 00				     cmp     bx, 0
    331	E054  74 10				     jz	     c7x
    332	E056  8B D8				     mov     bx, ax
    333	E058  86 F2				     xchg    dh, dl
    334	E05A  FC				     cld
    335	E05B  47				     inc     di
    336	E05C  47				     inc     di
    337	E05D  74 D0				     jz	     c2b
    338	E05F  4F				     dec     di
    339	E060  4F				     dec     di
    340	E061  BA 0001				     mov     dx, 1
    341	E064  EB C6				     jmp     short c2a
    342
    343	E066			     c7x:
    344	E066  C3				     retn
    345	E067			     stgtst_cnt	     endp
    346
    347
    348				     ;____________________
    349				     ;	Сброс системы - фаза 1
    350				     ;____________________
    351				     ;_____________________
    352				     ;	Проверка 16К памяти
    353				     ;_____________________
    354				     ;___________________
    355				     ;	ТЕСТ.01
    356				     ;	     Тест процессора 8086. Осуществляет	       +
    357				     проверку регистра
    358				     ;	     признаков, команд перехода и		       +
    359				     считывания-записи
    360				     ;	     общих	и сегментных	регистров.
    361				     ;_____________________________________
    362	E067			     reset   label   near
    363	E067  FA		     start:  cli		     ; сброс признака разрешения+
    364				     прерывания
    365	E068  B4 D5			     mov     ah,0d5h	     ;уст признаки SF,CF,ZF,AF
    366	E06A  9E			     sahf
    367	E06B  73 4E			     jnc     err01	     ;CF=0,в программу ошибок
    368	E06D  75 4C			     jnz     err01	     ;ZF=0,в программу ошибок
    369	E06F  7B 4A			     jnp     err01	     ;PF=0,в программу ошибок
    370	E071  79 48			     jns     err01	     ;SF=0,в программу ошибок
    371	E073  9F			     lahf		     ;загрузить признаки в AH
    372	E074  B1 05			     mov     cl,5	     ;загрузить счетчик
    373	E076  D2 EC			     shr     ah,cl	     ;выделить бит переноса
    374	E078  73 41			     jnc     err01	     ;признак AF=0
    375	E07A  B0 40			     mov     al,40h	     ;уст признак переполнения
    376	E07C  D0 E0			     shl     al,1	     ;уст для контроля
    377	E07E  71 3B			     jno     err01	     ;признак OF	не уст
    378	E080  32 E4			     xor     ah,ah	     ;уст AH=0
    379	E082  9E			     sahf		     ;уст в	исходное состояние SF,+
    380				     CF,ZF,PF
    381	E083  72 36			     jc	     err01	     ;признак CF=1
    382	E085  74 34			     jz	     err01	     ;признак ZF=1
    383	E087  78 32			     js	     err01	     ;признак SF=1
    384	E089  7A 30			     jp	     err01	     ;признак PF=1
    385	E08B  9F			     lahf		     ;загрузить признаки в AH
    386	E08C  B1 05			     mov     cl,5	     ;загрузить счетчик
    387	E08E  D2 EC			     shr     ah,cl	     ;выделить бит переноса
    388	E090  72 29			     jc	     err01	     ;признак IF=1
    389	E092  D0 E4			     shl     ah,1	     ;контроль,	что OF сброшен
    390	E094  70 25			     jo	     err01
    391	E096  B8 FFFF			     mov     ax,0ffffh	     ;уст эталона в AX
    392	E099  F9			     stc
    393	E09A  8E D8		     c8:     mov     ds,ax	     ;запись во	все регистры
    394	E09C  8C DB			     mov     bx,ds
    395	E09E  8E C3			     mov     es,bx
    396	E0A0  8C C1			     mov     cx,es
    397	E0A2  8E D1			     mov     ss,cx
    398	E0A4  8C D2			     mov     dx,ss
    399	E0A6  8B E2			     mov     sp,dx
    400	E0A8  8B EC			     mov     bp,sp
    401	E0AA  8B F5			     mov     si,bp
    402	E0AC  8B FE			     mov     di,si
    403	E0AE  73 07			     jnc     c9
    404	E0B0  33 C7			     xor     ax,di	     ;проверка всех	регистров
    405								     ;эталонами "FFFF", "0000"
    406	E0B2  75 07			     jnz     err01
    407	E0B4  F8			     clc
    408	E0B5  73 E3			     jnc     c8
    409	E0B7			     c9:
    410	E0B7  0B C7			     or	     ax,di	     ;нулевым шаблоном все	       +
    411				     регистры проверены ?
    412	E0B9  74 02			     jz	     c10	     ;ДА - переход к следующему    +
    413				     тесту
    414	E0BB  EB AA		     err01:  jmp   short  start
    415				     ;_______________________
    416				     ; ТЕСТ.02
    417				     ;_______________________
    418	E0BD			     c10:
    419	E0BD  B0 00			     mov     al,0	     ;запретить прерывaния NMI
    420	E0BF  E6 A0			     out     0a0h,al
    421	E0C1  E6 83			     out     83h,al	     ;инициализация регистрa       +
    422				     страниц ПДП
    423	E0C3  B0 99			     mov     al,99h	     ;уст A,C -ввод, B -	вывод
    424	E0C5  E6 63			    out	     cmd_port,al	     ;запись в регистр	       +
    425				     режима
    426									     ;трехканального порта
    427	E0C7  B0 FC			     mov     al,0fch		     ;блокировка контроля    +
    428				     по четности
    429	E0C9  E6 61			     out     port_b,al
    430	E0CB  2A C0			     sub     al,al
    431	E0CD  BA 03D8			     mov     dx,3d8h
    432	E0D0  EE			     out     dx,al	     ;блокировка цветного ЭЛИ
    433	E0D1  FE C0			     inc     al
    434	E0D3  BA 03B8			     mov     dx,3b8h
    435	E0D6  EE			     out     dx,al	     ;блокировка черно-белого     +
    436				     ЭЛИ
    437	E0D7  B8 F000			     mov     ax,cod	     ;уст сегментного регистра SS
    438	E0DA  8E D0			     mov     ss,ax
    439	E0DC  BB E000			     mov     bx,0e000h		     ;уст начального адреса +
    440				     памяти
    441	E0DF  BC E016r			     mov     sp,offset c1	     ;уст адреса возврата
    442	E0E2  EB 03			     jmp     short ros
    443	E0E4  90				     nop
    444	E0E5  75 D4		     c11:    jne     err01
    445				     ;------------------------
    446				     ;	ТЕСТ.03
    447				     ;	 Осуществляет проверку, инициализацию и      +
    448				     запуск ПДП и
    449				     ; таймера 1	для регенерации памяти
    450				     ;_________________________
    451				     ;	 Блокировка контроллера ПДП
    452
    453	E0E7  B0 04		     ros:    mov     al,04
    454	E0E9  E6 08			     out     dma08,al
    455
    456				     ;	 Проверка правильности функционирования
    457				     ;	 таймера	1
    458
    459	E0EB  B0 54			     mov     al,54h	     ;выбор таймера	1,LSB, режим 2
    460	E0ED  E6 43			     out     timer+3,al
    461	E0EF  2B C9			     sub     cx,cx
    462	E0F1  8A D9			     mov     bl,cl
    463	E0F3  8A C1			     mov     al,cl	     ;уст начального счетчика     +
    464				     таймера в 0
    465	E0F5  E6 41			     out     timer+1,al
    466	E0F7			     c12:
    467	E0F7  B0 40			     mov     al,40h
    468	E0F9  E6 43			     out     timer+3,al
    469	E0FB  E4 41			     in	     al,timer+1	     ;считывание счетчика	       +
    470				     таймера 1
    471	E0FD  0A D8			     or	     bl,al	     ;все биты таймера включены ?
    472	E0FF  80 FB FF			     cmp     bl,0ffh	     ;ДА - сравнение	с FF
    473	E102  74 04			     je	     c13	     ;биты таймера сброшены
    474	E104  E2 F1			     loop    c12	     ;биты таймера установлены
    475	E106  EB B3			     jmp     short err01     ;сбой таймера 1, останов	       +
    476				     системы
    477	E108			     c13:
    478	E108  8A C3			     mov     al,bl	     ;уст счетчика таймера 1
    479	E10A  2B C9			     sub     cx,cx
    480	E10C  E6 41			     out     timer+1,al
    481	E10E			     c14:	     ;цикл таймера
    482	E10E  B0 40			     mov     al,40h
    483	E110  E6 43			     out     timer+3,al
    484	E112  E4 41			     in	     al,timer+1		     ;считывание счетчика    +
    485				     таймера 1
    486	E114  22 D8			     and     bl,al
    487	E116  74 04			     jz	     c15
    488	E118  E2 F4			     loop    c14	     ;цикл таймера
    489	E11A  EB 9F			     jmp     short err01
    490
    491				     ;	 Инициализация таймера 1
    492
    493	E11C			     c15:
    494	E11C  B0 54			     mov     al,54h
    495	E11E  E6 43			     out     timer+3,al	     ;запись в регистр режима      +
    496				     таймера
    497	E120  B0 07			     mov     al,7    ;уст коэффициента деления для    +
    498				     регенерации
    499	E122  E6 41			     out     timer+1,al	     ;запись в счетчик таймера 1
    500	E124  E6 0D			     out     dma+0dh,al	     ;послать гашение ПДП
    501
    502				     ;	 Цикл проверки регистров ПДП
    503
    504	E126  B0 FF			     mov     al,0ffh	     ;запись шаблона FF во все       +
    505				     регистры
    506	E128  8A D8		     c16:    mov     bl,al	     ;сохранить шаблон для	       +
    507				     сравнения
    508	E12A  8A F8			     mov     bh,al
    509	E12C  B9 0008			     mov     cx,8	     ;уст цикла	счетчика
    510	E12F  BA 0000			     mov     dx,dma	     ;уст адреса регистра порта  +
    511				     ввода/вывода
    512	E132  EE		     c17:    out     dx,al	     ;запись  шаблона в регистр
    513	E133  EE			     out     dx,al	     ;старшие 16	бит регистра
    514	E134  B8 0101			     mov     ax,0101h	     ;изменение AX перед		       +
    515				     считыванием
    516	E137  EC			     in	     al,dx
    517	E138  8A E0			     mov     ah,al	     ;сохранить младшие	16 бит      +
    518				     регистра
    519	E13A  EC			     in	     al,dx
    520	E13B  3B D8			     cmp     bx,ax	     ;считан тот же шаблон ?
    521	E13D  74 03			     je	     c18	     ;ДА - проверка следующего     +
    522				     регистра
    523	E13F  E9 FF79			     jmp     err01	     ;НЕТ - ошибка
    524	E142			     c18:			     ;выбор следующего регистра +
    525				     ПДП
    526	E142  42			     inc     dx		     ;установка адреса		       +
    527				     следующего
    528								     ;регистра ПДП
    529	E143  E2 ED			     loop    c17	     ;запись шаблона для	       +
    530				     следующего регистра
    531	E145  F6 D0			     not     al		       ;уст шаблона в 0
    532	E147  74 DF			     jz	     c16
    533
    534				     ;	 Инициализация и запуск ПДП
    535
    536	E149  B0 FF			     mov     al,0ffh	     ;уст счетчика 64K для	       +
    537				     регенерации
    538	E14B  E6 01			     out     dma+1,al
    539	E14D  E6 01			     out     dma+1,al
    540	E14F  B0 58			     mov     al,058h	     ;уст режим	ПДП,	счетчик 0,      +
    541				     считывание
    542	E151  E6 0B			     out     dma+0bh,al	     ;запись в регистр режима ПДП
    543	E153  B0 00			     mov     al,0	     ;доступность контроллера    +
    544				     ПДП
    545	E155  E6 08			     out     dma+8,al	     ;уст регистр команд ПДП
    546	E157  E6 0A			     out     dma+10,al	     ;доступность канала 0 для     +
    547				     регенерации
    548	E159  B0 41			     mov     al,41h	     ;уст режим	дла канала 1
    549	E15B  E6 0B			     out     dma+0bh,al
    550	E15D  B0 42			     mov     al,42h	     ;уст режим	для канала 2
    551	E15F  E6 0B			     out     dma+0bh,al
    552	E161  B0 43			     mov     al,43h	     ;уст режим	для канала 3
    553	E163  E6 0B			     out     dma+0bh,al
    554				     ;======================================RCgoff begin
    555				     ;-----------------turn ES1841 memory on, if present
    556	E165  BA 02B0				     mov dx,2b0h
    557	E168  B0 0C				     mov al,0ch			     ;0b0000.1100 - turn RD,WD on, no  +
    558				     reconfig
    559	E16A  EE				     out dx,al
    560				     ;======================================RCgoffg end
    561	E16B  B8 0040				     mov     ax, dat
    562	E16E  8E D8				     mov     ds, ax
    563
    564	E170  8B 1E 0072r			     mov     bx, ds:reset_flag
    565	E174  2B C0				     sub     ax, ax
    566	E176  8E C0				     mov     es, ax
    567	E178  8E D8				     mov     ds, ax
    568	E17A  E4 62				     in	     al, port_c
    569	E17C  24 0F				     and     al, 0Fh
    570	E17E  FE C0				     inc     al
    571	E180  02 C0				     add     al, al
    572	E182  BA 0000				     mov     dx, 0
    573	E185  8A E0				     mov     ah, al
    574	E187  B0 00				     mov     al, 0
    575	E189  FC				     cld
    576
    577	E18A			     c19:
    578	E18A  2B FF				     sub     di, di
    579	E18C  B9 0000				     mov     cx, 0
    580
    581	E18F			     c20:
    582	E18F  AA				     stosb
    583	E190  E2 FD				     loop    c20
    584	E192  81 C2 1000			     add     dx, 4096
    585	E196  8E C2				     mov     es, dx
    586	E198  FE CC				     dec     ah
    587	E19A  74 02				     jz	     c21
    588	E19C  EB EC				     jmp     short c19
    589				     ;____________________
    590				     ;	 Инициализация контроллера
    591				     ;	 прерываний 8259
    592				     ;____________________
    593	E19E			     c21:
    594	E19E  B0 13			     mov     al,13h	     ;ICW1 - EDGE, SNGL, ICW4
    595	E1A0  E6 20			     out     inta00,al
    596	E1A2  B0 08			     mov     al,8	     ;УСТ ICW2 - прерывание типа 8(8-F)
    597	E1A4  E6 21			     out     inta01,al
    598	E1A6  B0 09			     mov     al,9	     ;уст ICW4 - BUFFERD , режим 8086
    599	E1A8  E6 21			     out     inta01,al
    600	E1AA  2B C0				     sub     ax, ax
    601	E1AC  8E C0				     mov     es, ax
    602	E1AE  BE 0040				     mov     si, dat
    603	E1B1  8E DE				     mov     ds, si
    604
    605	E1B3  89 1E 0072r			     mov     ds:reset_flag, bx
    606	E1B7  81 3E 0072r 1234			     cmp     ds:reset_flag, 1234h
    607	E1BD  74 38				     jz	     c25
    608	E1BF  8E D8				     mov     ds, ax
    609	E1C1  BC 3FF0r				     mov     sp, offset	tmp_tos
    610	E1C4  8E D0				     mov     ss, ax
    611	E1C6  8B F8				     mov     di, ax
    612	E1C8  BB 0024				     mov     bx, 9*4	     ; int 9 (KBD)
    613	E1CB  C7 07 E29Ar			     mov     word ptr [bx], offset d11
    614	E1CF  43				     inc     bx
    615	E1D0  43				     inc     bx
    616	E1D1  8C 0F				     mov     [bx], cs
    617	E1D3  E8 03F5				     call    kbd_reset
    618	E1D6  80 FB 65				     cmp     bl, 65h	     ; Manufacturing test mode - viz document  +
    619				     in	BIOS root or http://www.vcfed.org/forum/archive/index.php/t-12377.html
    620	E1D9  75 0E				     jnz     c23
    621	E1DB  B2 FF				     mov     dl, 0FFh
    622
    623	E1DD			     c22:
    624	E1DD  E8 03F8				     call    sp_test
    625	E1E0  8A C3				     mov     al, bl
    626	E1E2  AA				     stosb
    627	E1E3  FE CA				     dec     dl
    628	E1E5  75 F6				     jnz     c22
    629	E1E7  CD 3E				     int     3Eh
    630
    631	E1E9			     c23:
    632	E1E9  0E				     push    cs
    633	E1EA  17				     pop     ss
    634						     assume ss:code
    635	E1EB  FA				     cli
    636	E1EC  BC E018r				     mov     sp, offset	caw  ; [caw] = offset ca3 (next	jmp -> indirect+
    637				     call)
    638	E1EF  E9 FE28				     jmp     stgtst
    639
    640	E1F2			     ca3:
    641	E1F2  74 03				     jz	     c25
    642	E1F4  E9 FEC4				     jmp     err01
    643
    644				     ;	 Установка сегмента стека	и SP
    645
    646	E1F7			     c25:
    647	E1F7  B8 0030			     mov     ax,sta	     ;получить величину	стека
    648	E1FA  8E D0			     mov     ss,ax	     ;уст стек
    649	E1FC  BC 0100r			     mov     sp,offset tos   ;стек готов
    650	E1FF  EB 1C			     jmp     short tst6	     ;переход к	следующему тесту
    651
    652				     ;ros_checksum proc	 near
    653				     ;	     mov     cx,8192	     ;число байт для сложения
    654				     ;	     xor     al,al
    655				     ;c26:   add     al,cs:[bx]
    656				     ;	     inc     bx		     ;указание следующего байта
    657				     ;	     loop    c26	     ;сложить все байты в модуле +
    658				     ROS
    659				     ;	     or	     al,al	     ;сумма = 0 ?
    660				     ;	     ret
    661				     ;ros_checksum endp
    662				     ;______________________
    663				     ;	 Начальный тест надежности
    664				     ;______________________
    665					     assume  cs:code,es:abs0
    666
    667	E201  70 61 72 69 74 79	20+  d1		     db	'parity	check 2'
    668	      63 68 65 63 6B 20	32
    669
    670
    671	      =000E		     d1l     equ     14
    672	E20F  70 61 72 69 74 79	20+  d2		     db	'parity	check 1'
    673	      63 68 65 63 6B 20	31
    674
    675
    676	      =000E		     d2l     equ     14
    677				     ;______________________
    678				     ;	 ТЕСТ.06
    679				     ;	      Тест контроллера прерываний
    680				     ;	      8259
    681				     ;_______________________
    682	E21D			     tst6:
    683				     ;	 Проверка регистра масок прерываний (IMR)
    684
    685	E21D  FA			     cli		     ;сброс признака разрешения +
    686				     прерываний
    687	E21E  B0 00			     mov     al,0	     ;уст IMR в 0
    688	E220  E6 21			     out     inta01,al
    689	E222  E4 21			     in	     al,inta01	     ;считывание IMR
    690	E224  0A C0			     or	     al,al	     ;IMR=0 ?
    691	E226  75 39			     jnz     d6		     ;IMR не 0,в программу ошибок
    692	E228  B0 FF			     mov     al,0ffh	     ;недоступность прерываний
    693	E22A  E6 21			     out     inta01,al	     ;запись в IMR
    694	E22C  E4 21			     in	     al,inta01	     ;считывание IMR
    695	E22E  04 01			     add     al,1	     ;все биты IMR установлены ?
    696	E230  75 2F			     jnz     d6		     ;НЕТ - в программу ошибок
    697
    698	E232  2B C0			     sub     ax,ax	     ;уст регистра ES
    699	E234  8E C0			     mov     es,ax
    700
    701
    702				     ;	 Контроль ожидания прерывания
    703
    704	E236  FC			     cld		     ; уст признак направления
    705	E237  B9 0020			     mov     cx,20h	     ;rc все	прерывания 00..1F,	       +
    706				     относящиеся к BIOS
    707	E23A  33 FF			     xor     di,di
    708	E23C			     d3:
    709	E23C  B8 E29Ar			     mov     ax,offset d11   ; установить адрес		       +
    710				     процедуры	прерываний
    711	E23F  AB			     stosw
    712	E240  B8 F000			     mov     ax,cod  ; получить	адрес сегмента	       +
    713				     процедуры
    714	E243  AB			     stosw
    715	E244  E2 F6			     loop    d3
    716
    717				     ;	 Установка указателя вектора прерывания NMI
    718	E246  26: C7 06	0008r	  +	     mov     es:nmi_ptr,offset nmi_int
    719	      E2A7r
    720				     ;-----уст вектора прерываний 5
    721	E24D  26: C7 06	0014r	  +	     mov     es:int5_ptr,offset	print_screen   ; печать экрана
    722	      FF54r
    723
    724				     ;	 Прерывания замаскированы
    725
    726	E254  32 E4			     xor     ah,ah	     ;очистить регистр AH
    727	E256  FB			     sti		     ; установка признака	       +
    728				     разрешения прерывания
    729	E257  2B C9			     sub     cx,cx	     ; ожидание	1 сек любого	       +
    730				     прерывания,
    731	E259  E2 FE		     d4:     loop    d4		     ; которое может произойти
    732	E25B  E2 FE		     d5:     loop    d5
    733	E25D  0A E4			     or	     ah,ah	     ; прерывание возникло ?
    734	E25F  74 08			     jz	     d7		     ; нет -	к следующему	тесту
    735	E261  BA 0101		     d6:     mov     dx,101h	     ; уст длительности		       +
    736				     звукового	сигнала
    737	E264  E8 0319			     call    err_beep	     ; идти	в программу		       +
    738				     звукового	сигнала
    739	E267  FA			     cli
    740	E268  F4			     hlt		     ; останов системы
    741				     ;__________________
    742				     ;	 ТЕСТ.07
    743				     ;	      Проверка таймера 8253
    744				     ;___________________
    745	E269			     d7:
    746	E269  B4 00			     mov     ah,0	     ; сброс признака прерывания+
    747				     таймера
    748	E26B  32 ED			     xor     ch,ch	     ; очистить	регистр CH
    749	E26D  B0 FE			     mov     al,0feh   ; маскировать	все прерывания,   +
    750				     кроме	LVL 0
    751	E26F  E6 21			     out     inta01,al	     ; запись IMR
    752	E271  B0 10			     mov     al,00010000b    ; выбрать TIM 0, LSD, режим 0,	BINARY
    753	E273  E6 43			     out     tim_ctl,al	 ;записать регистр режима	       +
    754				     управления таймера
    755	E275  B1 16			     mov     cl,16h	     ; уст счетчик программного  +
    756				     цикла
    757	E277  8A C1			     mov     al,cl	     ; установить счетчик	       +
    758				     таймера 0
    759	E279  E6 40			     out     timero,al	     ; записать	счетчик таймера 0
    760	E27B  F6 C4 FF		     d8:     test    ah,0ffh	     ; прерывание таймера 0	       +
    761				     произошло	?
    762	E27E  75 04			     jnz     d9		     ; да - таймер считал	медленно
    763	E280  E2 F9			     loop    d8		     ; ожидание	прерывания	       +
    764				     определенное время
    765	E282  EB DD			     jmp     short d6	;прерывание таймера 0 не	       +
    766				     произошло	- ошибка
    767	E284  B1 12		     d9:     mov     cl,18	     ; уст счетчик программного  +
    768				     цикла
    769	E286  B0 FF			     mov     al,0ffh	     ; записать	счетчик таймера 0
    770	E288  E6 40			     out     timero,al
    771	E28A  B4 00			     mov     ah,0	     ; сброс признака,		       +
    772				     полученного прерывания
    773	E28C  B0 FE			     mov     al,0feh	     ; недоступность прерываний +
    774				     таймера 0
    775	E28E  E6 21			     out     inta01,al
    776	E290  F6 C4 FF		     d10:    test    ah,0ffh	     ; прерывание таймера 0	       +
    777				     произошло	?
    778	E293  75 CC			     jnz     d6		     ; да - таймер считает быстро
    779	E295  E2 F9			     loop    d10	     ; ожидание	прерывания	       +
    780				     определенное время
    781	E297  EB 37			     jmp     short tst8		     ; переход к следующему  +
    782				     тесту
    783	E299  90			     nop
    784				     ;____________________
    785				     ;	 Программа обслуживания
    786				     ;	 временного прерывания
    787				     ;____________________
    788	E29A			     d11     proc    near
    789	E29A  B4 01			     mov     ah,1
    790	E29C  50			     push    ax		     ; хранить регистр AX
    791	E29D  B0 FF			     mov     al,0ffh	     ; размаскировать все	       +
    792				     прерывания
    793	E29F  E6 21			     out     inta01,al
    794	E2A1  B0 20			     mov     al,eoi
    795	E2A3  E6 20			     out     inta00,al
    796	E2A5  58			     pop     ax		     ; восстановить	регистр AX
    797	E2A6  CF			     iret
    798	E2A7			     d11     endp
    799
    800	E2A7			     nmi_int proc    near
    801	E2A7  50			     push    ax		     ; хранить регистр AX
    802	E2A8  E4 62			     in	     al,port_c
    803	E2AA  A8 40			     test    al,40h	     ; ошибка паритета при	       +
    804				     вводе/выводе ?
    805	E2AC  74 08			     jz	     d12	     ; да - признак сбрасывается  +
    806				     в	0
    807	E2AE  BE E201r			     mov     si,offset d1    ; адрес поля сообщения об     +
    808				     ошибке
    809	E2B1  B9 000E			     mov     cx,d1l	     ; длина поля сообщения об     +
    810				     ошибке
    811	E2B4  EB 0A			     jmp     short d13	     ; отобразить ошибку на	       +
    812				     дисплее
    813	E2B6			     d12:
    814	E2B6  A8 80			     test    al,80h
    815	E2B8  74 10			     jz	     d14
    816	E2BA  BE E20Fr			     mov     si,offset d2    ; адрес поля сообщения об     +
    817				     ошибке
    818	E2BD  B9 000E			     mov     cx,d2l	     ; длина поля сообщения об     +
    819				     ошибке
    820	E2C0			     d13:
    821	E2C0  B8 0000			     mov     ax,0	     ; инициировать	и установить+
    822				     режим	ЭЛИ
    823	E2C3  CD 10			     int     10h	     ; вызвать процедуру VIDEO_IO
    824	E2C5  E8 032D			     call    p_msg	     ; распечатать ошибку
    825	E2C8  FA			     cli
    826	E2C9  F4			     hlt		     ; останов системы
    827	E2CA			     d14:
    828	E2CA  58			     pop     ax		     ; восстановить	AX
    829	E2CB  CF			     iret
    830	E2CC			     nmi_int endp
    831				     ;____________________
    832				     ;	 Начальный тест надежности
    833				     ;____________________
    834					     assume  cs:code,ds:data
    835
    836	E2CC  20 32 30 31	     e1	     db	     ' 201'
    837	      =0004		     e1l     equ     04h
    838
    839				     ;	 Выполнение программы БСУВВ,
    840				     ;	 генерирующей вектора прерываний
    841
    842	E2D0			     tst8:
    843	E2D0  FC			     cld		     ; установить признак	       +
    844				     направления вперед
    845	E2D1  BF 0040r			     mov     di,offset video_int   ; уст адреса области	       +
    846				     прерываний
    847	E2D4  0E			     push    cs
    848	E2D5  1F			     pop     ds		     ; уст адреса таблицы	       +
    849				     векторов
    850	E2D6  BE FF03r			     mov     si,offset vector_table+10h	 ; смещение VECTOR_TABLE+(2*8) +
    851				     (начало прогр прерыв)
    852	E2D9  B9 0010			     mov     cx,10h
    853	E2DC  A5		     e1a:    movsw	     ; передать	таблицу векторов	в     +
    854				     память
    855	E2DD  47			     inc     di
    856	E2DE  47			     inc     di
    857	E2DF  E2 FB			     loop    e1a
    858
    859				     ;	 Установка таймера 0 в	режим 3
    860
    861	E2E1  B0 FF			     mov     al,0ffh
    862	E2E3  E6 21			     out     inta01,al
    863	E2E5  B0 36			     mov     al,36h	     ; выбор счетчика 0,		       +
    864				     считывания-за-
    865				     ; писи	младшего,затем старшего байта		       +
    866				     счетчика,уст режима 3
    867	E2E7  E6 43			     out     timer+3,al	     ; запись режима таймера
    868	E2E9  B0 C7			     mov     al,0c7h
    869	E2EB  E6 40			     out     timer,al	     ; записать	младшую часть      +
    870				     счетчика
    871	E2ED  B0 DB			     mov     al,0dbh
    872	E2EF  E6 40			     out     timer,al	     ; записать	старшую часть      +
    873				     счетчика
    874
    875
    876					     assume  ds:data
    877	E2F1  B8 0040			     mov     ax,dat	     ; DS - сегмент данных
    878	E2F4  8E D8			     mov     ds,ax
    879	E2F6			     e3:
    880	E2F6  81 3E 0072r 1234		     cmp     reset_flag,1234h
    881	E2FC  74 03			     jz	     e3a
    882	E2FE  E8 1558			     call    bct     ;загрузка знакогенератора Ч/Б    +
    883				     ЭЛИ
    884				     ;_____________________
    885				     ;	 ТЕСТ.08
    886				     ;	      Инициализация и запуск
    887				     ;	      контроллера ЭЛИ
    888				     ;______________________
    889	E301  E4 60		     e3a:    in	     al,port_a	     ; считывание состояния	       +
    890				     переключателей
    891	E303  B4 00			     mov     ah,0
    892	E305  A3 0010r			     mov     equip_flag,ax   ; запомнить считанное	       +
    893				     состояние	пере-
    894								     ; ключателей
    895	E308  24 30			     and     al,30h	     ; выделить	переключатели     +
    896				     ЭЛИ
    897	E30A  75 03			     jnz     e7		     ; переключатели ЭЛИ	       +
    898				     установлены в 0 ?
    899	E30C  E9 0098			     jmp     e19	     ; пропустить тест ЭЛИ
    900	E30F			     e7:
    901	E30F  86 E0			     xchg    ah,al
    902	E311  80 FC 30			     cmp     ah,30h	     ; адаптер ч/б ?
    903	E314  74 09			     je	     e8		     ; да - установить режим для   +
    904				     ч/б адаптера
    905	E316  FE C0			     inc     al	      ;	уст цветной режим для		       +
    906				     цветного адаптера
    907	E318  80 FC 20			     cmp     ah,20h	     ; режим 80х25 установлен ?
    908	E31B  75 02			     jne     e8		     ; нет -	уст режим для 40х25
    909	E31D  B0 03			     mov     al,3	     ; установить режим 80х25
    910	E31F			     e8:
    911	E31F  50			     push    ax		     ; хранить режим ЭЛИ	в стеке
    912	E320  2A E4			     sub     ah,ah	     ;
    913	E322  CD 10			     int     10h
    914	E324  58			     pop     ax
    915	E325  50			     push    ax
    916	E326  BB B000			     mov     bx,0b000h
    917	E329  BA 03B8			     mov     dx,3b8h	     ; регистр режима для ч/б
    918	E32C  B9 1000			     mov     cx,4096	     ; счетчик байт для ч/б	       +
    919				     адаптера
    920	E32F  B0 01			     mov     al,1	     ; уст режим для	ч/б адаптера
    921	E331  80 FC 30			     cmp     ah,30h	     ; ч/б адаптер ЭЛИ подключен ?
    922	E334  74 0B			     je	     e9		     ; переход к проверке буфера +
    923				     ЭЛИ
    924	E336  BB B800			     mov     bx,0b800h
    925	E339  BA 03D8			     mov     dx,3d8h	     ; регистр режима для	       +
    926				     цветного адаптера
    927	E33C  B9 4000			     mov     cx,4000h
    928	E33F  FE C8			     dec     al		     ; уст режим в 0 для цветного  +
    929				     адаптера
    930				     ;
    931				     ;	     Проверка буфера ЭЛИ
    932				     ;
    933	E341			     e9:
    934	E341  EE			     out     dx,al	     ; блокировка ЭЛИ для	       +
    935				     цветного адаптера
    936	E342  8E C3			     mov     es,bx
    937	E344  B8 0040			     mov     ax,dat	     ; DS - сегмент данных
    938	E347  8E D8			     mov     ds,ax
    939	E349  81 3E 0072r 1234		     cmp     reset_flag,1234h
    940	E34F  74 0D			     je	     e10
    941	E351  8E DB			     mov     ds,bx	     ;
    942	E353  E8 FCC7			     call    stgtst_cnt	     ; переход к проверке памяти
    943	E356  74 06			     je	     e10
    944	E358  BA 0102			     mov     dx,102h
    945	E35B  E8 0222			     call    err_beep
    946
    947				     ;___________________________
    948				     ;
    949				     ;	 ТЕСТ.09
    950				     ;	      Осуществляет проверку	формирования       +
    951				     строк	в буфере	ЭЛИ
    952				     ;_________________________
    953	E35E			     e10:
    954	E35E  58			     pop     ax	  ; получить считанные			       +
    955				     переключатели	ЭЛИ в AH
    956	E35F  50			     push    ax		     ; сохранить их
    957	E360  B4 00			     mov     ah,0
    958	E362  CD 10			     int     10h
    959	E364  B8 7020			     mov     ax,7020h	     ; запись пробелов в	режиме   +
    960				     реверса
    961	E367  2B FF			     sub     di,di	     ; установка начала области
    962	E369  B9 0028			     mov     cx,40	     ;
    963	E36C  FC			     cld	 ; установить	признак направления  +
    964				     для уменьшения
    965	E36D  F3> AB			     rep     stosw	     ; записать	в память
    966				     ;______________________
    967				     ;	  ТЕСТ.10
    968				     ;	       Осуществляет	проверку линий		       +
    969				     интерфейса ЭЛИ
    970				     ;______________________
    971	E36F  58			     pop     ax		     ; получить	считанные	       +
    972				     переключатели
    973	E370  50			     push    ax		     ; сохранить их
    974	E371  80 FC 30			     cmp     ah,30h	     ; ч/б адаптер подключен ?
    975	E374  BA 03BA			     mov     dx,03bah	     ; уст адрес порта состояния +
    976				     ч/б дисплея
    977	E377  74 03			     je	     e11	     ; да - переход к	следующей     +
    978				     строке
    979	E379  BA 03DA			     mov     dx,03dah	     ; цветной адаптер подключен
    980				     ;
    981				     ;	     Тест строчной развертки
    982				     ;
    983	E37C			     e11:
    984	E37C  B4 08			     mov     ah,8
    985	E37E			     e12:
    986	E37E  2B C9			     sub     cx,cx
    987	E380  EC		     e13:    in	     al,dx	 ;считывание порта состояния   +
    988				     контроллера СМ607
    989	E381  22 C4			     and     al,ah	     ; проверка	строки
    990	E383  75 04			     jnz     e14
    991	E385  E2 F9			     loop    e13
    992	E387  EB 13			     jmp     short e17	     ; переход к сообщению об       +
    993				     ошибке
    994	E389  2B C9		     e14:    sub     cx,cx
    995	E38B  EC		     e15:    in	     al,dx     ;считывание порта	состояния     +
    996				     контроллера СМ607
    997	E38C  22 C4			     and     al,ah
    998	E38E  74 04			     jz	     e16
    999	E390  E2 F9			     loop    e15
   1000	E392  EB 08			     jmp     short e17
   1001				     ;
   1002				     ;	     Следующий	строчный импульс
   1003				     ;
   1004	E394			     e16:
   1005	E394  B1 03			     mov     cl,3	     ; получить	следующий бит      +
   1006				     для контроля
   1007	E396  D2 EC			     shr     ah,cl
   1008	E398  75 E4			     jnz     e12
   1009	E39A  EB 06			     jmp     short e18	     ; отобразить курсор на	       +
   1010				     экране
   1011				     ;
   1012				     ;	     Сообщение	об ошибке конттроллера СМ607
   1013				     ;
   1014	E39C			     e17:
   1015	E39C  BA 0103			     mov     dx,103h
   1016	E39F  E8 01DE			     call    err_beep
   1017				     ;
   1018				     ;	     Отображение курсора на	экране
   1019				     ;
   1020	E3A2			     e18:
   1021	E3A2  58			     pop     ax		     ; получить	считанные	       +
   1022				     переключатели	в AH
   1023	E3A3  B4 00			     mov     ah,0	     ; установить режим
   1024	E3A5  CD 10			     int     10h
   1025				     ;______________________
   1026				     ;	 ТЕСТ.11
   1027				     ;	      Дополнительный тест памяти
   1028				     ;______________________
   1029					     assume  ds:data
   1030	E3A7			     e19:
   1031	E3A7  B8 0040			     mov     ax,dat
   1032	E3AA  8E D8			     mov     ds,ax
   1033	E3AC  E4 62				     in	     al, port_c
   1034	E3AE  24 0F				     and     al, 0Fh
   1035	E3B0  FE C0				     inc     al
   1036	E3B2  B4 80				     mov     ah, 80h
   1037	E3B4  F6 E4				     mul     ah
   1038	E3B6  A3 0015r				     mov     ds:io_ram_size, ax	; Reserved in original IBM PC
   1039	E3B9  8B D0				     mov     dx, ax
   1040	E3BB  A3 0013r				     mov     ds:memory_size, ax
   1041	E3BE  81 3E 0072r 1234		     cmp     reset_flag,1234h
   1042	E3C4  74 2E			     je	     e22
   1043
   1044				     ;	 Проверка любой действительной памяти
   1045				     ;	 на считывание и запись
   1046
   1047	E3C6  E9 024A			     jmp     e190
   1048
   1049				     ;	 Печать адреса и эталона, если
   1050				     ;	 произошла ошибка данных
   1051
   1052
   1053	E3C9			     osh:
   1054	E3C9  8A E8			     mov     ch,al	     ;
   1055	E3CB  8A C6			     mov     al,dh	     ; получить	измененный адрес
   1056	E3CD  B1 04			     mov     cl,4
   1057	E3CF  D2 E8			     shr     al,cl	     ;
   1058	E3D1  E8 0023			     call    xlat_print_cod  ; преобразование и печать    +
   1059				     кода
   1060	E3D4  8A C6			     mov     al,dh
   1061	E3D6  24 0F			     and     al,0fh
   1062	E3D8  E8 001C			     call    xlat_print_cod  ; преобразование и печать    +
   1063				     кода
   1064	E3DB  8A C5			     mov     al,ch	     ; получить	следующий шаблон
   1065	E3DD  B1 04			     mov     cl,4
   1066	E3DF  D2 E8			     shr     al,cl
   1067	E3E1  E8 0013			     call    xlat_print_cod  ; преобразование и печать    +
   1068				     кода
   1069	E3E4  8A C5			     mov     al,ch	     ;
   1070	E3E6  24 0F			     and     al,0fh	     ;
   1071	E3E8  E8 000C			     call    xlat_print_cod  ; преобразование и печать    +
   1072				     кода
   1073	E3EB  BE E2CCr			     mov     si,offset e1    ; установить адрес поля	       +
   1074				     сообщения
   1075								     ; об ошибке
   1076	E3EE  B9 0004			     mov     cx,e1l	     ; получить	счетчик поля	       +
   1077				     сообщения	об ошибке
   1078	E3F1  E8 0201			     call    p_msg	     ; печать ошибки
   1079	E3F4			     e22:
   1080	E3F4  EB 2C			     jmp     short tst12	     ; переход к следующему  +
   1081				     тесту
   1082	E3F6  90			     nop
   1083				     ;_____________________
   1084				     ;
   1085				     ;	 Процедура вывода на экран сообщения об       +
   1086				     ошибке в коде ASCII
   1087				     ;
   1088				     ;_______________________
   1089
   1090	E3F7			     xlat_print_cod proc near
   1091	E3F7  1E			     push    ds		     ; сохранить DS
   1092	E3F8  0E			     push    cs
   1093	E3F9  1F			     pop     ds
   1094	E3FA  BB E412r			     mov     bx,offset f4e   ; адрес таблицы кодов ASCII
   1095	E3FD  D7			     xlatb
   1096	E3FE  B4 0E			     mov     ah,14
   1097	E400  B7 00			     mov     bh,0
   1098	E402  CD 10			     int     10h
   1099	E404  1F			     pop     ds
   1100	E405  C3			     ret
   1101	E406			     xlat_print_cod endp
   1102				     ;______________________
   1103				     ;	 Сброс системы - фаза 4
   1104				     ;______________________
   1105				     ;
   1106				     ;	 Коды сообщений об ошибках
   1107				     ;_______________________
   1108
   1109					     assume  cs:code,ds:data
   1110	E406  20 33 30 31	     f1	     db	     ' 301'
   1111	      =0004		     f1l     equ     4h		     ; сообщение клавиатуры
   1112	E40A  31 33 31		     f2	     db	     '131'
   1113	      =0003		     f2l     equ     3h		     ; сообщение кассеты
   1114	E40D  36 30 31		     f3	     db	     '601'
   1115	      =0003		     f3l     equ     3h		     ; сообщение НГМД
   1116
   1117	E410			     f4	     label   word
   1118	E410  0378			     dw	     378h
   1119	E412			     f4e     label   word
   1120	E412  30 31 32 33 34 35	36+  ascii_tbl db    '0123456789abcdef'
   1121	      37 38 39 61 62 63	64+
   1122	      65 66
   1123
   1124
   1125				     ;______________________
   1126				     ;	 ТЕСТ.12
   1127				     ;	 Тест клавиатуры
   1128				     ;______________________
   1129	E422			     tst12:
   1130
   1131	E422  B8 0040			     mov     ax,dat
   1132	E425  8E D8			     mov     ds,ax
   1133	E427  E8 01A1			     call    kbd_reset	     ; Сброс клавиатуры
   1134	E42A  B0 4D			     mov     al,4dh	     ; доступность клавиатуры
   1135	E42C  E6 61			     out     port_b,al
   1136	E42E  E3 27			     jcxz    f6		     ; нет -	печать ошибки
   1137	E430  80 FB AA			     cmp     bl,0aah	     ; код сканирования 'AA' ?
   1138	E433  75 22			     jne     f6		     ; нет -	печать ошибки
   1139
   1140				     ;	 Поиск "залипших" клавиш
   1141
   1142	E435  B0 CC			     mov     al,0cch	   ; сброс	клавиатуры, уст	       +
   1143				     синхронизации
   1144	E437  E6 61			     out     port_b,al
   1145	E439  B0 4C			     mov     al,4ch	   ; доступность клавиатуры
   1146	E43B  E6 61			     out     port_b,al
   1147	E43D  2B C9			     sub     cx,cx
   1148				     ;
   1149				     ;	     Ожидание прерывания клавиатуры
   1150				     ;
   1151	E43F			     f5:
   1152	E43F  E2 FE			     loop    f5		     ; задержка
   1153	E441  E4 60			     in	     al,kbd_in	     ; получение кода		       +
   1154				     сканирования
   1155	E443  3C 00			     cmp     al,0	     ; код сканирования равен 0 ?
   1156	E445  74 19			     je	     f7		     ; да - продолжение		       +
   1157				     тестирования
   1158	E447  8A E8			     mov     ch,al	     ; сохранить код		       +
   1159				     сканирования
   1160	E449  B1 04			     mov     cl,4
   1161	E44B  D2 E8			     shr     al,cl
   1162	E44D  E8 FFA7			     call    xlat_print_cod  ; преобразование и печать
   1163	E450  8A C5			     mov     al,ch	     ; восстановить	код		       +
   1164				     сканирования
   1165	E452  24 0F			     and     al,0fh	     ; выделить	младший байт
   1166	E454  E8 FFA0			     call    xlat_print_cod  ; преобразование и печать
   1167	E457  BE E406r		     f6:     mov     si,offset f1    ; получить	адрес поля	       +
   1168				     сообщения	об
   1169								     ; ошибке
   1170	E45A  B9 0004			     mov     cx,f1l	      ;	длина поля сообщения об    +
   1171				     ошибке
   1172	E45D  E8 0195			     call    p_msg	      ;	вывод сообщения об ошибке+
   1173				     на экран
   1174
   1175				     ;	 Установка таблицы векторов прерываний
   1176
   1177	E460			     f7:
   1178	E460  2B C0			     sub     ax,ax
   1179	E462  8E C0			     mov     es,ax
   1180	E464  B9 0008			     mov     cx,8	     ; получить	счетчик векторов
   1181	E467  0E			     push    cs
   1182	E468  1F			     pop     ds
   1183	E469  BE FEF3r			     mov     si,offset vector_table   ;	адрес таблицы	       +
   1184				     векторов
   1185	E46C  BF 0020r			     mov     di,offset int_ptr
   1186	E46F  FC			     cld
   1187	E470  A5		     f7a:    movsw
   1188	E471  47			     inc     di
   1189	E472  47			     inc     di
   1190	E473  E2 FB			     loop    f7a
   1191	E475  EB 06			     jmp     short tst14
   1192
   1193					     org     0e47dh	     ;rc для	устранения съезжания+
   1194				     при переделке загрузчика таблицы векторв      +
   1195				     прерываний
   1196
   1197				     ;______________________
   1198				     ;	 ТЕСТ.14
   1199				     ;	 Осуществляет проверку НГМД
   1200				     ;______________________
   1201	E47D  B8 0040		     tst14:  mov     ax,dat	     ; уст. регистр DS
   1202	E480  8E D8			     mov     ds,ax
   1203	E482  B0 FC			     mov     al,0fch  ;	доступность прерываний	       +
   1204				     таймера и клавиатуры
   1205	E484  E6 21			     out     inta01,al
   1206	E486  A0 0010r			     mov     al,byte ptr equip_flag  ; получить	состояние     +
   1207				     переклю-
   1208									     ; чателей
   1209	E489  A8 01			     test    al,01h	     ; первоначальная загрузка с+
   1210				     НГМД ?
   1211	E48B  75 03			     jnz     f10	     ; да - проверка управления    +
   1212				     НГМД
   1213	E48D  E9 00ED			     jmp     f23
   1214	E490			     f10:
   1215	E490  B0 BC			     mov     al,0bch	     ; доступность прерываний с  +
   1216				     НГМД,
   1217	E492  E6 21			     out     inta01,al	     ; клавиатуры и таймера
   1218	E494  B4 00			     mov     ah,0	     ; сброс контроллера НГМД
   1219	E496  CD 13			     int     13h	     ; переход к сбросу НГМД
   1220	E498  F6 C4 FF			     test    ah,0ffh	     ; состояние верно ?
   1221	E49B  75 20			     jnz     f13	     ; нет -	сбой устройства
   1222
   1223				     ;	 Включить мотор устройства 0
   1224
   1225	E49D  BA 03F2			     mov     dx,03f2h	     ; получить	адрес адаптера    +
   1226				     НГМД
   1227	E4A0  B0 1C			     mov     al,1ch	     ; включить	мотор
   1228	E4A2  EE			     out     dx,al
   1229	E4A3  2B C9			     sub     cx,cx
   1230
   1231				     ;	  Ожидание включения мотора НГМД
   1232
   1233	E4A5			     f11:
   1234	E4A5  E2 FE			     loop    f11
   1235	E4A7			     f12:			     ; ожидание	мотора 1
   1236	E4A7  E2 FE			     loop    f12
   1237	E4A9  33 D2			     xor     dx,dx
   1238	E4AB  B5 01			     mov     ch,1	     ; выбор первой дорожки
   1239	E4AD  88 16 003Er		     mov seek_status,dl
   1240	E4B1  E8 09B3			     call    seek	     ; переход к рекалибровке      +
   1241				     НГМД
   1242	E4B4  72 07			     jc	     f13	     ; перейти в программу ошибок
   1243	E4B6  B5 22			     mov     ch,34	     ; выбор 34 дорожки
   1244	E4B8  E8 09AC			     call    seek
   1245	E4BB  73 09			     jnc     f14	     ; выключить мотор
   1246
   1247				     ;	  Ошибки НГМД
   1248
   1249	E4BD			     f13:
   1250	E4BD  BE E40Dr			     mov     si,offset f3    ; получить	адрес поля	       +
   1251				     сообщения	об
   1252								     ; ошибке
   1253	E4C0  B9 0003			     mov     cx,f3l	     ; установить счетчик
   1254	E4C3  E8 012F			     call    p_msg	     ; идти	в программу ошибок
   1255
   1256				     ;	 Выключить мотор устройства 0
   1257
   1258	E4C6			     f14:
   1259	E4C6  B0 0C			     mov     al,0ch	     ; выключить мотор		       +
   1260				     устройства 0
   1261	E4C8  BA 03F2			     mov     dx,03f2h	     ; уст адрес порта		       +
   1262				     управления НГМД
   1263	E4CB  EE			     out     dx,al
   1264
   1265				     ;	 Установка печати и базового адреса
   1266				     ;	 адаптера стыка С2, если устройства		       +
   1267				     подключены
   1268
   1269	E4CC			     f15:
   1270	E4CC  83 FD 00			     cmp     bp,0000h
   1271	E4CF  74 18			     jz	     dal
   1272	E4D1  BA 0003			     mov     dx,3
   1273	E4D4  E8 00A9			     call    err_beep
   1274	E4D7  BE E6A6r			     mov     si,offset f39
   1275	E4DA  B9 0017				     mov     cx, 23
   1276	E4DD  E8 0115			     call    p_msg
   1277	E4E0			     err_wait:
   1278	E4E0  B4 00			     mov     ah,0
   1279	E4E2  CD 16			     int     16h
   1280	E4E4  80 FC 3B			     cmp     ah,3bh
   1281	E4E7  75 F7			     jnz     err_wait
   1282	E4E9  2A E4		     dal:    sub     ah,ah
   1283	E4EB  A0 0049r			     mov     al,crt_mode
   1284	E4EE  CD 10			     int     10h
   1285	E4F0  C7 06 001Ar 001Er			     mov     ds:buffer_head, offset kb_buffer ;	ERROR -	Must be	approx.+
   1286				     6 lines upper, before int 16h
   1287	E4F6  C7 06 001Cr 001Er			     mov     ds:buffer_tail, offset kb_buffer ;	ERROR -	Must be	approx.+
   1288				     6 lines upper, before int 16h
   1289	E4FC  BD E410r			     mov     bp,offset f4    ; таблица PRT_SRC
   1290	E4FF  BE 0000			     mov     si,0
   1291	E502			     f16:
   1292	E502  2E: 8B 56	00		     mov     dx,cs:[bp]	     ; получить	базовый адрес      +
   1293				     печати
   1294	E506  B0 AA			     mov     al,0aah	     ; записать	данные в	порт А
   1295	E508  EE			     out     dx,al
   1296	E509  2A C0			     sub     al,al
   1297	E50B  EC			     in	     al,dx	     ; считывание порта А
   1298	E50C  3C AA			     cmp     al,0aah	     ; шаблон данных тот	же
   1299	E50E  75 06			     jne     f17	 ; нет - проверка следующего      +
   1300				     устройства печати
   1301	E510  89 94 0008r		     mov     word ptr printer_base[si],dx  ;да-уст	базовый	       +
   1302				     адрес
   1303	E514  46			     inc     si		     ; вычисление следующего       +
   1304				     слова
   1305	E515  46			     inc     si
   1306	E516			     f17:
   1307	E516  45			     inc     bp		     ; указать следующий базовый+
   1308				     адрес
   1309	E517  45			     inc     bp
   1310	E518  81 FD E412r		     cmp     bp,offset f4e   ; все возможные адреса	       +
   1311				     проверены	?
   1312	E51C  75 E4			     jne     f16	     ; нет, к проверке следующего+
   1313				     адреса печати
   1314	E51E  BB 0000			     mov     bx,0
   1315	E521  BA 03FF			     mov     dx,3ffh	     ; проверка	подключения	       +
   1316				     адаптера 1	стыка С2
   1317	E524  B0 8A			     mov     al,8ah
   1318	E526  EE			     out     dx,al
   1319	E527  BA 02FF			     mov     dx,2ffh
   1320	E52A  EE			     out     dx,al
   1321	E52B  BA 03FC			     mov     dx,3fch
   1322	E52E  B0 AA			     mov     al,0aah
   1323	E530  EE			     out     dx,al
   1324	E531  42			     inc     dx
   1325	E532  33 C0				     xor     ax, ax
   1326	E534  EE				     out     dx, al
   1327	E535  EC			     in	     al,dx
   1328	E536  3C AA			     cmp     al,0aah
   1329	E538  75 08			     jnz     f18
   1330	E53A  C7 87 0000r 03F8		     mov  word ptr rs232_base[bx],3f8h	; уст адрес адаптера 1
   1331	E540  43			     inc     bx
   1332	E541  43			     inc     bx
   1333	E542  BA 02FC		     f18:    mov     dx,2fch	     ; проверка	подключения	       +
   1334				     адаптера 2	стыка С2
   1335	E545  B0 AA			     mov     al,0aah
   1336	E547  EE			     out     dx,al
   1337	E548  42			     inc     dx
   1338	E549  33 C0				     xor     ax, ax
   1339	E54B  EE				     out     dx, al
   1340	E54C  EC			     in	     al,dx
   1341	E54D  3C AA			     cmp     al,0aah
   1342	E54F  75 08			     jnz     f19
   1343	E551  C7 87 0000r 02F8		     mov  word ptr rs232_base[bx],2f8h	 ; уст адрес адаптера 2
   1344	E557  43			     inc     bx
   1345	E558  43			     inc     bx
   1346
   1347
   1348
   1349				     ;_____Установка EQUIP_FLAG для	инди-
   1350				     ;	   кации номера печати
   1351
   1352	E559			     f19:
   1353	E559  E9 1411				     jmp     f19a
   1354
   1355	E55C			     f19b:
   1356	E55C  D2 C8			     ror     al,cl
   1357	E55E  0A C3			     or	     al,bl
   1358	E560  A2 0011r			     mov     byte ptr equip_flag+1,al
   1359	E563  BA 0201			     mov     dx,201h
   1360	E566  EC			     in	     al,dx
   1361	E567  A8 0F			     test    al,0fh
   1362	E569  75 05			     jnz     f20			; проверка адаптера    +
   1363				     игр
   1364	E56B  80 0E 0011r 10		     or	     byte ptr equip_flag+1,16
   1365	E570			     f20:
   1366	E570  E9 140D				     jmp     f20a
   1367	E573  90				     nop
   1368
   1369	E574			     f20b:
   1370	E574  BA 0001				     mov     dx, 1
   1371	E577  E8 0006			     call    err_beep	     ; переход к подпрограмме      +
   1372				     звукового	сигнала
   1373	E57A			     f21:
   1374	E57A  E9 017A				     jmp     boot_strap
   1375
   1376	E57D			     f23:
   1377	E57D  E9 FF4C			     jmp     f15
   1378
   1379				     ;	  Установка длительности звукового сигнала
   1380
   1381					     assume  cs:code,ds:data
   1382	E580			     err_beep proc   near
   1383	E580  9C			     pushf		     ; сохранить признаки
   1384	E581  FA			     cli		     ; сброс признака разрешения+
   1385				     прерывания
   1386	E582  1E			     push    ds		     ; сохранить DS
   1387	E583  B8 0040			     mov     ax,dat	     ; DS - сегмент данных
   1388	E586  8E D8			     mov     ds,ax
   1389	E588  0A F6			     or	     dh,dh
   1390	E58A  74 0B			     jz	     g3
   1391	E58C			     g1:			      ;	длинный звуковой	сигнал
   1392	E58C  B3 06			     mov     bl,6	      ;	счетчик для звуковых	       +
   1393				     сигналов
   1394	E58E  E8 0018			     call    beep	      ;	выполнить звуковой сигнал
   1395	E591  E2 FE		     g2:     loop    g2		      ;	задержка между звуковыми +
   1396				     сигналами
   1397	E593  FE CE			     dec     dh
   1398	E595  75 F5			     jnz     g1
   1399	E597			     g3:			      ;	короткий звуковой сигнал
   1400	E597  B3 01			     mov     bl,1   ; счетчик для короткого		       +
   1401				     звукового	сигнала
   1402	E599  E8 000D			     call    beep	     ; выполнить звуковой сигнал
   1403	E59C  E2 FE		     g4:     loop    g4		     ; задержка	между звуковыми  +
   1404				     сигналами
   1405	E59E  FE CA			     dec     dl		     ;
   1406	E5A0  75 F5			     jnz     g3		     ; выполнить
   1407	E5A2  E2 FE		     g5:     loop    g5		     ; длинная задержка перед      +
   1408				     возвратом
   1409	E5A4  E2 FE		     g6:     loop    g6
   1410	E5A6  1F			     pop     ds		     ; восстановление DS
   1411	E5A7  9D			     popf		; восстановление			       +
   1412				     первоначальных признаков
   1413	E5A8  C3			     ret		     ; возврат к программе
   1414	E5A9			     err_beep	     endp
   1415
   1416				     ;	 Подпрограмма звукового сигнала
   1417
   1418	E5A9			     beep    proc    near
   1419	E5A9  B0 B6			     mov     al,10110110b    ; таймер 2,младший и	старший +
   1420				     счет-
   1421								     ; чики, двоичный счет
   1422	E5AB  E6 43			     out     timer+3,al	     ; записать	в регистр режима
   1423	E5AD  B8 045E			     mov     ax,45eh	     ; делитель
   1424	E5B0  E6 42			     out     timer+2,al	     ; записать	младший счетчик
   1425	E5B2  8A C4			     mov     al,ah
   1426	E5B4  E6 42			     out     timer+2,al	     ; записать	старший счетчик
   1427	E5B6  E4 61			     in	     al,port_b	     ; получить	текущее		       +
   1428				     состояние	порта
   1429	E5B8  8A E0			     mov     ah,al	     ; сохранить это состояние
   1430	E5BA  0C 03			     or	     al,03	     ; включить	звук
   1431	E5BC  E6 61			     out     port_b,al
   1432	E5BE  2B C9			     sub     cx,cx	     ; установить счетчик	       +
   1433				     ожидания
   1434	E5C0  E2 FE		     g7:     loop    g7		     ; задержка	перед		       +
   1435				     выключением
   1436	E5C2  FE CB			     dec     bl		     ; задержка	счетчика	       +
   1437				     закончена	?
   1438	E5C4  75 FA			     jnz     g7	     ; нет -	продолжение подачи	       +
   1439				     звукового	сигнала
   1440	E5C6  8A C4			     mov     al,ah	     ; восстановить	значение       +
   1441				     порта
   1442	E5C8  E6 61			     out     port_b,al
   1443	E5CA  C3			     ret		     ; возврат к программе
   1444	E5CB			     beep    endp
   1445				     ;_____________________
   1446				     ;	 Эта	процедура вызывает программный
   1447				     ;	 сброс клавиатуры
   1448				     ;_____________________
   1449	E5CB			     kbd_reset proc  near
   1450	E5CB  B0 0C			     mov     al,0ch	; установить низкий уровень     +
   1451				     синхронизации
   1452	E5CD  E6 61			     out     port_b,al	     ; записать	порт B
   1453	E5CF  B9 7530			     mov     cx,30000	     ; время длительности	       +
   1454				     низкого уровня
   1455	E5D2  E2 FE		     g8:     loop    g8
   1456	E5D4  B0 CC			     mov     al,0cch	     ; уст CLK
   1457	E5D6  E6 61			     out     port_b,al
   1458	E5D8			     sp_test:
   1459	E5D8  B0 4C			     mov     al,4ch	     ; уст высокий уровень	       +
   1460				     синхронизации
   1461	E5DA  E6 61			     out     port_b,al
   1462	E5DC  B0 FD			     mov     al,0fdh	     ; разрешить прерывания	       +
   1463				     клавиатуры
   1464	E5DE  E6 21			     out     inta01,al	     ; записать	регистр масок
   1465	E5E0  FB			     sti		     ; уст признака разрешения    +
   1466				     прерывания
   1467	E5E1  B4 00			     mov     ah,0
   1468	E5E3  2B C9			     sub     cx,cx	     ; уст счетчика ожидания	       +
   1469				     прерываний
   1470	E5E5  F6 C4 FF		     g9:     test    ah,0ffh	     ; прерывание клавиатуры       +
   1471				     возникло ?
   1472	E5E8  75 02			     jnz     g10   ;  да - считывание возвращенного   +
   1473				     кода сканирования
   1474	E5EA  E2 F9			     loop    g9		     ; нет -	цикл ожидания
   1475	E5EC  E4 60		     g10:    in	     al,port_a	 ; считать код сканирования      +
   1476				     клавиатуры
   1477	E5EE  8A D8			     mov     bl,al	     ; сохранить этот код
   1478	E5F0  B0 CC			     mov     al,0cch	     ; очистка клавиатуры
   1479	E5F2  E6 61			     out     port_b,al
   1480	E5F4  C3			     ret		     ; возврат к программе
   1481	E5F5			     kbd_reset	     endp
   1482				     ;_____________________
   1483				     ;	 Эта	программа выводит на экран дисплея
   1484				     ;	 сообщения об ошибках
   1485				     ;
   1486				     ;	   Необходимые условия:
   1487				     ;	 SI = адрес поля сообщения об ошибке
   1488				     ;	 CX = длина поля сообщения об ошибке
   1489				     ;	 Максимальный размер передаваемой
   1490				     ;	 информации -	36 знаков
   1491				     ;
   1492				     ;______________________
   1493	E5F5			     p_msg   proc    near
   1494	E5F5  B8 0040			     mov     ax,dat
   1495	E5F8  8E D8			     mov     ds,ax
   1496	E5FA  8B EE			     mov     bp,si
   1497	E5FC			     g12:
   1498	E5FC  2E: 8A 04			     mov     al,cs:[si]	     ; поместить знак в AL
   1499	E5FF  46			     inc     si		     ; указать следующий знак
   1500	E600  B7 00			     mov     bh,0	     ; установить страницу
   1501	E602  B4 0E			     mov     ah,14	     ; уст функцию записи знака
   1502	E604  CD 10			     int     10h	     ; и записать знак
   1503	E606  E2 F4			     loop    g12     ; продолжать до записи всего       +
   1504				     сообщения
   1505	E608  B8 0E0D			     mov     ax,0e0dh	; переместить курсор в начало  +
   1506				     строки
   1507	E60B  CD 10			     int     10h
   1508	E60D  B8 0E0A			     mov     ax,0e0ah  ; переместить	курсор на	       +
   1509				     следующую	строку
   1510	E610  CD 10			     int     10h
   1511	E612  C3			     ret
   1512	E613			     p_msg   endp
   1513
   1514
   1515	E613			     e190:
   1516	E613  1E				     push    ds
   1517	E614  B8 0010				     mov     ax, 16
   1518	E617  81 3E 0072r 1234			     cmp     ds:reset_flag, 1234h
   1519	E61D  75 03				     jnz     e20a
   1520	E61F  E9 FDD2				     jmp     e22
   1521
   1522	E622			     e20a:
   1523	E622  B8 0010				     mov     ax, 16
   1524	E625  EB 25				     jmp     short prt_siz
   1525
   1526	E627			     e20b:
   1527	E627  8B 1E 0013r			     mov     bx, ds:memory_size
   1528	E62B  83 EB 10				     sub     bx, 16
   1529	E62E  B1 04				     mov     cl, 4
   1530	E630  D3 EB				     shr     bx, cl
   1531	E632  8B CB				     mov     cx, bx
   1532	E634  BB 0400				     mov     bx, 400h
   1533
   1534	E637			     e20c:
   1535	E637  8E DB				     mov     ds, bx
   1536
   1537	E639  8E C3				     mov     es, bx
   1538	E63B  81 C3 0400			     add     bx, 400h
   1539	E63F  52				     push    dx
   1540	E640  51				     push    cx
   1541	E641  53				     push    bx
   1542	E642  50				     push    ax
   1543	E643  E8 F9D4				     call    stgtst
   1544	E646  75 41				     jnz     e21a
   1545	E648  58				     pop     ax
   1546	E649  05 0010				     add     ax, 16
   1547
   1548	E64C			     prt_siz:
   1549	E64C  50				     push    ax
   1550	E64D  BB 000A				     mov     bx, 10
   1551	E650  B9 0003				     mov     cx, 3
   1552
   1553	E653			     decimal_loop:
   1554	E653  33 D2				     xor     dx, dx
   1555	E655  F7 F3				     div     bx
   1556	E657  80 CA 30				     or	     dl, 30h
   1557	E65A  52				     push    dx
   1558	E65B  E2 F6				     loop    decimal_loop
   1559	E65D  B9 0003				     mov     cx, 3
   1560
   1561	E660			     prt_dec_loop:
   1562	E660  58				     pop     ax
   1563	E661  E8 0034				     call    prt_hex
   1564	E664  E2 FA				     loop    prt_dec_loop
   1565	E666  B9 0007				     mov     cx, 7
   1566	E669  BE E69Fr				     mov     si, offset	e300 ; " Kb OK\r"
   1567
   1568	E66C			     kb_ok:
   1569	E66C  2E: 8A 04				     mov     al, cs:[si]
   1570	E66F  46				     inc     si
   1571	E670  E8 0025				     call    prt_hex
   1572	E673  E2 F7				     loop    kb_ok
   1573	E675  58				     pop     ax
   1574	E676  3D 0010				     cmp     ax, 16
   1575	E679  74 AC				     jz	     e20b
   1576	E67B  5B				     pop     bx
   1577	E67C  59				     pop     cx
   1578	E67D  5A				     pop     dx
   1579	E67E  E2 B7				     loop    e20c
   1580	E680  B0 0A				     mov     al, 10
   1581	E682  E8 0013				     call    prt_hex
   1582	E685  1F				     pop     ds
   1583
   1584	E686  E9 FD6B				     jmp     e22
   1585
   1586	E689			     e21a:
   1587	E689  5B				     pop     bx
   1588	E68A  83 C4 06				     add     sp, 6
   1589	E68D  8C DA				     mov     dx, ds
   1590	E68F  1F				     pop     ds
   1591	E690  1E				     push    ds
   1592	E691  89 1E 0013r			     mov     ds:memory_size, bx
   1593	E695  E9 FD31				     jmp     osh
   1594
   1595	E698			     prt_hex	     proc near
   1596	E698  B4 0E				     mov     ah, 14
   1597	E69A  B7 00				     mov     bh, 0
   1598	E69C  CD 10				     int     10h
   1599	E69E  C3				     retn
   1600	E69F			     prt_hex	     endp
   1601
   1602	E69F  20 4B 62 20 4F 4B	0D   e300	     db	' Kb OK',0Dh
   1603	E6A6  45 52 52 4F 52 20	28+  f39	     db	'ERROR (RESUME="F1" KEY)'
   1604	      52 45 53 55 4D 45	3D+
   1605	      22 46 31 22 20 4B	45+
   1606	      59 29
   1607
   1608				     ;	 Таблица	кодов русских больших букв	       +
   1609				     (заглавных)
   1610
   1611	E6BD			     rust2   label   byte
   1612	E6BD  1B 21 40 23 24 25	5E+	     db	     1bh,'!@#$',37,05eh,'&*()_+'
   1613	      26 2A 28 29 5F 2B
   1614
   1615
   1616	E6CA  08 00			     db	     08h,0
   1617	E6CC  B9 C6 C3 BA B5 BD	B3+	     db	     0b9h,0c6h,0c3h,0bah,0b5h,0bdh,0b3h,0c8h
   1618	      C8
   1619
   1620	E6D4  C9 B7 B6 CD 0D FF	C4+	     db	     0c9h,0b7h,0b6h,0cdh,0dh,-1,0c4h,0cbh
   1621	      CB
   1622
   1623	E6DC  B2 B0 BF C0 BE BB	B4+	     db	     0b2h,0b0h,0bfh,0c0h,0beh,0bbh,0b4h,27h
   1624	      27
   1625
   1626	E6E4  22 B1 CE 7C CF C7	C1+	     db	     '"',0b1h,0ceh,7ch,0cfh,0c7h,0c1h,0bch,0b8h
   1627	      BC B8
   1628
   1629	E6ED  C2 CC 3C 3E 3F C5	00+	     db	     0c2h,0cch,'<>?',0c5h,000,-1,' ',0cah
   1630	      FF 20 CA
   1631
   1632
   1633
   1634
   1635				     ;___int 19_____________
   1636				     ;	 Программа загрузки системы с НГМД
   1637				     ;
   1638				     ; Программа считывает содержимое дорожки 0     +
   1639				     сектора 1 в
   1640				     ; ячейку boot_locn (адрес 7C00,сегмент 0)
   1641				     ;	 Если НГМД отсутствует или произошла	       +
   1642				     аппаратная ошибка,
   1643				     ; устанавливается прерывание типа INT	18H,	       +
   1644				     которое вызывает
   1645				     ; выполнение программ тестирования и	       +
   1646				     инициализации
   1647				     ; системы
   1648				     ;
   1649				     ;_________________________
   1650					     assume  cs:code,ds:data
   1651	E6F7			     boot_strap	proc near
   1652
   1653	E6F7  FB			     sti		   ; установить признак	       +
   1654				     разрешения прерывания
   1655	E6F8  B8 0040			     mov     ax,dat	   ; установить адресацию
   1656	E6FB  8E D8			     mov     ds,ax
   1657	E6FD  A1 0010r			     mov     ax,equip_flag ; получить состояние	       +
   1658				     переключателей
   1659	E700  A8 01			     test    al,1	   ; опрос	первоначальной	       +
   1660				     загрузки
   1661	E702  74 23			     jz	     h3
   1662
   1663				     ;	 Система	загружается с НГМД
   1664				     ;	 CX содержит счетчик повторений
   1665
   1666	E704  B9 0004			     mov     cx,4	     ; установить счетчик	       +
   1667				     повторений
   1668	E707			     h1:			     ; первоначальная загрузка
   1669	E707  51			     push    cx		     ; сохранить счетчик	       +
   1670				     повторений
   1671	E708  B4 00			     mov     ah,0	     ; сброс НГМД
   1672	E70A  CD 13			     int     13h
   1673	E70C  72 14			     jc	     h2		     ; если	ошибка,повторить
   1674	E70E  B4 02			     mov     ah,2	     ; считать сектор 1
   1675	E710  BB 0000			     mov     bx,0	     ;
   1676	E713  8E C3			     mov     es,bx
   1677	E715  BB 7C00r			     mov     bx,offset boot_locn
   1678	E718  BA 0000			     mov     dx,0	     ;
   1679	E71B  B9 0001			     mov     cx,1	     ; сектор 1 ,	дорожка 0
   1680	E71E  B0 01			     mov     al,1	     ; считывание первого	       +
   1681				     сектора
   1682	E720  CD 13			     int     13h
   1683	E722  59		     h2:     pop     cx		     ; восстановить	счетчик	       +
   1684				     повторений
   1685	E723  73 05			     jnc     h4		     ; уст CF при	безуспешном	       +
   1686				     считывании
   1687	E725  E2 E0			     loop    h1		     ; цикл	повторения
   1688
   1689				     ;	 Загрузка с НГМД недоступна
   1690
   1691	E727			     h3:			     ; кассета
   1692	E727  E9 F991			     jmp     err01   ; отсутствует дискет загрузки
   1693
   1694				     ;	 Загрузка завершилась успешно
   1695
   1696	E72A			     h4:				     ;
   1697	E72A  EA 00007C00sr			     jmp far ptr boot_locn   ; db 0EAh,	00h, 7Ch, 00h, 00h   ;	       +
   1698				     (0000:7C00)   ; ###Gleb###
   1699
   1700	E72F			     boot_strap	     endp
   1701				     ;--------------------
   1702				     ;	 Эта	программа посылает байт в	контроллер   +
   1703				     адаптера НГМД
   1704				     ; после проверки корректности управления и    +
   1705				     готовности
   1706				     ; контроллера.
   1707				     ;	 Программа ожидает байт состояния		       +
   1708				     определенное время
   1709				     ; и проверяет готовность НГМД к работе.
   1710				     ;
   1711				     ;	 ВВОД   (AH) - выводимый байт
   1712				     ;
   1713				     ;	 ВЫВОД  CY=0 - успешно,
   1714				     ;		CY=1 - не успешно.Состояние
   1715				     ;		НГМД анализируется.
   1716				     ;-----------------------
   1717	E72F			     nec_output	proc near
   1718	E72F  52			     push    dx		     ; сохранить регистры
   1719	E730  51			     push    cx
   1720	E731  BA 03F4			     mov     dx,03f4h	     ; состояние порта
   1721	E734  33 C9			     xor     cx,cx	     ; счетчик времени вывода
   1722	E736			     j23:
   1723	E736  EC			     in	     al,dx	     ; получить	состояние
   1724	E737  A8 40			     test    al,040h	     ; проверка	управляющих бит
   1725	E739  74 0C			     jz	     j25	     ; биты	управления		       +
   1726				     нормальные
   1727	E73B  E2 F9			     loop    j23
   1728	E73D			     j24:
   1729	E73D  80 0E 0041r 80		     or	     diskette_status,time_out
   1730	E742  59			     pop     cx
   1731	E743  5A			     pop     dx	     ; установить код ошибки	и	       +
   1732				     восстановить регистры
   1733	E744  58			     pop     ax		     ; адрес возврата
   1734	E745  F9			     stc		     ;
   1735	E746  C3			     ret
   1736
   1737	E747			     j25:
   1738	E747  33 C9			     xor     cx,cx	     ; обнуление счетчика
   1739	E749			     j26:
   1740	E749  EC			     in	     al,dx	     ; получить	состояние
   1741	E74A  A8 80			     test    al,080h	     ; проверка	готовности
   1742	E74C  75 04			     jnz     j27	     ; да - идти на выход
   1743	E74E  E2 F9			     loop    j26	     ; повторить
   1744	E750  EB EB			     jmp     short j24	     ; ошибка состояния
   1745	E752			     j27:			     ; выход
   1746	E752  8A C4			     mov     al,ah	     ; получить	байт
   1747	E754  BA 03F5			     mov     dx,03f5h	     ; переслать байт данных	в     +
   1748				     порт
   1749	E757  EE			     out     dx,al
   1750	E758  59			     pop     cx		     ; восстановить	регистры
   1751	E759  5A			     pop     dx
   1752	E75A  C3			     ret		     ;
   1753	E75B			     nec_output	     endp
   1754
   1755				     ;___int 16_________________
   1756				     ;
   1757				     ;	 Программа поддержки клавиатуры
   1758				     ;
   1759				     ;	 Эта	программа считывает в регистр
   1760				     ; AX код сканирования клавиши и код
   1761				     ; ASCII из буфера клавиатуры.
   1762				     ;
   1763				     ;	 Программа выполняет три функции, код
   1764				     ; которых задается в регистре AH:
   1765				     ;
   1766				     ;	  AH=0 - считать	следующий символ
   1767				     ;		  из буфера.При выходе	код
   1768				     ;		  сканирования в AH,код
   1769				     ;		  ASCII	в AL.
   1770				     ;	 AH=1 -	установить ZF, если код
   1771				     ;		  ASCII	прочитан:
   1772				     ;
   1773				     ;		  ZF=0 - буфер заполнен,
   1774				     ;		  ZF=1 - буфер пустой.
   1775				     ;	 При	выходе в	AX помещен адрес вершины	       +
   1776				     буфера клавиатуры.
   1777				     ;	 AH=2 -	возврат текущего	состояния в регистр AL
   1778				     ;		   из	постоянно распределенной	области +
   1779				     памяти с
   1780				     ;		адресом 00417H.
   1781				     ;
   1782				     ;	 При	выполнении программ клавиатуры	       +
   1783				     используются флажки,
   1784				     ; которые устанавливаются в	постоянно	       +
   1785				     распределенной области
   1786				     ; памяти по адресам	00417H и 00418H и имеют значение:
   1787				     ;	 00417H
   1788				     ;	       0 - правое	переключение регистра;
   1789				     ;	       1 - левое переключение регистра;
   1790				     ;		  2 - УПР;
   1791				     ;	       3 - ДОП;
   1792				     ;	       4 - ФСД;
   1793				     ;	       5 - ЦИФ;
   1794				     ;	       6 - ФПБ;
   1795				     ;	       7 - ВСТ;
   1796				     ;	 00418H
   1797				     ;	       0 - состояние клавиши ЛАТ между нажатием+
   1798				     и	отжатием;
   1799				     ;	       1 - ЛАТ;
   1800				     ;	       2 - Р/Л;
   1801				     ;	       3 - пауза;
   1802				     ;	       4 - ФСД;
   1803				     ;	       5 - ЦИФ;
   1804				     ;	       6 - ФПБ;
   1805				     ;	       7 - ВСТ.
   1806				     ;
   1807				     ;	 Флажки, соответствующие разрядам 4-7	       +
   1808				     постоянно	распределенной
   1809				     ; области памяти с адресом 00417H,			       +
   1810				     устанавливаются по нажатию
   1811				     ; клавиш ВСТ, ФПБ, ЦИФ, ФСД и сохраняют свои      +
   1812				     значения до сле-
   1813				     ; дующего нажатия соответствующей клавиши.
   1814				     ; Одноименные флажки, соответствующие	       +
   1815				     разрядам 4-7 постоянно
   1816				     ; распределенной области памяти	с адресом      +
   1817				     00418H, и	флажки
   1818				     ; ДОП, УПР, левое переключение регистра,	       +
   1819				     правое переключение
   1820				     ; регистра, Р/Л устанавливаются по нажатию      +
   1821				     клавиш и сбрасываются
   1822				     ; по отжатию.
   1823				     ;
   1824				     ;------------------------------
   1825					     assume  cs:code,ds:data
   1826
   1827
   1828	E75B			     k4	     proc    near
   1829	E75B  83 C3 02			     add     bx,2
   1830	E75E  81 FB 003Er		     cmp  bx, offset kb_buffer_end	      ;	конец буфера	?
   1831	E762  75 03			     jne     k5			      ;	нет - продолжить
   1832	E764  BB 001Er			     mov     bx, offset	kb_buffer     ;	да - уст начала буфера
   1833	E767			     k5:
   1834	E767  C3			     ret
   1835	E768			     k4	     endp
   1836
   1837	E768			     error_beep	proc near
   1838	E768  50			     push    ax
   1839	E769  53			     push    bx
   1840	E76A  51			     push    cx
   1841	E76B  BB 00C0			     mov     bx,0c0h
   1842	E76E  E4 61			     in	     al,kb_ctl
   1843	E770  50			     push    ax
   1844	E771			     k65:
   1845	E771  24 FC			     and     al,0fch
   1846	E773  E6 61			     out     kb_ctl,al
   1847	E775  B9 0048			     mov     cx,48h
   1848	E778  E2 FE		     k66:    loop    k66
   1849	E77A  0C 02			     or	     al,2
   1850	E77C  E6 61			     out     kb_ctl,al
   1851	E77E  B9 0048			     mov     cx,48h
   1852	E781  E2 FE		     k67:    loop    k67
   1853	E783  4B			     dec     bx
   1854	E784  75 EB			     jnz     k65
   1855	E786  58			     pop     ax
   1856	E787  E6 61			     out     kb_ctl,al
   1857	E789  59			     pop     cx
   1858	E78A  5B			     pop     bx
   1859	E78B  58			     pop     ax
   1860	E78C  C3			     ret
   1861	E78D			     error_beep	     endp
   1862
   1863				     ;---
   1864
   1865	E78D			     k54:
   1866	E78D  3C 3B			     cmp     al,59
   1867	E78F  72 05			     jb	     k55
   1868	E791  B0 00			     mov     al,0
   1869	E793  EB 0F				     jmp     short k57
   1870	E795  90				     nop
   1871
   1872	E796  BB E8DCr		     k55:    mov     bx,offset k10
   1873	E799  F6 06 0018r 02		     test    kb_flag_1,lat
   1874	E79E  74 57			     jz	     k99
   1875
   1876				     ;---
   1877
   1878	E7A0			     k56:
   1879	E7A0  FE C8			     dec     al
   1880	E7A2  2E: D7			     xlat    cs:k11
   1881
   1882				     ;---
   1883
   1884	E7A4			     k57:
   1885	E7A4  3C FF			     cmp     al,-1
   1886	E7A6  74 2A			     je	     k59
   1887	E7A8  80 FC FF			     cmp     ah,-1
   1888	E7AB  74 25			     je	     k59
   1889				     ;---
   1890
   1891	E7AD			     k58:
   1892	E7AD  F6 06 0017r 40		     test    kb_flag,caps_state
   1893	E7B2  74 2B			     jz	     k61
   1894
   1895				     ;---
   1896	E7B4  F6 06 0018r 02		     test    kb_flag_1,lat
   1897	E7B9  75 03			     jnz     k88
   1898	E7BB  E9 1175			     jmp     k89
   1899	E7BE			     k88:
   1900	E7BE  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
   1901	E7C3  74 10			     jz	     k60
   1902
   1903				     ;----------
   1904
   1905	E7C5  3C 41			     cmp     al,'A'
   1906	E7C7  72 16			     jb	     k61
   1907	E7C9  3C 5A			     cmp     al,'Z'
   1908	E7CB  77 12			     ja	     k61
   1909	E7CD  04 20			     add     al,'a'-'A'
   1910	E7CF  EB 0E				     jmp     short k61
   1911	E7D1  90				     nop
   1912
   1913	E7D2			     k59:
   1914	E7D2  E9 0316			     jmp     k26
   1915
   1916
   1917	E7D5			     k60:
   1918	E7D5  3C 61			     cmp     al,'a'
   1919	E7D7  72 06			     jb	     k61
   1920	E7D9  3C 7A			     cmp     al,'z'
   1921	E7DB  77 02			     ja	     k61
   1922	E7DD  2C 20			     sub     al,'a'-'A'
   1923
   1924	E7DF			     k61:
   1925	E7DF  8B 1E 001Cr		     mov     bx,buffer_tail
   1926	E7E3  8B F3			     mov     si,bx
   1927	E7E5  E8 FF73			     call   k4
   1928	E7E8  3B 1E 001Ar		     cmp     bx,buffer_head
   1929	E7EC  74 0E			     je	     k62
   1930	E7EE  89 04			     mov     word ptr [si],ax
   1931	E7F0  89 1E 001Cr		     mov     buffer_tail,bx
   1932	E7F4  E9 02F4			     jmp     k26
   1933	E7F7  BB F8CBr		     k99:    mov     bx,offset rust
   1934	E7FA  EB A4			     jmp k56
   1935
   1936				     ;---
   1937
   1938	E7FC			     k62:
   1939	E7FC  E8 FF69			     call    error_beep
   1940	E7FF  E9 02E9			     jmp     k26
   1941
   1942				     ;---
   1943
   1944	E802			     k63:
   1945	E802  2C 3B			     sub     al,59
   1946	E804			     k64:
   1947	E804  2E: D7			     xlat    cs:k9
   1948	E806  8A E0			     mov     ah,al
   1949	E808  B0 00			     mov     al,0
   1950	E80A  EB 98				     jmp     short k57
   1951	E80C  22*(00)				     db	34 dup(0)
   1952
   1953				     ;---
   1954
   1955	E82E			     keyboard_io proc	     far
   1956	E82E  FB			     sti		     ;
   1957	E82F  1E			     push    ds
   1958	E830  53			     push    bx
   1959	E831  BB 0040			     mov     bx,dat
   1960	E834  8E DB			     mov     ds,bx	     ; установить сегмент данных
   1961	E836  0A E4			     or	     ah,ah	     ; AH=0
   1962	E838  74 0B			     jz	     k1		  ; переход к считыванию	       +
   1963				     следующего символа
   1964	E83A  FE CC			     dec     ah		     ; AH=1
   1965	E83C  74 20			     jz	     k2		  ; переход к считыванию кода    +
   1966				     ASCII
   1967	E83E  FE CC			     dec     ah			  ; AH=2
   1968	E840  74 2D			     jz	     k3		  ; переход к получению байта    +
   1969				     состояния
   1970	E842  5B			     pop     bx			  ; восстановить регистр
   1971	E843  1F			     pop     ds
   1972	E844  CF			     iret
   1973
   1974				     ;	 Считывание кода сканирования	и кода ASCII из +
   1975				     буфера клавиатуры
   1976				     ;
   1977	E845			     k1:
   1978	E845  FB			     sti	     ; уст признака разрешения	       +
   1979				     прерывания
   1980	E846  90			     nop		     ; задержка
   1981	E847  FA			     cli	     ; сброс признака разрешения	       +
   1982				     прерывания
   1983	E848  8B 1E 001Ar		     mov     bx,buffer_head  ; уст вершину буфера по	       +
   1984				     чтению
   1985	E84C  3B 1E 001Cr		     cmp     bx,buffer_tail  ; сравнить	с вершиной	       +
   1986				     буфера по записи
   1987	E850  74 F3			     jz	     k1
   1988	E852  8B 07			     mov     ax,word ptr [bx] ;	получить код			       +
   1989				     сканирования и код	ASCII
   1990	E854  E8 FF04			     call    k4
   1991	E857  89 1E 001Ar		     mov     buffer_head,bx  ; запомнить вершину буфера  +
   1992				     по чтению
   1993	E85B  5B			     pop     bx		     ; восстановить	регистр
   1994	E85C  1F			     pop     ds		     ; восстановить	сегмент
   1995	E85D  CF			     iret		     ; возврат к программе
   1996
   1997				     ;	 Считать	код ASCII
   1998
   1999	E85E			     k2:
   2000	E85E  FA			     cli	     ; Сброс признака разрешения	       +
   2001				     прерывания
   2002	E85F  8B 1E 001Ar		     mov     bx,buffer_head  ; получить	указатель	       +
   2003				     вершины буфера
   2004								     ; по чтению
   2005	E863  3B 1E 001Cr		     cmp     bx,buffer_tail  ; сравнить	с вершиной	       +
   2006				     буфера по записи
   2007	E867  8B 07			     mov     ax,word ptr [bx]
   2008	E869  FB			     sti		     ; уст признак разрешения      +
   2009				     прерывания
   2010	E86A  5B			     pop     bx		     ; восстановить	регистр
   2011	E86B  1F			     pop     ds		     ; восстановить	сегмент
   2012	E86C  CA 0002			     ret     2
   2013
   2014				     ;	 Получение младшего байта	состояния	       +
   2015				     (флажков)
   2016
   2017	E86F			     k3:
   2018	E86F  A0 0017r			     mov     al,kb_flag	     ; получить	младший байт	       +
   2019				     состояния	    на
   2020	E872  5B			     pop     bx		     ; восстановить	регистр
   2021	E873  1F			     pop     ds		     ; восстановить	сегмент
   2022	E874  CF			     iret		     ; возврат к программе
   2023	E875			     keyboard_io     endp
   2024
   2025				     ;	 Таблица	кодов сканирования управляющих     +
   2026				     клавиш
   2027
   2028	E875			     k6	     label   byte
   2029	E875  52			     db	     ins_key
   2030	E876  56 45 46 38 1D		     db	     caps_key,num_key,scroll_key,alt_key,ctl_key
   2031	E87B  54 55			     db	     left_key,right_key
   2032	E87D  58			     db	     inv_key_l
   2033	E87E  5A 57 5B			     db	     inv_key_r,lat_key,rus_key
   2034	      =000C		     k6l     equ     0ch
   2035
   2036				     ;	 Таблица	масок нажатых управляющих клавиш
   2037
   2038	E881			     k7	     label   byte
   2039	E881  80			     db	     ins_shift
   2040	E882  40 20 10 08 04		     db	     caps_shift,num_shift,scroll_shift,alt_shift,ctl_shift
   2041	E887  02 01			     db	     left_shift,right_shift
   2042
   2043
   2044				     ;	 Таблица	кодов сканирования при нажатой      +
   2045				     клавише УПР для
   2046				     ; кодов сканирования клавиш	меньше 59
   2047
   2048	E889  1B FF 00 FF FF FF	1E+  k8	     db	     27,-1,0,-1,-1,-1,30,-1
   2049	      FF
   2050
   2051	E891  FF FF FF 1F FF 7F	FF+	     db	     -1,-1,-1,31,-1,127,-1,17
   2052	      11
   2053
   2054	E899  17 05 12 14 19 15	09+	     db	     23,5,18,20,25,21,9,15
   2055	      0F
   2056
   2057	E8A1  10 1B 1D 0A FF 01	13	     db	     16,27,29,10,-1,1,19
   2058
   2059	E8A8  04 06 07 08 0A 0B	0C+	     db	     4,6,7,8,10,11,12,-1,-1
   2060	      FF FF
   2061
   2062	E8B1  FF FF 1C 1A 18 03	16+	     db	     -1,-1,28,26,24,3,22,2
   2063	      02
   2064
   2065	E8B9  0E 0D FF FF FF FF	FF+	     db	     14,13,-1,-1,-1,-1,-1,-1
   2066	      FF
   2067
   2068	E8C1  20 FF			     db	     ' ',-1
   2069
   2070				     ;	 Таблица	кодов сканирования при нажатой      +
   2071				     клавише УПР для
   2072				     ; кодов сканирования клавиш	больше 59
   2073	E8C3			     k9	     label   byte
   2074	E8C3  5E 5F 60 61 62 63	64+	     db	     94,95,96,97,98,99,100,101
   2075	      65
   2076
   2077	E8CB  66 67 FF FF 77 FF	84+	     db	     102,103,-1,-1,119,-1,132,-1
   2078	      FF
   2079
   2080	E8D3  73 FF 74 FF 75 FF	76+	     db	     115,-1,116,-1,117,-1,118,-1
   2081	      FF
   2082
   2083	E8DB  FF			     db	     -1
   2084
   2085				     ;	 Таблица	кодов ASCII нижнего	регистра	       +
   2086				     клавиатуры
   2087
   2088	E8DC			     k10     label   byte
   2089	E8DC  1B 31 32 33 34 35	36+	     db	     27,'1234567890-='
   2090	      37 38 39 30 2D 3D
   2091
   2092
   2093	E8E9  08 09			     db	     08h,09h
   2094	E8EB  71 77 65 72 74 79	75+	     db	     'qwertyuiop[]',0dh,-1,'asdfghjkl;:',60h,7eh
   2095	      69 6F 70 5B 5D 0D	FF+
   2096	      61 73 64 66 67 68	6A+
   2097	      6B 6C 3B 3A 60 7E
   2098
   2099
   2100
   2101
   2102	E906  5C 7A 78 63 76 62	6E+	     db	     05ch,'zxcvbnm',',./{'
   2103	      6D 2C 2E 2F 7B
   2104
   2105	E912  2A FF 20 7D		     db	     '*',-1,' }'
   2106
   2107				     ;	 Таблица	кодов ASCII верхнего регистра	       +
   2108				     клавиатуры
   2109
   2110	E916			     k11     label   byte
   2111	E916  1B 21 40 23 24 25	5E+	     db	     27,'!@#$',37,05eh,'&*()_+'
   2112	      26 2A 28 29 5F 2B
   2113
   2114
   2115	E923  08 00			     db	     08h,0
   2116	E925  51 57 45 52 54 59	55+	     db	     'QWERTYUIOP',-1,-1,0dh,-1
   2117	      49 4F 50 FF FF 0D	FF
   2118
   2119
   2120	E933  41 53 44 46 47 48	4A+	     db	     'ASDFGHJKL'
   2121	      4B 4C
   2122
   2123	E93C  27 22 FF FF 7C		     db	     027h,'"',-1,-1,7ch
   2124	E941  5A 58 43 56 42 4E	4D	     db	     'ZXCVBNM'
   2125
   2126	E948  3C 3E 3F FF 00 FF	20+	     db	     '<>?',-1,0,-1,' ',-1
   2127	      FF
   2128
   2129
   2130				     ;	 Таблица	кодов сканирования клавиш Ф11 -	Ф20   +
   2131				     (на верхнем
   2132				     ; регистре	Ф1 - Ф10)
   2133
   2134	E950			     k12     label   byte
   2135	E950  54 55 56 57 58 59	5A	     db	     84,85,86,87,88,89,90
   2136
   2137	E957  5B 5C 5D			     db	     91,92,93
   2138
   2139				     ;	 Таблица	кодов сканирования одновременно   +
   2140				     нажатых клавиш
   2141				     ; ДОП и Ф1 - Ф10
   2142
   2143	E95A			     k13     label byte
   2144	E95A  68 69 6A 6B 6C		     db	     104,105,106,107,108
   2145	E95F  6D 6E 6F 70 71		     db	     109,110,111,112,113
   2146
   2147				     ;	 Таблица	кодов правого				       +
   2148				     пятнадцатиклавишного поля на верхнем
   2149				     ; регистре
   2150
   2151	E964			     k14     label   byte
   2152	E964  37 38 39 2D 34 35	36+	     db	     '789-456+1230.'
   2153	      2B 31 32 33 30 2E
   2154
   2155
   2156
   2157				     ;	 Таблица	кодов правого				       +
   2158				     пятнадцатиклавишного поля на нижнем
   2159				     ; регистре
   2160
   2161	E971			     k15     label byte
   2162	E971  47 48 49 FF 4B FF	4D	     db	     71,72,73,-1,75,-1,77
   2163
   2164	E978  FF 4F 50 51 52 53		     db	     -1,79,80,81,82,83
   2165
   2166	E97E  09*(00)				     db	9 dup(0)
   2167
   2168				     ;----INT 9--------------------------
   2169				     ;
   2170				     ;	  Программа обработки	прерывания		       +
   2171				     клавиатуры
   2172				     ;
   2173				     ; Программа считывает код сканирования	       +
   2174				     клавиши в регистр AL.
   2175				     ; Единичное состояние разряда 7 в коде	       +
   2176				     сканирования означает,
   2177				     ; что клавиша отжата.
   2178				     ;	 В результате выполнения программы в	       +
   2179				     регистре AX формируется
   2180				     ; слово, старший байт которого (AH) содержит      +
   2181				     код сканирования,
   2182				     ; а младший (AL) -	код ASCII. Эта информация	       +
   2183				     помещается в буфер
   2184				     ; клавиатуры. После	заполнения буфера	       +
   2185				     подается звуковой сигнал.
   2186				     ;
   2187				     ;-----------------------------------
   2188
   2189	E987			     kb_int proc far
   2190	E987  FB			     sti		; установка признака		       +
   2191				     разрешения прерывания
   2192	E988  50			     push    ax
   2193	E989  53			     push    bx
   2194	E98A  51			     push    cx
   2195	E98B  52			     push    dx
   2196	E98C  56			     push    si
   2197	E98D  57			     push    di
   2198	E98E  1E			     push    ds
   2199	E98F  06			     push    es
   2200	E990  FC			     cld		    ; установить признак	       +
   2201				     направления вперед
   2202	E991  B8 0040			     mov     ax,dat	    ; установить адресацию
   2203	E994  8E D8			     mov     ds,ax
   2204	E996  E4 60			     in	     al,kb_dat	    ; считать код сканирования
   2205	E998  50			     push    ax
   2206	E999  E4 61			     in	     al,kb_ctl	    ; считать значение порта 61
   2207	E99B  8A E0			     mov     ah,al	    ; сохранить считанное	       +
   2208				     значение
   2209	E99D  0C 80			     or	     al,80h	    ; установить бит 7 порта 61
   2210	E99F  E6 61			     out     kb_ctl,al	    ; для работы с клавиатурой
   2211	E9A1  86 E0			     xchg    ah,al	    ; восстановить значение	       +
   2212				     порта	61
   2213	E9A3  E6 61			     out     kb_ctl,al
   2214	E9A5  58			     pop     ax		    ; восстановить код		       +
   2215				     сканирования
   2216	E9A6  8A E0			     mov     ah,al	    ; и сохранить его в AH
   2217
   2218				     ;---
   2219
   2220	E9A8  3C FF			     cmp     al,0ffh  ;	сравнение с кодом заполнения  +
   2221				     буфера
   2222							      ;	клавиатуры
   2223	E9AA  75 03			     jnz     k16	     ; продолжить
   2224	E9AC  E9 FE4D			     jmp     k62     ; переход на звуковой сигнал по  +
   2225				     заполнению
   2226							     ; буфера клавиатуры
   2227
   2228	E9AF			     k16:
   2229	E9AF  24 7F			     and     al,07fh	     ; сброс бита отжатия клавиши
   2230	E9B1  0E			     push    cs
   2231	E9B2  07			     pop     es
   2232	E9B3  BF E875r			     mov     di,offset k6  ; установить адрес таблицы    +
   2233				     сканирования
   2234								   ; управляющих клавиш
   2235	E9B6  B9 000C			     mov     cx,k6l
   2236	E9B9  F2> AE			     repne scasb     ; сравнение полученного кода      +
   2237				     ска-
   2238							     ; нирования с содержимым таблицы
   2239	E9BB  8A C4			     mov     al,ah	     ; запомнить код		       +
   2240				     сканирования
   2241	E9BD  74 1A			     je	     k17	     ; переход по совпадению
   2242	E9BF  E9 010A			     jmp     k25	     ; переход по несовпадению
   2243	E9C2			     k406:
   2244	E9C2  F6 06 0018r 02		     test    kb_flag_1,lat
   2245	E9C7  75 7F			     jnz     k26a
   2246	E9C9  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
   2247	E9CE  B8 5CF1			     mov     ax,5cf1h
   2248	E9D1  74 03			     jz	     k407
   2249	E9D3  B8 5CF0			     mov     ax,5cf0h
   2250
   2251				     ;	 Получение маски нажатой управляющей	       +
   2252				     клавиши
   2253
   2254	E9D6			     k407:
   2255	E9D6  E9 FDCB			     jmp     k57
   2256
   2257	E9D9  81 EF E876r	     k17:    sub     di,offset k6+1
   2258	E9DD  83 FF 08			     cmp     di,8
   2259	E9E0  72 3B			     jb	     k300
   2260	E9E2  B4 06			     mov     ah,6
   2261	E9E4  83 FF 0A			     cmp     di,0ah
   2262	E9E7  72 39			     jb	     k301
   2263	E9E9  A8 80			     test    al,80h
   2264	E9EB  74 5B			     jz	     k26a
   2265	E9ED  80 26 0018r FC		     and     kb_flag_1,not lat+lat_shift
   2266	E9F2  83 FF 0B			     cmp     di,0bh
   2267	E9F5  74 17			     je	     k401
   2268	E9F7  F6 06 0018r 04		     test    kb_flag_1,inv_shift
   2269	E9FC  74 08			     jz	     k400
   2270	E9FE  80 0E 0018r 01		     or	     kb_flag_1,lat_shift
   2271	EA03  EB 43				     jmp     short k26a
   2272	EA05  90				     nop
   2273	EA06  80 0E 0018r 03	     k400:   or	     kb_flag_1,lat+lat_shift
   2274	EA0B  EB 3B				     jmp     short k26a
   2275	EA0D  90				     nop
   2276	EA0E  F6 06 0018r 04	     k401:   test    kb_flag_1,inv_shift
   2277	EA13  74 33			     jz	     k26a
   2278	EA15  80 0E 0018r 02		     or	     kb_flag_1,lat
   2279	EA1A  EB 2C				     jmp     short k26a
   2280	EA1C  90				     nop
   2281	EA1D  2E: 8A A5	E881r	     k300:   mov     ah,cs:k7[di]
   2282	EA22			     k301:
   2283	EA22  A8 80			     test    al,80h	     ; клавиша отжата ?
   2284	EA24  75 79			     jnz     k23     ; переход, если	клавиша отжата
   2285
   2286				     ;	 Управляющая	клавиша нажата
   2287
   2288	EA26  80 FC 10			     cmp     ah,scroll_shift ; нажата управляющая	       +
   2289				     клавиша с
   2290								     ;	запоминанием ?
   2291	EA29  73 20			     jae     k18	     ; переход, если	да
   2292
   2293				     ;---
   2294	EA2B  80 FC 06			     cmp     ah,6
   2295	EA2E  74 07			     je	     k302
   2296
   2297	EA30  08 26 0017r		     or	     kb_flag,ah	     ; установка масок		       +
   2298				     управляющих клавиш
   2299								     ; без запоминания
   2300	EA34  E9 00B4			     jmp     k26	     ; к выходу из прерывания
   2301	EA37  80 0E 0018r 06	     k302:   or	     kb_flag_1,inv_shift+lat
   2302	EA3C  F6 06 0018r 01		     test    kb_flag_1,lat_shift
   2303	EA41  74 05			     jz	     k26a
   2304	EA43  80 26 0018r FD		     and     kb_flag_1,not lat
   2305	EA48			     k26a:
   2306	EA48  E9 00A0			     jmp     k26
   2307
   2308				     ;	 Опрос нажатия клавиши с запоминанием
   2309
   2310	EA4B			     k18:
   2311	EA4B  F6 06 0017r 04		     test    kb_flag,ctl_shift	       ; опрос клавиши УПР
   2312	EA50  75 7A			     jnz     k25
   2313	EA52  3C 52			     cmp     al,ins_key		       ; опрос клавиши ВСТ
   2314	EA54  75 25			     jnz     k22
   2315	EA56  F6 06 0017r 08		     test    kb_flag,alt_shift	       ; опрос клавиши ДОП
   2316	EA5B  74 03			     jz	     k19
   2317	EA5D  EB 6D				     jmp     short k25
   2318	EA5F  90				     nop
   2319	EA60  F6 06 0017r 20	     k19:    test    kb_flag,num_state	; опрос клавиши ЦИФ
   2320	EA65  75 0D			     jnz     k21
   2321	EA67  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift ; опрос клавиш	       +
   2322				     левого
   2323								  ; и правого переключения	       +
   2324				     регистров
   2325	EA6C  74 0D			     jz	     k22
   2326
   2327	EA6E			     k20:
   2328	EA6E  B8 5230			     mov     ax,5230h
   2329	EA71  E9 FD30			     jmp     k57	   ; установка	кода нуля
   2330	EA74			     k21:
   2331	EA74  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
   2332	EA79  74 F3			     jz	     k20
   2333
   2334	EA7B			     k22:
   2335	EA7B  84 26 0018r		     test    ah,kb_flag_1
   2336	EA7F  75 6A			     jnz     k26
   2337	EA81  08 26 0018r		     or	     kb_flag_1,ah
   2338	EA85  30 26 0017r		     xor     kb_flag,ah
   2339	EA89  3C 52			     cmp     al,ins_key
   2340	EA8B  75 5E			     jne     k26
   2341	EA8D  B8 5200			     mov     ax,ins_key*256
   2342	EA90  E9 FD11			     jmp     k57
   2343
   2344	EA93			     k303:
   2345	EA93  80 26 0018r FB		     and     kb_flag_1,not inv_shift
   2346	EA98  80 36 0018r 02		     xor     kb_flag_1,lat
   2347	EA9D  EB 10			     jmp     short k304
   2348
   2349				     ;	 Управляющая	клавиша отжата
   2350
   2351	EA9F			     k23:
   2352
   2353	EA9F  80 FC 10			     cmp     ah,scroll_shift
   2354	EAA2  73 1F			     jae     k24
   2355	EAA4  F6 D4			     not     ah
   2356	EAA6  80 FC F9			     cmp     ah,0f9h
   2357	EAA9  74 E8			     je	     k303
   2358	EAAB  20 26 0017r		     and     kb_flag,ah
   2359	EAAF			     k304:
   2360	EAAF  3C B8			     cmp     al,alt_key+80h
   2361	EAB1  75 38			     jne     k26
   2362
   2363				     ;---
   2364
   2365	EAB3  A0 0019r			     mov     al,alt_input
   2366	EAB6  B4 00			     mov     ah,0
   2367	EAB8  88 26 0019r		     mov     alt_input,ah
   2368	EABC  3C 00			     cmp     al,0
   2369	EABE  74 2B			     je	     k26
   2370	EAC0  E9 FCEA			     jmp     k58
   2371
   2372	EAC3			     k24:
   2373	EAC3  F6 D4			     not     ah
   2374	EAC5  20 26 0018r		     and     kb_flag_1,ah
   2375	EAC9  EB 20				     jmp     short k26
   2376	EACB  90				     nop
   2377
   2378	EACC			     k25:
   2379	EACC  3C 80			     cmp     al,80h
   2380	EACE  73 1B			     jae     k26
   2381	EAD0  3C 59			     cmp     al,inf_key
   2382	EAD2  74 25			     je	     k307
   2383	EAD4  3C 5C			     cmp     al,92
   2384	EAD6  75 03			     jne     k406b
   2385	EAD8  E9 FEE7			     jmp     k406
   2386	EADB			     k406b:
   2387	EADB  F6 06 0018r 08		     test    kb_flag_1,hold_state
   2388	EAE0  74 1D			     jz	     k28
   2389	EAE2  3C 45			     cmp     al,num_key
   2390	EAE4  74 05			     je	     k26
   2391	EAE6  80 26 0018r F7		     and     kb_flag_1,not hold_state
   2392
   2393	EAEB			     k26:
   2394	EAEB  FA			     cli
   2395	EAEC  B0 20			     mov     al,eoi
   2396	EAEE  E6 20			     out     020h,al
   2397	EAF0			     k27:
   2398	EAF0  07			     pop     es
   2399	EAF1  1F			     pop     ds
   2400	EAF2  5F			     pop     di
   2401	EAF3  5E			     pop     si
   2402	EAF4  5A			     pop     dx
   2403	EAF5  59			     pop     cx
   2404	EAF6  5B			     pop     bx
   2405	EAF7  58			     pop     ax
   2406	EAF8  CF			     iret
   2407
   2408	EAF9  B8 A000		     k307:   mov     ax,0a000h
   2409	EAFC  E9 FCA5			     jmp     k57
   2410
   2411
   2412				     ;---
   2413
   2414	EAFF			     k28:
   2415	EAFF  F6 06 0017r 08		     test    kb_flag,alt_shift
   2416	EB04  75 03			     jnz     k29
   2417	EB06  EB 6D				     jmp     short k38
   2418	EB08  90				     nop
   2419
   2420				     ;---
   2421
   2422	EB09			     k29:
   2423	EB09  F6 06 0017r 04		     test    kb_flag,ctl_shift
   2424	EB0E  74 0F			     jz	     k31
   2425	EB10  3C 53			     cmp     al,del_key
   2426	EB12  75 0B			     jne     k31
   2427
   2428				     ;---
   2429
   2430	EB14  C7 06 0072r 1234		     mov     reset_flag,1234h
   2431	EB1A  EA			     db	     0eah		     ;	     db	     0eah,5bh,0e0h,00h,0f0h  ; +
   2432				     jmp far ptr start
   2433	EB1B  E067r F000		     dw	     offset start, cod	     ;	     ###Gleb###
   2434
   2435				     ;---
   2436
   2437
   2438
   2439
   2440	EB1F			     k31:
   2441	EB1F  3C 39			     cmp     al,57
   2442	EB21  75 05			     jne     k32
   2443	EB23  B0 20			     mov     al,' '
   2444	EB25  E9 FC7C			     jmp     k57
   2445
   2446				     ;---
   2447
   2448	EB28			     k32:
   2449	EB28  BF F905r			     mov     di,offset k30
   2450	EB2B  B9 000A			     mov     cx,10
   2451	EB2E  F2> AE				     repne scasb
   2452	EB30  75 12			     jne     k33
   2453	EB32  81 EF F906r		     sub     di,offset k30+1
   2454	EB36  A0 0019r			     mov     al,alt_input
   2455	EB39  B4 0A			     mov     ah,10
   2456	EB3B  F6 E4			     mul     ah
   2457	EB3D  03 C7			     add     ax,di
   2458	EB3F  A2 0019r			     mov     alt_input,al
   2459	EB42  EB A7				     jmp     short k26
   2460
   2461				     ;---
   2462
   2463	EB44			     k33:
   2464	EB44  C6 06 0019r 00		     mov     alt_input,00h
   2465	EB49  B9 001A			     mov     cx,0026
   2466	EB4C  F2> AE				     repne scasb
   2467	EB4E  75 05			     jne     k34
   2468	EB50  B0 00			     mov     al,0
   2469	EB52  E9 FC4F			     jmp     k57
   2470
   2471				     ;---
   2472
   2473	EB55			     k34:
   2474	EB55  3C 02			     cmp     al,2
   2475	EB57  72 0C			     jb	     k35
   2476	EB59  3C 0E			     cmp     al,14
   2477	EB5B  73 08			     jae     k35
   2478	EB5D  80 C4 76			     add     ah,118
   2479	EB60  B0 00			     mov     al,0
   2480	EB62  E9 FC3F			     jmp     k57
   2481
   2482				     ;---
   2483
   2484	EB65			     k35:
   2485	EB65  3C 3B			     cmp     al,59
   2486	EB67  73 02			     jae     k37
   2487	EB69			     k36:
   2488	EB69  EB 80				     jmp     short k26
   2489	EB6B			     k37:
   2490	EB6B  3C 47			     cmp     al,71
   2491	EB6D  73 FA			     jae     k36
   2492	EB6F  BB E95Ar			     mov     bx,offset k13
   2493	EB72  E9 FC8D			     jmp     k63
   2494
   2495				     ;---
   2496
   2497	EB75			     k38:
   2498	EB75  F6 06 0017r 04		     test    kb_flag,ctl_shift
   2499	EB7A  74 5B			     jz	     k44
   2500
   2501				     ;---
   2502				     ;---
   2503
   2504	EB7C  3C 46			     cmp     al,scroll_key
   2505	EB7E  75 18			     jne     k39
   2506	EB80  BB 001Er			     mov     bx,offset kb_buffer
   2507	EB83  89 1E 001Ar		     mov     buffer_head,bx
   2508	EB87  89 1E 001Cr		     mov     buffer_tail,bx
   2509	EB8B  C6 06 0071r 80		     mov     bios_break,80h
   2510	EB90  CD 1B			     int     1bh
   2511	EB92  B8 0000			     mov     ax,0
   2512	EB95  E9 FC0C			     jmp     k57
   2513
   2514	EB98			     k39:
   2515	EB98  3C 45			     cmp     al,num_key
   2516	EB9A  75 21			     jne     k41
   2517	EB9C  80 0E 0018r 08		     or	     kb_flag_1,hold_state
   2518	EBA1  B0 20			     mov     al,eoi
   2519	EBA3  E6 20			     out     020h,al
   2520
   2521				     ;---
   2522
   2523	EBA5  80 3E 0049r 07		     cmp     crt_mode,7
   2524	EBAA  74 07			     je	     k40
   2525	EBAC  BA 03D8			     mov     dx,03d8h
   2526	EBAF  A0 0065r			     mov     al,crt_mode_set
   2527	EBB2  EE			     out     dx,al
   2528	EBB3			     k40:
   2529	EBB3  F6 06 0018r 08		     test    kb_flag_1,hold_state
   2530	EBB8  75 F9			     jnz     k40
   2531	EBBA  E9 FF33			     jmp     k27
   2532	EBBD			     k41:
   2533
   2534				     ;---
   2535
   2536	EBBD  3C 37			     cmp     al,55
   2537	EBBF  75 06			     jne     k42
   2538	EBC1  B8 7200			     mov     ax,114*256
   2539	EBC4  E9 FBDD			     jmp     k57
   2540
   2541				     ;---
   2542
   2543	EBC7			     k42:
   2544	EBC7  BB E889r			     mov     bx,offset k8
   2545	EBCA  3C 3B			     cmp     al,59
   2546	EBCC  73 03			     jae     k43
   2547	EBCE  E9 FBCF			     jmp     k56
   2548	EBD1			     k43:
   2549	EBD1  BB E8C3r			     mov     bx,offset k9
   2550	EBD4  E9 FC2B			     jmp     k63
   2551
   2552				     ;---
   2553
   2554	EBD7			     k44:
   2555
   2556	EBD7  3C 47			     cmp     al,71
   2557	EBD9  73 3E			     jae     k48
   2558	EBDB  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
   2559	EBE0  74 0A			     jz	     k54a
   2560
   2561				     ;---
   2562
   2563	EBE2  3C 0F			     cmp     al,15
   2564	EBE4  75 09			     jne     k45
   2565	EBE6  B8 0F00			     mov     ax,15*256
   2566	EBE9  E9 FBB8			     jmp     k57
   2567
   2568	EBEC			     k54a:
   2569	EBEC  E9 FB9E			     jmp k54
   2570
   2571	EBEF			     k45:
   2572	EBEF  3C 37			     cmp     al,55
   2573	EBF1  75 09			     jne     k46
   2574
   2575				     ;---
   2576
   2577	EBF3  B0 20			     mov     al,eoi
   2578	EBF5  E6 20			     out     020h,al
   2579	EBF7  CD 05			     int     5h
   2580	EBF9  E9 FEF4			     jmp     k27
   2581
   2582	EBFC			     k46:
   2583	EBFC  3C 3B			     cmp     al,59
   2584	EBFE  72 06			     jb	     k47
   2585	EC00  BB E950r			     mov     bx,offset k12
   2586	EC03  E9 FBFC			     jmp     k63
   2587
   2588	EC06			     k47:
   2589	EC06  F6 06 0018r 02		     test    kb_flag_1,lat
   2590	EC0B  74 06			     jz	     k98
   2591	EC0D  BB E916r			     mov     bx,offset k11
   2592	EC10  E9 FB8D			     jmp      k56
   2593	EC13  BB E6BDr		     k98:    mov     bx,offset rust2
   2594	EC16  E9 FB87			     jmp     k56
   2595
   2596				     ;---
   2597
   2598	EC19			     k48:
   2599	EC19  F6 06 0017r 20		     test    kb_flag,num_state
   2600	EC1E  75 23			     jnz     k52
   2601	EC20  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
   2602	EC25  75 23			     jnz     k53
   2603
   2604				     ;---
   2605
   2606	EC27			     k49:
   2607
   2608	EC27  3C 4A			     cmp     al,74
   2609	EC29  74 0C			     je	     k50
   2610	EC2B  3C 4E			     cmp     al,78
   2611	EC2D  74 0E			     je	     k51
   2612	EC2F  2C 47			     sub     al,71
   2613	EC31  BB E971r			     mov     bx,offset k15
   2614	EC34  E9 FBCD			     jmp       k64
   2615
   2616	EC37  B8 4A2D		     k50:    mov     ax,74*256+'-'
   2617	EC3A  E9 FB67			     jmp      k57
   2618
   2619	EC3D  B8 4E2B		     k51:    mov     ax,78*256+'+'
   2620	EC40  E9 FB61			     jmp      k57
   2621
   2622				     ;---
   2623
   2624	EC43			     k52:
   2625	EC43  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
   2626	EC48  75 DD			     jnz     k49
   2627
   2628	EC4A			     k53:
   2629	EC4A  2C 46			     sub     al,70
   2630	EC4C  BB E964r			     mov     bx,offset k14
   2631	EC4F  E9 FB4E			     jmp      k56
   2632	EC52			     kb_int  endp
   2633
   2634	EC52  07*(00)				     db	7 dup(0)
   2635
   2636				     ;--- int 13H---------
   2637				     ;	 Программа обслуживания накопителя на	       +
   2638				     гибком магнитном
   2639				     ; диске выполняет шесть	функций,	код которых  +
   2640				     задается
   2641				     ; в регистре AH:
   2642				     ;	 AH=0 -	сбросить  НГМД;
   2643				     ;	 AH=1 -	считать байт	состояния НГМД. Состояние+
   2644				     соответствует
   2645				     ; последней выполняемой операции и		       +
   2646				     передается в регистр AL из
   2647				     ; постоянно распределенной области		       +
   2648				     оперативной памяти с адресом
   2649				     ; 00441H;
   2650				     ;	  AH=2H	- считать указанный сектор в память;
   2651				     ;	  AH=3H	- записать указанный сектор из	памяти;
   2652				     ;	  AH=4H	- верификация;
   2653				     ;	  AH=5H	- форматизация.
   2654				     ;	  Для выполнения функций записи,		       +
   2655				     считывания, верификации,
   2656				     ; форматизации	в регистрах задается		       +
   2657				     следующая	информация:
   2658				     ;	  DL - номер устройства (0-3, контролируемое      +
   2659				     значение);
   2660				     ;	  DH - номер головки (0-1, неконтролируемое	       +
   2661				     значение);
   2662				     ;	  CH - номер дорожки (0-39,	неконтролируемое       +
   2663				     значение);
   2664				     ;	  CL - номер сектора (1-8, неконтролируемое	       +
   2665				     значение);
   2666				     ;	  AL - количество секторов (1-8,			       +
   2667				     неконтролируемое значение).
   2668				     ;
   2669				     ;	  Для выполнения форматизации необходимо    +
   2670				     сформировать в
   2671				     ; памяти четырехбайтную таблицу	для каждого  +
   2672				     сектора, содержащую
   2673				     ; следующую информацию:
   2674				     ;	  номер дорожки;
   2675				     ;	  номер головки;
   2676				     ;	  номер сектора;
   2677				     ;	  количество байт	в секторе (00 -	128 байт, 01 - 256 +
   2678				     байт,
   2679				     ; 02 - 512	байт, 03 - 1024 байта).
   2680				     ;	  Адрес таблицы задается в	регистрах ES:BX.
   2681				     ;
   2682				     ;	  После выполнения программы в	регистре AH    +
   2683				     находится
   2684				     ; байт	состояния НГМД.
   2685				     ;
   2686				     ;	  Байт состояния НГМД имеет следующее	       +
   2687				     значение:
   2688				     ;	  80 - тайм-аут;
   2689				     ;	  40 - сбой	позиционирования;
   2690				     ;	  20 - сбой	контроллера;
   2691				     ;	  10 - ошибка кода циклического контроля при  +
   2692				     считывании;
   2693				     ;	  09 - переход адреса через сегмент (64К байт);
   2694				     ;	  08 - переполнение;
   2695				     ;	  04 - сектор не найден;
   2696				     ;	  03 - защита записи;
   2697				     ;	  02 - не обнаружен маркер идентификатора       +
   2698				     сектора;
   2699				     ;	  01 - команда отвергнута.
   2700				     ;	  При успешном завершении программы	       +
   2701				     признак CF=0,  в про-
   2702				     ; тивном случае - признак CF=1 (регистр AH	       +
   2703				     содержит код ошибки).
   2704				     ;	  Регистр AL содержит количество реально       +
   2705				     считанных	секторов.
   2706				     ;	  Адрес программы	обслуживания накопителя  +
   2707				     на гибком магнитном
   2708				     ; диске записывается в вектор 40H в процедуре   +
   2709				     сброса по включению
   2710				     ; питания.
   2711				     ;-------------------------
   2712					     assume  cs:code,ds:data,es:data
   2713	EC59			     diskette_io proc	     far
   2714	EC59  FB			     sti		     ; установить признак	       +
   2715				     прерывания
   2716	EC5A  53			     push    bx		     ; сохранить адрес
   2717	EC5B  51			     push    cx
   2718	EC5C  1E			     push    ds		; сохранить сегментное	       +
   2719				     значение регистра
   2720	EC5D  56			     push    si		; сохранить все регистры во      +
   2721				     время	операции
   2722	EC5E  57			     push    di
   2723	EC5F  55			     push    bp
   2724	EC60  52			     push    dx
   2725	EC61  8B EC			     mov     bp,sp	; установить указатель	       +
   2726				     вершины стека
   2727	EC63  BE 0040			     mov     si,dat
   2728	EC66  8E DE			     mov     ds,si	     ; установить область данных
   2729	EC68  E8 001C			     call    j1		     ;
   2730	EC6B  BB 0004			     mov     bx,4	     ; получить	параметры	       +
   2731				     ожидания мотора
   2732	EC6E  E8 01E0			     call    get_parm
   2733	EC71  88 26 0040r		     mov     motor_count,ah  ; уст время отсчета	для	       +
   2734				     мотора
   2735	EC75  8A 26 0041r		     mov     ah,diskette_status	 ; получить состояние	       +
   2736				     операции
   2737	EC79  80 FC 01			     cmp     ah,1	     ; уст признак CF	для		       +
   2738				     индикации
   2739	EC7C  F5			     cmc		     ; успешной	операции
   2740	EC7D  5A			     pop     dx		     ; восстановить	все регистры
   2741	EC7E  5D			     pop     bp
   2742	EC7F  5F			     pop     di
   2743	EC80  5E			     pop     si
   2744	EC81  1F			     pop     ds
   2745	EC82  59			     pop     cx
   2746	EC83  5B			     pop     bx
   2747	EC84  CA 0002			     ret     2
   2748	EC87			     diskette_io     endp
   2749	EC87			     j1	     proc    near
   2750	EC87  8A F0			     mov     dh,al	     ; сохранить количество	       +
   2751				     секторов
   2752	EC89  80 26 003Fr 7F		     and     motor_status,07fh	 ; указать операцию	       +
   2753				     считывания
   2754	EC8E  0A E4			     or	     ah,ah	     ; AH=0
   2755	EC90  74 27			     jz	     disk_reset
   2756	EC92  FE CC			     dec     ah		     ; AH=1
   2757	EC94  74 74			     jz	     disk_status
   2758	EC96  C6 06 0041r 00		     mov     diskette_status,0	 ; сброс состояния
   2759	EC9B  80 FA 04			     cmp     dl,4	     ; проверка	количества	       +
   2760				     устройств
   2761	EC9E  73 13			     jae     j3		     ; переход по ошибке
   2762	ECA0  FE CC			     dec     ah		     ; AH=2
   2763	ECA2  74 6A			     jz	     disk_read
   2764	ECA4  FE CC			     dec     ah		     ; AH=3
   2765	ECA6  75 03			     jnz     j2
   2766	ECA8  E9 0096			     jmp     disk_write
   2767	ECAB			     j2:
   2768	ECAB  FE CC			     dec     ah		     ; AH=4
   2769	ECAD  74 68			     jz	     disk_verf
   2770	ECAF  FE CC			     dec     ah		     ; AH=5
   2771	ECB1  74 68			     jz	     disk_format
   2772	ECB3			     j3:
   2773	ECB3  C6 06 0041r 01		     mov     diskette_status,bad_cmd   ; неверная команда
   2774
   2775	ECB8  C3			     ret		     ; операция	не определена
   2776	ECB9			     j1	     endp
   2777
   2778				     ;	 Сбросить НГМД
   2779
   2780	ECB9			     disk_reset	proc near
   2781	ECB9  BA 03F2			     mov     dx,03f2h
   2782	ECBC  FA			     cli		     ; сброс признака разрешения+
   2783				     прерывания
   2784	ECBD  A0 003Fr			     mov     al,motor_status  ;	какой мотор включен
   2785	ECC0  B1 04			     mov     cl,4	     ; счетчик сдвига
   2786	ECC2  D2 E0			     sal     al,cl
   2787	ECC4  A8 20			     test    al,20h	     ; выбрать соответствующее   +
   2788				     устройство
   2789	ECC6  75 0C			     jnz     j5		     ; переход, если	включен	       +
   2790				     мотор	первого
   2791								     ; устройства
   2792	ECC8  A8 40			     test    al,40h
   2793	ECCA  75 06			     jnz     j4		     ; переход, если	включен	       +
   2794				     мотор	второго
   2795								     ; устройства
   2796	ECCC  A8 80			     test    al,80h
   2797	ECCE  74 06			     jz	     j6		     ; переход, если	включен	       +
   2798				     мотор	нулевого
   2799								     ; устройства
   2800	ECD0  FE C0			     inc     al
   2801	ECD2  FE C0		     j4:     inc     al
   2802	ECD4  FE C0		     j5:     inc     al
   2803	ECD6  0C 08		     j6:     or	     al,8	     ; включить	доступность	       +
   2804				     прерывания
   2805	ECD8  EE			     out     dx,al	     ; сброс адаптера
   2806	ECD9  C6 06 003Er 00		     mov     seek_status,0
   2807	ECDE  C6 06 0041r 00		     mov     diskette_status,0	; уст нормальное		       +
   2808				     состояние	НГМД
   2809	ECE3  0C 04			     or	     al,4	     ; выключить сброс
   2810	ECE5  EE			     out     dx,al
   2811	ECE6  FB			     sti		     ; установить бит разрешения+
   2812				     прерывания
   2813	ECE7  E8 0225			     call    chk_stat_2	     ; выполнить прерывание	       +
   2814				     после	сброса
   2815	ECEA  A0 0042r			     mov     al,nec_status
   2816	ECED  3C C0			     cmp     al,0c0h	; проверка готовности		       +
   2817				     устройства для передачи
   2818	ECEF  74 07			     jz	     j7		     ; устройство готово
   2819	ECF1  80 0E 0041r 20		     or	     diskette_status,bad_nec  ;	уст код ошибки
   2820	ECF6  EB 11			     jmp     short j8
   2821
   2822				     ;	 Послать	команду в контроллер
   2823
   2824	ECF8			     j7:
   2825	ECF8  B4 03			     mov     ah,03h	     ; установить команду
   2826	ECFA  E8 FA32			     call    nec_output	     ; передать	команду
   2827	ECFD  BB 0001			     mov     bx,1	     ; передача	первого байта      +
   2828				     параметров
   2829	ED00  E8 014E			     call    get_parm	     ; в контроллер
   2830	ED03  BB 0003			     mov     bx,3	     ; передача	второго байта      +
   2831				     параметров
   2832	ED06  E8 0148			     call    get_parm	     ; в контроллер
   2833	ED09			     j8:
   2834	ED09  C3			     ret		     ; возврат к прерванной	       +
   2835				     программе
   2836	ED0A			     disk_reset	     endp
   2837
   2838				     ;
   2839				     ; Считать байт состояния НГМД (AH=1)
   2840				     ;
   2841
   2842	ED0A			     disk_status proc near
   2843	ED0A  A0 0041r			     mov     al,diskette_status
   2844	ED0D  C3			     ret
   2845	ED0E			     disk_status     endp
   2846
   2847				     ;	 Считать	указанный сектор	в память	(AH=2)
   2848
   2849	ED0E			     disk_read proc near
   2850	ED0E  B0 46			     mov     al,046h	     ; установить команду
   2851	ED10			     j9:
   2852	ED10  E8 01B6			     call    dma_setup	     ; установить ПДП
   2853	ED13  B4 E6			     mov     ah,0e6h	 ; уст команду считывания	       +
   2854				     контроллера
   2855	ED15  EB 36			     jmp     short rw_opn    ; переход к выполнению	       +
   2856				     операции
   2857	ED17			     disk_read	     endp
   2858
   2859				     ;	 Верификация	(AH=4)
   2860
   2861	ED17			     disk_verf proc near
   2862	ED17  B0 42			     mov     al,042h	     ; установить команду
   2863	ED19  EB F5			     jmp     short j9
   2864	ED1B			     disk_verf	     endp
   2865
   2866				     ;	 Форматизация (AH=5)
   2867
   2868	ED1B			     disk_format proc near
   2869	ED1B  80 0E 003Fr 80		     or	     motor_status,80h  ; индикация операции	       +
   2870				     записи
   2871	ED20  B0 4A			     mov     al,04ah	       ; установить команду
   2872	ED22  E8 01A4			     call    dma_setup	       ; установить ПДП
   2873	ED25  B4 4D			     mov     ah,04dh	       ; установить команду
   2874	ED27  EB 24			     jmp     short rw_opn
   2875	ED29			     j10:
   2876	ED29  BB 0007			     mov     bx,7	       ; получить значение	       +
   2877				     сектора
   2878	ED2C  E8 0122			     call    get_parm
   2879	ED2F  BB 0009			     mov     bx,9	     ; получить	значение дорожки+
   2880				     на секторе
   2881	ED32  E8 011C			     call    get_parm
   2882	ED35  BB 000F			     mov     bx,15	     ; получить	значение длины    +
   2883				     интервала
   2884	ED38  E8 0116			     call    get_parm	     ; для контроллера
   2885	ED3B  BB 0011			     mov     bx,17	     ; получить	полный байт
   2886	ED3E  E9 00B8			     jmp     j16
   2887	ED41			     disk_format     endp
   2888
   2889				     ;	 Записать указанный сектор из памяти (AH=3)
   2890
   2891	ED41			     disk_write	proc near
   2892	ED41  80 0E 003Fr 80		     or	     motor_status,80h	     ; индикация операции     +
   2893				     записи
   2894	ED46  B0 4A			     mov     al,04ah		     ; уст код операции	       +
   2895				     записи
   2896	ED48  E8 017E			     call    dma_setup
   2897	ED4B  B4 C5			     mov     ah,0c5h		     ; команда записи на	НГМД
   2898	ED4D			     disk_write	     endp
   2899
   2900				     ;______________________
   2901				     ; rw_opn
   2902				     ;	 Программа выполнения операций
   2903				     ;	 считывания, записи, верификации
   2904				     ;----------------------
   2905	ED4D			     rw_opn  proc    near
   2906	ED4D  73 08			     jnc     j11	     ; проверка	ошибки ПДП
   2907	ED4F  C6 06 0041r 09		     mov     diskette_status,dma_boundary   ; установить ошибку
   2908	ED54  B0 00			     mov     al,0	     ;
   2909	ED56  C3			     ret		     ; возврат к основной	       +
   2910				     программе
   2911	ED57			     j11:
   2912	ED57  50			     push    ax		     ; сохранить команду
   2913
   2914				     ;	 Включить мотор и	выбрать устройство
   2915
   2916	ED58  51			     push    cx
   2917	ED59  8A CA			     mov     cl,dl	     ; уст номер устройства, как  +
   2918				     счетчик сдвига
   2919	ED5B  B0 01			     mov     al,1	     ; маска для определения	       +
   2920				     мотора устройства
   2921	ED5D  D2 E0			     sal     al,cl	     ; сдвиг
   2922	ED5F  FA			     cli		     ; сбросить	бит разрешения    +
   2923				     прерывания
   2924	ED60  C6 06 0040r FF		     mov     motor_count,0ffh  ; установить счетчик
   2925	ED65  84 06 003Fr		     test    al,motor_status
   2926	ED69  75 3F			     jnz     j14
   2927	ED6B  80 26 003Fr F0		     and     motor_status,0f0h	; выключить все биты	       +
   2928				     мотора
   2929	ED70  08 06 003Fr		     or	     motor_status,al	; включить мотор
   2930	ED74  FB			     sti		     ; установить бит разрешения+
   2931				     прерывания
   2932	ED75  B0 10			     mov     al,10h	     ; бит маски
   2933	ED77  D2 E0			     sal     al,cl	     ; уст бит маски	для		       +
   2934				     доступности мотора
   2935	ED79  0A C2			     or	     al,dl	     ; включить	бит выбора	       +
   2936				     устройства
   2937	ED7B  0C 0C			     or	     al,0ch	     ; нет сброса, доступность     +
   2938				     прерывания ПДП
   2939	ED7D  52			     push    dx
   2940	ED7E  BA 03F2			     mov     dx,03f2h	     ; установить адрес порта
   2941	ED81  EE			     out     dx,al
   2942	ED82  5A			     pop     dx		     ; восстановить	регистры
   2943	ED83  51			     push    cx		     ;задержка для включения       +
   2944				     мотора устройства
   2945	ED84  B9 0003			     mov     cx,3
   2946	ED87  51		     x2:     push    cx
   2947	ED88  B9 0000			     mov     cx,0
   2948	ED8B  E2 FE		     x1:     loop    x1
   2949	ED8D  59			     pop     cx
   2950	ED8E  E2 F7			     loop    x2
   2951	ED90  59			     pop     cx
   2952
   2953				     ;	 Ожидание включения мотора для операции      +
   2954				     записи
   2955
   2956	ED91  F6 06 003Fr 80		     test    motor_status,80h  ; запись ?
   2957	ED96  74 12			     jz	     j14     ; нет -	продолжать без ожидания
   2958	ED98  BB 0014			     mov     bx,20	     ; установить ожидание	       +
   2959				     включения	мотора
   2960	ED9B  E8 00B3			     call    get_parm	     ; получить	параметры
   2961	ED9E  0A E4			     or	     ah,ah
   2962	EDA0			     j12:
   2963	EDA0  74 08			     jz	     j14	     ; выход по окончании	       +
   2964				     времени ожидания
   2965	EDA2  2B C9			     sub     cx,cx	     ; установить счетчик
   2966	EDA4  E2 FE		     j13:    loop    j13	     ; ожидать требуемое время
   2967	EDA6  FE CC			     dec     ah		     ; уменьшеть значение	       +
   2968				     времени
   2969	EDA8  EB F6			     jmp     short j12	     ; повторить цикл
   2970
   2971	EDAA			     j14:
   2972	EDAA  FB			     sti		     ; уст признак разрешения      +
   2973				     прерывания
   2974	EDAB  59			     pop     cx
   2975
   2976				     ;	 Выполнить операцию поиска
   2977
   2978	EDAC  E8 00B8			     call    seek	     ; установить дорожку
   2979	EDAF  58			     pop     ax		     ; восстановить	команду
   2980	EDB0  8A FC			     mov     bh,ah	     ; сохранить команду в BH
   2981	EDB2  B6 00			     mov     dh,0	     ; уст 0	сектор в	случае	       +
   2982				     ошибки
   2983	EDB4  72 4A			     jc	     j17	     ; выход, если ошибка
   2984	EDB6  BE EE00r			     mov     si,offset j17
   2985
   2986	EDB9  56			     push    si
   2987
   2988				     ;	 Послать	параметры в контроллер
   2989
   2990	EDBA  E8 F972			     call    nec_output	     ; передача	команды
   2991	EDBD  8A 66 01			     mov     ah,byte ptr [bp+1]	 ; уст номер головки
   2992	EDC0  D0 E4			     sal     ah,1	     ; сдвиг на 2
   2993	EDC2  D0 E4			     sal     ah,1
   2994	EDC4  80 E4 04			     and     ah,4	     ; выделить	бит
   2995	EDC7  0A E2			     or	     ah,dl	     ; операция	OR с номером	       +
   2996				     устройства
   2997	EDC9  E8 F963			     call    nec_output
   2998
   2999				     ;	 Проверка операции форматизации
   3000
   3001	EDCC  80 FF 4D			     cmp     bh,04dh	     ; форматизация	?
   3002	EDCF  75 03			     jne     j15    ; нет - продолжать			       +
   3003				     запись/считывание/верификацию
   3004	EDD1  E9 FF55			     jmp     j10
   3005
   3006	EDD4  8A E5		     j15:    mov     ah,ch	     ; номер цилиндра
   3007	EDD6  E8 F956			     call    nec_output
   3008	EDD9  8A 66 01			     mov     ah,byte ptr [bp+1]	 ; номер головки
   3009	EDDC  E8 F950			     call    nec_output
   3010	EDDF  8A E1			     mov     ah,cl	     ; номер сектора
   3011	EDE1  E8 F94B			     call    nec_output
   3012	EDE4  BB 0007			     mov     bx,7
   3013	EDE7  E8 0067			     call    get_parm
   3014	EDEA  BB 0009			     mov     bx,9
   3015	EDED  E8 0061			     call    get_parm
   3016	EDF0  BB 000B			     mov     bx,11
   3017	EDF3  E8 005B			     call    get_parm
   3018	EDF6  BB 000D			     mov     bx,13
   3019	EDF9			     j16:
   3020	EDF9  E8 0055			     call    get_parm
   3021	EDFC  5E			     pop     si
   3022
   3023				     ;	 Операция запущена
   3024
   3025	EDFD  E8 0130			     call    wait_int	     ; ожидание	прерывания
   3026	EE00			     j17:
   3027	EE00  72 45			     jc	     j21	     ; поиск ошибки
   3028	EE02  E8 0166			     call    results	     ; получить	состояние	       +
   3029				     контроллера
   3030	EE05  72 3F			     jc	     j20	     ; поиск ошибки
   3031
   3032				     ;	 Проверка  состояния, полученного из	       +
   3033				     контроллера
   3034
   3035	EE07  FC			     cld		     ; установить направление     +
   3036				     коррекции
   3037	EE08  BE 0042r			     mov     si,offset nec_status
   3038	EE0B  AC			     lods    nec_status
   3039	EE0C  24 C0			     and     al,0c0h	     ; проверить нормальное	       +
   3040				     окончание
   3041	EE0E  74 3B			     jz	     j22
   3042	EE10  3C 40			     cmp     al,040h	     ; проверить неверное	       +
   3043				     окончание
   3044	EE12  75 29			     jnz     j18
   3045
   3046				     ;	 Обнаруженно	неверное окончание
   3047
   3048	EE14  AC			     lods    nec_status
   3049	EE15  D0 E0			     sal     al,1
   3050	EE17  B4 04			     mov     ah,record_not_fnd
   3051	EE19  72 24			     jc	     j19
   3052	EE1B  D0 E0			     sal     al,1
   3053	EE1D  D0 E0			     sal     al,1
   3054	EE1F  B4 10			     mov     ah,bad_crc
   3055	EE21  72 1C			     jc	     j19
   3056	EE23  D0 E0			     sal     al,1
   3057	EE25  B4 08			     mov     ah,bad_dma
   3058	EE27  72 16			     jc	     j19
   3059	EE29  D0 E0			     sal     al,1
   3060	EE2B  D0 E0			     sal     al,1
   3061	EE2D  B4 04			     mov     ah,record_not_fnd
   3062	EE2F  72 0E			     jc	     j19
   3063	EE31  D0 E0			     sal     al,1
   3064	EE33  B4 03			     mov     ah,write_protect  ; проверка защиты записи
   3065	EE35  72 08			     jc	     j19
   3066	EE37  D0 E0			     sal     al,1
   3067	EE39  B4 02			     mov     ah,bad_addr_mark
   3068	EE3B  72 02			     jc	     j19
   3069
   3070				     ;	 Контроллер вышел из строя
   3071
   3072	EE3D			     j18:
   3073	EE3D  B4 20			     mov     ah,bad_nec
   3074	EE3F			     j19:
   3075	EE3F  08 26 0041r		     or	     diskette_status,ah
   3076	EE43  E8 016A			     call    num_trans
   3077	EE46			     j20:
   3078	EE46  C3			     ret	     ; возврат к программе, вызвавшей+
   3079				     прерывание
   3080
   3081	EE47			     j21:
   3082	EE47  E8 0121			     call    results	     ; вызов результатов в буфер
   3083	EE4A  C3			     ret
   3084
   3085				     ;	 Операция была успешной
   3086
   3087	EE4B			     j22:
   3088	EE4B  E8 0162			     call    num_trans
   3089	EE4E  32 E4			     xor     ah,ah	     ; нет ошибок
   3090	EE50  C3			     ret
   3091	EE51			     rw_opn  endp
   3092				     ;------------------------
   3093				     ;get_parm
   3094				     ;
   3095				     ;	 ВХОД   BX - индекс байта,деленный
   3096				     ;		     на 2,который будет
   3097				     ;		     выбран,если младший
   3098				     ;		     бит BX установлен,то
   3099				     ;		     байт немедленно пере-
   3100				     ;		     дается контроллеру.
   3101				     ;
   3102				     ;	 ВЫХОД  AH	- байт из	блока.
   3103				     ;-------------------------
   3104	EE51			     get_parm proc   near
   3105	EE51  1E			     push    ds		     ; сохранить сегмент
   3106	EE52  2B C0			     sub     ax,ax	     ; AX=0
   3107	EE54  8E D8			     mov     ds,ax
   3108					     assume  ds:abs0
   3109	EE56  C5 36 0078r		     lds     si,disk_pointer
   3110	EE5A  D1 EB			     shr     bx,1	     ; делить BX на 2, уст флаг для  +
   3111				     выхода
   3112	EE5C  8A A0 0000r		     mov     ah,zb[si+bx]    ; получить	слово
   3113	EE60  1F			     pop     ds		     ; восстановить	сегмент
   3114					     assume  ds:data
   3115	EE61  72 01			     jc	     nec_op	      ;если	флаг установлен,	       +
   3116				     выход
   3117	EE63  C3			     ret	     ; возврат к программе, вызвавшей+
   3118				     прерывание
   3119	EE64  E9 F8C8		     nec_op: jmp     nec_output
   3120	EE67			     get_parm endp
   3121				     ;----------------------------
   3122				     ;	 Позиционирование
   3123				     ;
   3124				     ;	 Эта	программа позиционирует голов-
   3125				     ; ку обозначенного устройства на нуж-
   3126				     ; ную дорожку. Если устройство не
   3127				     ; было	выбрано до тех пор, пока не
   3128				     ; была	сброшена команда,то устройство
   3129				     ; будет рекалибровано.
   3130				     ;
   3131				     ;	 ВВОД
   3132				     ;	     (DL) - номер усройства для
   3133				     ;		    позиционирования,
   3134				     ;	     (CH) - номер дорожки.
   3135				     ;
   3136				     ;	 ВЫВОД
   3137				     ;	      CY=0 - успешно,
   3138				     ;	      CY=1 - сбой (состояние НГМД установить
   3139				     ;		     согласно  AX).
   3140				     ;----------------------------
   3141	EE67			     seek    proc    near
   3142	EE67  B0 01			     mov     al,1	     ; уст маску
   3143	EE69  51			     push    cx
   3144	EE6A  8A CA			     mov     cl,dl	     ; установить номер		       +
   3145				     устройства
   3146	EE6C  D2 C0			     rol     al,cl	     ; циклический сдвиг влево
   3147	EE6E  59			     pop     cx
   3148	EE6F  84 06 003Er		     test    al,seek_status
   3149	EE73  75 20			     jnz     j28
   3150	EE75  08 06 003Er		     or	     seek_status,al
   3151	EE79  B4 07			     mov     ah,07h
   3152	EE7B  E8 F8B1			     call    nec_output
   3153	EE7E  8A E2			     mov     ah,dl
   3154	EE80  E8 F8AC			     call    nec_output
   3155	EE83  E8 0089			     call    chk_stat_2	  ; получить и	обработать	       +
   3156				     прерывание
   3157	EE86  B4 07			     mov     ah,07h	     ; команда рекалибровки
   3158	EE88  E8 F8A4			     call    nec_output
   3159	EE8B  8A E2			     mov     ah,dl
   3160	EE8D  E8 F89F			     call    nec_output
   3161	EE90  E8 007C			     call    chk_stat_2
   3162	EE93  72 33			     jc	     j32	     ; сбой	позиционирования
   3163
   3164
   3165	EE95			     j28:
   3166	EE95  B4 0F			     mov     ah,0fh
   3167	EE97  E8 F895			     call    nec_output
   3168	EE9A  8A E2			     mov     ah,dl	     ; номер устройства
   3169	EE9C  E8 F890			     call    nec_output
   3170	EE9F  8A E5			     mov     ah,ch	     ; номер дорожки
   3171	EEA1  90				     nop
   3172	EEA2  F6 06 0010r 04		     test    byte ptr equip_flag,4
   3173	EEA7  75 02			     jnz     j300
   3174	EEA9  02 E4			     add     ah,ah	     ; удвоение	номера дорожки
   3175	EEAB			     j300:
   3176	EEAB  E8 F881			     call    nec_output
   3177	EEAE  E8 005E			     call    chk_stat_2	     ; получить	конечное	       +
   3178				     прерывание и
   3179								     ; считать состояние
   3180
   3181
   3182	EEB1  9C			     pushf		     ; сохранить значение	       +
   3183				     флажков
   3184	EEB2  BB 0012			     mov     bx,18
   3185	EEB5  E8 FF99			     call    get_parm
   3186	EEB8  51			     push    cx		     ; сохранить регистр
   3187	EEB9			     j29:
   3188	EEB9  B9 0226			     mov     cx,550	     ; организовать	цикл = 1 ms
   3189	EEBC  0A E4			     or	     ah,ah	     ; проверка	окончания	       +
   3190				     времени
   3191	EEBE  74 06			     jz	     j31
   3192	EEC0  E2 FE		     j30:    loop    j30	     ; задержка	1ms
   3193	EEC2  FE CC			     dec     ah		     ; вычитание из счетчика
   3194	EEC4  EB F3			     jmp     short j29	     ; возврат к началу цикла
   3195	EEC6			     j31:
   3196	EEC6  59			     pop     cx		     ; восстановить	состояние
   3197	EEC7  9D			     popf
   3198	EEC8			     j32:			     ; ошибка позиционирования
   3199	EEC8  C3			     ret	     ; возврат к программе, вызвавшей+
   3200				     прерывание
   3201	EEC9			     seek    endp
   3202				     ;-----------------------
   3203				     ; dma_setup
   3204				     ;	 Программа установки ПДП для операций	       +
   3205				     записи,считывания,верифи-
   3206				     ; кации.
   3207				     ;
   3208				     ;	 ВВОД
   3209				     ;
   3210				     ;	     (AL) - байт режима для ПДП,
   3211				     ;	     (ES:BX) - адрес считывания/записи		       +
   3212				     информации.
   3213				     ;
   3214				     ;------------------------
   3215	EEC9			     dma_setup proc  near
   3216	EEC9  51			     push    cx		     ; сохранить регистр
   3217	EECA  E6 0C			     out     dma+12,al
   3218	EECC  E6 0B			     out     dma+11,al	     ; вывод байта состояния
   3219	EECE  8C C0			     mov     ax,es	     ; получить	значение ES
   3220	EED0  B1 04			     mov     cl,4	     ; счетчик для сдвига
   3221	EED2  D3 C0			     rol ax,cl		     ; циклический сдвиг влево
   3222	EED4  8A E8			     mov     ch,al	     ;
   3223	EED6  24 F0			     and     al,0f0h	     ;
   3224	EED8  03 C3			     add     ax,bx
   3225	EEDA  73 02			     jnc     j33
   3226	EEDC  FE C5			     inc     ch		     ; перенос означает,	что	       +
   3227				     старшие 4 бита
   3228								     ; должны быть прибавлены
   3229	EEDE			     j33:
   3230	EEDE  50			     push    ax		     ; сохранить начальный адрес
   3231	EEDF  E6 04			     out     dma+4,al	     ; вывод младшей половины      +
   3232				     адреса
   3233	EEE1  8A C4			     mov     al,ah
   3234	EEE3  E6 04			     out     dma+4,al	     ; вывод старшей половины      +
   3235				     адреса
   3236	EEE5  8A C5			     mov     al,ch	     ; получить	4 старших бита
   3237	EEE7  24 0F			     and     al,0fh
   3238	EEE9  E6 81			     out     081h,al   ; вывод 4 старших бит на регистр+
   3239				     страниц
   3240
   3241				     ;	 Определение	счетчика
   3242
   3243	EEEB  8A E6			     mov     ah,dh	     ; номер сектора
   3244	EEED  2A C0			     sub     al,al	     ;
   3245	EEEF  D1 E8			     shr     ax,1	     ;
   3246	EEF1  50			     push    ax
   3247	EEF2  BB 0006			     mov     bx,6	     ; получить	параметры	       +
   3248				     байт/сектор
   3249	EEF5  E8 FF59			     call    get_parm
   3250	EEF8  8A CC			     mov     cl,ah	     ; счетчик сдига (0=128, 1=256 и т.д)
   3251	EEFA  58			     pop     ax
   3252	EEFB  D3 E0			     shl     ax,cl	     ; сдвиг
   3253	EEFD  48			     dec     ax		     ; -1
   3254	EEFE  50			     push    ax		     ; сохранить значение	       +
   3255				     счетчика
   3256	EEFF  E6 05			     out     dma+5,al	     ; вывести младший байт	       +
   3257				     счетчика
   3258	EF01  8A C4			     mov     al,ah
   3259	EF03  E6 05			     out     dma+5,al	     ; вывести старший байт	       +
   3260				     счетчика
   3261	EF05  59			     pop     cx		     ; восстановить	значение       +
   3262				     счетчика
   3263	EF06  58			     pop     ax		     ; восстановить	значение       +
   3264				     адреса
   3265	EF07  03 C1			     add     ax,cx	     ; проверка	заполнения 64K
   3266	EF09  59			     pop     cx		     ; восстановить	регистр
   3267	EF0A  B0 02			     mov     al,2	     ; режим для 8237
   3268	EF0C  E6 0A			     out     dma+10,al	     ; инициализация канала НГМД
   3269	EF0E  C3			     ret	     ; возврат к программе, вызвавшей+
   3270				     прерывание
   3271	EF0F			     dma_setup	     endp
   3272				     ;-----------------------
   3273				     ;chk_stat_2
   3274				     ;	 Эта	программа обрабатывает прерывания ,     +
   3275				     полученные после
   3276				     ; рекалибровки, позиционирования или сброса  +
   3277				     адаптера. Прерывание
   3278				     ; ожидается, принимается, обрабатывается	и     +
   3279				     результат	выдается программе,
   3280				     ; вызвавшей прерывание.
   3281				     ;
   3282				     ;	 ВЫВОД
   3283				     ;	       CY=0 - успешно,
   3284				     ;	       CY=1 - сбой (ошибка в	состоянии НГМД),
   3285				     ;--------------------------
   3286	EF0F			     chk_stat_2	proc near
   3287	EF0F  E8 001E			     call    wait_int	     ; ожидание	прерывания
   3288	EF12  72 14			     jc	     j34	     ; если	ошибка, то возврат
   3289	EF14  B4 08			     mov     ah,08h	     ; команда получения	       +
   3290				     состояния
   3291	EF16  E8 F816			     call    nec_output
   3292	EF19  E8 004F			     call    results	     ; считать результаты
   3293	EF1C  72 0A			     jc	     j34
   3294	EF1E  A0 0042r			     mov     al,nec_status   ; получить	первый байт	       +
   3295				     состояния
   3296	EF21  24 60			     and     al,060h	     ; выделить	биты
   3297	EF23  3C 60			     cmp     al,060h	     ; проверка
   3298	EF25  74 02			     jz	     j35	; если ошибка, то идти на метку
   3299	EF27  F8			     clc		     ; возврат
   3300	EF28			     j34:
   3301	EF28  C3			     ret	     ; возврат к программе, вызвавшей+
   3302				     прерывание
   3303	EF29			     j35:
   3304	EF29  80 0E 0041r 40		     or	     diskette_status,bad_seek
   3305	EF2E  F9			     stc		     ; ошибка в возвращенном	коде
   3306	EF2F  C3			     ret
   3307	EF30			     chk_stat_2	     endp
   3308				     ;---------------------------------
   3309				     ; wait_int
   3310				     ;	 Эта	программа ожидает прерывание,	которое +
   3311				     возникает	во время
   3312				     ; программы вывода.	Если устройство не	       +
   3313				     готово, ошибка	может быть
   3314				     ; возвращена.
   3315				     ;
   3316				     ;
   3317				     ;	 ВЫВОД
   3318				     ;		   CY=0	- успешно,
   3319				     ;		   CY=1	- сбой(состояние НГМД			       +
   3320				     устанавливается),
   3321				     ;-----------------------------------
   3322	EF30			     wait_int proc   near
   3323	EF30  FB			     sti		     ; установить признак	       +
   3324				     разрешения прерывания
   3325	EF31  53			     push    bx
   3326	EF32  51			     push    cx		     ; сохранить регистр
   3327	EF33  B3 02			     mov     bl,2	     ; количество циклов
   3328	EF35  33 C9			     xor     cx,cx	     ; длителность одного цикла  +
   3329				     ожидания
   3330	EF37			     j36:
   3331	EF37  F6 06 003Er 80		     test    seek_status,int_flag  ; опрос	наличия		       +
   3332				     прерывания
   3333	EF3C  75 0C			     jnz     j37
   3334	EF3E  E2 F7			     loop    j36	     ; возврат к началу цикла
   3335	EF40  FE CB			     dec     bl
   3336	EF42  75 F3			     jnz     j36
   3337	EF44  80 0E 0041r 80		     or	     diskette_status,time_out
   3338	EF49  F9			     stc		     ; возврат при ошибке
   3339	EF4A			     j37:
   3340	EF4A  9C			     pushf		     ; сохранить текущие	       +
   3341				     признаки
   3342	EF4B  80 26 003Er 7F		     and     seek_status,not int_flag
   3343	EF50  9D			     popf		     ; восстановить	признаки
   3344	EF51  59			     pop     cx
   3345	EF52  5B			     pop     bx		     ; восстановить	регистр
   3346	EF53  C3			     ret	     ; возврат к программе, вызвавшей+
   3347				     прерывание
   3348	EF54			     wait_int	     endp
   3349
   3350	EF54  03*(00)				     db	3 dup(0)
   3351
   3352				     ;---------------------------
   3353				     ;disk_int
   3354				     ;	 Эта	программа обрабатывает прерывания       +
   3355				     НГМД
   3356				     ;
   3357				     ;	 ВЫВОД  - признак прерывания			       +
   3358				     устанавливается в SEEK_STATUS.
   3359				     ;---------------------------
   3360	EF57			     disk_int proc   far
   3361	EF57  FB			     sti		     ; установить признак	       +
   3362				     разрешения прерывания
   3363	EF58  1E			     push    ds
   3364	EF59  50			     push    ax
   3365	EF5A  B8 0040			     mov     ax,dat
   3366	EF5D  8E D8			     mov     ds,ax
   3367	EF5F  80 0E 003Er 80		     or	     seek_status,int_flag
   3368	EF64  B0 20			     mov     al,20h	     ; установить конец		       +
   3369				     прерывания
   3370	EF66  E6 20			     out     20h,al	     ; послать конец прерывания  +
   3371				     в	порт
   3372	EF68  58			     pop     ax
   3373	EF69  1F			     pop     ds
   3374	EF6A  CF			     iret		     ; возврат из прерывания
   3375	EF6B			     disk_int	     endp
   3376				     ;----------------------------
   3377				     ;
   3378				     ;	 Эта	программа считывет все, что контроллер+
   3379				     адаптера НГМД указывает
   3380				     ; программе, следующей за прерыванием.
   3381				     ;
   3382				     ;
   3383				     ;	 ВЫВОД
   3384				     ;		CF=0 - успешно,
   3385				     ;		CF=1 - сбой
   3386				     ;----------------------------
   3387	EF6B			     results proc    near
   3388	EF6B  FC			     cld
   3389	EF6C  BF 0042r			     mov     di,offset nec_status
   3390	EF6F  51			     push    cx		     ; сохранить счетчик
   3391	EF70  52			     push    dx
   3392	EF71  53			     push    bx
   3393	EF72  B3 07			     mov     bl,7	     ; установить длину области  +
   3394				     состояния
   3395
   3396
   3397	EF74			     j38:
   3398	EF74  33 C9			     xor     cx,cx	     ; длительность	одного цикла
   3399	EF76  BA 03F4			     mov     dx,03f4h	     ; адрес порта
   3400	EF79			     j39:
   3401	EF79  EC			     in	     al,dx	     ; получить	состояние
   3402	EF7A  A8 80			     test    al,080h	     ; готово ?
   3403	EF7C  75 0C			     jnz     j40a
   3404	EF7E  E2 F9			     loop    j39
   3405	EF80  80 0E 0041r 80		     or	     diskette_status,time_out
   3406	EF85			     j40:			     ; ошибка
   3407	EF85  F9			     stc		     ; возврат по ошибке
   3408	EF86  5B			     pop     bx
   3409	EF87  5A			     pop     dx
   3410	EF88  59			     pop     cx
   3411	EF89  C3			     ret
   3412
   3413				     ;	 Проверка признака направления
   3414
   3415	EF8A  EC		     j40a:   in	     al,dx	     ; получить	регистр		       +
   3416				     состояния
   3417	EF8B  A8 40			     test    al,040h	     ; сбой	позиционирования
   3418	EF8D  75 07			     jnz     j42     ; если	все нормально, считать      +
   3419				     состояние
   3420	EF8F			     j41:
   3421	EF8F  80 0E 0041r 20		     or	     diskette_status,bad_nec
   3422	EF94  EB EF			     jmp     short j40	     ; ошибка
   3423
   3424				     ;	 Считывание состояния
   3425
   3426	EF96			     j42:
   3427	EF96  42			     inc     dx		     ; указать порт
   3428	EF97  EC			     in	     al,dx	     ; ввести данные
   3429	EF98  88 05			     mov    byte ptr [di],al  ;	сохранить байт
   3430	EF9A  47			     inc     di		     ; увеличить адрес
   3431	EF9B  B9 000A			     mov     cx,000ah	     ; счетчик
   3432	EF9E  E2 FE		     j43:    loop    j43
   3433	EFA0  4A			     dec     dx
   3434	EFA1  EC			     in	     al,dx	     ; получить	состояние
   3435	EFA2  A8 10			     test    al,010h
   3436	EFA4  74 06			     jz	     j44
   3437	EFA6  FE CB			     dec     bl		     ; -1 из количества циклов
   3438	EFA8  75 CA			     jnz     j38
   3439	EFAA  EB E3			     jmp     short j41	     ; сигнал неверен
   3440
   3441	EFAC			     j44:
   3442	EFAC  5B			     pop     bx		     ; восстановить	регистры
   3443	EFAD  5A			     pop     dx
   3444	EFAE  59			     pop     cx
   3445	EFAF  C3			     ret		     ; возврат из прерывания
   3446	EFB0			     results endp
   3447				     ;-----------------------------
   3448				     ; num_trans
   3449				     ;	 Эта	программа вычисляет количество	       +
   3450				     секторов, которое действительно
   3451				     ; было	записано или	считано с НГМД
   3452				     ;
   3453				     ;	 ВВОД
   3454				     ;	      (CH) - цилиндр,
   3455				     ;	      (CL) - сектор.
   3456				     ;
   3457				     ;	 ВЫВОД
   3458				     ;	      (AL) - количество действительно		       +
   3459				     переданных секторов.
   3460				     ;
   3461				     ;------------------------------
   3462	EFB0			     num_trans proc  near
   3463	EFB0  A0 0045r			     mov     al,nec_status+3  ;	получить последний	       +
   3464				     цилиндр
   3465	EFB3  3A C5			     cmp     al,ch	     ; сравнить	со стартовым
   3466	EFB5  A0 0047r			     mov     al,nec_status+5  ;	получить последний сектор
   3467	EFB8  74 0A			     jz	     j45
   3468	EFBA  BB 0008			     mov     bx,8
   3469	EFBD  E8 FE91			     call    get_parm	     ; получить	значение EOT
   3470	EFC0  8A C4			     mov     al,ah	     ; AH в AL
   3471	EFC2  FE C0			     inc     al		     ; EOT+1
   3472	EFC4  2A C1		     j45:    sub     al,cl	 ; вычисление	стартового	       +
   3473				     номера из конечного
   3474	EFC6  C3			     ret
   3475	EFC7			     num_trans endp
   3476
   3477				     ;-------------------------------
   3478				     ; disk_base
   3479				     ;	 Эта	программа устанавливает параметры,      +
   3480				     требуемые	для операций
   3481				     ; НГМД.
   3482				     ;--------------------------------
   3483
   3484	EFC7			     disk_base label byte
   3485	EFC7  CF			     db	     11001111b	     ;
   3486	EFC8  02			     db	     2		     ;
   3487	EFC9  25			     db	     motor_wait	     ;
   3488	EFCA  02			     db	     2		     ;
   3489	EFCB  08			     db	     8		     ;
   3490	EFCC  2A			     db	     02ah	     ;
   3491	EFCD  FF			     db	     0ffh	     ;
   3492	EFCE  50			     db	     050h	     ;
   3493	EFCF  F6			     db	     0f6h	     ;
   3494	EFD0  19			     db	     25		     ;
   3495	EFD1  04			     db	     4		     ;
   3496				     ;--- int 17-------------------
   3497				     ;	 Программа связи с печатающим устройством
   3498				     ;
   3499				     ;	 Эта	программа выполняет три функции, код    +
   3500				     которых задается
   3501				     ; в регистре AH:
   3502				     ;	 AH=0 -	печать знака, заданного в регистре	AL.    +
   3503				     Если в
   3504				     ; результате выполнения функции	знак не	       +
   3505				     напечатается, то в регистре
   3506				     ; AL устанавливается "1" (тайм-аут);
   3507				     ;	 AH=1 -	инициализация порта печати. После	       +
   3508				     выполнения функции
   3509				     ; в регистре AH находится байт состояния	       +
   3510				     печатающего устройства;
   3511				     ;	 AH=2H - считывание байта состояния		       +
   3512				     печатающего устройства.
   3513				     ;	 В регистре DX	необходимо задать ноль.
   3514				     ;	 Значение разрядов байта состояния	       +
   3515				     печатающего устройства:
   3516				     ;	 0 - тайм-аут;
   3517				     ;	 3 - ошибка ввода-вывода;
   3518				     ;	 4 - выбран (SLCT);
   3519				     ;	 5 - конец	бумаги (PE);
   3520				     ;	 6 - подтверждение;
   3521				     ;	 7 - занято.
   3522				     ;------------------------------
   3523
   3524					     assume  cs:code,ds:data
   3525	EFD2			     printer_io	proc far
   3526	EFD2  FB			     sti		     ; установить признак	       +
   3527				     разрешения прерывания
   3528	EFD3  1E			     push    ds		     ; сохранить сегмент
   3529	EFD4  52			     push    dx
   3530	EFD5  56			     push    si
   3531	EFD6  51			     push    cx
   3532	EFD7  53			     push    bx
   3533	EFD8  BE 0040			     mov     si,dat
   3534	EFDB  8E DE			     mov     ds,si	     ; установить сегмент
   3535	EFDD  8B F2			     mov     si,dx
   3536	EFDF  D1 E6			     shl     si,1
   3537	EFE1  8B 94 0008r		     mov     dx,printer_base[si]  ; получить базовый адрес
   3538									  ; печатающего устройства
   3539	EFE5  0B D2			     or	     dx,dx		; печать подключена ?
   3540	EFE7  74 0C			     jz	     b1			; нет, возврат
   3541	EFE9  0A E4			     or	     ah,ah		; AH=0 ?
   3542	EFEB  74 0E			     jz	     b2			; да,	переход к печати	       +
   3543				     знака
   3544	EFED  FE CC			     dec     ah			; AH=1 ?
   3545	EFEF  74 42			     jz	     b8			; да,	переход к		       +
   3546				     инициализации
   3547	EFF1  FE CC			     dec     ah			; AH=2 ?
   3548	EFF3  74 2A			     jz	     b5		; да,	переход к считыванию	       +
   3549				     байта	состояния
   3550
   3551				     ;	  Выход из программы
   3552
   3553	EFF5			     b1:
   3554	EFF5  5B			     pop     bx		     ; восстановить	регистры
   3555	EFF6  59			     pop     cx
   3556	EFF7  5E			     pop     si
   3557	EFF8  5A			     pop     dx
   3558	EFF9  1F			     pop     ds
   3559	EFFA  CF			     iret
   3560
   3561				     ;	 Печать знака, заданного в	AL
   3562
   3563	EFFB			     b2:
   3564	EFFB  50			     push    ax
   3565	EFFC  B3 0A			     mov     bl,10	     ; количество циклов	       +
   3566				     ожидания
   3567	EFFE  33 C9			     xor     cx,cx	     ; длительность	одного цикла
   3568	F000  EE			     out     dx,al	     ; вывести символ в порт
   3569	F001  42			     inc     dx		     ; -1 из адреса порта
   3570	F002			     b3:			     ; ожидание	BUSY
   3571	F002  EC			     in	     al,dx	     ; получить	состояние
   3572	F003  8A E0			     mov     ah,al	     ; переслать состояние в	AH
   3573	F005  A8 80			     test    al,80h	     ; печать занята ?
   3574	F007  75 0E			     jnz     b4		     ; переход, если	да
   3575	F009  E2 F7			     loop    b3		     ; цикл	ожидания закончился ?
   3576	F00B  FE CB			     dec     bl		     ; да, -1	из количества циклов
   3577	F00D  75 F3			     jnz     b3		     ; время ожидания истекло ?
   3578	F00F  80 CC 01			     or	     ah,1	     ; да, уст бит "тайм-аут"
   3579	F012  80 E4 F9			     and     ah,0f9h	     ;
   3580	F015  EB 14			     jmp     short b7
   3581	F017			     b4:			     ; OUT_STROBE
   3582	F017  B0 0D			     mov     al,0dh	     ; установить высокий строб
   3583	F019  42			     inc     dx	     ; стробирование битом 0 порта C    +
   3584				     для 8255
   3585	F01A  EE			     out     dx,al
   3586	F01B  B0 0C			     mov     al,0ch	     ; установить низкий строб
   3587	F01D  EE			     out     dx,al
   3588	F01E  58			     pop     ax		     ;
   3589
   3590				     ;	 Считывание байта состояния печатающего     +
   3591				     устройства
   3592
   3593	F01F			     b5:
   3594	F01F  50			     push    ax		     ; сохранить регистр
   3595	F020			     b6:
   3596	F020  8B 94 0008r		     mov     dx,printer_base[si]  ; получить адрес	печати
   3597	F024  42			     inc     dx
   3598	F025  EC			     in	     al,dx	     ; получить	состояние печати
   3599	F026  8A E0			     mov     ah,al
   3600	F028  80 E4 F8			     and     ah,0f8h
   3601	F02B			     b7:
   3602	F02B  5A			     pop     dx
   3603	F02C  8A C2			     mov     al,dl
   3604	F02E  80 F4 48			     xor     ah,48h
   3605	F031  EB C2			     jmp     short b1	     ; к выходу из программы
   3606
   3607				     ;	 Инициализация порта печатающего		       +
   3608				     устройства
   3609
   3610	F033			     b8:
   3611	F033  50			     push    ax
   3612	F034  83 C2 02			     add     dx,2	     ; указать порт
   3613	F037  B0 08			     mov     al,8
   3614	F039  EE			     out     dx,al
   3615	F03A  B8 03E8			     mov     ax,1000	      ;	время задержки
   3616	F03D			     b9:
   3617	F03D  48			     dec     ax		      ;	цикл задержки
   3618	F03E  75 FD			     jnz     b9
   3619	F040  B0 0C			     mov     al,0ch
   3620	F042  EE			     out     dx,al
   3621	F043  EB DB			     jmp     short b6	 ; переход к считыванию байта   +
   3622				     состояния
   3623	F045			     printer_io	     endp
   3624				     ;--- int 10------------------
   3625				     ;
   3626				     ;	 Программа обработки прерывания ЭЛИ
   3627				     ;
   3628				     ;	 Эта	программа обеспечивает выполнение       +
   3629				     функций обслуживания
   3630				     ; адаптера	ЭЛИ,	код которых задается в	       +
   3631				     регистре AH:
   3632				     ;
   3633				     ;	  AH=0	 - установить	режим работы	адаптера       +
   3634				     ЭЛИ. В	результате
   3635				     ; выполнения функции в регистре AL могут	       +
   3636				     устанавливаться следу-
   3637				     ; ющие	режимы:
   3638				     ;	  0 - 40х25, черно-белый, алфавитно-цифровой;
   3639				     ;	  1 - 40х25, цветной, алфавитно-цифровой;
   3640				     ;	  2 - 80х25, черно-белый, алфавитно-цифровой;
   3641				     ;	  3 - 80х25, цветной, алфавитно-цифровой;
   3642				     ;	  4 - 320х200,	цветной,	графический;
   3643				     ;	  5 - 320х200,	черно-белый, графический;
   3644				     ;	  6 - 640х200,	черно-белый, графический;
   3645				     ;	  7 - 80х25, черно-белый, алфавитно-цифровой.
   3646				     ;	  Режимы 0 - 6 используются для ЭМ адаптера     +
   3647				     ЭЛИ, режим	7
   3648				     ; используется	для монохромного	черно-белого+
   3649				     80х25 адаптера.
   3650				     ;
   3651				     ;	  AH=1	 - установить	размер курсора. Функция    +
   3652				     задает размер кур-
   3653				     ; сора	и управление	им.
   3654				     ;	 Разряды	0 - 4 регистра CL определяют конечную+
   3655				     границу курсора,
   3656				     ; разряды 0	- 4 регистра CH	- начальную границу    +
   3657				     курсора.
   3658				     ;	  Разряды 6 и 5	задают управление курсором:
   3659				     ;	  00 - курсор мерцает с частотой,	задаваемой   +
   3660				     аппаратурно;
   3661				     ;	  01 - курсор отсутствует.
   3662				     ;	  Аппаратурно всегда вызывается мерцание    +
   3663				     курсора с частотой,
   3664				     ; равной 1/16 частоты	кадровой развертки.
   3665				     ;
   3666				     ;	  AH=2	 - установить	текущую позицию курсора.  +
   3667				     Для выполнения
   3668				     ; функции необходимо задать	следующие	       +
   3669				     координаты курсора:
   3670				     ;	  BH - страница;
   3671				     ;	  DX - строка и колонка.
   3672				     ; При графическом режиме регистр BH=0.
   3673				     ;
   3674				     ;	  AH=3	 - считать текущее положение курсора.    +
   3675				     Функция вос-
   3676				     ; станавливает	текущее положение курсора.      +
   3677				     Перед	выполнением
   3678				     ; функции в регистре BH необходимо задать	       +
   3679				     страницу.
   3680				     ;	  После выполнения программы регистры	       +
   3681				     содержат следующую
   3682				     ; информацию:
   3683				     ;	  DH - строка;
   3684				     ;	  DL - колонка;
   3685				     ;	  CX - размер курсора и управление им.
   3686				     ;
   3687				     ;	  AH=5	- установить активную	страницу буфера  +
   3688				     адаптера.
   3689				     ; Функция используется только в			       +
   3690				     алфавитно-цифровом режиме.
   3691				     ; Для ее выполнения	необходимо в	регистре AL    +
   3692				     задать страницу:
   3693				     ;	  0-7 -	для режимов 0	и 1;
   3694				     ;	  0-3 -	для режимов 2	и 3.
   3695				     ;	  Значения режимов те же, что и для функции   +
   3696				     AH=0.
   3697				     ;
   3698				     ;	  AH=6	 - переместить блок символов вверх по    +
   3699				     экрану.
   3700				     ; Функция перемещает символы в пределах	       +
   3701				     заданной области вверх
   3702				     ; по экрану, заполняя нижние	строки пробелами+
   3703				     с	заданным атрибу-
   3704				     ; том.
   3705				     ;	  Для выполнения функции необходимо задать +
   3706				     следующие	пара-
   3707				     ; метры;
   3708				     ;	  AL - количество перемещаемых строк. Для	       +
   3709				     очистки блока AL=0;
   3710				     ;	  CX - координаты левого верхнего угла блока  +
   3711				     (строка,колонка);
   3712				     ;	  DX - координаты правого нижнего угла блока;
   3713				     ;	  BH - атрибут символа пробела.
   3714				     ;
   3715				     ;	  AH=7	 - переместить блок символов вниз.	       +
   3716				     Функция перемещает
   3717				     ; символы в пределах заданной области вниз по+
   3718				     экрану, заполняя
   3719				     ; верхние строки пробелами с заданным	       +
   3720				     атрибутом.
   3721				     ;	  Для выполнения функции необходимо задать +
   3722				     те же параметры,
   3723				     ; что и для	функции AH=6H.
   3724				     ;
   3725				     ;	  AH=8	 - считать атрибут и код символа,	       +
   3726				     находящегося в теку-
   3727				     ; щей позиции курсора. Функция считывает	       +
   3728				     атрибут и код символа
   3729				     ; и помещает их	в регистр AX (AL - код символа, AH - +
   3730				     атрибут
   3731				     ; символа).
   3732				     ;	  Для выполнения функции необходимо в	       +
   3733				     регистре BH задать
   3734				     ; страницу	(только для алфавитно-цифрового     +
   3735				     режима).
   3736				     ;
   3737				     ;	  AH=9	 - записать атрибут и код символа в	       +
   3738				     текущую позицию
   3739				     ; курсора. Функция помещает код символа и	его +
   3740				     атрибут в текущую
   3741				     ; позицию курсора.
   3742				     ;	  Для выполнения функции необходимо задать +
   3743				     следующие	параметры:
   3744				     ;	  BH - отображаемая	страница (только для	       +
   3745				     алфавитно-цифрового
   3746				     ; режима;
   3747				     ;	  CX - количество записываемых символов;
   3748				     ;	  AL - код символа;
   3749				     ;	  BL - атрибут символа для				       +
   3750				     алфавитно-цифрового режима	или
   3751				     ; цвет	знака для графики. При записи точки       +
   3752				     разряд 7 регистра BL=1.    =1
   3753				     ;
   3754				     ;	  AH=10	- записать символ	в текущую позицию       +
   3755				     курсора. Атрибут
   3756				     ; не изменяется.
   3757				     ;	  Для выполнения функции необходимо задать +
   3758				     следующие	параметры:
   3759				     ;	  BH - отображаемая	страница (только для	       +
   3760				     алфавитно-цифрового
   3761				     ; режима);
   3762				     ;	  CX - количество повторений символа;
   3763				     ;	  AL - код записываемого символа.		       +
   3764				     ся
   3765				     ;									   -
   3766				     ;	  AH=11	- установить цветовую	палитру.		       +
   3767				     ь
   3768				     ;	  При выполнении функции используются два   +
   3769				     варианта.
   3770				     ;	  Для первого	варианта в регистре BH		       +
   3771				     задается ноль,а в регистре
   3772				     ; BL - значения пяти младших разрядов,		       +
   3773				     используемых для выбора
   3774				     ; цветовой	палитры (цвет заднего	плана для      +
   3775				     цветного графического
   3776				     ; режима 320х200 или цвет каймы	для цветного	       +
   3777				     графического режима
   3778				     ; 40х25).
   3779				     ;	  Для второго	варианта в регистре BH		       +
   3780				     задается "1", а в регистре
   3781				     ; BL - номер цветовой	палитры (0 или 1).
   3782				     ;	  Палитра 0 состоит из зеленого	(1), красного  +
   3783				     (2) и желтого (3)
   3784				     ; цветов, палитра 1 -	из голубого (1),		       +
   3785				     фиолетового (2)	и белого	(3).
   3786				     ; При работе с видеомонитором цвета палитры   +
   3787				     заменяются соответству-
   3788				     ; ющими градациями цвета.
   3789				     ;	  Результатом выполнения функции является  +
   3790				     установка	цветовой       )
   3791				     ; палитры в регистре выбора цвета (3D9).
   3792				     ;
   3793				     ;	  AH=12	 - записать точку.	Функция определяет    +
   3794				     относительный
   3795				     ; адрес байта внутри буфера ЭЛИ, по которому   +
   3796				     должна быть записана
   3797				     ; точка с заданными	координатами.
   3798				     ;	  Для выполнения функции необходимо задать +
   3799				     следующие	параметры:    ,
   3800				     ;	  DX - строка;
   3801				     ;	  CX - колонка;
   3802				     ;	  AL - цвет	выводимой точки. Если	разряд 7	       +
   3803				     регистра AL уста-	 3)
   3804				     ; новлен в "1", то выполняется	операция XOR над    +
   3805				     значением	точки
   3806				     ; из буфера и значением точки из регистра	AL.
   3807				     ;
   3808				     ;	  AH=13	- считать точку. Функция определяет       +
   3809				     относительный
   3810				     ; адрес байта внутри буфера ЭЛИ, по которому   +
   3811				     должна быть считана
   3812				     ; точка с заданными	координатами.
   3813				     ;	  Перед выполнением программы в регистрах   +
   3814				     задаются те же	парамет-
   3815				     ; ры, что и для функции AH=12.
   3816				     ;	 После выполнения программы в регистре	AL     +
   3817				     находится	значение
   3818				     ; считанной точки.
   3819				     ;
   3820				     ;	  AH=14	- записать телетайп. Функция выводит     +
   3821				     символ в буфер
   3822				     ; ЭЛИ с одновременной установкой позиции	       +
   3823				     курсора и передвижением
   3824				     ; курсора на экране.
   3825				     ;	  После записи символа в последнюю позицию  +
   3826				     строки выполняется
   3827				     ; автоматический переход на	новую строку.       +
   3828				     Если страница экрана
   3829				     ; заполнена, выполняется перемещение на одну +
   3830				     строку вверх. Осво-
   3831				     ; бодившаяся строка заполняется	значением     +
   3832				     атрибута символа для
   3833				     ; алфавитно-цифрового режима или нулями -	для +
   3834				     графики.
   3835				     ;	  После записи очередного символа курсор     +
   3836				     устанавливается
   3837				     ; в следующую позицию.
   3838				     ;	  Для выполнения программы необходимо	       +
   3839				     задать следующие параметры:
   3840				     ;	  AL - код выводимого символа;
   3841				     ;	  BL - цвет	переднего плана (для графического +
   3842				     режима).
   3843				     ;	  Программа обрабатывает следующие	       +
   3844				     служебные	символы:
   3845				     ;	  0BH -	сдвиг курсора на одну	позицию (без	       +
   3846				     очистки);
   3847				     ;	  0DH -	перемещение курсора в начало строки;
   3848				     ;	  0AH -	перемещение курсора на следующую	       +
   3849				     строку;
   3850				     ;	  07H -	звуковой сигнал.
   3851				     ;
   3852				     ;	  AH=15	- получить текущее состояние ЭЛИ.	       +
   3853				     Функция считывает
   3854				     ; текущее состояние ЭЛИ	из памяти и размещает+
   3855				     его в следующих
   3856				     ; регистрах;
   3857				     ;	  AH - количество колонок (40 или 80);
   3858				     ;	  AL - текущий режим (0-7).	Значения режимов	те   +
   3859				     же, что и для
   3860				     ; функции AH=0;
   3861				     ;	  BH - номер активной страницы.
   3862				     ;
   3863				     ;	 AH=17 - загрузить знакогенератор		       +
   3864				     пользователя. Функция дает
   3865				     ; возможность пользователю загружать	       +
   3866				     знакогенератор любым, необ-
   3867				     ; ходимым ему алфавитом.
   3868				     ;	  Для выполнения программы необходимо	       +
   3869				     задать следующие параметры:
   3870				     ;	  ES:BP	- адрес таблицы, сформированной	       +
   3871				     пользователем;
   3872				     ;	  CX	- количество передаваемых	символов;
   3873				     ;	  BL	- код символа, начиная	с которого	       +
   3874				     загружается таблица
   3875				     ; пользователя;
   3876				     ;	  BH - количество байт на знакоместо;
   3877				     ;	  DL - идентификатор таблицы пользователя;
   3878				     ;	  AL - режим:
   3879				     ;		       AL=0   -	 загрузить знакогенератор
   3880				     ;		       AL=1   -	 выдать идентификатор таблицы
   3881				     ;		       AL=3   -	 загрузить вторую половину      +
   3882				     знакогенератора:
   3883				     ;				 BL=0 -	загрузить вторую		       +
   3884				     половину знакогене
   3885				     ;				 ратора из ПЗУ кодовой таблицы+
   3886				     с	русским
   3887				     ;				 алфавитом,
   3888				     ;				 BL=1 -	загрузить вторую		       +
   3889				     половину знакогене
   3890				     ;				 ратора из ПЗУ стандартной       +
   3891				     кодовой таблицей
   3892				     ;				 ASCII (USA)
   3893				     ;	 На выходе:
   3894				     ;	     AH	  -  количество байт на	знакоместо
   3895				     ;	     AL	  -  идентификатор	таблицы пользователя
   3896				     ;	     CF=1   -	операция завершена успешно
   3897				     ;
   3898				     ;	  AH=19	- переслать цепочку символов. Функция   +
   3899				     позволяет	пере-
   3900				     ; сылать символы четырьмя способами,	тип	       +
   3901				     которых задается в
   3902				     ; регистре	AL:
   3903				     ;	  AL=0 - символ, символ, символ, ...
   3904				     ; В регистре BL задается атрибут, курсор не       +
   3905				     движется;
   3906				     ;	  AL=1 - символ, символ, символ, ...
   3907				     ; В регистре BL задается атрибут, курсор	       +
   3908				     движется;
   3909				     ;	  AL=2H	- символ,	атрибут,	символ, атрибут, ...
   3910				     ; Курсор не движется;
   3911				     ;	  AL=3H	- символ,	атрибут,	символ, атрибут, ...
   3912				     ; Курсор движется.
   3913				     ;	   Кроме того необходимо задать в регистрах:
   3914				     ;	  ES:BP	- начальный адрес	цепочки символов;
   3915				     ;	  CX	- количество символов;
   3916				     ;	  DH,DL	- строку и колонку для	начала записи;
   3917				     ;	  BH	- номер страницы.
   3918				     ;-----------------------------------------------------------
   3919
   3920					     assume cs:code,ds:data,es:video_ram
   3921
   3922	F045			     m1	     label   word	     ; таблица функций адаптера  +
   3923				     ЭЛИ
   3924	F045  F0FCr			     dw	     offset  set_mode
   3925	F047  F1CFr			     dw	     offset  set_ctype
   3926	F049  F1F0r			     dw	     offset  set_cpos
   3927	F04B  F21Ar			     dw	     offset  read_cursor
   3928	F04D  F7A9r			     dw	     offset  read_lpen
   3929	F04F  F230r			     dw	     offset  act_disp_page
   3930	F051  F29Cr			     dw	     offset  scroll_up
   3931	F053  F341r			     dw	     offset  scroll_down
   3932	F055  F37Dr			     dw	     offset  read_ac_current
   3933	F057  F3C3r			     dw	     offset  write_ac_current
   3934	F059  F3F6r			     dw	     offset  write_c_current
   3935	F05B  F254r			     dw	     offset  set_color
   3936	F05D  F438r			     dw	     offset  write_dot
   3937	F05F  F427r			     dw	     offset  read_dot
   3938	F061  F966r			     dw	     offset  write_tty2
   3939	F063  F27Ar			     dw	     offset  video_state
   3940	      =0020		     m1l     equ     20h
   3941
   3942	F065			     video_io proc   near
   3943	F065  FB			     sti		 ; установить	признак		       +
   3944				     разрешения прерывания
   3945	F066  FC			     cld
   3946	F067  06			     push    es
   3947	F068  1E			     push    ds
   3948	F069  52			     push    dx
   3949	F06A  51			     push    cx
   3950	F06B  53			     push    bx
   3951	F06C  56			     push    si
   3952	F06D  57			     push    di
   3953	F06E  50			     push    ax		     ; сохранить значение AX
   3954	F06F  8A C4			     mov     al,ah	     ; переслать AH в	AL
   3955	F071  32 E4			     xor     ah,ah	     ; обнулить	старший байт
   3956	F073  D1 E0			     sal     ax,1	     ; умножить	на 2
   3957	F075  8B F0			     mov     si,ax	     ; поместить в SI
   3958	F077  3D 0020			     cmp     ax,m1l	     ; проверка	длины таблицы      +
   3959				     функций
   3960	F07A  72 04			     jb	     m2		     ; адаптера	ЭЛИ
   3961	F07C  58			     pop     ax		     ; восстановить	AX
   3962	F07D  E9 0147			     jmp     video_return    ; выход, если AX неверно
   3963	F080  B8 0040		     m2:     mov     ax,dat
   3964	F083  8E D8			     mov     ds,ax
   3965	F085  B8 B800			     mov     ax,0b800h	     ; сегмент для цветного	       +
   3966				     адаптера
   3967	F088  8B 3E 0010r		     mov     di,equip_flag   ; получить	тип адаптера
   3968	F08C  81 E7 0030		     and     di,30h	     ; выделить	биты режима ;	db 81h,+
   3969				     0E7h,30h,00h  ; ###Gleb###
   3970	F090  83 FF 30			     cmp     di,30h	     ; есть	установка ч/б	       +
   3971				     адаптера ?
   3972	F093  75 03			     jne     m3
   3973	F095  B8 B000			     mov     ax,0b000h	     ; уст адреса буфера	для ч/б   +
   3974				     адаптера
   3975	F098  8E C0		     m3:     mov     es,ax
   3976	F09A  58			     pop     ax		     ; восстановить	значение
   3977	F09B  8A 26 0049r		     mov     ah,crt_mode     ; получить	текущий режим в AH
   3978	F09F  2E: FF A4	F045r		     jmp   cs:m1[si]
   3979	F0A4			     video_io	     endp
   3980				     ;-------------------------
   3981				     ; set mode
   3982
   3983				     ;	 Эта	программа устанавливает режим работы  +
   3984				     адаптера ЭЛИ
   3985				     ;
   3986				     ;	 ВХОД
   3987				     ;		(AL) - содержит	значение режима.
   3988				     ;
   3989				     ;--------------------------
   3990
   3991				     ;	 Таблицы	параметров ЭЛИ
   3992
   3993	F0A4			     video_parms label	     byte
   3994
   3995				     ;	 Таблица	инициализации
   3996
   3997	F0A4  38 28 2D 0A 1F 06	19	     db	     38h,28h,2dh,0ah,1fh,6,19h	 ; уст для 40х25
   3998
   3999	F0AB  1C 02 07 06 07		     db	     1ch,2,7,6,7
   4000	F0B0  00 00 00 00		     db	     0,0,0,0
   4001	      =0010		     m4	     equ     10h
   4002
   4003	F0B4  71 50 5A 0A 1F 06	19	     db	     71h,50h,5ah,0ah,1fh,6,19h	 ; уст для 80х25
   4004
   4005	F0BB  1C 02 07 06 07		     db	     1ch,2,7,6,7
   4006	F0C0  00 00 00 00		     db	     0,0,0,0
   4007
   4008	F0C4  38 28 2D 0A 7F 06	64	     db	     38h,28h,2dh,0ah,7fh,6,64h	 ; уст для графики
   4009
   4010	F0CB  70 02 01 06 07		     db	     70h,2,1,6,7
   4011	F0D0  00 00 00 00		     db	     0,0,0,0
   4012
   4013	F0D4  62 50 50 0F 19 06	19	     db	     62h,50h,50h,0fh,19h,6,19h	 ; уст для 80х25	ч/б	       +
   4014				     адаптера
   4015
   4016	F0DB  19 02 0D 0B 0C		     db	     19h,2,0dh,0bh,0ch
   4017	F0E0  00 00 00 00		     db	     0,0,0,0
   4018
   4019	F0E4			     m5	     label   word	     ; таблица для			       +
   4020				     восстановления длины
   4021	F0E4  0800			     dw	     2048
   4022	F0E6  1000			     dw	     4096
   4023	F0E8  4000			     dw	     16384
   4024	F0EA  4000			     dw	     16384
   4025
   4026				     ;	 Колонки
   4027	F0EC			     m6	     label   byte
   4028	F0EC  28 28 50 50 28 28	50+	     db	     40,40,80,80,40,40,80,80
   4029	      50
   4030
   4031
   4032				     ;--- c_reg_tab
   4033	F0F4			     m7	     label   byte	     ; таблица установки режима
   4034	F0F4  2C 28 2D 29 2A 2E	1E+	     db	     2ch,28h,2dh,29h,2ah,2eh,1eh,29h
   4035	      29
   4036
   4037
   4038	F0FC			     set_mode proc   near
   4039	F0FC  BA 03D4			     mov     dx,03d4h	     ; адрес цветного адаптера
   4040	F0FF  B3 00			     mov     bl,0     ;	уст значение	для цветного	       +
   4041				     адаптера
   4042	F101  83 FF 30			     cmp     di,30h	     ; установлен ч/б адаптер ?
   4043	F104  75 07			     jne     m8		     ; переход, если	указан	       +
   4044				     цветной
   4045	F106  B0 07			     mov     al,7	     ; указать ч/б режим
   4046	F108  BA 03B4			     mov     dx,03b4h	     ; адрес для ч/б адаптера
   4047	F10B  FE C3			     inc     bl		     ; установить режим для ч/б    +
   4048				     адаптера
   4049	F10D  8A E0		     m8:     mov     ah,al	     ; сохранить режим в	AH
   4050	F10F  A2 0049r			     mov     crt_mode,al
   4051	F112  89 16 0063r		     mov     addr_6845,dx    ; сохранить адрес		       +
   4052				     управляющего порта
   4053								     ; для активного дисплея
   4054	F116  1E			     push    ds
   4055	F117  50			     push    ax		     ; сохранить режим
   4056	F118  52			     push    dx		     ; сохранить значение порта  +
   4057				     вывода
   4058	F119  83 C2 04			     add     dx,4	     ; указать адрес регистра      +
   4059				     управления
   4060	F11C  8A C3			     mov     al,bl	     ; получить	режим для	       +
   4061				     адаптера
   4062	F11E  EE			     out     dx,al	     ; сброс экрана
   4063	F11F  5A			     pop     dx		     ; восстановить	DX
   4064	F120  2B C0			     sub     ax,ax
   4065	F122  8E D8			     mov     ds,ax	     ; установить адрес таблицы  +
   4066				     векторов
   4067					     assume  ds:abs0
   4068	F124  C5 1E 0074r		     lds     bx,parm_ptr ; получить значение		       +
   4069				     параметров адаптера ЭЛИ
   4070	F128  58			     pop     ax		     ; восстановить	AX
   4071					     assume  ds:code
   4072	F129  B9 0010			     mov     cx,m4	; установить длину таблицы       +
   4073				     параметров
   4074	F12C  80 FC 02			     cmp     ah,2	     ; определение режима
   4075	F12F  72 10			     jc	     m9		     ; режим 0 или 1 ?
   4076	F131  03 D9			     add     bx,cx	     ; уст начало таблицы	       +
   4077				     параметров
   4078	F133  80 FC 04			     cmp     ah,4
   4079	F136  72 09			     jc	     m9		     ; режим 2 или 3
   4080	F138  03 D9			     add     bx,cx	     ; начало таблицы для графики
   4081	F13A  80 FC 07			     cmp     ah,7
   4082	F13D  72 02			     jc	     m9		     ; режимы 4, 5 или	6 ?
   4083	F13F  03 D9			     add     bx,cx	     ; уст начало таблицы для ч/б +
   4084				     адаптера
   4085
   4086				     ;	 BX указывает на строку таблицы			       +
   4087				     инициализации
   4088
   4089	F141			     m9:			     ; OUT_INIT
   4090	F141  50			     push    ax		     ; сохранить режим в	AH
   4091	F142  32 E4			     xor     ah,ah	     ;
   4092
   4093				     ;	 Цикл таблицы, устанавливающий адреса	       +
   4094				     регистров	и выводящий значения
   4095				     ; из таблицы
   4096
   4097	F144			     m10:
   4098	F144  8A C4			     mov     al,ah	     ;
   4099	F146  EE			     out     dx,al
   4100	F147  42			     inc     dx		     ; указать адрес порта
   4101	F148  FE C4			     inc     ah		     ;
   4102	F14A  8A 07			     mov     al,byte ptr [bx]	; получить значение	       +
   4103				     таблицы
   4104	F14C  EE			     out     dx,al	     ; послать строку из	таблицы +
   4105				     в	порт
   4106	F14D  43			     inc     bx		     ; +1 к адресу таблицы
   4107	F14E  4A			     dec     dx		     ; -1 из адреса порта
   4108	F14F  E2 F3			     loop    m10	     ; передана	вся таблица ?
   4109	F151  58			     pop     ax		     ; вернуть режимы
   4110	F152  1F			     pop     ds		     ; вернуть сегмент
   4111					     assume  ds:data
   4112
   4113				     ;	 Инициализация буфера дисплея
   4114
   4115	F153  33 FF			     xor     di,di	     ; DI=0
   4116	F155  89 3E 004Er		     mov     crt_start,di    ; сохранить начальный адрес
   4117	F159  C6 06 0062r 00		     mov     active_page,0   ; установить активную	       +
   4118				     страницу
   4119	F15E  B9 2000			     mov     cx,8192	     ; количество слов в	цветном +
   4120				     адаптере
   4121	F161  80 FC 04			     cmp     ah,4	     ; опрос графики
   4122	F164  72 0C			     jc	     m12	     ; нет инициализации графики
   4123	F166  80 FC 07			     cmp     ah,7	     ; опрос ч/б	адаптера
   4124	F169  74 04			     je	     m11	     ; инициализация ч/б	адаптера
   4125	F16B  33 C0			     xor     ax,ax	     ; для графического режима
   4126	F16D  EB 06			     jmp     short m13	     ; очистить	буфер
   4127	F16F			     m11:			     ; инициализация ч/б	адаптера
   4128	F16F  B9 0800			     mov     cx,2048	     ; об'ем буфера ч/б адаптера
   4129	F172			     m12:
   4130	F172  B8 0720			     mov     ax,' '+7*256    ; заполнить характеристики +
   4131				     для альфа
   4132	F175			     m13:			     ; очистить	буфер
   4133	F175  F3> AB			     rep     stosw	     ; заполнить область буфера  +
   4134				     пробелами
   4135
   4136				     ;	 Формирование порта управления режимом
   4137
   4138	F177  C7 06 0060r 0067		     mov     cursor_mode,67h   ; установить режим	       +
   4139				     текущего курсора (ERROR - MUS BE 607h)
   4140	F17D  A0 0049r			     mov     al,crt_mode     ; получить	режим в регистре +
   4141				     AX
   4142	F180  32 E4			     xor     ah,ah
   4143	F182  8B F0			     mov     si,ax	     ; таблица указателей режима
   4144	F184  8B 16 0063r		     mov     dx,addr_6845    ; подготовить адрес порта    +
   4145				     для вывода
   4146	F188  83 C2 04			     add     dx,4
   4147	F18B  2E: 8A 84	F0F4r		     mov al,cs:m7[si]
   4148	F190  EE			     out     dx,al
   4149	F191  A2 0065r			     mov     crt_mode_set,al
   4150
   4151				     ;	 Форморование количества колонок
   4152
   4153	F194  2E: 8A 84	F0ECr		     mov al,cs:m6[si]
   4154	F199  32 E4			     xor     ah,ah
   4155	F19B  A3 004Ar			     mov     crt_cols,ax     ; коичество колонок на	       +
   4156				     экране
   4157
   4158				     ;	 Установить позицию курсора
   4159
   4160	F19E  81 E6 000E		     and     si,0eh	     ; db 81h,0E6h,0Eh,00h   ; ###Gleb###
   4161	F1A2  2E: 8B 8C	F0E4r		     mov cx,cs:m5[si]  ; длина для очистки
   4162	F1A7  89 0E 004Cr		     mov     crt_len,cx
   4163	F1AB  B9 0008			     mov     cx,8	     ; очистить	все позиции	       +
   4164				     курсора
   4165	F1AE  BF 0050r			     mov     di,offset cursor_posn
   4166	F1B1  1E			     push    ds		     ; восстановить	сегмент
   4167	F1B2  07			     pop     es
   4168	F1B3  33 C0			     xor     ax,ax
   4169	F1B5  F3> AB			     rep     stosw	     ; заполнить нулями
   4170
   4171				     ;	 Установка регистра сканирования
   4172
   4173	F1B7  42			     inc     dx		     ; уст порт сканирования	по   +
   4174				     умолчанию
   4175	F1B8  B0 30			     mov     al,30h	     ; значение	30H для всех	       +
   4176				     режимов,
   4177								     ; исключая	640х200
   4178	F1BA  80 3E 0049r 06		     cmp     crt_mode,6	     ; режим ч/б	640х200
   4179	F1BF  75 02			     jnz     m14	     ; если	не 640х200
   4180	F1C1  B0 3F			     mov     al,3fh	     ; если	640х200, то поместить в 3FH
   4181	F1C3  EE		     m14:    out     dx,al	     ; вывод правильного	       +
   4182				     значения в порт 3D9
   4183	F1C4  A2 0066r			     mov     crt_pallette,al   ; сохранить значение для    +
   4184				     использования
   4185
   4186				     ;	 Нормальный возврат
   4187
   4188	F1C7			     video_return:
   4189	F1C7  5F			     pop     di
   4190	F1C8  5E			     pop     si
   4191	F1C9  5B			     pop     bx
   4192	F1CA			     m15:
   4193	F1CA  59			     pop     cx		     ; восстановление регистров
   4194	F1CB  5A			     pop     dx
   4195	F1CC  1F			     pop     ds
   4196	F1CD  07			     pop     es
   4197	F1CE  CF			     iret		     ; возврат из прерывания
   4198	F1CF			     set_mode	     endp
   4199				     ;--------------------
   4200				     ; set_ctype
   4201				     ;
   4202				     ;	 Эта	программа устанавливает размер	       +
   4203				     курсора и управление им
   4204				     ;
   4205				     ;	 ВХОД
   4206				     ;		(CX) - содержит	размер курсора. (CH -	       +
   4207				     начальная	граница,
   4208				     ;		       CL - конечная граница)
   4209				     ;
   4210				     ;--------------------
   4211	F1CF			     set_ctype proc  near
   4212	F1CF  B4 0A			     mov     ah,10	     ; установить регистр 6845	для +
   4213				     курсора
   4214	F1D1  89 0E 0060r		     mov     cursor_mode,cx   ;	сохранить в области	       +
   4215				     данных
   4216	F1D5  E8 0002			     call    m16	     ; вывод регистра CX
   4217	F1D8  EB ED			     jmp     short video_return
   4218
   4219	F1DA			     m16:
   4220	F1DA  8B 16 0063r		     mov     dx,addr_6845    ; адрес регистра
   4221	F1DE  8A C4			     mov     al,ah	     ; получить	значение
   4222	F1E0  EE			     out     dx,al	     ; установить регистр
   4223	F1E1  42			     inc     dx		     ; регистр данных
   4224	F1E2  8A C5			     mov     al,ch	     ; данные
   4225	F1E4  EE			     out     dx,al
   4226	F1E5  4A			     dec     dx
   4227	F1E6  8A C4			     mov     al,ah
   4228	F1E8  FE C0			     inc     al		     ; указать другой регистр      +
   4229				     данных
   4230	F1EA  EE			     out     dx,al	     ; установить второй регистр
   4231	F1EB  42			     inc     dx
   4232	F1EC  8A C1			     mov     al,cl	     ; второе значение данных
   4233	F1EE  EE			     out     dx,al
   4234	F1EF  C3			     ret		     ; возврат
   4235	F1F0			     set_ctype	     endp
   4236				     ;----------------------------
   4237				     ; set_cpos
   4238				     ;
   4239				     ;	 Установить текущую позицию курсора
   4240				     ;
   4241				     ;	 ВХОД
   4242				     ;		DX - строка, колонка,
   4243				     ;		BH - номер	страницы.
   4244				     ;
   4245				     ;-----------------------------
   4246	F1F0			     set_cpos proc   near
   4247	F1F0  8A CF			     mov     cl,bh
   4248	F1F2  32 ED			     xor     ch,ch	     ; установить счетчик
   4249	F1F4  D1 E1			     sal     cx,1	     ; сдвиг слова
   4250	F1F6  8B F1			     mov     si,cx
   4251	F1F8  89 94 0050r		     mov word ptr [si +	offset cursor_posn],dx	;сохранить	       +
   4252				     указатель
   4253	F1FC  38 3E 0062r		     cmp     active_page,bh
   4254	F200  75 05			     jnz     m17
   4255	F202  8B C2			     mov     ax,dx	     ; получить	строку/колонку в +
   4256				     AX
   4257	F204  E8 0002			     call    m18	     ; установить курсор
   4258	F207			     m17:
   4259	F207  EB BE			     jmp     short video_return	 ; возврат
   4260	F209			     set_cpos	     endp
   4261
   4262				     ;	 Установить позицию курсора, AX	содержит       +
   4263				     строку/колонку
   4264
   4265	F209			     m18     proc    near
   4266	F209  E8 007F			     call    position
   4267	F20C  8B C8			     mov     cx,ax
   4268	F20E  03 0E 004Er		     add     cx,crt_start    ; сложить с начальным	       +
   4269				     адресом страницы
   4270	F212  D1 F9			     sar     cx,1	     ; делить на 2
   4271	F214  B4 0E			     mov     ah,14
   4272	F216  E8 FFC1			     call    m16
   4273	F219  C3			     ret
   4274	F21A			     m18     endp
   4275				     ;---------------------------
   4276				     ; read_cursor
   4277				     ;
   4278				     ;	 Считать	текущее положение курсора
   4279				     ;
   4280				     ;	 Эта	программа восстанавливает текущее       +
   4281				     положение	курсора
   4282				     ;
   4283				     ;	 ВХОД
   4284				     ;		BH - номер	страницы
   4285				     ;
   4286				     ;	 ВЫХОД
   4287				     ;		DX - строка/колонка текущей	позиции	       +
   4288				     курсора,
   4289				     ;		CX - размер курсора и управление им
   4290				     ;
   4291				     ;---------------------------
   4292	F21A			     read_cursor proc near
   4293	F21A  8A DF			     mov     bl,bh
   4294	F21C  32 FF			     xor     bh,bh
   4295	F21E  D1 E3			     sal     bx,1
   4296	F220  8B 97 0050r		     mov dx,word ptr [bx+offset	cursor_posn]
   4297	F224  8B 0E 0060r		     mov     cx,cursor_mode
   4298	F228  5F			     pop     di		     ; восстановить	регистры
   4299	F229  5E			     pop     si
   4300	F22A  5B			     pop     bx
   4301	F22B  58			     pop     ax
   4302	F22C  58			     pop     ax
   4303	F22D  1F			     pop     ds
   4304	F22E  07			     pop     es
   4305	F22F  CF			     iret
   4306	F230			     read_cursor     endp
   4307				     ;-----------------------------
   4308				     ; act_disp_page
   4309				     ;
   4310				     ;	  Эта программа устанавливает активную	       +
   4311				     страницу буфера адаптера ЭЛИ
   4312				     ;
   4313				     ;	 ВХОД
   4314				     ;		AL - страница.
   4315				     ;
   4316				     ;	 ВЫХОД
   4317				     ;		Выполняется сброс контроллера для	       +
   4318				     установки	новой страницы.
   4319				     ;
   4320				     ;-----------------------------
   4321	F230			     act_disp_page proc	     near
   4322	F230  A2 0062r			     mov     active_page,al  ; сохранить значение	       +
   4323				     активной страницы
   4324	F233  8B 0E 004Cr		     mov     cx,crt_len	     ; получить	длину области      +
   4325				     буфера
   4326	F237  98			     cbw		     ; преобразовать AL
   4327	F238  50			     push    ax		     ; сохранить значение	       +
   4328				     страницы
   4329	F239  F7 E1			     mul     cx
   4330	F23B  A3 004Er			     mov     crt_start,ax    ; сохранить начальный адрес
   4331								     ; для следующего требования
   4332	F23E  8B C8			     mov     cx,ax	     ; переслать начальный адрес+
   4333				     в	CX
   4334	F240  D1 F9			     sar     cx,1	     ; делить на 2
   4335	F242  B4 0C			     mov     ah,12
   4336	F244  E8 FF93			     call    m16
   4337	F247  5B			     pop     bx		     ; восстановить	значение       +
   4338				     страницы
   4339	F248  D1 E3			     sal     bx,1
   4340	F24A  8B 87 0050r		     mov ax,word ptr [bx+offset	cursor_posn]   ; получить курсор
   4341	F24E  E8 FFB8			     call    m18	     ; установить позицию	       +
   4342				     курсора
   4343	F251  E9 FF73			     jmp     video_return
   4344	F254			     act_disp_page   endp
   4345				     ;------------------------------
   4346				     ; set color
   4347				     ;
   4348				     ;	 Эта	программа устанавливает цветовую	       +
   4349				     палитру.
   4350				     ;
   4351				     ;	 ВХОД
   4352				     ;		BH=0
   4353				     ;		     BL	- значение пяти младших бит,	       +
   4354				     используемых для выбора
   4355				     ;			  цветовой палитры (цвет заднего     +
   4356				     плана	для цветной
   4357				     ;			  графики 320х200 или цвет каймы для    +
   4358				     цветного 40х25)
   4359				     ;		BH=1
   4360				     ;		     BL	- номер цветовой палитры
   4361				     ;			  BL=0 - зеленый(1), красный(2), желтый(3),
   4362				     ;			  BL=1 - голубой(1), фиолетовый(2), белый+
   4363				     (3)
   4364				     ;
   4365				     ;	 ВЫХОД
   4366				     ;		Установленная цветовая палитра в	       +
   4367				     порту	3D9.
   4368				     ;------------------------------
   4369	F254			     set_color proc  near
   4370	F254  8B 16 0063r		     mov     dx,addr_6845    ; порт	для палитры
   4371	F258  83 C2 05			     add     dx,5	     ; установить порт
   4372	F25B  A0 0066r			     mov     al,crt_pallette   ; получить текущее	       +
   4373				     значение палитры
   4374	F25E  0A FF			     or	     bh,bh	     ; цвет	0 ?
   4375	F260  75 0E			     jnz     m20	     ; вывод цвета 1
   4376
   4377				     ;	 Обработка цветовой палитры 0
   4378
   4379	F262  24 E0			     and     al,0e0h	     ; сбросить	5 младших бит
   4380	F264  80 E3 1F			     and     bl,01fh	     ; сбросить	3 старших бита
   4381	F267  0A C3			     or	     al,bl
   4382	F269			     m19:
   4383	F269  EE			     out     dx,al	      ;	вывод выбранного	цвета в  +
   4384				     порт 3D9
   4385	F26A  A2 0066r			     mov     crt_pallette,al  ;	сохранить значение цвета
   4386	F26D  E9 FF57			     jmp     video_return
   4387
   4388				     ;	 Обработка цветовой палитры 1
   4389
   4390	F270			     m20:
   4391	F270  24 DF			     and     al,0dfh	     ;
   4392	F272  D0 EB			     shr     bl,1	     ; проверить младший бит	BL
   4393	F274  73 F3			     jnc     m19
   4394	F276  0C 20			     or	     al,20h	     ;
   4395	F278  EB EF			     jmp     short m19	     ; переход
   4396	F27A			     set_color	     endp
   4397				     ;--------------------------
   4398				     ; video state
   4399				     ;
   4400				     ;	 Эта	программа получает текущее состояние  +
   4401				     ЭЛИ в AX.
   4402				     ;
   4403				     ;		AH - количество колонок,
   4404				     ;		AL - текущий режим,
   4405				     ;		BH - номер	активной страницы.
   4406				     ;
   4407				     ;---------------------------
   4408	F27A			     video_state proc	     near
   4409	F27A  8A 26 004Ar		     mov     ah,byte ptr crt_cols   ; получить количество    +
   4410				     колонок
   4411	F27E  A0 0049r			     mov     al,crt_mode	     ; текущий режим
   4412	F281  8A 3E 0062r		     mov     bh,active_page  ; получить	текущую активную+
   4413				     страницу
   4414	F285  5F			     pop     di		     ; восстановить	регистры
   4415	F286  5E			     pop     si
   4416	F287  59			     pop     cx
   4417	F288  E9 FF3F			     jmp     m15	     ; возврат к программе
   4418	F28B			     video_state     endp
   4419				     ;---------------------------
   4420				     ; position
   4421				     ;
   4422				     ;	 Эта	программа вычисляет адрес буфера	       +
   4423				     символа в режиме альфа.
   4424				     ;
   4425				     ;	 ВХОД
   4426				     ;		AX - номер	строки, номер колонки,
   4427				     ;
   4428				     ;	 ВЫХОД
   4429				     ;		AX - смещение символа с	координатами (AH,  +
   4430				     AL) относительно
   4431				     ;		     начала страницы. Смещение		       +
   4432				     измеряется в байтах.
   4433				     ;
   4434				     ;----------------------------
   4435	F28B			     position proc   near
   4436	F28B  53			     push    bx		     ; сохранить регистр
   4437	F28C  8B D8			     mov     bx,ax
   4438	F28E  8A C4			     mov     al,ah	     ; строки в AL
   4439	F290  F6 26 004Ar		     mul     byte ptr crt_cols
   4440	F294  32 FF			     xor     bh,bh
   4441	F296  03 C3			     add     ax,bx	     ; добавить	к значению	       +
   4442				     колонки
   4443	F298  D1 E0			     sal     ax,1	     ; * 2 для байтов атрибута
   4444	F29A  5B			     pop     bx
   4445	F29B  C3			     ret
   4446	F29C			     position	     endp
   4447				     ;-------------------------------
   4448				     ;scroll up
   4449				     ;
   4450				     ;	 Эта	программа перемещает	блок символов      +
   4451				     вверх	по экрану.
   4452				     ;
   4453				     ;	 ВХОД
   4454				     ;		AH - текуший режим,
   4455				     ;		AL - количество перемещаемых строк
   4456				     ;		CX - координаты левого верхнего	угла       +
   4457				     блока
   4458				     ;		     (строка, колонка),
   4459				     ;		DX - координаты правого нижнего	угла
   4460				     ;		BH - атрибут символа пробела (для	       +
   4461				     опробеливания	освобожда-
   4462				     ;		     емых строк),
   4463				     ;
   4464				     ;	 ВЫХОД
   4465				     ;		Модифицированный буфер дисплея.
   4466				     ;
   4467				     ;-----------------------------------
   4468					     assume cs:code,ds:data,es:data
   4469	F29C			     scroll_up proc  near
   4470	F29C  8A D8			     mov     bl,al	 ; сохранить количество	       +
   4471				     перемещаемых строк
   4472	F29E  80 FC 04			     cmp     ah,4	     ; проверка	графического       +
   4473				     режима
   4474	F2A1  72 08			     jc	     n1
   4475	F2A3  80 FC 07			     cmp     ah,7	     ; проверка	ч/б адаптера
   4476	F2A6  74 03			     je	     n1
   4477	F2A8  E9 01F3			     jmp     graphics_up
   4478	F2AB			     n1:
   4479	F2AB  53			     push    bx		     ; сохранить полный атрибут  +
   4480				     в	BH
   4481	F2AC  8B C1			     mov     ax,cx	     ; координаты левого	       +
   4482				     верхнего угла
   4483	F2AE  E8 0039			     call    scroll_position
   4484	F2B1  74 33			     jz	     n7
   4485	F2B3  03 F0			     add     si,ax
   4486	F2B5  8A E6			     mov     ah,dh	     ; строка
   4487	F2B7  2A E3			     sub     ah,bl
   4488	F2B9			     n2:
   4489	F2B9  E8 0075			     call    n10	     ; сдвинуть	одну строку
   4490	F2BC  03 F5			     add     si,bp
   4491	F2BE  03 FD			     add     di,bp	     ; указать на следующую	       +
   4492				     строку в блоке
   4493	F2C0  FE CC			     dec     ah		     ; счетчик строк для	сдвига
   4494	F2C2  75 F5			     jnz     n2		     ; цикл	строки
   4495	F2C4			     n3:			     ; очистка входа
   4496	F2C4  58			     pop     ax		     ; восстановить	атрибут в AH
   4497	F2C5  B0 20			     mov     al,' '	     ; заполнить пробелами
   4498	F2C7			     n4:			     ; очистка счетчика
   4499	F2C7  E8 0070			     call    n11	     ; очистка строки
   4500	F2CA  03 FD			     add     di,bp	     ; указать следующую строку
   4501	F2CC  FE CB			     dec     bl		     ; счетчик строк для	сдвига
   4502	F2CE  75 F7			     jnz     n4		     ; очистка счетчика
   4503	F2D0			     n5:			     ; конец сдвига
   4504	F2D0  B8 0040			     mov     ax,dat
   4505	F2D3  8E D8			     mov     ds,ax
   4506	F2D5  80 3E 0049r 07		     cmp     crt_mode,7	     ; ч/б адаптер ?
   4507	F2DA  74 07			     je	     n6		     ; если	да - пропуск режима     +
   4508				     сброса
   4509	F2DC  A0 0065r			     mov     al,crt_mode_set
   4510	F2DF  BA 03D8			     mov     dx,03d8h	     ; установить порт цветного  +
   4511				     адаптера
   4512	F2E2  EE			     out     dx,al
   4513	F2E3			     n6:
   4514	F2E3  E9 FEE1			     jmp     video_return
   4515	F2E6			     n7:
   4516	F2E6  8A DE			     mov     bl,dh
   4517	F2E8  EB DA			     jmp     short n3	     ; очистить
   4518	F2EA			     scroll_up	     endp
   4519
   4520				     ;	 Обработка сдвига
   4521
   4522	F2EA			     scroll_position proc    near
   4523	F2EA  80 3E 0049r 02		     cmp     crt_mode,2
   4524	F2EF  72 19			     jb	     n9		     ; обработать 80х25 отдельно
   4525	F2F1  80 3E 0049r 03		     cmp     crt_mode,3
   4526	F2F6  77 12			     ja	     n9
   4527
   4528				     ;	 Сдиг для цветного адаптера в режиме 80х25
   4529
   4530	F2F8  52			     push    dx
   4531	F2F9  BA 03DA			     mov     dx,3dah	     ; обработка цветного	       +
   4532				     адаптера
   4533	F2FC  50			     push    ax
   4534	F2FD			     n8:			     ; ожидание	доступности	       +
   4535				     дисплея
   4536	F2FD  EC			     in	     al,dx
   4537	F2FE  A8 08			     test    al,8
   4538	F300  74 FB			     jz	     n8		     ; ожидание	доступности	       +
   4539				     дисплея
   4540	F302  B0 25			     mov     al,25h
   4541	F304  BA 03D8			     mov     dx,03d8h
   4542	F307  EE			     out     dx,al	     ; выключить ЭЛИ
   4543	F308  58			     pop     ax
   4544	F309  5A			     pop     dx
   4545	F30A  E8 FF7E		     n9:     call    position
   4546	F30D  03 06 004Er		     add     ax,crt_start    ; смещение	активной	       +
   4547				     страницы
   4548	F311  8B F8			     mov     di,ax	     ; для адреса сдвига
   4549	F313  8B F0			     mov     si,ax
   4550	F315  2B D1			     sub     dx,cx	     ; DX=строка
   4551	F317  FE C6			     inc     dh
   4552	F319  FE C2			     inc     dl		     ; прибавление к началу
   4553	F31B  32 ED			     xor     ch,ch	     ; установить старший байт    +
   4554				     счетчика в 0
   4555	F31D  8B 2E 004Ar		     mov     bp,crt_cols     ; получить	число колонок      +
   4556				     дисплея
   4557	F321  03 ED			     add     bp,bp	     ; увеличить на 2 байт	       +
   4558				     атрибута
   4559	F323  8A C3			     mov     al,bl	     ; получить	счетчик строки
   4560	F325  F6 26 004Ar		     mul     byte ptr crt_cols	 ; определить	смещение из  +
   4561				     адреса,
   4562	F329  03 C0			     add     ax,ax     ; умноженного	на 2,	для байта      +
   4563				     атрибута
   4564	F32B  06			     push    es	     ; установить адресацию для	       +
   4565				     области буфера
   4566	F32C  1F			     pop     ds
   4567	F32D  80 FB 00			     cmp     bl,0	     ; 0 означает очистку блока
   4568	F330  C3			     ret		     ; возврат с установкой	       +
   4569				     флажков
   4570	F331			     scroll_position endp
   4571
   4572				     ;	 Перемещение	строки
   4573
   4574	F331			     n10     proc    near
   4575	F331  8A CA			     mov     cl,dl	     ; получить	колонки для	       +
   4576				     передачи
   4577	F333  56			     push    si
   4578	F334  57			     push    di		     ; сохранить начальный адрес
   4579	F335  F3> A5			     rep     movsw	     ; передать	эту строку на       +
   4580				     экран
   4581	F337  5F			     pop     di
   4582	F338  5E			     pop     si		     ; восстановить	адресацию
   4583	F339  C3			     ret
   4584	F33A			     n10     endp
   4585
   4586				     ;	 очистка	строки
   4587
   4588	F33A			     n11     proc    near
   4589	F33A  8A CA			     mov     cl,dl	     ; получить	колонки для	       +
   4590				     очистки
   4591	F33C  57			     push    di
   4592	F33D  F3> AB			     rep     stosw	     ; запомнить полный знак
   4593	F33F  5F			     pop     di
   4594	F340  C3			     ret
   4595	F341			     n11     endp
   4596				     ;------------------------
   4597				     ; scroll_down
   4598				     ;
   4599				     ;	 Эта	программа перемещает	блок символов      +
   4600				     вниз по
   4601				     ; экрану, заполняя верхние строки пробелом с  +
   4602				     заданным атрибутом
   4603				     ;
   4604				     ;	 ВХОД
   4605				     ;		AH - текущий режим,
   4606				     ;		AL - количество строк,
   4607				     ;		CX - верхний левый угол	блока,
   4608				     ;		DX - правый нижний угол	блока,
   4609				     ;		BH - атрибут символа-заполнителя	       +
   4610				     (пробела),
   4611				     ;
   4612				     ;-------------------------
   4613	F341			     scroll_down proc near
   4614	F341  FD			     std		     ; уст направление сдвига      +
   4615				     вниз
   4616	F342  8A D8			     mov     bl,al	     ; количество строк в BL
   4617	F344  80 FC 04			     cmp     ah,4	     ; проверка	графики
   4618	F347  72 08			     jc	     n12
   4619	F349  80 FC 07			     cmp     ah,7	     ; проверка	ч/б адаптера
   4620	F34C  74 03			     je	     n12
   4621	F34E  E9 01A6			     jmp     graphics_down
   4622	F351			     n12:
   4623	F351  53			     push    bx		     ; сохранить атрибут в BH
   4624	F352  8B C2			     mov     ax,dx	     ; нижний правый угол
   4625	F354  E8 FF93			     call    scroll_position
   4626	F357  74 20			     jz	     n16
   4627	F359  2B F0			     sub     si,ax	     ; SI для адресации
   4628	F35B  8A E6			     mov     ah,dh
   4629	F35D  2A E3			     sub     ah,bl	     ; передать	количество строк
   4630	F35F			     n13:
   4631	F35F  E8 FFCF			     call    n10	     ; передать	одну строку
   4632	F362  2B F5			     sub     si,bp
   4633	F364  2B FD			     sub     di,bp
   4634	F366  FE CC			     dec     ah
   4635	F368  75 F5			     jnz     n13
   4636	F36A			     n14:
   4637	F36A  58			     pop     ax		     ; восстановить	атрибут в AH
   4638	F36B  B0 20			     mov     al,' '
   4639	F36D			     n15:
   4640	F36D  E8 FFCA			     call    n11	     ; очистка одной строки
   4641	F370  2B FD			     sub     di,bp	     ; перейти к следующей строке
   4642	F372  FE CB			     dec     bl
   4643	F374  75 F7			     jnz     n15
   4644	F376  E9 FF57			     jmp     n5		     ; конец сдвига
   4645	F379			     n16:
   4646	F379  8A DE			     mov     bl,dh
   4647	F37B  EB ED			     jmp     short n14
   4648	F37D			     scroll_down  endp
   4649				     ;--------------------
   4650				     ; read_ac_current
   4651				     ;
   4652				     ;	 Эта	программа считывает атрибут и	код	       +
   4653				     символа, находящегося в теку-
   4654				     ; щем положении курсора
   4655				     ;
   4656				     ;	 ВХОД
   4657				     ;		AH - текущий режим,
   4658				     ;		BH - номер	страницы (только для режима     +
   4659				     альфа),
   4660				     ;
   4661				     ;	 ВЫХОД
   4662				     ;		AL - код символа,
   4663				     ;		AH - атрибут символа.
   4664				     ;
   4665				     ;---------------------
   4666					     assume cs:code,ds:data,es:data
   4667	F37D			     read_ac_current proc near
   4668	F37D  80 FC 04			     cmp     ah,4	     ; это графика ?
   4669	F380  72 08			     jc	     p1
   4670	F382  80 FC 07			     cmp     ah,7	     ; ч/б адаптер ?
   4671	F385  74 03			     je	     p1
   4672	F387  E9 02A9			     jmp     graphics_read
   4673	F38A			     p1:			     ;
   4674	F38A  E8 001A			     call    find_position
   4675	F38D  8B F3			     mov     si,bx	     ; установить адресацию в SI
   4676
   4677
   4678	F38F  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес
   4679	F393  83 C2 06			     add     dx,6	     ; порт	состояния
   4680	F396  06			     push    es
   4681	F397  1F			     pop     ds		     ; получить	сегмент
   4682	F398			     p2:
   4683	F398  EC			     in	     al,dx	     ; получить	состояние
   4684	F399  A8 01			     test    al,1
   4685	F39B  75 FB			     jnz     p2		     ; ожидание
   4686	F39D  FA			     cli		; сброс признака разрешения     +
   4687				     прерывания
   4688	F39E			     p3:
   4689	F39E  EC			     in	     al,dx	     ; получить	состояние
   4690	F39F  A8 01			     test    al,1
   4691	F3A1  74 FB			     jz	     p3		     ; ожидание
   4692	F3A3  AD			     lodsw		     ; получить	символ/атрибут
   4693	F3A4  E9 FE20			     jmp     video_return
   4694	F3A7			     read_ac_current endp
   4695
   4696	F3A7			     find_position proc	near
   4697	F3A7  8A CF			     mov     cl,bh	     ; поместить страницу в CX
   4698	F3A9  32 ED			     xor     ch,ch
   4699	F3AB  8B F1			     mov     si,cx	     ; передать	в SI индекс,	       +
   4700				     умноженный на 2
   4701	F3AD  D1 E6			     sal     si,1	     ; для слова смещения
   4702	F3AF  8B 84 0050r		     mov ax,word ptr [si+offset	cursor_posn]   ; получить	       +
   4703				     строку/ко-
   4704								     ; лонку этой страницы
   4705	F3B3  33 DB			     xor     bx,bx	     ; установить начальный	       +
   4706				     адрес	в 0
   4707	F3B5  E3 06			     jcxz    p5
   4708	F3B7			     p4:
   4709	F3B7  03 1E 004Cr		     add     bx,crt_len	     ; длина буфера
   4710	F3BB  E2 FA			     loop    p4
   4711	F3BD			     p5:
   4712	F3BD  E8 FECB			     call    position
   4713	F3C0  03 D8			     add     bx,ax
   4714	F3C2  C3			     ret
   4715	F3C3			     find_position   endp
   4716				     ;---------------------
   4717				     ;write_ac_current
   4718				     ;
   4719				     ;	 Эта	программа записывает	атрибут и код       +
   4720				     символа в текущую позицию
   4721				     ; курсора
   4722				     ;
   4723				     ;	 ВХОД
   4724				     ;		AH - текущий режим,
   4725				     ;		BH - номер	страницы,
   4726				     ;		CX - счетчик (количество повторений	       +
   4727				     символов),
   4728				     ;		AL - код символа,
   4729				     ;		BL - атрибут символа (для режимов альфа)  +
   4730				     или цвет символа
   4731				     ;		     для графики.
   4732				     ;
   4733				     ;----------------------
   4734	F3C3			     write_ac_current proc near
   4735	F3C3  80 FC 04			     cmp     ah,4	     ; это графика ?
   4736	F3C6  72 08			     jc	     p6
   4737	F3C8  80 FC 07			     cmp     ah,7	     ; это ч/б адаптер ?
   4738	F3CB  74 03			     je	     p6
   4739	F3CD  E9 01B1			     jmp     graphics_write
   4740	F3D0			     p6:
   4741	F3D0  8A E3			     mov     ah,bl	     ; получить	атрибут в AH
   4742	F3D2  50			     push    ax		     ; хранить
   4743	F3D3  51			     push    cx		     ; хранить счетчик
   4744	F3D4  E8 FFD0			     call    find_position
   4745	F3D7  8B FB			     mov     di,bx	     ; адрес в DI
   4746	F3D9  59			     pop     cx		     ; вернуть счетчик
   4747	F3DA  5B			     pop     bx		     ; и символ
   4748	F3DB			     p7:			     ; цикл	записи
   4749
   4750
   4751	F3DB  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес
   4752	F3DF  83 C2 06			     add     dx,6	     ; указать порт состояния
   4753	F3E2			     p8:
   4754	F3E2  EC			     in	     al,dx	     ; получить	состояние
   4755	F3E3  A8 01			     test    al,1
   4756	F3E5  75 FB			     jnz     p8		     ; ожидать
   4757	F3E7  FA			     cli		  ; сброс признака	разрешения   +
   4758				     прерывания
   4759	F3E8			     p9:
   4760	F3E8  EC			     in	     al,dx	     ; получить	состояние
   4761	F3E9  A8 01			     test    al,1
   4762	F3EB  74 FB			     jz	     p9		     ; ожидать
   4763	F3ED  8B C3			     mov     ax,bx
   4764	F3EF  AB			     stosw		     ; записать	символ и	атрибут
   4765	F3F0  FB			     sti		     ; уст признак разрешения      +
   4766				     прерывания
   4767	F3F1  E2 E8			     loop    p7
   4768	F3F3  E9 FDD1			     jmp     video_return
   4769	F3F6			     write_ac_current  endp
   4770				     ;---------------------
   4771				     ;write_c_current
   4772				     ;
   4773				     ;	 Эта	программа записывает	символ в	текущую +
   4774				     позицию курсора.
   4775				     ;
   4776				     ;	 ВХОД
   4777				     ;		BH - номер	страницы (только для альфа       +
   4778				     режимов),
   4779				     ;		CX - счетчик (количество повторений	       +
   4780				     символа),
   4781				     ;		AL - код символа,
   4782				     ;
   4783				     ;-----------------------
   4784	F3F6			     write_c_current proc near
   4785	F3F6  80 FC 04			     cmp     ah,4	     ; это графика ?
   4786	F3F9  72 08			     jc	     p10
   4787	F3FB  80 FC 07			     cmp     ah,7	     ; это ч/б адаптер ?
   4788	F3FE  74 03			     je	     p10
   4789	F400  E9 017E			     jmp     graphics_write
   4790	F403			     p10:
   4791	F403  50			     push    ax		     ; сохранить в стеке
   4792	F404  51			     push    cx		     ; сохранить количество	       +
   4793				     повторений
   4794	F405  E8 FF9F			     call    find_position
   4795	F408  8B FB			     mov     di,bx	     ; адрес в DI
   4796	F40A  59			     pop     cx		     ; вернуть количество	       +
   4797				     повторений
   4798	F40B  5B			     pop     bx		     ; BL - код символа
   4799	F40C			     p11:
   4800
   4801
   4802	F40C  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес
   4803	F410  83 C2 06			     add     dx,6	     ; указать порт состояния
   4804	F413			     p12:
   4805	F413  EC			     in	     al,dx	     ; получить	состояние
   4806	F414  A8 01			     test    al,1
   4807	F416  75 FB			     jnz     p12	     ; ожидать
   4808	F418  FA			     cli		     ; сброс признака разрешения+
   4809				     прерывания
   4810	F419			     p13:
   4811	F419  EC			     in	     al,dx	     ; получить	состояние
   4812	F41A  A8 01			     test    al,1
   4813	F41C  74 FB			     jz	     p13	     ; ожидание
   4814	F41E  8A C3			     mov     al,bl	     ; восстановить	символ
   4815	F420  AA			     stosb		     ; записать	символ
   4816	F421  47			     inc     di
   4817	F422  E2 E8			     loop    p11	     ; цикл
   4818	F424  E9 FDA0			     jmp     video_return
   4819	F427			     write_c_current endp
   4820				     ;---------------------
   4821				     ; read dot	- write	dot
   4822				     ;
   4823				     ;	 Эта	программа считывает/записывает точку.
   4824				     ;
   4825				     ;	 ВХОД
   4826				     ;		DX - строка (0-199),
   4827				     ;		CX - колонка (0-639),
   4828				     ;		AL - цвет выводимой точки.
   4829				     ;		     Если бит 7=1, то выполняется операция
   4830				     ;		     XOR над	значением точки из буфера	       +
   4831				     дисплея и значением
   4832				     ;		     точки	из регистра AL (при записи	       +
   4833				     точки).
   4834				     ;
   4835				     ;	 ВЫХОД
   4836				     ;		AL - значение считанной точки
   4837				     ;
   4838				     ;----------------------
   4839					     assume cs:code,ds:data,es:data
   4840	F427			     read_dot proc   near
   4841	F427  E8 0031			     call    r3		     ; определить положение	       +
   4842				     точки
   4843	F42A  26: 8A 04			     mov     al,es:[si]	     ; получить	байт
   4844	F42D  22 C4			     and     al,ah	     ; размаскировать другие       +
   4845				     биты в байте
   4846	F42F  D2 E0			     shl     al,cl	     ;
   4847	F431  8A CE			     mov     cl,dh	     ; получить	число бит	       +
   4848				     результата
   4849	F433  D2 C0			     rol     al,cl
   4850	F435  E9 FD8F			     jmp     video_return    ; выход из прерывания
   4851	F438			     read_dot	     endp
   4852
   4853	F438			     write_dot proc  near
   4854	F438  50			     push    ax		     ; сохранить значение точки
   4855	F439  50			     push    ax		     ; еще раз
   4856	F43A  E8 001E			     call    r3		     ; определить положение	       +
   4857				     точки
   4858	F43D  D2 E8			     shr     al,cl	     ; сдвиг для установки бит     +
   4859				     при выводе
   4860	F43F  22 C4			     and     al,ah	     ; сбросить	другие биты
   4861	F441  26: 8A 0C			     mov     cl,es:[si]	     ; получить	текущий байт
   4862	F444  5B			     pop     bx
   4863	F445  F6 C3 80			     test    bl,80h
   4864	F448  75 0D			     jnz     r2
   4865	F44A  F6 D4			     not     ah	       ; установить маску для		       +
   4866				     передачи указанных бит
   4867	F44C  22 CC			     and     cl,ah
   4868	F44E  0A C1			     or	     al,cl
   4869	F450			     r1:
   4870	F450  26: 88 04			     mov es:[si],al	     ; восстановить	байт в памяти
   4871	F453  58			     pop     ax
   4872	F454  E9 FD70			     jmp     video_return    ; к выходу из программы
   4873	F457			     r2:
   4874	F457  32 C1			     xor     al,cl	     ; исключающее ИЛИ над	       +
   4875				     значениями точки
   4876	F459  EB F5			     jmp     short r1	     ; конец записи
   4877	F45B			     write_dot	     endp
   4878
   4879				     ;-------------------------------------
   4880				     ;
   4881				     ;	 Эта	программа определяет	относительный     +
   4882				     адрес	байта (внутри буфера
   4883				     ; дисплея),	из которого должна быть		       +
   4884				     считана/записана точка,с заданными
   4885				     ; координатами.
   4886				     ;
   4887				     ;	 ВХОД
   4888				     ;		DX - строка (0-199),
   4889				     ;		CX - колонка (0-639).
   4890				     ;
   4891				     ;	 ВЫХОД
   4892				     ;		SI - относительный	адрес байта,		       +
   4893				     содержащего точку внутри
   4894				     ;		     буфера дисплея,
   4895				     ;		AH - маска	для выделения значения	       +
   4896				     заданной точки внутри байта
   4897				     ;		CL - константа	сдвига маски	в AH в крайнюю+
   4898				     левую	позицию,
   4899				     ;		DH - число	бит,	определяющих значение      +
   4900				     точки.
   4901				     ;
   4902				     ;--------------------------------------
   4903
   4904	F45B			     r3	     proc    near
   4905	F45B  53			     push    bx		     ; сохранить BX
   4906	F45C  50			     push    ax		     ; сохранить AL
   4907
   4908				     ;	 Вычисление первого байта	указанной строки+
   4909				     умножением на 40.
   4910				     ; Наименьший бит строки	определяет		       +
   4911				     четно/нечетную 80-байтовую строку.
   4912
   4913	F45D  B0 28			     mov     al,40
   4914	F45F  52			     push    dx		     ; сохранить значение строки
   4915	F460  80 E2 FE			     and     dl,0feh	     ; сброс четно/нечетного	бита
   4916	F463  F6 E2			     mul     dl	  ; AX содержит	адрес первого байта   +
   4917				     указанной	строки
   4918	F465  5A			     pop     dx		     ; восстановить	его
   4919	F466  F6 C2 01			     test    dl,1	     ; проверить			       +
   4920				     четность/нечетность
   4921	F469  74 03			     jz	     r4		     ; переход,если строка четная
   4922	F46B  05 2000			     add     ax,2000h	     ; смещение	для нахождения    +
   4923				     нечетных строк
   4924	F46E			     r4:			     ; четная строка
   4925	F46E  8B F0			     mov     si,ax	     ; передать	указатель в SI
   4926	F470  58			     pop     ax		     ; восстановить	значение AL
   4927	F471  8B D1			     mov     dx,cx	     ; значение	колонки в DX
   4928
   4929				     ;	 Определение	действительных графических    +
   4930				     режимов
   4931				     ;
   4932				     ;	 Установка регистров согласно	режимaм
   4933				     ;
   4934				     ;	       BH - количество бит, определяющее точку,
   4935				     ;	       BL - константа выделения точки из левых   +
   4936				     бит байта,
   4937				     ;	       CH - константа для выделения из номера     +
   4938				     колонки номера позиции
   4939				     ;		    первого бита, определяющего	точку в  +
   4940				     байте, т.е.	получение
   4941				     ;		    остатка от	деления номера на 8 (для     +
   4942				     режима 640х200) или
   4943				     ;		    номера на 4	(для	режима 320х200),
   4944				     ;	       CL - константа сдвига (для выполнения       +
   4945				     деления на 8 или на 4).
   4946
   4947	F473  BB 02C0			     mov     bx,2c0h
   4948	F476  B9 0302			     mov     cx,302h	     ; установка параметров
   4949	F479  80 3E 0049r 06		     cmp     crt_mode,6
   4950	F47E  72 06			     jc	     r5		     ;
   4951	F480  BB 0180			     mov     bx,180h
   4952	F483  B9 0703			     mov     cx,703h	     ; уст параметры для		       +
   4953				     старшего регистра
   4954
   4955				     ;	 Определение	бита смещения в байте	по маске
   4956	F486			     r5:
   4957	F486  22 EA			     and     ch,dl	     ;
   4958
   4959				     ;	 Определение	байта смещения в колонке
   4960
   4961	F488  D3 EA			     shr     dx,cl	     ; сдвиг для коррекции
   4962	F48A  03 F2			     add     si,dx	     ; получить	указатель
   4963	F48C  8A F7			     mov     dh,bh   ; получить	указатель битов	       +
   4964				     результата в DH
   4965
   4966				     ;	 Умножение BH (количество бит в байте) на	CH     +
   4967				     (бит смещения)
   4968
   4969	F48E  2A C9			     sub     cl,cl
   4970	F490			     r6:
   4971	F490  D0 C8			     ror     al,1    ; левое крайнее значение в AL	для +
   4972				     записи
   4973	F492  02 CD			     add     cl,ch	     ; прибавить значение бита    +
   4974				     смещения
   4975	F494  FE CF			     dec     bh		     ; счетчик контроля
   4976	F496  75 F8			     jnz     r6	     ; на выходе CL содержит счетчик    +
   4977				     сдвига для
   4978								     ; восстановления
   4979	F498  8A E3			     mov     ah,bl	     ; получить	маску в AH
   4980	F49A  D2 EC			     shr     ah,cl	     ; передать	маску в ячейку
   4981	F49C  5B			     pop     bx		     ; восстановить	регистр
   4982	F49D  C3			     ret		     ; возврат с восстановлением
   4983	F49E			     r3	     endp
   4984
   4985				     ;----------------------------------------
   4986				     ;
   4987				     ;
   4988				     ;	  Программа перемещает блок символов вверх +
   4989				     в	режиме графики
   4990				     ;
   4991				     ;-----------------------------------------
   4992
   4993	F49E			     graphics_up proc near
   4994	F49E  8A D8			     mov     bl,al	     ; сохранить количество	       +
   4995				     символов
   4996	F4A0  8B C1			     mov     ax,cx	     ; получить	верхний левый      +
   4997				     угол в AX
   4998
   4999
   5000	F4A2  E8 026A			     call    graph_posn
   5001	F4A5  8B F8			     mov     di,ax	     ; сохранить результат
   5002
   5003				     ;	 Определить размеры блока
   5004
   5005	F4A7  2B D1			     sub     dx,cx
   5006	F4A9  81 C2 0101		     add     dx,101h
   5007	F4AD  D0 E6			     sal     dh,1
   5008	F4AF  D0 E6			     sal     dh,1
   5009
   5010	F4B1  80 3E 0049r 06		     cmp     crt_mode,6
   5011	F4B6  73 04			     jnc     r7
   5012
   5013	F4B8  D0 E2			     sal     dl,1
   5014	F4BA  D1 E7			     sal     di,1	     ;
   5015
   5016				     ;	 Определение	адреса источника	в буфере
   5017	F4BC			     r7:
   5018	F4BC  06			     push    es
   5019	F4BD  1F			     pop     ds
   5020	F4BE  2A ED			     sub     ch,ch	     ; обнулить	старший байт	       +
   5021				     счетчика
   5022	F4C0  D0 E3			     sal     bl,1	     ; умножение числа строк	на 4
   5023	F4C2  D0 E3			     sal     bl,1
   5024	F4C4  74 2D			     jz	     r11	     ; если	0, занести пробелы
   5025	F4C6  8A C3			     mov     al,bl	     ; получить	число строк в AL
   5026	F4C8  B4 50			     mov     ah,80	     ; 80 байт/строк
   5027	F4CA  F6 E4			     mul     ah		     ; определить смещение	       +
   5028				     источника
   5029	F4CC  8B F7			     mov     si,di	     ; установить источник
   5030	F4CE  03 F0			     add     si,ax	     ; сложить источник с ним
   5031	F4D0  8A E6			     mov     ah,dh	     ; количество строк
   5032	F4D2  2A E3			     sub     ah,bl	     ; определить число		       +
   5033				     перемещений
   5034
   5035	F4D4			     r8:
   5036	F4D4  E8 0080			     call    r17	     ; перемещение одной строки
   5037	F4D7  81 EE 1FB0		     sub     si,2000h-80     ; перемещение в следующую    +
   5038				     строку
   5039	F4DB  81 EF 1FB0		     sub     di,2000h-80
   5040	F4DF  FE CC			     dec     ah		     ; количество строк для	       +
   5041				     перемещения
   5042	F4E1  75 F1			     jnz     r8	     ; продолжать, пока все строки не +
   5043				     переместятся
   5044
   5045				     ;	 Заполнение освобожденных строк
   5046	F4E3			     r9:
   5047	F4E3  8A C7			     mov     al,bh
   5048	F4E5			     r10:
   5049	F4E5  E8 0088			     call    r18	     ; очистить	эту строку
   5050	F4E8  81 EF 1FB0		     sub     di,2000h-80     ; указать на следующую
   5051	F4EC  FE CB			     dec     bl		     ; количество строк для	       +
   5052				     заполнения
   5053	F4EE  75 F5			     jnz     r10	     ; цикл	очистки
   5054	F4F0  E9 FCD4			     jmp     video_return    ; к выходу из программы
   5055
   5056	F4F3			     r11:
   5057	F4F3  8A DE			     mov     bl,dh	     ; установить количество       +
   5058				     пробелов
   5059	F4F5  EB EC			     jmp     short r9	     ; очистить
   5060	F4F7			     graphics_up     endp
   5061
   5062				     ;---------------------------------
   5063				     ;
   5064				     ;	 Программа перемещает блок символов вниз в +
   5065				     режиме графики
   5066				     ;
   5067				     ;----------------------------------
   5068
   5069	F4F7			     graphics_down proc	     near
   5070	F4F7  FD			     std		     ; установить направление
   5071	F4F8  8A D8			     mov     bl,al	     ; сохранить количество	       +
   5072				     строк
   5073	F4FA  8B C2			     mov     ax,dx	     ; получить	нижнюю правую      +
   5074				     позицию в AX
   5075
   5076
   5077	F4FC  E8 0210			     call    graph_posn
   5078	F4FF  8B F8			     mov     di,ax	     ; сохранить результат
   5079
   5080				     ;	 Определение	размера блока
   5081
   5082	F501  2B D1			     sub     dx,cx
   5083	F503  81 C2 0101		     add     dx,101h
   5084	F507  D0 E6			     sal     dh,1
   5085	F509  D0 E6			     sal     dh,1
   5086
   5087
   5088	F50B  80 3E 0049r 06		     cmp     crt_mode,6
   5089	F510  73 05			     jnc     r12
   5090
   5091	F512  D0 E2			     sal     dl,1
   5092	F514  D1 E7			     sal     di,1
   5093	F516  47			     inc     di
   5094
   5095				     ;	 Определение	адреса источника	в буфере
   5096	F517			     r12:
   5097	F517  06			     push    es
   5098	F518  1F			     pop     ds
   5099	F519  2A ED			     sub     ch,ch	     ; обнулить	старший байт	       +
   5100				     счетчика
   5101	F51B  81 C7 00F0		     add     di,240	     ; указать последнюю строку
   5102	F51F  D0 E3			     sal     bl,1	     ; умножить	количество строк+
   5103				     на 4
   5104	F521  D0 E3			     sal     bl,1
   5105	F523  74 2E			     jz	     r16	     ; если	0, заполнить пробелом
   5106	F525  8A C3			     mov     al,bl	     ; получить	количество строк+
   5107				     в	AL
   5108	F527  B4 50			     mov     ah,80	     ; 80 байт/строк
   5109	F529  F6 E4			     mul     ah		     ; определить смещение	       +
   5110				     источника
   5111	F52B  8B F7			     mov     si,di	     ; установить источник
   5112	F52D  2B F0			     sub     si,ax	     ; вычесть смещение
   5113	F52F  8A E6			     mov     ah,dh	     ; количество строк
   5114	F531  2A E3			     sub     ah,bl	     ; определить число для	       +
   5115				     перемещения
   5116
   5117	F533			     r13:
   5118	F533  E8 0021			     call    r17	     ; переместить одну строку
   5119	F536  81 EE 2050		     sub     si,2000h+80     ; установить следующую	       +
   5120				     строку
   5121	F53A  81 EF 2050		     sub     di,2000h+80
   5122	F53E  FE CC			     dec     ah		     ; количество строк для	       +
   5123				     перемещения
   5124	F540  75 F1			     jnz     r13	     ; продолжать, пока все не      +
   5125				     переместятся
   5126
   5127				     ;	 Заполнение освобожденных строк
   5128	F542			     r14:
   5129	F542  8A C7			     mov     al,bh	     ; атрибут заполнения
   5130	F544			     r15:
   5131	F544  E8 0029			     call    r18	     ; очистить	строку
   5132	F547  81 EF 2050		     sub     di,2000h+80     ; указать следующую строку
   5133	F54B  FE CB			     dec     bl		     ; число строк для заполнения
   5134	F54D  75 F5			     jnz     r15
   5135	F54F  FC			     cld		     ; сброс признака		       +
   5136				     направления
   5137	F550  E9 FC74			     jmp     video_return    ; к выходу из программы
   5138
   5139	F553			     r16:
   5140	F553  8A DE			     mov     bl,dh
   5141	F555  EB EB			     jmp     short r14	     ; очистить
   5142	F557			     graphics_down endp
   5143
   5144				     ;	 Программа перемещения одной строки
   5145
   5146	F557			     r17     proc    near
   5147	F557  8A CA			     mov     cl,dl	     ; число байт в строке
   5148	F559  56			     push    si
   5149	F55A  57			     push    di		     ; хранить указатели
   5150	F55B  F3> A4			     rep     movsb	     ; переместить четное поле
   5151	F55D  5F			     pop     di
   5152	F55E  5E			     pop     si
   5153	F55F  81 C6 2000		     add     si,2000h
   5154	F563  81 C7 2000		     add     di,2000h	     ; указать нечетное поле
   5155	F567  56			     push    si
   5156	F568  57			     push    di		     ; сохранить указатели
   5157	F569  8A CA			     mov     cl,dl	     ; возврат счвтчика
   5158	F56B  F3> A4			     rep     movsb	     ; передать	нечетное поле
   5159	F56D  5F			     pop     di
   5160	F56E  5E			     pop     si		     ; возврат указателей
   5161	F56F  C3			     ret		     ; возврат к программе
   5162	F570			     r17     endp
   5163
   5164				     ;	 Заполнение пробелами строки
   5165
   5166	F570			     r18     proc    near
   5167	F570  8A CA			     mov     cl,dl	     ; число байт в поле
   5168	F572  57			     push    di		     ; хранить указатель
   5169	F573  F3> AA			     rep     stosb	     ; запомнить новое значение
   5170	F575  5F			     pop     di		     ; вернуть указатель
   5171	F576  81 C7 2000		     add     di,2000h	     ; указать нечетное поле
   5172	F57A  57			     push    di
   5173	F57B  8A CA			     mov     cl,dl
   5174	F57D  F3> AA			     rep     stosb	     ; заполнить нечетное поле
   5175	F57F  5F			     pop     di
   5176	F580  C3			     ret		     ; возврат к программе
   5177	F581			     r18     endp
   5178
   5179				     ;--------------------------------------
   5180				     ;
   5181				     ;	graphics_write
   5182				     ;
   5183				     ;	 Эта	программа записывает	символ в	режиме   +
   5184				     графики
   5185				     ;
   5186				     ;	 ВХОД
   5187				     ;		AL - код символа,
   5188				     ;		BL - атрибут цвета,	который используется+
   5189				     в	качестве цвета
   5190				     ;		     переднего	плана (цвет символа). Если +
   5191				     бит 7 BL=1, то
   5192				     ;		     выполняется операция XOR над	байтом в+
   5193				     буфере и байтом
   5194				     ;		     в	генераторе символов,
   5195				     ;		CX - счетчик повторений символа
   5196				     ;
   5197				     ;----------------------------------------
   5198
   5199					     assume cs:code,ds:data,es:data
   5200	F581			     graphics_write proc near
   5201	F581  B4 00			     mov     ah,0	     ; AH=0
   5202	F583  50			     push    ax		     ; сохранить значение кода    +
   5203				     символа
   5204
   5205				     ;	 Определение	позиции в области буфера	       +
   5206				     засылкой туда кода	точек
   5207
   5208	F584  E8 0185			     call    s26	     ; найти ячейку в области       +
   5209				     буфера
   5210	F587  8B F8			     mov     di,ax	     ; указатель области в DI
   5211
   5212				     ;	 Определение	области для получения кода      +
   5213				     точки
   5214
   5215	F589  58			     pop     ax		     ; восстановить	код точки
   5216	F58A  3C 80			     cmp     al,80h	     ; во второй половине ?
   5217	F58C  73 06			     jae     s1		     ; да
   5218
   5219				     ;	 Изображение	есть в первой половине памяти
   5220
   5221	F58E  BE FA6Er			     mov     si, offset	crt_char_gen  ;	смещение изображения
   5222	F591  0E			     push    cs		     ; хранить сегмент в	стеке
   5223	F592  EB 0F			     jmp     short s2	     ; определить режим
   5224
   5225				     ;	 Изображение	есть во второй части памяти
   5226
   5227	F594			     s1:
   5228	F594  2C 80			     sub     al,80h	     ; 0 во вторую половину
   5229	F596  1E			     push    ds		     ; хранить указатель данных
   5230	F597  2B F6			     sub     si,si
   5231	F599  8E DE			     mov     ds,si	     ; установить адресацию
   5232					     assume  ds:abs0
   5233	F59B  C5 36 007Cr		     lds     si,ext_ptr	     ; получить	смещение
   5234	F59F  8C DA			     mov     dx,ds	     ; получить	сегмент
   5235					     assume  ds:data
   5236	F5A1  1F			     pop     ds		     ; восстановить	сегмент	       +
   5237				     данных
   5238	F5A2  52			     push    dx		     ; хранить сегмент в	стеке
   5239
   5240				     ;	 Опеделение графического режима операции
   5241
   5242	F5A3			     s2:			     ; определение режима
   5243	F5A3  D1 E0			     sal     ax,1	     ; умножить	указатель кода    +
   5244				     на 8
   5245	F5A5  D1 E0			     sal     ax,1
   5246	F5A7  D1 E0			     sal     ax,1
   5247	F5A9  03 F0			     add     si,ax	     ; SI содержит смещение
   5248	F5AB  80 3E 0049r 06		     cmp     crt_mode,6
   5249	F5B0  1F			     pop     ds		     ; восстановить	указатель     +
   5250				     таблицы
   5251	F5B1  72 2C			     jc	     s7	     ; проверка	для средней		       +
   5252				     разрешающей способности
   5253
   5254				     ;	 Высокая	разрешающая способность
   5255	F5B3			     s3:
   5256	F5B3  57			     push    di		     ; сохранить указатель	       +
   5257				     области
   5258	F5B4  56			     push    si		     ; сохранить указатель кода
   5259	F5B5  B6 04			     mov     dh,4	     ; количество циклов
   5260	F5B7			     s4:
   5261	F5B7  AC			     lodsb		     ; выборка четного байта
   5262	F5B8  F6 C3 80			     test    bl,80h
   5263	F5BB  75 16			     jnz     s6
   5264	F5BD  AA			     stosb
   5265	F5BE  AC			     lodsb
   5266	F5BF			     s5:
   5267	F5BF  26: 88 85	1FFF		     mov es:[di+1fffh],al    ; запомнить во второй части
   5268	F5C4  83 C7 4F			     add     di,79	     ; передать	следующую строку
   5269	F5C7  FE CE			     dec     dh		     ; выполнить цикл
   5270	F5C9  75 EC			     jnz     s4
   5271	F5CB  5E			     pop     si
   5272	F5CC  5F			     pop     di		     ; восстановить	указатель     +
   5273				     области
   5274	F5CD  47			     inc     di	     ; указать на следующую позицию   +
   5275				     символа
   5276	F5CE  E2 E3			     loop    s3		     ; записать	последующие	       +
   5277				     символы
   5278	F5D0  E9 FBF4			     jmp     video_return
   5279
   5280	F5D3			     s6:
   5281	F5D3  26: 32 05			     xor al,es:[di]
   5282	F5D6  AA			     stosb		     ; запомнить код
   5283	F5D7  AC			     lodsb		     ; выборка нечетного символа
   5284	F5D8  26: 32 85	1FFF		     xor  al,es:[di+1fffh]
   5285	F5DD  EB E0			     jmp     s5		     ; повторить
   5286
   5287				     ;	 Средняя	разрешающая способность записи
   5288	F5DF			     s7:
   5289	F5DF  8A D3			     mov     dl,bl	     ; сохранить старший бит	       +
   5290				     цвета
   5291	F5E1  D1 E7			     sal     di,1    ; умножить	на 2,	т.к. два		       +
   5292				     байта/символа
   5293	F5E3  E8 00D1			     call    s19	     ; расширение BL до полного     +
   5294				     слова	цвета
   5295	F5E6			     s8:
   5296	F5E6  57			     push    di
   5297	F5E7  56			     push    si
   5298	F5E8  B6 04			     mov     dh,4	     ; число циклов
   5299	F5EA			     s9:
   5300	F5EA  AC			     lodsb		     ; получить	код точки
   5301	F5EB  E8 00DE			     call    s21	     ; продублировать
   5302	F5EE  23 C3			     and     ax,bx	     ; окрашивание в заданный      +
   5303				     цвет
   5304	F5F0  F6 C2 80			     test    dl,80h
   5305	F5F3  74 07			     jz	     s10
   5306	F5F5  26: 32 25			     xor     ah,es:[di]	     ; выполнить функцию XOR со      +
   5307				     "старым"
   5308	F5F8  26: 32 45	01		     xor     al,es:[di+1]    ; и "новым" цветами
   5309	F5FC  26: 88 25		     s10:    mov  es:[di],ah	     ; запомнить первый байт
   5310	F5FF  26: 88 45	01		     mov es:[di+1],al	     ; запомнить второй байт
   5311	F603  AC			     lodsb		     ; получить	код точки
   5312	F604  E8 00C5			     call    s21
   5313	F607  23 C3			     and     ax,bx	     ; окрашивание нечетного       +
   5314				     байта
   5315	F609  F6 C2 80			     test    dl,80h
   5316	F60C  74 0A			     jz	 s11
   5317	F60E  26: 32 A5	2000		     xor     ah,es:[di+2000h]	; из первой половины
   5318	F613  26: 32 85	2001		     xor     al,es:[di+2001h]	; и из второй половины
   5319	F618  26: 88 A5	2000	     s11:    mov     es:[di+2000h],ah
   5320	F61D  26: 88 85	2001		     mov     es:[di+2001h],al	; запомнить вторую часть   +
   5321				     буфера
   5322	F622  83 C7 50			     add     di,80	     ; указать следующую ячейку
   5323	F625  FE CE			     dec     dh
   5324	F627  75 C1			     jnz     s9		     ; повторить
   5325	F629  5E			     pop     si
   5326	F62A  5F			     pop     di
   5327	F62B  83 C7 02			     add     di,2	     ; переход к следующему	       +
   5328				     символу
   5329	F62E  E2 B6			     loop    s8		     ; режим записи
   5330	F630  E9 FB94			     jmp     video_return
   5331	F633			     graphics_write  endp
   5332				     ;-------------------------------------
   5333				     ;graphics_read
   5334				     ;
   5335				     ;	 Программа считывает символ в режиме	       +
   5336				     графики
   5337				     ;
   5338				     ;-------------------------------------
   5339	F633			     graphics_read   proc    near
   5340	F633  E8 00D6			     call    s26
   5341	F636  8B F0			     mov     si,ax	     ; сохранить в SI
   5342	F638  83 EC 08			     sub     sp,8	     ; зарезервировать в стеке 8  +
   5343				     байт для
   5344								     ; записи символа из	буфера   +
   5345				     дисплея
   5346	F63B  8B EC			     mov     bp,sp	     ; указатель для хранения      +
   5347				     области
   5348
   5349				     ;	 Определение	режима графики
   5350
   5351	F63D  80 3E 0049r 06		     cmp     crt_mode,6
   5352	F642  06			     push    es
   5353	F643  1F			     pop     ds		     ; указать сегмент
   5354	F644  72 1A			     jc	     s13	     ; средняя разрешающая	       +
   5355				     способность
   5356
   5357				     ;	Высокая разрешающая способность для	       +
   5358				     считавания
   5359
   5360	F646  B6 04			     mov     dh,4
   5361	F648			     s12:
   5362	F648  8A 04			     mov     al,byte ptr [si]	; получить первый	байт
   5363	F64A  88 46 00			     mov byte ptr [bp],al	; запомнить в	памяти
   5364	F64D  45			     inc     bp
   5365	F64E  8A 84 2000		     mov al,byte ptr [si+2000h]	  ; получить младший байт
   5366	F652  88 46 00			     mov byte ptr [bp],al
   5367	F655  45			     inc     bp
   5368	F656  83 C6 50			     add     si,80	     ; переход на следующую	       +
   5369				     четную строку
   5370	F659  FE CE			     dec     dh
   5371	F65B  75 EB			     jnz     s12	     ; повторить
   5372	F65D  EB 17			     jmp     short s15	     ; переход к хранению кодов   +
   5373				     точек
   5374	F65F  90			     nop
   5375
   5376				     ;	 Средняя	разрешающая способность для	       +
   5377				     считывания
   5378	F660			     s13:
   5379	F660  D1 E6			     sal     si,1      ; смещение умножить на	2, т.к. 2    +
   5380				     байта/символа
   5381	F662  B6 04			     mov     dh,4
   5382	F664			     s14:
   5383	F664  E8 0088			     call    s23
   5384	F667  81 C6 2000		     add     si,2000h
   5385	F66B  E8 0081			     call    s23
   5386	F66E  81 EE 1FB0		     sub     si,2000h-80
   5387	F672  FE CE			     dec     dh
   5388	F674  75 EE			     jnz     s14	     ; повторить
   5389
   5390				     ;	 Сохранить
   5391	F676			     s15:
   5392	F676  BF FA6Er			     mov     di,offset crt_char_gen   ;	смещение
   5393	F679  0E			     push    cs
   5394	F67A  07			     pop     es
   5395	F67B  83 ED 08			     sub     bp,8	     ; восстановить	начальный     +
   5396				     адрес
   5397	F67E  8B F5			     mov     si,bp
   5398	F680  FC			     cld		     ; установить направление
   5399	F681  B0 00			     mov     al,0
   5400	F683			     s16:
   5401	F683  16			     push    ss
   5402	F684  1F			     pop     ds
   5403	F685  BA 0080			     mov     dx,128	     ; количество символов
   5404	F688			     s17:
   5405	F688  56			     push    si
   5406	F689  57			     push    di
   5407	F68A  B9 0008			     mov     cx,8	     ; количество байт в	символе
   5408	F68D  F3> A6			     repe    cmpsb	     ; сравнить
   5409	F68F  5F			     pop     di
   5410	F690  5E			     pop     si
   5411	F691  74 1E			     jz	     s18	     ; если	признак = 0,символы      +
   5412				     сравнились
   5413	F693  FE C0			     inc     al		     ; не сравнились
   5414	F695  83 C7 08			     add     di,8	     ; следующий код точки
   5415	F698  4A			     dec     dx		     ; - 1 из	счетчика
   5416	F699  75 ED			     jnz     s17	     ; повторить
   5417
   5418
   5419	F69B  3C 00			     cmp     al,0
   5420	F69D  74 12			     je	     s18    ; переход, если все сканировано,  +
   5421				     но символ
   5422							    ; не найден
   5423	F69F  2B C0			     sub     ax,ax
   5424	F6A1  8E D8			     mov     ds,ax	     ; установить адресацию	       +
   5425				     вектора
   5426					     assume  ds:abs0
   5427	F6A3  C4 3E 007Cr		     les     di,ext_ptr
   5428	F6A7  8C C0			     mov     ax,es
   5429	F6A9  0B C7			     or	     ax,di
   5430	F6AB  74 04			     jz	     s18
   5431	F6AD  B0 80			     mov     al,128	     ; начало второй части
   5432	F6AF  EB D2			     jmp     short s16	     ; вернуться и повторить
   5433					     assume  ds:data
   5434
   5435	F6B1			     s18:
   5436	F6B1  83 C4 08			     add     sp,8
   5437	F6B4  E9 FB10			     jmp     video_return
   5438	F6B7			     graphics_read   endp
   5439
   5440				     ;---------------------------------
   5441				     ;
   5442				     ;	 Эта	программа заполняет регистр BX	двумя     +
   5443				     младшими битами
   5444				     ; регистра	BL.
   5445				     ;
   5446				     ;	 ВХОД
   5447				     ;		BL - используемый цвет (младшие два бита).
   5448				     ;
   5449				     ;	 ВЫХОД
   5450				     ;		BX - используемый цвет (восемь		       +
   5451				     повторений двух битов цвета).
   5452				     ;
   5453				     ;---------------------------------
   5454	F6B7			     s19     proc    near
   5455	F6B7  80 E3 03			     and     bl,3	     ; выделить	биты цвета
   5456	F6BA  8A C3			     mov     al,bl	     ; переписать в AL
   5457	F6BC  51			     push    cx		     ; сохранить регистр
   5458	F6BD  B9 0003			     mov     cx,3	     ; количество повторений
   5459	F6C0			     s20:
   5460	F6C0  D0 E0			     sal     al,1
   5461	F6C2  D0 E0			     sal     al,1	     ; сдвиг влево на 2
   5462	F6C4  0A D8			     or	     bl,al	     ; в BL накапливается		       +
   5463				     результат
   5464	F6C6  E2 F8			     loop    s20	     ; цикл
   5465	F6C8  8A FB			     mov     bh,bl	     ; заполнить
   5466	F6CA  59			     pop     cx
   5467	F6CB  C3			     ret		     ; все выполнено
   5468	F6CC			     s19     endp
   5469				     ;--------------------------------------
   5470				     ;
   5471				     ;	 Эта	программа берет байт в AL и	удваивает     +
   5472				     все биты, превращая
   5473				     ; 8 бит	в 16 бит. Результат помещается в AX.
   5474				     ;--------------------------------------
   5475	F6CC			     s21     proc    near
   5476	F6CC  52			     push    dx		     ; сохранить регистры
   5477	F6CD  51			     push    cx
   5478	F6CE  53			     push    bx
   5479	F6CF  BA 0000			     mov     dx,0	     ; результат удвоения
   5480	F6D2  B9 0001			     mov     cx,1	     ; маска
   5481	F6D5			     s22:
   5482	F6D5  8B D8			     mov     bx,ax
   5483	F6D7  23 D9			     and     bx,cx	     ; выделение бита
   5484	F6D9  0B D3			     or	     dx,bx	     ; накапливание	результата
   5485	F6DB  D1 E0			     shl     ax,1
   5486	F6DD  D1 E1			     shl     cx,1	     ; сдвинуть	базу и маску на 1
   5487	F6DF  8B D8			     mov     bx,ax
   5488	F6E1  23 D9			     and     bx,cx
   5489	F6E3  0B D3			     or	     dx,bx
   5490	F6E5  D1 E1			     shl     cx,1    ; сдиг	маски, для выделения	       +
   5491				     следующего бита
   5492	F6E7  73 EC			     jnc     s22
   5493	F6E9  8B C2			     mov     ax,dx
   5494	F6EB  5B			     pop     bx		     ; восстановить	регистры
   5495	F6EC  59			     pop     cx
   5496	F6ED  5A			     pop     dx
   5497	F6EE  C3			     ret		     ; к выходу из прерывания
   5498	F6EF			     s21     endp
   5499
   5500				     ;----------------------------------
   5501				     ;
   5502				     ;	 Эта	программа преобразовывает		       +
   5503				     двух-битовое представление	точки
   5504				     ; (C1,C0) в однобитовое
   5505				     ; (C1,C0) к однобитовому.
   5506				     ;
   5507				     ;----------------------------------
   5508	F6EF			     s23     proc    near
   5509	F6EF  8A 24			     mov     ah,byte ptr [si]	; получить первый	байт
   5510	F6F1  8A 44 01			     mov     al,byte ptr [si+1]	  ; получить второй байт
   5511	F6F4  B9 C000			     mov     cx,0c000h	     ; 2 бита маски
   5512	F6F7  B2 00			     mov     dl,0	     ; регистр результата
   5513	F6F9			     s24:
   5514	F6F9  85 C1			     test    ax,cx	     ; проверка	2 младших бит	AX на+
   5515				     0
   5516	F6FB  F8			     clc		     ; сбросить	признак переноса+
   5517				     CF
   5518	F6FC  74 01			     jz	     s25	     ; переход если 0
   5519	F6FE  F9			     stc		     ; нет -	установить CF
   5520	F6FF  D0 D2		     s25:    rcl     dl,1	     ; циклический сдвиг
   5521	F701  D1 E9			     shr     cx,1
   5522	F703  D1 E9			     shr     cx,1
   5523	F705  73 F2			     jnc     s24	     ; повторить, если CF=1
   5524	F707  88 56 00			     mov byte ptr [bp],dl    ; запомнить результат
   5525	F70A  45			     inc     bp
   5526	F70B  C3			     ret		     ; к выходу из прерывания
   5527	F70C			     s23     endp
   5528
   5529				     ;---------------------------------------
   5530				     ;
   5531				     ;	 Эта	программа определает	положение	       +
   5532				     курсора относительно	мяти и
   5533				     ; начала буфера в режиме графики			       +
   5534				     /символ
   5535				     ;
   5536				     ;	 ВЫХОД
   5537				     ;		AX  содержит смещение курсора
   5538				     ;
   5539				     ;-----------------------------------------
   5540	F70C			     s26     proc    near
   5541	F70C  A1 0050r			     mov     ax,cursor_posn  ; получить	текущее		       +
   5542				     положение	курсора
   5543	F70F			     graph_posn	     label   near
   5544	F70F  53			     push    bx		     ; сохранить регистр
   5545	F710  8B D8			     mov     bx,ax	     ; сохранить текущее	       +
   5546				     положение	курсора
   5547	F712  8A C4			     mov     al,ah	     ; строка
   5548	F714  F6 26 004Ar		     mul     byte ptr crt_cols	 ; умножить на байт/колонку
   5549	F718  D1 E0			     shl     ax,1	     ; умножить	на 4
   5550	F71A  D1 E0			     shl     ax,1
   5551	F71C  2A FF			     sub     bh,bh	     ; выделить	значение колонки
   5552	F71E  03 C3			     add     ax,bx	     ; определить смещение
   5553	F720  5B			     pop     bx
   5554	F721  C3			     ret		     ; к выходу из прерывания
   5555	F722			     s26     endp
   5556
   5557				     ;----------------------------------------
   5558				     ;
   5559				     ;	 Записать телетайп (INT	10H, AH=14)
   5560				     ;
   5561				     ;	 Эта	программа выводит символ в буфер ЭЛИ с +
   5562				     одновременной	уста-
   5563				     ; новкой позиции курсора и передвижением	       +
   5564				     курсора на экране.
   5565				     ;	 После записи символа	в последнюю позицию   +
   5566				     строки выполняется ав-
   5567				     ; томатический	переход на новую строку. Если  +
   5568				     страница экрана за-
   5569				     ; полнена (позиция курсора 24,79/39),	выполняется +
   5570				     перемещение экрана
   5571				     ; на одну строку вверх. Освободившаяся строка+
   5572				     заполняется значением
   5573				     ; атрибута	символа (для алфавитно-цифрового   +
   5574				     режима). Для графики цвет=00
   5575				     ; После записи очередного символа курсор	       +
   5576				     установлен в следующую	позицию.
   5577				     ;
   5578				     ;	 ВХОД
   5579				     ;		AL - код выводимого символа,
   5580				     ;		BL - цвет переднего плана для графики.
   5581				     ;
   5582				     ;----------------------------------------
   5583
   5584					     assume  cs:code,ds:data
   5585	F722			     write_tty	     proc    near
   5586	F722  50			     push    ax		     ; сохранить регистры
   5587	F723  50			     push    ax
   5588	F724  B4 03			     mov     ah,3
   5589	F726  CD 10			     int     10h	     ; считать положение	       +
   5590				     текущего курсора
   5591	F728  58			     pop     ax		     ; восстановить	символ
   5592
   5593				     ;	 DX содержит текущую позицию курсора
   5594
   5595	F729  3C 08			     cmp     al,8	     ; есть	возврат на одну	       +
   5596				     позицию ?
   5597	F72B  74 59			     je	     u8		     ; возврат на одну позицию
   5598	F72D  3C 0D			     cmp     al,0dh	     ; есть	возврат каретки ?
   5599	F72F  74 5E			     je	     u9		     ; возврат каретки
   5600	F731  3C 0A			     cmp     al,0ah	     ; есть	граница поля	?
   5601	F733  74 5E			     je	     u10	     ; граница поля
   5602	F735  3C 07			     cmp     al,07h	     ; звуковой	сигнал ?
   5603	F737  74 61			     je	     u11	     ; звуковой	сигнал
   5604
   5605				     ;	 Запись символа на экран
   5606
   5607	F739  8A 3E 0062r		     mov     bh,active_page
   5608	F73D  B4 0A			     mov     ah,10	     ; запись символа без	       +
   5609				     атрибута
   5610	F73F  B9 0001			     mov     cx,1
   5611	F742  CD 10			     int     10h
   5612
   5613				     ;	 Положение курсора для следующего символа
   5614
   5615	F744  FE C2			     inc     dl
   5616	F746  3A 16 004Ar		     cmp     dl,byte ptr crt_cols
   5617	F74A  75 36			     jnz     u7		     ; переход к установке	       +
   5618				     курсора
   5619	F74C  B2 00			     mov     dl,0
   5620	F74E  80 FE 18			     cmp     dh,24	     ; проверка	граничной строки
   5621	F751  75 2D			     jnz     u6		     ; установить курсор
   5622
   5623				     ;	 Сдвиг экрана
   5624	F753			     u1:
   5625
   5626	F753  B4 02			     mov     ah,2
   5627	F755  B7 00			     mov     bh,0
   5628	F757  CD 10			     int     10h	     ; установить курсор
   5629
   5630
   5631	F759  A0 0049r			     mov     al,crt_mode     ; получить	текущий режим
   5632	F75C  3C 04			     cmp     al,4
   5633	F75E  72 06			     jc	     u2		     ; считывание курсора
   5634	F760  3C 07			     cmp     al,7
   5635	F762  B7 00			     mov     bh,0	     ; цвет	заднего плана
   5636	F764  75 06			     jne     u3
   5637
   5638	F766			     u2:			     ; считывание курсора
   5639	F766  B4 08			     mov     ah,8
   5640	F768  CD 10			     int     10h	; считать символ/атрибут	       +
   5641				     текущего курсора
   5642	F76A  8A FC			     mov     bh,ah	     ; запомнить в BH
   5643
   5644				     ;	 Перемещение	экрана на одну строку	вверх
   5645
   5646	F76C			     u3:
   5647	F76C  B8 0601			     mov     ax,601h
   5648	F76F  B9 0000			     mov     cx,0	     ; верхний левый угол
   5649	F772  B6 18			     mov     dh,24	     ; координаты нижнего	       +
   5650				     правого
   5651	F774  8A 16 004Ar		     mov     dl,byte ptr crt_cols    ; угла
   5652	F778  FE CA			     dec     dl
   5653	F77A			     u4:
   5654	F77A  CD 10			     int     10h
   5655
   5656				     ;	 Выход из прерывания
   5657
   5658	F77C			     u5:
   5659	F77C  58			     pop     ax		     ; восстановить	символ
   5660	F77D  E9 FA47			     jmp     video_return    ; возврат к программе
   5661
   5662	F780			     u6:			     ; установить курсор
   5663	F780  FE C6			     inc     dh		     ; следующая строка
   5664	F782			     u7:			     ; установить курсор
   5665	F782  B4 02			     mov     ah,2
   5666	F784  EB F4			     jmp     short u4	     ; установить новый курсор
   5667
   5668				     ;	 Сдвиг курсора на	одну позицию	влево
   5669
   5670	F786			     u8:
   5671	F786  80 FA 00			     cmp     dl,0
   5672	F789  74 F7			     je	     u7		     ; установить курсор
   5673	F78B  FE CA			     dec     dl		     ; нет -	снова его передать
   5674	F78D  EB F3			     jmp     short u7
   5675
   5676				     ;	 Перемещение	курсора в начало строки
   5677
   5678	F78F			     u9:
   5679	F78F  B2 00			     mov     dl,0
   5680	F791  EB EF			     jmp     short u7	     ; установить курсор
   5681
   5682				     ;	 Перемещение	курсора на следующую строку
   5683
   5684	F793			     u10:
   5685	F793  80 FE 18			     cmp     dh,24	     ; последняя строка экрана
   5686	F796  75 E8			     jne     u6		     ; да - сдвиг экрана
   5687	F798  EB B9			     jmp     short u1	     ; нет -	снова установить	       +
   5688				     курсор
   5689
   5690				     ;	 Звуковой сигнал
   5691
   5692	F79A			     u11:
   5693	F79A  B3 02			     mov     bl,2	     ; уст длительность		       +
   5694				     звукового	сигнала
   5695	F79C  E8 EE0A			     call    beep	     ; звук
   5696	F79F  EB DB			     jmp     short u5	     ; возврат
   5697	F7A1			     write_tty	     endp
   5698
   5699				     ;
   5700				     ;----------------------------------------
   5701				     ;
   5702				     ;	 Эта	программа считывает положение	       +
   5703				     светового	пера.
   5704				     ; Проверяется переключатель и триггер	       +
   5705				     светового	пера. Если бит 1 ре-
   5706				     ; гистра состояния (порт 3DA)=1, то триггер	       +
   5707				     установлен. Если бит 2 порта
   5708				     ; 3DA=0, то установлен	переключатель.
   5709				     ;	 Порты 3BD	и 3DC используются	для установки и   +
   5710				     сброса триггера и пере-
   5711				     ; ключателя светового пера.
   5712				     ;	 В регистрах R16 и R17 контроллера содержится  +
   5713				     адрес	координат пера
   5714				     ; относительно	начала буфера дисплея.
   5715				     ;	 Если триггер и переключатель установлены, +
   5716				     то программа определяет
   5717				     ; положение светового пера, в противном	       +
   5718				     случае, возврат без выдачи
   5719				     ; информации.
   5720				     ;
   5721				     ;	 В ППЭВМ ЕС1841	функция не поддерживается
   5722				     ;-------------------------------------------------
   5723
   5724
   5725
   5726
   5727					     assume  cs:code,ds:data
   5728
   5729				     ;	 Таблица	поправок для	получения		       +
   5730				     фактических координат светового пера
   5731
   5732	F7A1			     v1	     label   byte
   5733	F7A1  03 03 05 05 03 03	03+	     db	     3,3,5,5,3,3,3,4
   5734	      04
   5735
   5736	F7A9			     read_lpen	     proc    near
   5737
   5738
   5739	F7A9  B4 00			     mov     ah,0	     ; код возврата,	если перо не +
   5740				     включено
   5741	F7AB  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес 6845
   5742	F7AF  83 C2 06			     add     dx,6	     ; указать регистр состояния
   5743	F7B2  EC			     in	     al,dx	     ; получить	регистр		       +
   5744				     состояния
   5745	F7B3  A8 04			     test    al,4	     ; проверить переключатель   +
   5746				     светового	пера
   5747	F7B5  75 78			     jnz     v6		     ; не установлено, возврат
   5748
   5749				     ;	 Проверка триггера светового пера
   5750
   5751	F7B7  A8 02			     test    al,2	     ; проверить триггер	       +
   5752				     светового	пера
   5753	F7B9  74 7E			     jz	     v7		     ; возврат без сброса	       +
   5754				     триггера
   5755
   5756				     ;	 Триггер	был установлен, считать значение в+
   5757				     AH
   5758
   5759	F7BB  B4 10			     mov     ah,16	     ; уст регистры светового      +
   5760				     пера 6845
   5761
   5762				     ;	 Ввод регистров, указанных AH и			       +
   5763				     преобразование в строки колонки в DX
   5764
   5765	F7BD  8B 16 0063r		     mov     dx,addr_6845
   5766	F7C1  8A C4			     mov     al,ah
   5767	F7C3  EE			     out     dx,al	     ; вывести в порт
   5768	F7C4  42			     inc     dx
   5769	F7C5  EC			     in	     al,dx	     ; получить	значение из порта
   5770	F7C6  8A E8			     mov     ch,al	     ; сохранить его в CX
   5771	F7C8  4A			     dec     dx		     ; регистр адреса
   5772	F7C9  FE C4			     inc     ah
   5773	F7CB  8A C4			     mov     al,ah	     ; второй регистр данных
   5774	F7CD  EE			     out     dx,al
   5775	F7CE  42			     inc     dx
   5776	F7CF  EC			     in	     al,dx	     ; получить	второе значение  +
   5777				     данных
   5778	F7D0  8A E5			     mov     ah,ch	     ; AX содержит координаты	       +
   5779				     светового	пера
   5780
   5781
   5782	F7D2  8A 1E 0049r		     mov     bl,crt_mode
   5783	F7D6  2A FF			     sub     bh,bh	     ; выделить	значение режима  +
   5784				     в	BX
   5785	F7D8  2E: 8A 9F	F7A1r		     mov     bl,cs:v1[bx]    ; значение	поправки
   5786	F7DD  2B C3			     sub     ax,bx
   5787	F7DF  2B 06 004Er		     sub     ax,crt_start
   5788
   5789	F7E3  79 03			     jns     v2
   5790	F7E5  B8 0000			     mov     ax,0	     ; поместить 0
   5791
   5792				     ;	 Определить режим
   5793
   5794	F7E8			     v2:
   5795	F7E8  B1 03			     mov     cl,3	     ; установить счетчик
   5796	F7EA  80 3E 0049r 04		     cmp     crt_mode,4	     ; определить, режим	графики +
   5797				     или
   5798								     ; альфа
   5799	F7EF  72 2A			     jb	     v4		     ; альфа-перо
   5800	F7F1  80 3E 0049r 07		     cmp     crt_mode,7
   5801	F7F6  74 23			     je	     v4		     ; альфа-перо
   5802
   5803				     ;	 Графический	режим
   5804
   5805	F7F8  B2 28			     mov     dl,40	     ; делитель	для графики
   5806	F7FA  F6 F2			     div     dl	     ; определение строки (AL)	и	       +
   5807				     колонки (AH)
   5808								     ; пределы AL 0-99, AH 0-39
   5809
   5810				     ;	 Определение	положения строки	для графики
   5811
   5812	F7FC  8A E8			     mov     ch,al	     ; сохранить значение строки+
   5813				     в	CH
   5814	F7FE  02 ED			     add     ch,ch	     ; умножить	на 2			       +
   5815				     четно/нечетное поле
   5816	F800  8A DC			     mov     bl,ah	     ; значение	колонки в BX
   5817	F802  2A FF			     sub     bh,bh	     ; умножить	на 8 для среднего +
   5818				     результата
   5819	F804  80 3E 0049r 06		     cmp     crt_mode,6	     ; определить среднюю или      +
   5820				     наивысшую
   5821								     ; разрешающую способность
   5822	F809  75 04			     jne     v3		     ; не наивысшая разрешающая  +
   5823				     способность
   5824	F80B  B1 04			     mov     cl,4     ;	сдвинуть значение наивысшей   +
   5825				     разрешающей
   5826							      ;	способности
   5827	F80D  D0 E4			     sal     ah,1    ; сдвиг на 1 разряд влево	       +
   5828				     значения колонки
   5829	F80F			     v3:			     ; не наивысшая разрешающая  +
   5830				     способность
   5831	F80F  D3 E3			     shl     bx,cl   ; умножить	на 16	для наивысшей      +
   5832				     разрешающей
   5833							     ; способности
   5834
   5835				     ;	 Определение	положения символа для альфа
   5836
   5837	F811  8A D4			     mov     dl,ah	     ; значение	колонки для	       +
   5838				     возврата
   5839	F813  8A F0			     mov     dh,al	     ; значение	строки
   5840	F815  D0 EE			     shr     dh,1	     ; делить на 4
   5841	F817  D0 EE			     shr     dh,1	     ; для значения в пределах 0-24
   5842	F819  EB 12			     jmp     short v5	     ; возврат светового пера
   5843
   5844				     ;	 Режим альфа светового пера
   5845
   5846	F81B			     v4:			     ; альфа светового пера
   5847	F81B  F6 36 004Ar		     div     byte ptr crt_cols	; строка,	колонка
   5848	F81F  8A F0			     mov     dh,al	     ; строка в DH
   5849	F821  8A D4			     mov     dl,ah	     ; колонка в DL
   5850	F823  D2 E0			     sal     al,cl	     ; умножение строк на 8
   5851	F825  8A E8			     mov     ch,al
   5852	F827  8A DC			     mov     bl,ah
   5853	F829  32 FF			     xor     bh,bh
   5854	F82B  D3 E3			     sal     bx,cl
   5855	F82D			     v5:
   5856	F82D  B4 01			     mov     ah,1	     ; указать, что все		       +
   5857				     установлено
   5858	F82F			     v6:
   5859	F82F  52			     push    dx		     ; сохранить значение	       +
   5860				     возврата
   5861	F830  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес
   5862	F834  83 C2 07			     add     dx,7
   5863	F837  EE			     out     dx,al	     ; вывод
   5864	F838  5A			     pop     dx		     ; восстановить	значение
   5865	F839			     v7:
   5866	F839  5F			     pop     di		      ;	восстановить регистры
   5867	F83A  5E			     pop     si
   5868	F83B  1F			     pop     ds
   5869	F83C  1F			     pop     ds
   5870	F83D  1F			     pop     ds
   5871	F83E  1F			     pop     ds
   5872	F83F  07			     pop     es
   5873	F840  CF			     iret
   5874	F841			     read_lpen	     endp
   5875
   5876				     ;--- int 12 ------------------------------------
   5877				     ;
   5878				     ;	  Программа определения размера памяти.
   5879				     ;
   5880				     ;	  Эта программа передает в	регистр AX об'ем    +
   5881				     памяти в Кбайтах.
   5882				     ;
   5883				     ;-----------------------------------------
   5884
   5885					     assume  cs:code,ds:data
   5886	F841			     memory_size_determine   proc    far
   5887	F841  FB			     sti		     ; установить бит разрешения+
   5888				     прерывания
   5889	F842  1E			     push    ds		     ; сохранить сегмент
   5890	F843  B8 0040			     mov     ax,dat	     ; установить адресацию
   5891	F846  8E D8			     mov     ds,ax
   5892	F848  A1 0013r			     mov     ax,memory_size  ; получить	значение размера+
   5893				     памяти
   5894	F84B  1F			     pop     ds		     ; восстановить	сегмент
   5895	F84C  CF			     iret		     ; возврат из прерывания
   5896	F84D			     memory_size_determine   endp
   5897
   5898				     ;--- int 11-------------------------------
   5899				     ;
   5900				     ;	  Программа определения состава		       +
   5901				     оборудования.
   5902				     ;
   5903				     ;	 Эта	программа передает в регистр AX	       +
   5904				     конфигурацию системы.
   5905				     ;
   5906				     ;	 Разряды	регистра AX имеют следующее	       +
   5907				     значение:
   5908				     ;	 0	 - загрузка системы с НГМД;
   5909				     ;	 5,4	 - тип подключенного ЭЛИ и режим его       +
   5910				     работы:
   5911				     ;		   00 -	не используется;
   5912				     ;		   01 -	40х25,	черно-белый режим цветного      +
   5913				     графического
   5914				     ;			ЭЛИ;
   5915				     ;		   10 -	80х25,	черно-белый режим цветного      +
   5916				     графического
   5917				     ;			ЭЛИ;
   5918				     ;		   11 -	80х25,	черно-белый режим		       +
   5919				     монохромного ЭЛИ.
   5920				     ;	 7,6	 - количество	НГМД;
   5921				     ;	 11,10,9 - количество	адаптеров стыка С2;
   5922				     ;	 12	 - адаптер игр;
   5923				     ;	 15,14	 - количество	печатающих устройств.
   5924				     ;	 Разряды	6 и 7 устанавливаются только в том   +
   5925				     случае, если
   5926				     ; разряд 0 установлен в "1".
   5927				     ;
   5928				     ;----------------------------------------------
   5929
   5930					     assume  cs:code,ds:data
   5931	F84D			     equipment	     proc    far
   5932	F84D  FB			     sti		     ; установить признак	       +
   5933				     разрешения прерывания
   5934	F84E  1E			     push    ds		     ; сохранить сегмент
   5935	F84F  B8 0040			     mov     ax,dat	     ; установить адресацию
   5936	F852  8E D8			     mov     ds,ax
   5937	F854  A1 0010r			     mov     ax,equip_flag   ; получить	конфигурацию       +
   5938				     системы
   5939	F857  1F			     pop     ds		     ; восстановить	сегмент
   5940	F858  CF			     iret		     ; возврат из прерывания
   5941	F859			     equipment	     endp
   5942
   5943				     ;****************************************
   5944				     ;
   5945				     ;	 Загрузка знакогенератора
   5946				     ;
   5947				     ;****************************************
   5948
   5949	F859			     bct     proc    near
   5950	F859  B8 DC00			     mov     ax,0dc00h
   5951	F85C  8E C0			     mov     es,ax
   5952	F85E  B9 1400			     mov     cx,1400h
   5953	F861  BA 03B8			     mov     dx,3b8h
   5954	F864  33 C0			     xor     ax,ax
   5955	F866  EE			     out     dx,al
   5956	F867  33 FF			     xor     di,di
   5957	F869  FC			     cld
   5958	F86A  F3> AB			     rep     stosw
   5959	F86C  BE FA6Er		     bct3:   mov     si,offset crt_char_gen
   5960	F86F  33 FF			     xor     di,di
   5961	F871  33 C0			     xor     ax,ax
   5962	F873  B1 80			     mov     cl,128
   5963	F875			     bct1:
   5964	F875  B3 08			     mov     bl,8
   5965	F877  2E: 8A 04		     bct2:   mov     al,cs:[si]
   5966	F87A  46			     inc     si
   5967	F87B  26: 89 05			     mov     word ptr es:[di],ax
   5968	F87E  47			     inc     di
   5969	F87F  47			     inc     di
   5970	F880  FE CB			     dec     bl
   5971	F882  75 F3			     jnz     bct2
   5972	F884  83 C7 10			     add     di,10h
   5973	F887  FE C9			     dec     cl
   5974	F889  75 EA				     jnz     bct1
   5975	F88B  B0 01				     mov     al, 1
   5976	F88D  EE				     out     dx, al
   5977	F88E  B8 B800				     mov     ax, 0B800h
   5978	F891  8E C0				     mov     es, ax
   5979	F893  B0 01				     mov     al, 1
   5980	F895  BA 03DF				     mov     dx, 3DFh
   5981	F898  EE				     out     dx, al
   5982	F899  BA 03D8				     mov     dx, 3D8h
   5983	F89C  EC				     in	     al, dx
   5984	F89D  8A D8				     mov     bl, al
   5985	F89F  B0 00				     mov     al, 0
   5986	F8A1  EE				     out     dx, al
   5987	F8A2  33 FF				     xor     di, di
   5988	F8A4  B9 0400				     mov     cx, 1024
   5989	F8A7  33 C0				     xor     ax, ax
   5990	F8A9  FC				     cld
   5991	F8AA  F3> AB				     repe stosw
   5992	F8AC  BE FA6Er				     mov     si, offset	crt_char_gen
   5993	F8AF  B9 0400				     mov     cx, 1024
   5994	F8B2  33 FF				     xor     di, di
   5995
   5996	F8B4			     bct4:
   5997	F8B4  2E: 8A 04				     mov     al, cs:[si]
   5998	F8B7  26: 88 05				     mov     es:[di], al
   5999	F8BA  46				     inc     si
   6000	F8BB  47				     inc     di
   6001	F8BC  E2 F6				     loop    bct4
   6002	F8BE  B0 00				     mov     al, 0
   6003	F8C0  BA 03DF				     mov     dx, 3DFh
   6004	F8C3  EE				     out     dx, al
   6005	F8C4  BA 03D8				     mov     dx, 3D8h
   6006	F8C7  8A C3				     mov     al, bl
   6007	F8C9  EE				     out     dx, al
   6008	F8CA  C3				     ret
   6009	F8CB			     bct     endp
   6010
   6011				     ;
   6012				     ;	 Таблица	кодов русских маленьких букв	       +
   6013				     (строчных)
   6014				     ;
   6015	F8CB			     rust    label   byte
   6016	F8CB  1B 31 32 33 34 35	36+	     db	     1bh,'1234567890-='
   6017	      37 38 39 30 2D 3D
   6018
   6019
   6020	F8D8  08 09			     db	     08h,09h
   6021	F8DA  D9 E6 E3 DA D5 DD	D3+	     db	     0d9h,0e6h,0e3h,0dah,0d5h,0ddh,0d3h,0e8h
   6022	      E8
   6023
   6024	F8E2  E9 D7 D6 ED 0D FF	E4+	     db	     0e9h,0d7h,0d6h,0edh,0dh,-1,0e4h,0ebh
   6025	      EB
   6026
   6027	F8EA  D2 D0 DF E0 DE DB	D4+	     db	     0d2h,0d0h,0dfh,0e0h,0deh,0dbh,0d4h,';:'
   6028	      3B 3A
   6029
   6030	F8F3  D1 EE 5C EF E7 E1	DC+	     db	     0d1h,0eeh,5ch,0efh,0e7h,0e1h,0dch,0d8h
   6031	      D8
   6032
   6033	F8FB  E2 EC 2C 2E 2F E5	2A	     db	     0e2h,0ech,',./',0e5h,'*'
   6034
   6035	F902  FF 20 EA			     db	     -1,' ',0eah
   6036
   6037
   6038	F905			     k30     label   byte
   6039	F905  52 4F 50 51 4B 4C	4D	     db	     82,79,80,81,75,76,77
   6040
   6041	F90C  47 48 49			     db	     71,72,73
   6042				     ;---
   6043	F90F  10 11 12 13 14 15	16+	     db	     16,17,18,19,20,21,22,23
   6044	      17
   6045
   6046	F917  18 19 1E 1F 20 21	22+	     db	     24,25,30,31,32,33,34,35
   6047	      23
   6048
   6049	F91F  24 25 26 2C 2D 2E	2F+	     db	     36,37,38,44,45,46,47,48
   6050	      30
   6051
   6052	F927  31 32			     db	     49,50
   6053
   6054				     ;	     Временный	обработчик прерываний стыка С2
   6055
   6056	F929			     rs232_io:
   6057	F929  B8 61F0				     mov     ax, 61F0h
   6058	F92C  CF				     iret
   6059
   6060	F92D			     int15h:
   6061	F92D  F9				     stc
   6062	F92E  B4 86				     mov     ah, 86h
   6063	F930  CA 0002				     retf    2
   6064
   6065				     ;---
   6066	F933  F6 06 0017r 03	     k89:    test    kb_flag,left_shift+right_shift
   6067	F938  74 11			     jz	     k80
   6068	F93A  3C F0			     cmp     al,0f0h
   6069	F93C  74 23			     je	     k89a
   6070	F93E  3C B0			     cmp     al,0b0h
   6071	F940  72 06			     jb	     k81
   6072	F942  3C CF			     cmp     al,0cfh
   6073	F944  77 02			     ja	     k81
   6074	F946  04 20			     add     al,20h
   6075	F948  E9 EE94		     k81:    jmp     k61
   6076	F94B  3C F1		     k80:    cmp     al,0f1h
   6077	F94D  74 0D			     je	     k89b
   6078	F94F  3C D0			     cmp     al,0d0h
   6079	F951  72 F5			     jb	     k81
   6080	F953  3C FE			     cmp     al,0feh
   6081	F955  77 F1			     ja	     k81
   6082	F957  2C 20			     sub     al,20h
   6083	F959  E9 EE83			     jmp     k61
   6084	F95C  2C 01		     k89b:   sub     al,01h
   6085	F95E  E9 EE7E			     jmp     k61
   6086	F961  04 01		     k89a:   add     al,01h
   6087	F963  E9 EE79			     jmp     k61
   6088
   6089	F966			     write_tty2:
   6090	F966  8A 3E 0062r			     mov     bh, ds:active_page
   6091	F96A  E9 FDB5				     jmp     write_tty
   6092
   6093	F96D			     f19a:
   6094	F96D  42				     inc     dx
   6095	F96E  B0 08				     mov     al, 8
   6096	F970  EE				     out     dx, al
   6097	F971  BA 03FE				     mov     dx, 3FEh
   6098	F974  EE				     out     dx, al
   6099	F975  B0 A4				     mov     al, 0A4h
   6100	F977  E6 21				     out     inta01, al
   6101	F979  8B C6				     mov     ax, si
   6102	F97B  B1 03				     mov     cl, 3
   6103	F97D  E9 EBDC				     jmp     f19b
   6104
   6105	F980			     f20a:
   6106	F980  B0 80				     mov     al, 80h
   6107	F982  E6 A0				     out     0A0h, al
   6108	F984  B0 BC				     mov     al, 0BCh
   6109	F986  E6 21				     out     21h, al
   6110	F988  E9 EBE9				     jmp     f20b
   6111				     ;
   6112	F98B  50		     dummm_return:   push    ax
   6113	F98C  B0 20				     mov     al,20h
   6114	F98E  E6 20				     out     20h,al
   6115	F990  58				     pop     ax
   6116	F991  CF				     iret
   6117
   6118	F992  DC*(00)				     db	220 dup(0)
   6119
   6120				     ;**************************************
   6121				     ;
   6122				     ;	 Знакогенератор графический 320х200 и 640х200
   6123				     ;
   6124				     ;***************************************
   6125
   6126
   6127
   6128	FA6E			     crt_char_gen  label  byte
   6129	FA6E  00 00 00 00 00 00	00+	     db	     000h,000h,000h,000h,000h,000h,000h,000h ;d_00
   6130	      00
   6131
   6132	FA76  7E 81 A5 81 BD 99	81+	     db	     07eh,081h,0a5h,081h,0bdh,099h,081h,07eh ;d_01
   6133	      7E
   6134
   6135	FA7E  7E FF DB FF C3 E7	FF+	     db	     07eh,0ffh,0dbh,0ffh,0c3h,0e7h,0ffh,07eh ;d_02
   6136	      7E
   6137
   6138	FA86  6C FE FE FE 7C 38	10+	     db	     06ch,0feh,0feh,0feh,07ch,038h,010h,000h ;d_03
   6139	      00
   6140
   6141	FA8E  10 38 7C FE 7C 38	10+	     db	     010h,038h,07ch,0feh,07ch,038h,010h,000h ;d_04
   6142	      00
   6143
   6144	FA96  38 7C 38 FE FE 7C	38+	     db	     038h,07ch,038h,0feh,0feh,07ch,038h,07ch ;d_05
   6145	      7C
   6146
   6147	FA9E  10 10 38 7C FE 7C	38+	     db	     010h,010h,038h,07ch,0feh,07ch,038h,07ch ;d_06
   6148	      7C
   6149
   6150	FAA6  00 00 18 3C 3C 18	00+	     db	     000h,000h,018h,03ch,03ch,018h,000h,000h ;d_07
   6151	      00
   6152
   6153	FAAE  FF FF E7 C3 C3 E7	FF+	     db	     0ffh,0ffh,0e7h,0c3h,0c3h,0e7h,0ffh,0ffh ;d_08
   6154	      FF
   6155
   6156	FAB6  00 3C 66 42 42 66	3C+	     db	     000h,03ch,066h,042h,042h,066h,03ch,000h ;d_09
   6157	      00
   6158
   6159	FABE  FF C3 99 BD BD 99	C3+	     db	     0ffh,0c3h,099h,0bdh,0bdh,099h,0c3h,0ffh ;d_0a
   6160	      FF
   6161
   6162	FAC6  0F 07 0F 7D CC CC	CC+	     db	     00fh,007h,00fh,07dh,0cch,0cch,0cch,078h ;d_0b
   6163	      78
   6164
   6165	FACE  3C 66 66 66 3C 18	7E+	     db	     03ch,066h,066h,066h,03ch,018h,07eh,018h ;d_0c
   6166	      18
   6167
   6168	FAD6  3F 33 3F 30 30 70	F0+	     db	     03fh,033h,03fh,030h,030h,070h,0f0h,0e0h ;d_0d
   6169	      E0
   6170
   6171	FADE  7F 63 7F 63 63 67	E6+	     db	     07fh,063h,07fh,063h,063h,067h,0e6h,0c0h ;d_0e
   6172	      C0
   6173
   6174	FAE6  99 5A 3C E7 E7 3C	5A+	     db	     099h,05ah,03ch,0e7h,0e7h,03ch,05ah,099h ;d_0f
   6175	      99
   6176
   6177
   6178	FAEE  80 E0 F8 FE F8 E0	80+	     db	     080h,0e0h,0f8h,0feh,0f8h,0e0h,080h,000h ;d_10
   6179	      00
   6180
   6181	FAF6  02 0E 3E FE 3E 0E	02+	     db	     002h,00eh,03eh,0feh,03eh,00eh,002h,000h ;d_11
   6182	      00
   6183
   6184	FAFE  18 3C 7E 18 18 7E	3C+	     db	     018h,03ch,07eh,018h,018h,07eh,03ch,018h ;d_12
   6185	      18
   6186
   6187	FB06  66 66 66 66 66 00	66+	     db	     066h,066h,066h,066h,066h,000h,066h,000h ;d_13
   6188	      00
   6189
   6190	FB0E  7F DB DB 7B 1B 1B	1B+	     db	     07fh,0dbh,0dbh,07bh,01bh,01bh,01bh,000h ;d_14
   6191	      00
   6192
   6193	FB16  3E 63 38 6C 6C 38	CC+	     db	     03eh,063h,038h,06ch,06ch,038h,0cch,078h ;d_15
   6194	      78
   6195
   6196	FB1E  00 00 00 00 7E 7E	7E+	     db	     000h,000h,000h,000h,07eh,07eh,07eh,000h ;d_16
   6197	      00
   6198
   6199	FB26  18 3C 7E 18 7E 3C	18+	     db	     018h,03ch,07eh,018h,07eh,03ch,018h,0ffh ;d_17
   6200	      FF
   6201
   6202	FB2E  18 3C 7E 18 18 18	18+	     db	     018h,03ch,07eh,018h,018h,018h,018h,000h ;d_18
   6203	      00
   6204
   6205	FB36  18 18 18 18 7E 3C	18+	     db	     018h,018h,018h,018h,07eh,03ch,018h,000h ;d_19
   6206	      00
   6207
   6208	FB3E  00 18 0C FE 0C 18	00+	     db	     000h,018h,00ch,0feh,00ch,018h,000h,000h ;d_1a
   6209	      00
   6210
   6211	FB46  00 30 60 FE 60 30	00+	     db	     000h,030h,060h,0feh,060h,030h,000h,000h ;d_1b
   6212	      00
   6213
   6214	FB4E  00 00 C0 C0 C0 FE	00+	     db	     000h,000h,0c0h,0c0h,0c0h,0feh,000h,000h ;d_1c
   6215	      00
   6216
   6217	FB56  00 24 66 FF 66 24	00+	     db	     000h,024h,066h,0ffh,066h,024h,000h,000h ;d_1d
   6218	      00
   6219
   6220	FB5E  00 18 3C 7E FF FF	00+	     db	     000h,018h,03ch,07eh,0ffh,0ffh,000h,000h ;d_1e
   6221	      00
   6222
   6223	FB66  00 FF FF 7E 3C 18	00+	     db	     000h,0ffh,0ffh,07eh,03ch,018h,000h,000h ;d_1f
   6224	      00
   6225
   6226
   6227	FB6E  00 00 00 00 00 00	00+	     db	     000h,000h,000h,000h,000h,000h,000h,000h ;sp d_20
   6228	      00
   6229
   6230	FB76  30 78 78 30 30 00	30+	     db	     030h,078h,078h,030h,030h,000h,030h,000h ;!	d_21
   6231	      00
   6232
   6233	FB7E  6C 6C 6C 00 00 00	00+	     db	     06ch,06ch,06ch,000h,000h,000h,000h,000h ;"d_22
   6234	      00
   6235
   6236	FB86  6C 6C FE 6C FE 6C	6C+	     db	     06ch,06ch,0feh,06ch,0feh,06ch,06ch,000h ;#	d_23
   6237	      00
   6238
   6239	FB8E  30 7C C0 78 0C F8	30+	     db	     030h,07ch,0c0h,078h,00ch,0f8h,030h,000h ;$	d_24
   6240	      00
   6241
   6242	FB96  00 C6 CC 18 30 66	C6+	     db	     000h,0c6h,0cch,018h,030h,066h,0c6h,000h ;per cent d_25
   6243	      00
   6244
   6245	FB9E  38 6C 38 76 DC CC	76+	     db	     038h,06ch,038h,076h,0dch,0cch,076h,000h ;&	d_26
   6246	      00
   6247
   6248	FBA6  60 60 C0 00 00 00	00+	     db	     060h,060h,0c0h,000h,000h,000h,000h,000h ;'	d_27
   6249	      00
   6250
   6251	FBAE  18 30 60 60 60 30	18+	     db	     018h,030h,060h,060h,060h,030h,018h,000h ;(	d_28
   6252	      00
   6253
   6254	FBB6  60 30 18 18 18 30	60+	     db	     060h,030h,018h,018h,018h,030h,060h,000h ;)	d_29
   6255	      00
   6256
   6257	FBBE  00 66 3C FF 3C 66	00+	     db	     000h,066h,03ch,0ffh,03ch,066h,000h,000h ;*	d_2a
   6258	      00
   6259
   6260	FBC6  00 30 30 FC 30 30	00+	     db	     000h,030h,030h,0fch,030h,030h,000h,000h ;+	d_2b
   6261	      00
   6262
   6263	FBCE  00 00 00 00 00 30	30+	     db	     000h,000h,000h,000h,000h,030h,030h,060h ;,	d_2c
   6264	      60
   6265
   6266	FBD6  00 00 00 FC 00 00	00+	     db	     000h,000h,000h,0fch,000h,000h,000h,000h ;-	d_2d
   6267	      00
   6268
   6269	FBDE  00 00 00 00 00 30	30+	     db	     000h,000h,000h,000h,000h,030h,030h,000h ;.	d_2e
   6270	      00
   6271
   6272	FBE6  06 0C 18 30 60 C0	80+	     db	     006h,00ch,018h,030h,060h,0c0h,080h,000h ;/	d_2f
   6273	      00
   6274
   6275
   6276	FBEE  7C C6 CE DE F6 E6	7C+	     db	     07ch,0c6h,0ceh,0deh,0f6h,0e6h,07ch,000h ;0	d_30
   6277	      00
   6278
   6279	FBF6  30 70 30 30 30 30	FC+	     db	     030h,070h,030h,030h,030h,030h,0fch,000h ;1	d_31
   6280	      00
   6281
   6282	FBFE  78 CC 0C 38 60 CC	FC+	     db	     078h,0cch,00ch,038h,060h,0cch,0fch,000h ;2	d_32
   6283	      00
   6284
   6285	FC06  78 CC 0C 38 0C CC	78+	     db	     078h,0cch,00ch,038h,00ch,0cch,078h,000h ;3	d_33
   6286	      00
   6287
   6288	FC0E  1C 3C 6C CC FE 0C	1E+	     db	     01ch,03ch,06ch,0cch,0feh,00ch,01eh,000h ;4	d_34
   6289	      00
   6290
   6291	FC16  FC C0 F8 0C 0C CC	78+	     db	     0fch,0c0h,0f8h,00ch,00ch,0cch,078h,000h ;5	d_35
   6292	      00
   6293
   6294	FC1E  38 60 C0 F8 CC CC	78+	     db	     038h,060h,0c0h,0f8h,0cch,0cch,078h,000h ;6	d_36
   6295	      00
   6296
   6297	FC26  FC CC 0C 18 30 30	30+	     db	     0fch,0cch,00ch,018h,030h,030h,030h,000h ;7	d_37
   6298	      00
   6299
   6300	FC2E  78 CC CC 78 CC CC	78+	     db	     078h,0cch,0cch,078h,0cch,0cch,078h,000h ;8	d_38
   6301	      00
   6302
   6303	FC36  78 CC CC 7C 0C 18	70+	     db	     078h,0cch,0cch,07ch,00ch,018h,070h,000h ;9	d_39
   6304	      00
   6305
   6306	FC3E  00 30 30 00 00 30	30+	     db	     000h,030h,030h,000h,000h,030h,030h,000h ;:	d_3a
   6307	      00
   6308
   6309	FC46  00 30 30 00 00 30	30+	     db	     000h,030h,030h,000h,000h,030h,030h,060h ;;	d_3b
   6310	      60
   6311
   6312	FC4E  18 30 60 C0 60 30	18+	     db	     018h,030h,060h,0c0h,060h,030h,018h,000h ;<	d_3c
   6313	      00
   6314
   6315	FC56  00 00 FC 00 00 FC	00+	     db	     000h,000h,0fch,000h,000h,0fch,000h,000h ;=	d_3d
   6316	      00
   6317
   6318	FC5E  60 30 18 0C 18 30	60+	     db	     060h,030h,018h,00ch,018h,030h,060h,000h ;>	d_3e
   6319	      00
   6320
   6321	FC66  78 CC 0C 18 30 00	30+	     db	     078h,0cch,00ch,018h,030h,000h,030h,000h ;?	d_3f
   6322	      00
   6323
   6324
   6325	FC6E  7C C6 DE DE DE C0	78+	     db	     07ch,0c6h,0deh,0deh,0deh,0c0h,078h,000h ;@	d_40
   6326	      00
   6327
   6328	FC76  30 78 CC CC FC CC	CC+	     db	     030h,078h,0cch,0cch,0fch,0cch,0cch,000h ;A	d_41
   6329	      00
   6330
   6331	FC7E  FC 66 66 7C 66 66	FC+	     db	     0fch,066h,066h,07ch,066h,066h,0fch,000h ;B	d_42
   6332	      00
   6333
   6334	FC86  3C 66 C0 C0 C0 66	3C+	     db	     03ch,066h,0c0h,0c0h,0c0h,066h,03ch,000h ;C	d_43
   6335	      00
   6336
   6337	FC8E  F8 6C 66 66 66 6C	F8+	     db	     0f8h,06ch,066h,066h,066h,06ch,0f8h,000h ;D	d_44
   6338	      00
   6339
   6340	FC96  FE 62 68 78 68 62	FE+	     db	     0feh,062h,068h,078h,068h,062h,0feh,000h ;E	d_45
   6341	      00
   6342
   6343	FC9E  FE 62 68 78 68 60	F0+	     db	     0feh,062h,068h,078h,068h,060h,0f0h,000h ;F	d_46
   6344	      00
   6345
   6346	FCA6  3C 66 C0 C0 CE 66	3E+	     db	     03ch,066h,0c0h,0c0h,0ceh,066h,03eh,000h ;G	d_47
   6347	      00
   6348
   6349	FCAE  CC CC CC FC CC CC	CC+	     db	     0cch,0cch,0cch,0fch,0cch,0cch,0cch,000h ;H	d_48
   6350	      00
   6351
   6352	FCB6  78 30 30 30 30 30	78+	     db	     078h,030h,030h,030h,030h,030h,078h,000h ;I	d_49
   6353	      00
   6354
   6355	FCBE  1E 0C 0C 0C CC CC	78+	     db	     01eh,00ch,00ch,00ch,0cch,0cch,078h,000h ;J	d_4a
   6356	      00
   6357
   6358	FCC6  E6 66 6C 78 6C 66	E6+	     db	     0e6h,066h,06ch,078h,06ch,066h,0e6h,000h ;K	d_4b
   6359	      00
   6360
   6361	FCCE  F0 60 60 60 62 66	FE+	     db	     0f0h,060h,060h,060h,062h,066h,0feh,000h ;L	d_4c
   6362	      00
   6363
   6364	FCD6  C6 EE FE FE D6 C6	C6+	     db	     0c6h,0eeh,0feh,0feh,0d6h,0c6h,0c6h,000h ;M	d_4d
   6365	      00
   6366
   6367	FCDE  C6 E6 F6 DE CE C6	C6+	     db	     0c6h,0e6h,0f6h,0deh,0ceh,0c6h,0c6h,000h ;N	d_4e
   6368	      00
   6369
   6370	FCE6  38 6C C6 C6 C6 6C	38+	     db	     038h,06ch,0c6h,0c6h,0c6h,06ch,038h,000h ;O	d_4f
   6371	      00
   6372
   6373
   6374	FCEE  FC 66 66 7C 60 60	F0+	     db	     0fch,066h,066h,07ch,060h,060h,0f0h,000h ;P	d_50
   6375	      00
   6376
   6377	FCF6  78 CC CC CC DC 78	1C+	     db	     078h,0cch,0cch,0cch,0dch,078h,01ch,000h ;Q	d_51
   6378	      00
   6379
   6380	FCFE  FC 66 66 7C 6C 66	E6+	     db	     0fch,066h,066h,07ch,06ch,066h,0e6h,000h ;R	d_52
   6381	      00
   6382
   6383	FD06  78 CC E0 70 1C CC	78+	     db	     078h,0cch,0e0h,070h,01ch,0cch,078h,000h ;S	d_53
   6384	      00
   6385
   6386	FD0E  FC B4 30 30 30 30	78+	     db	     0fch,0b4h,030h,030h,030h,030h,078h,000h ;T	d_54
   6387	      00
   6388
   6389	FD16  CC CC CC CC CC CC	FC+	     db	     0cch,0cch,0cch,0cch,0cch,0cch,0fch,000h ;U	d_55
   6390	      00
   6391
   6392	FD1E  CC CC CC CC CC 78	30+	     db	     0cch,0cch,0cch,0cch,0cch,078h,030h,000h ;V	d_56
   6393	      00
   6394
   6395	FD26  C6 C6 C6 D6 FE EE	C6+	     db	     0c6h,0c6h,0c6h,0d6h,0feh,0eeh,0c6h,000h ;W	d_57
   6396	      00
   6397
   6398	FD2E  C6 C6 6C 38 38 6C	C6+	     db	     0c6h,0c6h,06ch,038h,038h,06ch,0c6h,000h ;X	d_58
   6399	      00
   6400
   6401	FD36  CC CC CC 78 30 30	78+	     db	     0cch,0cch,0cch,078h,030h,030h,078h,000h ;Y	d_59
   6402	      00
   6403
   6404	FD3E  FE C6 8C 18 32 66	FE+	     db	     0feh,0c6h,08ch,018h,032h,066h,0feh,000h ;Z	d_5a
   6405	      00
   6406
   6407	FD46  78 60 60 60 60 60	78+	     db	     078h,060h,060h,060h,060h,060h,078h,000h ;(	d_5b
   6408	      00
   6409
   6410	FD4E  C0 60 30 18 0C 06	02+	     db	     0c0h,060h,030h,018h,00ch,006h,002h,000h ;backslash
   6411	      00
   6412
   6413	FD56  78 18 18 18 18 18	78+	     db	     078h,018h,018h,018h,018h,018h,078h,000h ;)	d_5d
   6414	      00
   6415
   6416	FD5E  10 38 6C C6 00 00	00+	     db	     010h,038h,06ch,0c6h,000h,000h,000h,000h ;cimpqumflex
   6417	      00
   6418
   6419	FD66  00 00 00 00 00 00	00+	     db	     000h,000h,000h,000h,000h,000h,000h,0ffh ;_	d_5f
   6420	      FF
   6421
   6422
   6423	FD6E  30 30 18 00 00 00	00+	     db	     030h,030h,018h,000h,000h,000h,000h,000h ;	d_60
   6424	      00
   6425
   6426	FD76  00 00 78 0C 7C CC	76+	     db	     000h,000h,078h,00ch,07ch,0cch,076h,000h ;lower case a
   6427	      00
   6428
   6429	FD7E  E0 60 60 7C 66 66	DC+	     db	     0e0h,060h,060h,07ch,066h,066h,0dch,000h ;b	d_62
   6430	      00
   6431
   6432	FD86  00 00 78 CC C0 CC	78+	     db	     000h,000h,078h,0cch,0c0h,0cch,078h,000h ;c	d_63
   6433	      00
   6434
   6435	FD8E  1C 0C 0C 7C CC CC	76+	     db	     01ch,00ch,00ch,07ch,0cch,0cch,076h,000h ;d	d_64
   6436	      00
   6437
   6438	FD96  00 00 78 CC FC C0	78+	     db	     000h,000h,078h,0cch,0fch,0c0h,078h,000h ;e	d_65
   6439	      00
   6440
   6441	FD9E  38 6C 60 F0 60 60	F0+	     db	     038h,06ch,060h,0f0h,060h,060h,0f0h,000h ;f	d_66
   6442	      00
   6443
   6444	FDA6  00 00 76 CC CC 7C	0C+	     db	     000h,000h,076h,0cch,0cch,07ch,00ch,0f8h ;g	d_67
   6445	      F8
   6446
   6447	FDAE  E0 60 6C 76 66 66	E6+	     db	     0e0h,060h,06ch,076h,066h,066h,0e6h,000h ;h	d_68
   6448	      00
   6449
   6450	FDB6  30 00 70 30 30 30	78+	     db	     030h,000h,070h,030h,030h,030h,078h,000h ;i	d_69
   6451	      00
   6452
   6453	FDBE  0C 00 0C 0C 0C CC	CC+	     db	     00ch,000h,00ch,00ch,00ch,0cch,0cch,078h ;j	d_6a
   6454	      78
   6455
   6456	FDC6  E0 60 66 6C 78 6C	E6+	     db	     0e0h,060h,066h,06ch,078h,06ch,0e6h,000h ;k	d_6b
   6457	      00
   6458
   6459	FDCE  70 30 30 30 30 30	78+	     db	     070h,030h,030h,030h,030h,030h,078h,000h ;l	d_6c
   6460	      00
   6461
   6462	FDD6  00 00 CC FE FE D6	C6+	     db	     000h,000h,0cch,0feh,0feh,0d6h,0c6h,000h ;m	d_6d
   6463	      00
   6464
   6465	FDDE  00 00 F8 CC CC CC	CC+	     db	     000h,000h,0f8h,0cch,0cch,0cch,0cch,000h ;n	d_6e
   6466	      00
   6467
   6468	FDE6  00 00 78 CC CC CC	78+	     db	     000h,000h,078h,0cch,0cch,0cch,078h,000h ;o	d_6f
   6469	      00
   6470
   6471
   6472	FDEE  00 00 DC 66 66 7C	60+	     db	     000h,000h,0dch,066h,066h,07ch,060h,0f0h ;p	d_70
   6473	      F0
   6474
   6475	FDF6  00 00 76 CC CC 7C	0C+	     db	     000h,000h,076h,0cch,0cch,07ch,00ch,01eh ;q	d_71
   6476	      1E
   6477
   6478	FDFE  00 00 DC 76 66 60	F0+	     db	     000h,000h,0dch,076h,066h,060h,0f0h,000h ;r	d_72
   6479	      00
   6480
   6481	FE06  00 00 7C C0 78 0C	F8+	     db	     000h,000h,07ch,0c0h,078h,00ch,0f8h,000h ;s	d_73
   6482	      00
   6483
   6484	FE0E  10 30 7C 30 30 34	18+	     db	     010h,030h,07ch,030h,030h,034h,018h,000h ;t	d_74
   6485	      00
   6486
   6487	FE16  00 00 CC CC CC CC	76+	     db	     000h,000h,0cch,0cch,0cch,0cch,076h,000h ;u	d_75
   6488	      00
   6489
   6490	FE1E  00 00 CC CC CC 78	30+	     db	     000h,000h,0cch,0cch,0cch,078h,030h,000h ;v	d_76
   6491	      00
   6492
   6493	FE26  00 00 C6 D6 FE FE	6C+	     db	     000h,000h,0c6h,0d6h,0feh,0feh,06ch,000h ;w	d_77
   6494	      00
   6495
   6496	FE2E  00 00 C6 6C 38 6C	C6+	     db	     000h,000h,0c6h,06ch,038h,06ch,0c6h,000h ;x	d_78
   6497	      00
   6498
   6499	FE36  00 00 CC CC CC 7C	0C+	     db	     000h,000h,0cch,0cch,0cch,07ch,00ch,0f8h ;y	d_79
   6500	      F8
   6501
   6502	FE3E  00 00 FC 98 30 64	FC+	     db	     000h,000h,0fch,098h,030h,064h,0fch,000h ;z	d_7a
   6503	      00
   6504
   6505	FE46  1C 30 30 E0 30 30	1C+	     db	     01ch,030h,030h,0e0h,030h,030h,01ch,000h ;	d_7b
   6506	      00
   6507
   6508	FE4E  18 18 18 00 18 18	18+	     db	     018h,018h,018h,000h,018h,018h,018h,000h ;	d_7c
   6509	      00
   6510
   6511	FE56  E0 30 30 1C 30 30	E0+	     db	     0e0h,030h,030h,01ch,030h,030h,0e0h,000h ;	d_7d
   6512	      00
   6513
   6514	FE5E  76 DC 00 00 00 00	00+	     db	     076h,0dch,000h,000h,000h,000h,000h,000h ;	d_7e
   6515	      00
   6516
   6517	FE66  00 10 38 6C C6 C6	FE+	     db	     000h,010h,038h,06ch,0c6h,0c6h,0feh,000h ;delta d_7f
   6518	      00
   6519
   6520
   6521				     ;---int 1a-------------------------------
   6522				     ;
   6523				     ;	 Программа установки-считывания времени     +
   6524				     суток
   6525				     ;
   6526				     ;	 Эта	программа обеспечивает выполнение       +
   6527				     двух функций, код которых
   6528				     ; задается	в регистре AH:
   6529				     ;	 AH=0 -	считать текущее состояние часов. После+
   6530				     выполнения коман-
   6531				     ; ды регистры CX	и DX содержат старшую и младшую+
   6532				     части	счетчика.
   6533				     ;	 Если регистр AL содержит "0", то счет	идет в    +
   6534				     течение одних
   6535				     ; суток, при любом другом значении счет	       +
   6536				     переходит	на следующие
   6537				     ; сутки;
   6538				     ;
   6539				     ;	 AH=1 -	записать текущее	состояние часов.	       +
   6540				     Регистры CX и DX
   6541				     ; содержат	старшую и младшую части счетчика.
   6542				     ;
   6543				     ;------------------------------------------
   6544					     assume  cs:code,ds:data
   6545	FE6E			     time_of_day     proc    far
   6546	FE6E  FB			     sti	     ; уст признак разрешения	       +
   6547				     прерывания
   6548	FE6F  1E			     push    ds	     ; сохранить сегмент
   6549	FE70  50			     push    ax	     ; сохранить параметры
   6550	FE71  B8 0040			     mov     ax,dat
   6551	FE74  8E D8			     mov     ds,ax
   6552	FE76  58			     pop     ax
   6553	FE77  0A E4			     or	     ah,ah   ; AH=0 ?
   6554	FE79  74 07			     jz	     t2	 ; да, переход	к считыванию		       +
   6555				     текущего состояния
   6556	FE7B  FE CC			     dec     ah	     ; AH=1 ?
   6557	FE7D  74 16			     jz	     t3	 ; да, переход	к установке текущего +
   6558				     состояния
   6559
   6560	FE7F			     t1:     ; Возврат из программы
   6561
   6562	FE7F  FB			     sti	     ; уст признак разрешения	       +
   6563				     прерывания
   6564	FE80  1F			     pop     ds	     ; возврат сегмента
   6565	FE81  CF			     iret	     ; возврат к программе,вызвавшей +
   6566				     процедуру
   6567
   6568	FE82			     t2:     ; Считать текущее состояния	часов
   6569
   6570	FE82  FA			     cli	     ; сбросить	признак разрешения    +
   6571				     прерывания
   6572	FE83  A0 0070r			     mov     al,timer_ofl  ; считать в AL флажок перехода+
   6573				     на сле-
   6574	FE86  C6 06 0070r 00		     mov     timer_ofl,0   ; дующие сутки и	сбросить его+
   6575				     в	памяти
   6576	FE8B  8B 0E 006Er		     mov     cx,timer_high	     ; установить старшую и  +
   6577				     младшую
   6578	FE8F  8B 16 006Cr		     mov     dx,timer_low	     ; части счетчика
   6579	FE93  EB EA			     jmp     short t1
   6580
   6581	FE95			     t3:     ; Установить текущее состояние часов
   6582
   6583	FE95  FA			     cli	     ; сброс признака разрешения	       +
   6584				     прерывания
   6585	FE96  89 16 006Cr		     mov     timer_low,dx	     ; установить младшую и  +
   6586				     старшую
   6587	FE9A  89 0E 006Er		     mov     timer_high,cx	     ; части счетчика
   6588	FE9E  C6 06 0070r 00		     mov     timer_ofl,0     ; сброс флажка перехода	       +
   6589				     через	сутки
   6590	FEA3  EB DA			     jmp     short t1	     ; возврат из программы	       +
   6591				     отсчета времени
   6592	FEA5			     time_of_day     endp
   6593
   6594				     ;-------int 08-------------------
   6595				     ;
   6596				     ;	 Программа обработки прерывания таймера     +
   6597				     КР580ВИ53 (INT	8H) об-
   6598				     ; рабатывает прерывания, аппаратурно	       +
   6599				     возникающие от нулевого канала
   6600				     ; таймера, на вход которого подаются сигналы  +
   6601				     с	частотой 1,228 МГц,
   6602				     ; делящиеся на 56263 для обеспечения 18,2		       +
   6603				     прерываний в секунду.
   6604				     ;	 При	обработке прерывания	корректируется   +
   6605				     программный счетчик,
   6606				     ; хранящийся в памяти по адресу 0046CH (младшая   +
   6607				     часть	счетчика) и
   6608				     ; адресу 0047EH (старшая часть счетчика)	и	       +
   6609				     используемый для уста-
   6610				     ; новки времени суток.
   6611				     ;	 В функции программы входит коррекция	       +
   6612				     счетчика, управляющего
   6613				     ; двигателем НГМД. После обнуления счетчика   +
   6614				     двигатель	выключается.
   6615				     ;	 Вектор 1CH дает возможность пользователю     +
   6616				     входить в заданную
   6617				     ; программу с частотой прерывания таймера (18.2+
   6618				     прерываний в секун-
   6619				     ; ду). Для этого	в таблице векторов прерываний+
   6620				     по адресу 007CH
   6621				     ; необходимо задать адрес пользовательской   +
   6622				     программы.
   6623				     ;
   6624				     ;---------------------------------------------------
   6625
   6626	FEA5			     timer_int	     proc    far
   6627	FEA5  FB			     sti	     ; уст признак разрешения	       +
   6628				     прерывания
   6629	FEA6  1E			     push    ds
   6630	FEA7  50			     push    ax
   6631	FEA8  52			     push    dx
   6632	FEA9  B8 0040			     mov     ax,dat
   6633	FEAC  8E D8			     mov     ds,ax
   6634	FEAE  FF 06 006Cr		     inc     timer_low	  ; +1 к старшей части счетчика
   6635	FEB2  75 04			     jnz     t4
   6636	FEB4  FF 06 006Er		     inc     timer_high	  ; +1 к старшей части счетчика
   6637
   6638	FEB8			     t4:     ; Опрос счетчика = 24	часам
   6639
   6640	FEB8  83 3E 006Er 18		     cmp     timer_high,018h
   6641	FEBD  75 19			     jnz     t5
   6642	FEBF  81 3E 006Cr 00B0		     cmp     timer_low,0b0h
   6643	FEC5  75 11			     jnz     t5
   6644
   6645				     ;	 Таймер исчерпал 24 часа
   6646
   6647	FEC7  C7 06 006Er 0000		     mov     timer_high,0   ; сброс старшей	и младшей      +
   6648				     частей
   6649	FECD  C7 06 006Cr 0000		     mov     timer_low,0    ; счетчика и установка	       +
   6650				     флажка пере-
   6651	FED3  C6 06 0070r 01		     mov     timer_ofl,1    ; хода счета на следующие      +
   6652				     сутки
   6653
   6654				     ;	 Выключение мотора НГМД, если счетчик	       +
   6655				     управления мотором
   6656				     ; исчерпан
   6657
   6658	FED8			     t5:
   6659	FED8  FE 0E 0040r		     dec     motor_count
   6660	FEDC  75 0B			     jnz     t6		     ; переход, если	счетчик не    +
   6661				     установлен
   6662	FEDE  80 26 003Fr F0		     and     motor_status,0f0h
   6663	FEE3  B0 0C			     mov     al,0ch
   6664	FEE5  BA 03F2			     mov     dx,03f2h
   6665	FEE8  EE			     out     dx,al	     ; выключить мотор
   6666
   6667	FEE9			     t6:
   6668	FEE9  CD 1C			     int     1ch     ; передача	управления программе+
   6669				     пользователя
   6670	FEEB  B0 20			     mov     al,eoi
   6671	FEED  E6 20			     out     020h,al	    ; конец прерывания
   6672	FEEF  5A			     pop     dx
   6673	FEF0  58			     pop     ax
   6674	FEF1  1F			     pop     ds
   6675	FEF2  CF			     iret		     ; возврат из прерывания
   6676	FEF3			     timer_int	     endp
   6677				     ;---------------------------------
   6678				     ;
   6679				     ;	 Эти	вектора передаются в область		       +
   6680				     прерывания 8086 во время
   6681				     ; включения питания.
   6682				     ;
   6683				     ;---------------------------------
   6684	FEF3			     vector_table    label   word    ; таблица векторов		       +
   6685				     прерываний
   6686
   6687	FEF3  FEA5r			     dw	     offset timer_int	     ; прерывание 8
   6688	FEF5  E987r			     dw	     offset kb_int	     ; прерывание 9
   6689	FEF7  FF53r			     dw	     offset dummy_return     ; прерывание А
   6690	FEF9  F98Br			     dw	     offset dummm_return     ; прерывание B
   6691	FEFB  F98Br			     dw	     offset dummm_return     ; прерывание C
   6692	FEFD  FF53r			     dw	     offset dummy_return     ; прерывание D
   6693	FEFF  EF57r			     dw	     offset disk_int	     ; прерывание E
   6694	FF01  FF53r			     dw	     offset dummy_return     ; прерывание F
   6695	FF03  F065r			     dw	     offset video_io	     ; прерывание 10H
   6696	FF05  F84Dr			     dw	     offset equipment	     ; прерывание 11H
   6697	FF07  F841r			     dw	     offset memory_size_determine    ; прерывание 12H
   6698	FF09  EC59r			     dw	     offset diskette_io	     ; прерывание 13H
   6699	FF0B  F929r			     dw	     offset rs232_io	     ; прерывание  14H
   6700	FF0D  F92Dr			     dw	     offset int15h	     ; int 15h (rc заглушка)
   6701	FF0F  E82Er			     dw	     offset keyboard_io	     ; прерывание 16H
   6702	FF11  EFD2r			     dw	     offset printer_io	     ; прерывание 17H
   6703	FF13  E067r			     dw	     offset start	     ; rc перывание 18h,	       +
   6704				     поставил как в	1841 перезагрузку
   6705	FF15  E6F7r			     dw	     offset boot_strap	     ; прерывание 19H
   6706	FF17  FE6Er			     dw	     time_of_day     ; прерывание 1АH - время суток
   6707	FF19  FF53r			     dw	     dummy_return    ; прерывание 1BH	- прерывание +
   6708				     клавиатуры
   6709	FF1B  FF53r			     dw	     dummy_return    ; прерывание 1C - прерывание  +
   6710				     таймера
   6711	FF1D  F0A4r			     dw	     video_parms     ; прерывание 1D - параметры    +
   6712				     видео
   6713	FF1F  EFC7r			     dw	     offset  disk_base	 ;прерывание 1EH - параметры+
   6714				     НГМД
   6715	FF21  0000			     dw	     0		     ; 1FH - адрес	таблицы пользов. +
   6716				     знакогенер. (не инициализируется)
   6717
   6718					     org     0ff53h	     ;rc для	того, чтобы не	       +
   6719				     съехало при сокращении	таблицы векторов
   6720	FF53			     dummy_return:
   6721	FF53  CF			     iret
   6722
   6723				     ;---int 5----------------------
   6724				     ;
   6725				     ;	 Программа вывода на печать содержимого      +
   6726				     буфера ЭЛИ вызывается
   6727				     ; одновременным нажатием клавиши ПЕЧ и	       +
   6728				     клавиши переключения регист-
   6729				     ; ров. Позиция курсора сохраняется до	       +
   6730				     завершения процедуры обработки
   6731				     ; прерывания. Повторное	нажатие названных      +
   6732				     клавиш во время обработки
   6733				     ; прерывания игнорируется.
   6734				     ;	 При	выполнении программы	в постоянно	       +
   6735				     распределенной рабочей
   6736				     ; области памяти по	адресу 0500H			       +
   6737				     устанавливается следующая
   6738				     ; информация:
   6739				     ;	 0    -	содержимое буфера ЭЛИ еще	не выведено  +
   6740				     на печать,	либо
   6741				     ; вывод уже завершен;
   6742				     ;	 1    -	в процессе вывода содержимого	буфера   +
   6743				     ЭЛИ на печать;
   6744				     ;	 255  -	при печати обнаружена ошибка.
   6745				     ;-----------------------------------------------------
   6746
   6747					     assume  cs:code,ds:xxdata
   6748
   6749	FF54			     print_screen    proc    far
   6750	FF54  FB			     sti		  ; уст признак разрешения	       +
   6751				     прерывания
   6752	FF55  1E			     push    ds
   6753	FF56  50			     push    ax
   6754	FF57  53			     push    bx
   6755	FF58  51			     push    cx	  ; будет использоваться заглавная +
   6756				     буква	для курсора
   6757	FF59  52			     push    dx	  ; будет содержать текущее	       +
   6758				     положение	курсора
   6759	FF5A  B8 0050			     mov     ax,xxdat	     ; адрес 50
   6760	FF5D  8E D8			     mov     ds,ax
   6761	FF5F  80 3E 0000r 01		     cmp     status_byte,1   ; печать готова ?
   6762	FF64  74 5F			     jz	     exit	     ; переход, если	печать	       +
   6763				     готова
   6764	FF66  C6 06 0000r 01		     mov     status_byte,1   ;
   6765	FF6B  B4 0F			     mov     ah,15	     ; требуется текущий режим    +
   6766				     экрана
   6767	FF6D  CD 10			     int     10h	     ; AL - режим,	AH - число		       +
   6768				     строк/колонок
   6769								     ; BH - страница,выведенная на +
   6770				     экран
   6771
   6772
   6773				     ;*************************************8
   6774				     ;
   6775				     ;	 В этом месте:
   6776				     ;			 AX - колонка, строка,
   6777				     ;			 BH - номер отображаемой страницы.
   6778				     ;
   6779				     ;	 Стек содержит DS, AX, BX, CX, DX.
   6780				     ;
   6781				     ;			 AL - режим
   6782				     ;
   6783				     ;**************************************
   6784
   6785	FF6F  8A CC			     mov     cl,ah
   6786	FF71  B5 19			     mov     ch,25
   6787	FF73  E8 0055			     call    crlf
   6788	FF76  51			     push    cx
   6789	FF77  B4 03			     mov     ah,3
   6790	FF79  CD 10			     int     10h
   6791	FF7B  59			     pop     cx
   6792	FF7C  52			     push    dx
   6793	FF7D  33 D2			     xor     dx,dx
   6794
   6795				     ;**************************************
   6796				     ;
   6797				     ;	  Считывание знака, находящегося в текущей  +
   6798				     позиции курсора
   6799				     ; и вывод на печать
   6800				     ;
   6801				     ;**************************************
   6802
   6803	FF7F  B4 02		     pri10:  mov     ah,2
   6804	FF81  CD 10			     int     10h
   6805	FF83  B4 08			     mov     ah,8
   6806	FF85  CD 10			     int     10h
   6807	FF87  0A C0			     or	     al,al
   6808	FF89  75 02			     jnz     pri15
   6809	FF8B  B0 20			     mov     al,' '
   6810	FF8D			     pri15:
   6811	FF8D  52			     push    dx
   6812	FF8E  33 D2			     xor     dx,dx
   6813	FF90  32 E4			     xor     ah,ah
   6814	FF92  CD 17			     int     17h
   6815	FF94  5A			     pop     dx
   6816	FF95  F6 C4 25			     test    ah,25h
   6817	FF98  75 21			     jnz     err10
   6818	FF9A  FE C2			     inc     dl
   6819	FF9C  3A CA			     cmp     cl,dl
   6820	FF9E  75 DF			     jnz     pri10
   6821	FFA0  32 D2			     xor     dl,dl
   6822	FFA2  8A E2			     mov     ah,dl
   6823	FFA4  52			     push    dx
   6824	FFA5  E8 0023			     call    crlf
   6825	FFA8  5A			     pop     dx
   6826	FFA9  FE C6			     inc     dh
   6827	FFAB  3A EE			     cmp     ch,dh
   6828	FFAD  75 D0			     jnz     pri10
   6829	FFAF  5A			     pop     dx
   6830	FFB0  B4 02			     mov     ah,2
   6831	FFB2  CD 10			     int     10h
   6832	FFB4  C6 06 0000r 00		     mov     status_byte,0
   6833	FFB9  EB 0A			     jmp     short exit
   6834	FFBB  5A		     err10:  pop     dx
   6835	FFBC  B4 02			     mov     ah,2
   6836	FFBE  CD 10			     int     10h
   6837	FFC0  C6 06 0000r FF		     mov     status_byte,0ffh
   6838
   6839	FFC5  5A		     exit:   pop     dx
   6840	FFC6  59			     pop     cx
   6841	FFC7  5B			     pop     bx
   6842	FFC8  58			     pop     ax
   6843	FFC9  1F			     pop     ds
   6844	FFCA  CF			     iret
   6845	FFCB			     print_screen    endp
   6846
   6847				     ;	 Возврат	каретки
   6848
   6849	FFCB			     crlf    proc    near
   6850	FFCB  33 D2			     xor     dx,dx
   6851	FFCD  32 E4			     xor     ah,ah
   6852	FFCF  B0 0A			     mov     al,12q
   6853	FFD1  CD 17			     int     17h
   6854	FFD3  32 E4			     xor     ah,ah
   6855	FFD5  B0 0D			     mov     al,15q
   6856	FFD7  CD 17			     int     17h
   6857	FFD9  C3			     ret
   6858	FFDA			     crlf    endp
   6859
   6860	FFDA  16*(00)				     db	22 dup(0)
   6861
   6862				     ;--------------------------------------
   6863				     ;
   6864				     ;	 Включение питания
   6865				     ;
   6866				     ;--------------------------------------
   6867
   6868				     ;vector segment at	0ffffh
   6869
   6870				     ;	 Переход	по включению	питания
   6871
   6872	FFF0  EA		     POST:	     db	     0eah	     ; db    0eah,5bh,0e0h,00h,0f0h  ; jmp reset
   6873	FFF1  E067r F000			     dw	     offset reset, cod	     ; ###Gleb###
   6874
   6875	FFF5  30 34 2F 32 34 2F	38+		     db	'04/24/81'
   6876	      31
   6877
   6878	FFFD  00 00				     db	   0, 0
   6879
   6880	FFFF  00				     db	   0 ;
   6881				     ;vector ends
   6882
   6883
   6884
   6885
   6886
   6887
   6888	0000			     code    ends
   6889					     end     POST

Symbol Name			  Type	 Value

??DATE				  Text	 "10-14-21"
??FILENAME			  Text	 "1840v4  "
??TIME				  Text	 "00:09:58"
??VERSION			  Number 0500
@CPU				  Text	 0101H
@CURSEG				  Text	 CODE
@FILENAME			  Text	 1840V4
@WORDSIZE			  Text	 2
A5700051COPR_IB			  Byte	 CODE:E000
ACTIVE_PAGE			  Byte	 DATA:0062
ACT_DISP_PAGE			  Near16 CODE:F230
ADDR_6845			  Word	 DATA:0063
ALT_INPUT			  Byte	 DATA:0019
ALT_KEY				  Number 0038
ALT_SHIFT			  Number 0008
ASCII_TBL			  Byte	 CODE:E412
B1				  Near16 CODE:EFF5
B2				  Near16 CODE:EFFB
B3				  Near16 CODE:F002
B4				  Near16 CODE:F017
B5				  Near16 CODE:F01F
B6				  Near16 CODE:F020
B7				  Near16 CODE:F02B
B8				  Near16 CODE:F033
B9				  Near16 CODE:F03D
BAD_ADDR_MARK			  Number 0002
BAD_CMD				  Number 0001
BAD_CRC				  Number 0010
BAD_DMA				  Number 0008
BAD_NEC				  Number 0020
BAD_SEEK			  Number 0040
BCT				  Near16 CODE:F859
BCT1				  Near16 CODE:F875
BCT2				  Near16 CODE:F877
BCT3				  Near16 CODE:F86C
BCT4				  Near16 CODE:F8B4
BEEP				  Near16 CODE:E5A9
BIOS_BREAK			  Byte	 DATA:0071
BOOT_LOCN			  Far16	 ABS0:7C00
BOOT_STRAP			  Near16 CODE:E6F7
BOOT_VEC			  Dword	 ABS0:0064
BUFFER_END			  Word	 DATA:0082
BUFFER_HEAD			  Word	 DATA:001A
BUFFER_START			  Word	 DATA:0080
BUFFER_TAIL			  Word	 DATA:001C
C1				  Word	 CODE:E016
C10				  Near16 CODE:E0BD
C11				  Near16 CODE:E0E5
C12				  Near16 CODE:E0F7
C13				  Near16 CODE:E108
C14				  Near16 CODE:E10E
C15				  Near16 CODE:E11C
C16				  Near16 CODE:E128
C17				  Near16 CODE:E132
C18				  Near16 CODE:E142
C19				  Near16 CODE:E18A
C20				  Near16 CODE:E18F
C21				  Near16 CODE:E19E
C22				  Near16 CODE:E1DD
C23				  Near16 CODE:E1E9
C25				  Near16 CODE:E1F7
C2A				  Near16 CODE:E02C
C2B				  Near16 CODE:E02F
C3				  Near16 CODE:E037
C3A				  Near16 CODE:E04F
C7X				  Near16 CODE:E066
C8				  Near16 CODE:E09A
C9				  Near16 CODE:E0B7
CA3				  Near16 CODE:E1F2
CAPS_KEY			  Number 0056
CAPS_SHIFT			  Number 0040
CAPS_STATE			  Number 0040
CAW				  Word	 CODE:E018
CHK_STAT_2			  Near16 CODE:EF0F
CMD_BLOCK			  Byte	 DATA:0042
CMD_PORT			  Number 0063
COD				  Number F000
CONTROL_BYTE			  Byte	 DATA:0076
CRLF				  Near16 CODE:FFCB
CRT_CHAR_GEN			  Byte	 CODE:FA6E
CRT_COLS			  Word	 DATA:004A
CRT_LEN				  Word	 DATA:004C
CRT_MODE			  Byte	 DATA:0049
CRT_MODE_SET			  Byte	 DATA:0065
CRT_PALLETTE			  Byte	 DATA:0066
CRT_START			  Word	 DATA:004E
CSI				  Word	 ABS0:04D0
CTL_KEY				  Number 001D
CTL_SHIFT			  Number 0004
CURSOR_MODE			  Word	 DATA:0060
CURSOR_POSN			  Word	 DATA:0050
D1				  Byte	 CODE:E201
D10				  Near16 CODE:E290
D11				  Near16 CODE:E29A
D12				  Near16 CODE:E2B6
D13				  Near16 CODE:E2C0
D14				  Near16 CODE:E2CA
D1L				  Number 000E
D2				  Byte	 CODE:E20F
D2L				  Number 000E
D3				  Near16 CODE:E23C
D4				  Near16 CODE:E259
D5				  Near16 CODE:E25B
D6				  Near16 CODE:E261
D7				  Near16 CODE:E269
D8				  Near16 CODE:E27B
D9				  Near16 CODE:E284
DAL				  Near16 CODE:E4E9
DAT				  Number 0040
DECIMAL_LOOP			  Near16 CODE:E653
DEL_KEY				  Number 0053
DISKETTE_IO			  Far16	 CODE:EC59
DISKETTE_PARM			  Dword	 ABS0:0078
DISKETTE_STATUS			  Byte	 DATA:0041
DISKW_STATUS			  Byte	 DATA:0074
DISK_BASE			  Byte	 CODE:EFC7
DISK_FORMAT			  Near16 CODE:ED1B
DISK_INT			  Far16	 CODE:EF57
DISK_POINTER			  Dword	 ABS0:0078
DISK_READ			  Near16 CODE:ED0E
DISK_RESET			  Near16 CODE:ECB9
DISK_STATUS			  Near16 CODE:ED0A
DISK_VECTOR			  Dword	 ABS0:0100
DISK_VERF			  Near16 CODE:ED17
DISK_WRITE			  Near16 CODE:ED41
DMA				  Number 0000
DMA08				  Number 0008
DMA_BOUNDARY			  Number 0009
DMA_SETUP			  Near16 CODE:EEC9
DUMMM_RETURN			  Near16 CODE:F98B
DUMMY_RETURN			  Near16 CODE:FF53
E1				  Byte	 CODE:E2CC
E10				  Near16 CODE:E35E
E11				  Near16 CODE:E37C
E12				  Near16 CODE:E37E
E13				  Near16 CODE:E380
E14				  Near16 CODE:E389
E15				  Near16 CODE:E38B
E16				  Near16 CODE:E394
E17				  Near16 CODE:E39C
E18				  Near16 CODE:E3A2
E19				  Near16 CODE:E3A7
E190				  Near16 CODE:E613
E1A				  Near16 CODE:E2DC
E1L				  Number 0004
E20A				  Near16 CODE:E622
E20B				  Near16 CODE:E627
E20C				  Near16 CODE:E637
E21A				  Near16 CODE:E689
E22				  Near16 CODE:E3F4
E3				  Near16 CODE:E2F6
E300				  Byte	 CODE:E69F
E3A				  Near16 CODE:E301
E7				  Near16 CODE:E30F
E8				  Near16 CODE:E31F
E9				  Near16 CODE:E341
EOI				  Number 0020
EQUIPMENT			  Far16	 CODE:F84D
EQUIP_FLAG			  Word	 DATA:0010
EQ_FL				  Byte	 ABS0:0410
ERR01				  Near16 CODE:E0BB
ERR10				  Near16 CODE:FFBB
ERROR_BEEP			  Near16 CODE:E768
ERR_BEEP			  Near16 CODE:E580
ERR_WAIT			  Near16 CODE:E4E0
EXIT				  Near16 CODE:FFC5
EXT_PTR				  Dword	 ABS0:007C
F1				  Byte	 CODE:E406
F10				  Near16 CODE:E490
F11				  Near16 CODE:E4A5
F12				  Near16 CODE:E4A7
F13				  Near16 CODE:E4BD
F14				  Near16 CODE:E4C6
F15				  Near16 CODE:E4CC
F16				  Near16 CODE:E502
F17				  Near16 CODE:E516
F18				  Near16 CODE:E542
F19				  Near16 CODE:E559
F19A				  Near16 CODE:F96D
F19B				  Near16 CODE:E55C
F1L				  Number 0004
F2				  Byte	 CODE:E40A
F20				  Near16 CODE:E570
F20A				  Near16 CODE:F980
F20B				  Near16 CODE:E574
F21				  Near16 CODE:E57A
F23				  Near16 CODE:E57D
F2L				  Number 0003
F3				  Byte	 CODE:E40D
F39				  Byte	 CODE:E6A6
F3L				  Number 0003
F4				  Word	 CODE:E410
F4E				  Word	 CODE:E412
F5				  Near16 CODE:E43F
F6				  Near16 CODE:E457
F7				  Near16 CODE:E460
F7A				  Near16 CODE:E470
FIND_POSITION			  Near16 CODE:F3A7
G1				  Near16 CODE:E58C
G10				  Near16 CODE:E5EC
G12				  Near16 CODE:E5FC
G2				  Near16 CODE:E591
G3				  Near16 CODE:E597
G4				  Near16 CODE:E59C
G5				  Near16 CODE:E5A2
G6				  Near16 CODE:E5A4
G7				  Near16 CODE:E5C0
G8				  Near16 CODE:E5D2
G9				  Near16 CODE:E5E5
GET_PARM			  Near16 CODE:EE51
GRAPHICS_DOWN			  Near16 CODE:F4F7
GRAPHICS_READ			  Near16 CODE:F633
GRAPHICS_UP			  Near16 CODE:F49E
GRAPHICS_WRITE			  Near16 CODE:F581
GRAPH_POSN			  Near16 CODE:F70F
H1				  Near16 CODE:E707
H2				  Near16 CODE:E722
H3				  Near16 CODE:E727
H4				  Near16 CODE:E72A
HDISK_INT			  Dword	 ABS0:0034
HD_ERROR			  Byte	 DATA:0042
HF_NUM				  Byte	 DATA:0075
HF_TBL_VEC			  Dword	 ABS0:0104
HOLD_STATE			  Number 0008
IDNPOL				  Word	 DATA:0090
INF_KEY				  Number 0059
INS_KEY				  Number 0052
INS_SHIFT			  Number 0080
INS_STATE			  Number 0080
INT15H				  Near16 CODE:F92D
INT5_PTR			  Word	 ABS0:0014
INTA00				  Number 0020
INTA01				  Number 0021
INT_ADDR			  Word	 ABS0:0020
INT_FLAG			  Number 0080
INT_PTR				  Dword	 ABS0:0020
INV_KEY_L			  Number 0058
INV_KEY_R			  Number 005A
INV_SHIFT			  Number 0004
IO_RAM_SIZE			  Word	 DATA:0015
IO_ROM_INIT			  Word	 DATA:0067
IO_ROM_SEG			  Word	 DATA:0069
J1				  Near16 CODE:EC87
J10				  Near16 CODE:ED29
J11				  Near16 CODE:ED57
J12				  Near16 CODE:EDA0
J13				  Near16 CODE:EDA4
J14				  Near16 CODE:EDAA
J15				  Near16 CODE:EDD4
J16				  Near16 CODE:EDF9
J17				  Near16 CODE:EE00
J18				  Near16 CODE:EE3D
J19				  Near16 CODE:EE3F
J2				  Near16 CODE:ECAB
J20				  Near16 CODE:EE46
J21				  Near16 CODE:EE47
J22				  Near16 CODE:EE4B
J23				  Near16 CODE:E736
J24				  Near16 CODE:E73D
J25				  Near16 CODE:E747
J26				  Near16 CODE:E749
J27				  Near16 CODE:E752
J28				  Near16 CODE:EE95
J29				  Near16 CODE:EEB9
J3				  Near16 CODE:ECB3
J30				  Near16 CODE:EEC0
J300				  Near16 CODE:EEAB
J31				  Near16 CODE:EEC6
J32				  Near16 CODE:EEC8
J33				  Near16 CODE:EEDE
J34				  Near16 CODE:EF28
J35				  Near16 CODE:EF29
J36				  Near16 CODE:EF37
J37				  Near16 CODE:EF4A
J38				  Near16 CODE:EF74
J39				  Near16 CODE:EF79
J4				  Near16 CODE:ECD2
J40				  Near16 CODE:EF85
J40A				  Near16 CODE:EF8A
J41				  Near16 CODE:EF8F
J42				  Near16 CODE:EF96
J43				  Near16 CODE:EF9E
J44				  Near16 CODE:EFAC
J45				  Near16 CODE:EFC4
J5				  Near16 CODE:ECD4
J6				  Near16 CODE:ECD6
J7				  Near16 CODE:ECF8
J8				  Near16 CODE:ED09
J9				  Near16 CODE:ED10
K1				  Near16 CODE:E845
K10				  Byte	 CODE:E8DC
K11				  Byte	 CODE:E916
K12				  Byte	 CODE:E950
K13				  Byte	 CODE:E95A
K14				  Byte	 CODE:E964
K15				  Byte	 CODE:E971
K16				  Near16 CODE:E9AF
K17				  Near16 CODE:E9D9
K18				  Near16 CODE:EA4B
K19				  Near16 CODE:EA60
K2				  Near16 CODE:E85E
K20				  Near16 CODE:EA6E
K21				  Near16 CODE:EA74
K22				  Near16 CODE:EA7B
K23				  Near16 CODE:EA9F
K24				  Near16 CODE:EAC3
K25				  Near16 CODE:EACC
K26				  Near16 CODE:EAEB
K26A				  Near16 CODE:EA48
K27				  Near16 CODE:EAF0
K28				  Near16 CODE:EAFF
K29				  Near16 CODE:EB09
K3				  Near16 CODE:E86F
K30				  Byte	 CODE:F905
K300				  Near16 CODE:EA1D
K301				  Near16 CODE:EA22
K302				  Near16 CODE:EA37
K303				  Near16 CODE:EA93
K304				  Near16 CODE:EAAF
K307				  Near16 CODE:EAF9
K31				  Near16 CODE:EB1F
K32				  Near16 CODE:EB28
K33				  Near16 CODE:EB44
K34				  Near16 CODE:EB55
K35				  Near16 CODE:EB65
K36				  Near16 CODE:EB69
K37				  Near16 CODE:EB6B
K38				  Near16 CODE:EB75
K39				  Near16 CODE:EB98
K4				  Near16 CODE:E75B
K40				  Near16 CODE:EBB3
K400				  Near16 CODE:EA06
K401				  Near16 CODE:EA0E
K406				  Near16 CODE:E9C2
K406B				  Near16 CODE:EADB
K407				  Near16 CODE:E9D6
K41				  Near16 CODE:EBBD
K42				  Near16 CODE:EBC7
K43				  Near16 CODE:EBD1
K44				  Near16 CODE:EBD7
K45				  Near16 CODE:EBEF
K46				  Near16 CODE:EBFC
K47				  Near16 CODE:EC06
K48				  Near16 CODE:EC19
K49				  Near16 CODE:EC27
K5				  Near16 CODE:E767
K50				  Near16 CODE:EC37
K51				  Near16 CODE:EC3D
K52				  Near16 CODE:EC43
K53				  Near16 CODE:EC4A
K54				  Near16 CODE:E78D
K54A				  Near16 CODE:EBEC
K55				  Near16 CODE:E796
K56				  Near16 CODE:E7A0
K57				  Near16 CODE:E7A4
K58				  Near16 CODE:E7AD
K59				  Near16 CODE:E7D2
K6				  Byte	 CODE:E875
K60				  Near16 CODE:E7D5
K61				  Near16 CODE:E7DF
K62				  Near16 CODE:E7FC
K63				  Near16 CODE:E802
K64				  Near16 CODE:E804
K65				  Near16 CODE:E771
K66				  Near16 CODE:E778
K67				  Near16 CODE:E781
K6L				  Number 000C
K7				  Byte	 CODE:E881
K8				  Byte	 CODE:E889
K80				  Near16 CODE:F94B
K81				  Near16 CODE:F948
K88				  Near16 CODE:E7BE
K89				  Near16 CODE:F933
K89A				  Near16 CODE:F961
K89B				  Near16 CODE:F95C
K9				  Byte	 CODE:E8C3
K98				  Near16 CODE:EC13
K99				  Near16 CODE:E7F7
KBDINT				  Number 0002
KBD_IN				  Number 0060
KBD_RESET			  Near16 CODE:E5CB
KB_BUFFER			  Word	 DATA:001E
KB_BUFFER_END			  Word	 DATA:003E
KB_CTL				  Number 0061
KB_DAT				  Number 0060
KB_FLAG				  Byte	 DATA:0017
KB_FLAG_1			  Byte	 DATA:0018
KB_INT				  Far16	 CODE:E987
KB_OK				  Near16 CODE:E66C
KEYBOARD_IO			  Far16	 CODE:E82E
LAST_VAL			  Byte	 DATA:006B
LAT				  Number 0002
LAT_KEY				  Number 0057
LAT_SHIFT			  Number 0001
LEFT_KEY			  Number 0054
LEFT_SHIFT			  Number 0002
M1				  Word	 CODE:F045
M10				  Near16 CODE:F144
M11				  Near16 CODE:F16F
M12				  Near16 CODE:F172
M13				  Near16 CODE:F175
M14				  Near16 CODE:F1C3
M15				  Near16 CODE:F1CA
M16				  Near16 CODE:F1DA
M17				  Near16 CODE:F207
M18				  Near16 CODE:F209
M19				  Near16 CODE:F269
M1L				  Number 0020
M2				  Near16 CODE:F080
M20				  Near16 CODE:F270
M3				  Near16 CODE:F098
M4				  Number 0010
M5				  Word	 CODE:F0E4
M6				  Byte	 CODE:F0EC
M7				  Byte	 CODE:F0F4
M8				  Near16 CODE:F10D
M9				  Near16 CODE:F141
MAX_PERIOD			  Number 0540
MEMORY_SIZE			  Word	 DATA:0013
MEMORY_SIZE_DETERMINE		  Far16	 CODE:F841
MEM_SIZ				  Word	 ABS0:0413
MFG_TST				  Byte	 DATA:0012
MIN_PERIOD			  Number 0410
MOTOR_COUNT			  Byte	 DATA:0040
MOTOR_STATUS			  Byte	 DATA:003F
MOTOR_WAIT			  Number 0025
N1				  Near16 CODE:F2AB
N10				  Near16 CODE:F331
N11				  Near16 CODE:F33A
N12				  Near16 CODE:F351
N13				  Near16 CODE:F35F
N14				  Near16 CODE:F36A
N15				  Near16 CODE:F36D
N16				  Near16 CODE:F379
N2				  Near16 CODE:F2B9
N3				  Near16 CODE:F2C4
N4				  Near16 CODE:F2C7
N5				  Near16 CODE:F2D0
N6				  Near16 CODE:F2E3
N7				  Near16 CODE:F2E6
N8				  Near16 CODE:F2FD
N9				  Near16 CODE:F30A
NEC_OP				  Near16 CODE:EE64
NEC_OUTPUT			  Near16 CODE:E72F
NEC_STATUS			  Byte	 DATA:0042
NMI_INT				  Near16 CODE:E2A7
NMI_PTR				  Word	 ABS0:0008
NUM_KEY				  Number 0045
NUM_SHIFT			  Number 0020
NUM_STATE			  Number 0020
NUM_TRANS			  Near16 CODE:EFB0
ORG_VECTOR			  Dword	 ABS0:004C
OSH				  Near16 CODE:E3C9
P1				  Near16 CODE:F38A
P10				  Near16 CODE:F403
P11				  Near16 CODE:F40C
P12				  Near16 CODE:F413
P13				  Near16 CODE:F419
P2				  Near16 CODE:F398
P3				  Near16 CODE:F39E
P4				  Near16 CODE:F3B7
P5				  Near16 CODE:F3BD
P6				  Near16 CODE:F3D0
P7				  Near16 CODE:F3DB
P8				  Near16 CODE:F3E2
P9				  Near16 CODE:F3E8
PARM_PTR			  Dword	 ABS0:0074
PORT_A				  Number 0060
PORT_B				  Number 0061
PORT_C				  Number 0062
PORT_OFF			  Byte	 DATA:0077
POSITION			  Near16 CODE:F28B
POST				  Near16 CODE:FFF0
PRI10				  Near16 CODE:FF7F
PRI15				  Near16 CODE:FF8D
PRINTER_BASE			  Word	 DATA:0008
PRINTER_IO			  Far16	 CODE:EFD2
PRINT_SCREEN			  Far16	 CODE:FF54
PRT_DEC_LOOP			  Near16 CODE:E660
PRT_HEX				  Near16 CODE:E698
PRT_SIZ				  Near16 CODE:E64C
P_MSG				  Near16 CODE:E5F5
R1				  Near16 CODE:F450
R10				  Near16 CODE:F4E5
R11				  Near16 CODE:F4F3
R12				  Near16 CODE:F517
R13				  Near16 CODE:F533
R14				  Near16 CODE:F542
R15				  Near16 CODE:F544
R16				  Near16 CODE:F553
R17				  Near16 CODE:F557
R18				  Near16 CODE:F570
R2				  Near16 CODE:F457
R3				  Near16 CODE:F45B
R4				  Near16 CODE:F46E
R5				  Near16 CODE:F486
R6				  Near16 CODE:F490
R7				  Near16 CODE:F4BC
R8				  Near16 CODE:F4D4
R9				  Near16 CODE:F4E3
READ_AC_CURRENT			  Near16 CODE:F37D
READ_CURSOR			  Near16 CODE:F21A
READ_DOT			  Near16 CODE:F427
READ_LPEN			  Near16 CODE:F7A9
RECORD_NOT_FND			  Number 0004
REGEN				  Byte	 VIDEO_RAM:0000
REGENW				  Word	 VIDEO_RAM:0000
RESET				  Near16 CODE:E067
RESET_FLAG			  Word	 DATA:0072
RESULTS				  Near16 CODE:EF6B
RES_FL				  Word	 ABS0:0472
RIGHT_KEY			  Number 0055
RIGHT_SHIFT			  Number 0001
ROS				  Near16 CODE:E0E7
RS232_BASE			  Word	 DATA:0000
RS232_IO			  Near16 CODE:F929
RUST				  Byte	 CODE:F8CB
RUST2				  Byte	 CODE:E6BD
RUS_KEY				  Number 005B
RW_OPN				  Near16 CODE:ED4D
S1				  Near16 CODE:F594
S10				  Near16 CODE:F5FC
S11				  Near16 CODE:F618
S12				  Near16 CODE:F648
S13				  Near16 CODE:F660
S14				  Near16 CODE:F664
S15				  Near16 CODE:F676
S16				  Near16 CODE:F683
S17				  Near16 CODE:F688
S18				  Near16 CODE:F6B1
S19				  Near16 CODE:F6B7
S2				  Near16 CODE:F5A3
S20				  Near16 CODE:F6C0
S21				  Near16 CODE:F6CC
S22				  Near16 CODE:F6D5
S23				  Near16 CODE:F6EF
S24				  Near16 CODE:F6F9
S25				  Near16 CODE:F6FF
S26				  Near16 CODE:F70C
S3				  Near16 CODE:F5B3
S4				  Near16 CODE:F5B7
S5				  Near16 CODE:F5BF
S6				  Near16 CODE:F5D3
S7				  Near16 CODE:F5DF
S8				  Near16 CODE:F5E6
S9				  Near16 CODE:F5EA
SCROLL_DOWN			  Near16 CODE:F341
SCROLL_KEY			  Number 0046
SCROLL_POSITION			  Near16 CODE:F2EA
SCROLL_SHIFT			  Number 0010
SCROLL_STATE			  Number 0010
SCROLL_UP			  Near16 CODE:F29C
SEEK				  Near16 CODE:EE67
SEEK_STATUS			  Byte	 DATA:003E
SET_COLOR			  Near16 CODE:F254
SET_CPOS			  Near16 CODE:F1F0
SET_CTYPE			  Near16 CODE:F1CF
SET_MODE			  Near16 CODE:F0FC
SP_TEST				  Near16 CODE:E5D8
STA				  Number 0030
START				  Near16 CODE:E067
STATUS_BYTE			  Byte	 XXDATA:0000
STAT_OFFSET			  Byte	 DATA:007C
STGTST				  Near16 CODE:E01A
STGTST_CNT			  Near16 CODE:E01D
STG_LOC0			  Byte	 ABS0:0000
T1				  Near16 CODE:FE7F
T2				  Near16 CODE:FE82
T3				  Near16 CODE:FE95
T4				  Near16 CODE:FEB8
T5				  Near16 CODE:FED8
T6				  Near16 CODE:FEE9
TABL				  Word	 DATA:00E0
TABL1				  Word	 ABS0:04E0
TIMER				  Number 0040
TIMERO				  Number 0040
TIMER_HIGH			  Word	 DATA:006E
TIMER_INT			  Far16	 CODE:FEA5
TIMER_LOW			  Word	 DATA:006C
TIMER_OFL			  Byte	 DATA:0070
TIME_OF_DAY			  Far16	 CODE:FE6E
TIME_OUT			  Number 0080
TIM_CTL				  Number 0043
TMINT				  Number 0001
TMP_TOS				  Word	 DATA:3FF0
TOS				  Word	 STAC:0100
TST12				  Near16 CODE:E422
TST14				  Near16 CODE:E47D
TST6				  Near16 CODE:E21D
TST8				  Near16 CODE:E2D0
U1				  Near16 CODE:F753
U10				  Near16 CODE:F793
U11				  Near16 CODE:F79A
U2				  Near16 CODE:F766
U3				  Near16 CODE:F76C
U4				  Near16 CODE:F77A
U5				  Near16 CODE:F77C
U6				  Near16 CODE:F780
U7				  Near16 CODE:F782
U8				  Near16 CODE:F786
U9				  Near16 CODE:F78F
V1				  Byte	 CODE:F7A1
V2				  Near16 CODE:F7E8
V3				  Near16 CODE:F80F
V4				  Near16 CODE:F81B
V5				  Near16 CODE:F82D
V6				  Near16 CODE:F82F
V7				  Near16 CODE:F839
VECTOR_TABLE			  Word	 CODE:FEF3
VIDEO_INT			  Word	 ABS0:0040
VIDEO_IO			  Near16 CODE:F065
VIDEO_PARMS			  Byte	 CODE:F0A4
VIDEO_RA			  Number B800
VIDEO_RETURN			  Near16 CODE:F1C7
VIDEO_STATE			  Near16 CODE:F27A
WAIT_INT			  Near16 CODE:EF30
WRITE_AC_CURRENT		  Near16 CODE:F3C3
WRITE_C_CURRENT			  Near16 CODE:F3F6
WRITE_DOT			  Near16 CODE:F438
WRITE_PROTECT			  Number 0003
WRITE_TTY			  Near16 CODE:F722
WRITE_TTY2			  Near16 CODE:F966
X1				  Near16 CODE:ED8B
X2				  Near16 CODE:ED87
XLAT_PRINT_COD			  Near16 CODE:E3F7
XXDAT				  Number 0050
ZB				  Byte	 ABS0:0000
ZW				  Word	 ABS0:0000

Groups & Segments		  Bit Size Align  Combine Class

ABS0				  16  7C00 Para	  none
CODE				  16  00010000 Para   none
DATA				  16  3FF0 Para	  none
STAC				  16  0100 Para	  Stack
VIDEO_RAM			  16  4000 Para	  none
XXDATA				  16  0001 Para	  none

