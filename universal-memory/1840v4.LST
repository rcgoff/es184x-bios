Turbo Assembler	 Version 5.0	    10-30-21 21:08:12	    Page 1
1840v4.asm



      1				     ;This source code made by Gleb Larionov, Prague.
      2				     ;Changed by Leonid	Yadrennikov, Tyumen.
      3				     ;v1 - 05.10.2021 -	ros_checksum removed, ES1841 memory switching-on added
      4				     ;v2 - 13.10.2021 -	int vector table loader	and table itself shortened (like in PCBIOSv3),
      5				     ;			BX register in STGTST is free
      6				     ;___________________
      7				     ; v4 - ??/??/???? (Other version than 24/04/1981) новая клавиатура
      8				     ;	БАЗОВАЯ СИСТЕМА ВВОДА/ВЫВОДА (БСУВВ)
      9				     ;___________________
     10	      =0060		     port_a  equ     60h
     11	      =F000		     cod     equ     0f000h
     12	      =0040		     dat     equ     0040h
     13	      =0030		     sta     equ     0030h
     14	      =0050		     xxdat   equ     0050h
     15	      =B800		     video_ra equ    0b800h
     16	      =0061		     port_b  equ     61h
     17	      =0062		     port_c  equ     62h
     18	      =0063		     cmd_port equ    63h
     19	      =0020		     inta00  equ     20h
     20	      =0021		     inta01  equ     21h
     21	      =0020		     eoi     equ     20h
     22	      =0040		     timer   equ     40h
     23	      =0043		     tim_ctl equ     43h
     24	      =0040		     timero  equ     40h
     25	      =0001		     tmint   equ     01
     26	      =0008		     dma08   equ     08
     27	      =0000		     dma     equ     00
     28	      =0540		     max_period	equ  540h
     29	      =0410		     min_period	equ  410h
     30	      =0060		     kbd_in  equ     60h
     31	      =0002		     kbdint  equ     02
     32	      =0060		     kb_dat  equ     60h
     33	      =0061		     kb_ctl  equ     61h
     34				     ;_______________
     35				     ;	Расположение прерываний 8086
     36				     ;_________________________
     37	0000			     abs0    segment para
     38	0000			     zb	     label   byte
     39	0000			     zw	     label   word
     40	0000			     stg_loc0 label  byte
     41					     org     2*4
     42	0008			     nmi_ptr label   word
     43					     org     5*4
     44	0014			     int5_ptr label  word
     45					     org     8*4
     46	0020			     int_addr label  word
     47	0020			     int_ptr label   dword
     48					     org     0dh*4
     49	0034			     hdisk_int	label  dword
     50					     org     10h*4
     51	0040			     video_int label word
     52					     org     13h*4
     53	004C			     org_vector	 label	dword
     54					     org     19h*4
     55	0064			     boot_vec  label  dword
     56					     org     1dh*4
     57	0074			     parm_ptr label  dword
     58					     org     01eh*4
     59	0078			     disk_pointer label	dword
     60	0078			     diskette_parm  label  dword
     61					     org     01fh*4
     62	007C			     ext_ptr label   dword
     63					     org     040h*4
     64	0100			     disk_vector  label	 dword
     65					     org     041h*4
     66
     67	0104			     hf_tbl_vec	 label	dword
     68					     org     410h
     69	0410			     eq_fl   label   byte
     70
     71					     org     413h
     72	0413			     mem_siz label   word
     73					     org     472h
     74	0472			     res_fl  label   word
     75					     org     4d0h
     76	04D0			     csi     label   word
     77					     org     4e0h
     78	04E0			     tabl1   label   word
     79					     org     7c00h
     80	7C00			     boot_locn label far
     81	7C00			     abs0    ends
     82
     83				     ;______________________
     84				     ;	Использование стека только во	время	       +
     85				     инициализации
     86				     ;______________________
     87	0000			     stac    segment para stack
     88	0000  80*(????)			     dw	     128 dup(?)
     89
     90
     91
     92	0100			     tos     label   word
     93	0100			     stac    ends
     94
     95				     ;______________________
     96				     ;	Область данных ПЗУ
     97				     ;____________________
     98	0000			     data segment    para
     99	0000  04*(????)		     rs232_base	dw 4 dup(?)
    100
    101
    102
    103	0008  04*(????)		     printer_base dw 4 dup(?)
    104
    105
    106
    107	0010  ????		     equip_flag	dw ?
    108	0012  ??		     mfg_tst db	     ?
    109	0013  ????		     memory_size dw  ?
    110	0015  ????		     io_ram_size dw  ?
    111				     ;_______________
    112				     ;	Область данных клавиатуры
    113				     ;_________________
    114	0017  ??		     kb_flag db	     ?
    115
    116				     ;	Размещение флажков в kb_flag
    117
    118	      =0080		     ins_state equ   80h
    119	      =0040		     caps_state	equ  40h
    120	      =0020		     num_state equ   20h
    121	      =0010		     scroll_state equ 10h
    122	      =0008		     alt_shift equ   08h
    123	      =0004		     ctl_shift equ   04h
    124	      =0002		     left_shift	equ  02h
    125	      =0001		     right_shift equ 01h
    126
    127	0018  ??		     kb_flag_1 db    ?
    128
    129	      =0080		     ins_shift equ   80h
    130	      =0040		     caps_shift	equ  40h
    131	      =0020		     num_shift equ   20h
    132	      =0010		     scroll_shift equ 10h
    133	      =0008		     hold_state	equ  08h
    134	      =0004		     inv_shift equ   04h
    135	      =0002		     lat	     equ     02h
    136	      =0001		     lat_shift	     equ     01h
    137
    138
    139
    140	0019  ??		     alt_input db    ?
    141	001A  ????		     buffer_head dw  ?
    142	001C  ????		     buffer_tail dw  ?
    143	001E  10*(????)		     kb_buffer dw    16	dup(?)
    144
    145
    146
    147	003E			     kb_buffer_end label word
    148
    149				     ;	head=tail указывает на заполнение буфера
    150
    151	      =0045		     num_key equ     69
    152	      =0046		     scroll_key	equ  70
    153	      =0038		     alt_key equ     56
    154	      =001D		     ctl_key equ     29
    155	      =0056		     caps_key equ    86
    156	      =0054		     left_key equ    84
    157	      =0055		     right_key equ   85
    158	      =0052		     ins_key equ     82
    159	      =0053		     del_key equ     83
    160	      =0059		     inf_key   equ   89
    161	      =0058		     inv_key_l	equ  88
    162	      =005A		     inv_key_r equ   90
    163	      =005B		     rus_key	equ  91
    164	      =0057		     lat_key equ     87
    165
    166				     ;____________________
    167				     ;	Область данных НГМД
    168				     ;____________________
    169	003E  ??		     seek_status db  ?
    170				     ;
    171				     ;
    172	      =0080		     int_flag equ    080h
    173	003F  ??		     motor_status db ?
    174				     ;
    175				     ;
    176	0040  ??		     motor_count db  ?
    177	      =0025		     motor_wait	equ  37
    178
    179				     ;
    180	0041  ??		     diskette_status db	?
    181	      =0080		     time_out equ    80h
    182	      =0040		     bad_seek equ    40h
    183	      =0020		     bad_nec  equ    20h
    184	      =0010		     bad_crc  equ    10h
    185	      =0009		     dma_boundary equ 09h
    186	      =0008		     bad_dma  equ    08h
    187	      =0004		     record_not_fnd equ	04h
    188	      =0003		     write_protect equ 03h
    189	      =0002		     bad_addr_mark equ 02h
    190	      =0001		     bad_cmd equ     01h
    191
    192	0042			     cmd_block	label  byte
    193	0042			     hd_error  label  byte
    194	0042  07*(??)		     nec_status	db   7 dup(?)
    195
    196
    197
    198
    199				     ;_____________________
    200				     ;	Область данных ЭЛИ
    201				     ;_____________________
    202	0049  ??		     crt_mode db     ?
    203	004A  ????		     crt_cols dw     ?
    204	004C  ????		     crt_len  dw     ?
    205	004E  ????		     crt_start dw    ?
    206	0050  08*(????)		     cursor_posn dw  8 dup(?)
    207
    208
    209
    210	0060  ????		     cursor_mode dw  ?
    211	0062  ??		     active_page db  ?
    212	0063  ????		     addr_6845 dw    ?
    213	0065  ??		     crt_mode_set db ?
    214	0066  ??		     crt_pallette db ?
    215
    216				     ;___________________
    217				     ;	Область данных НМД
    218				     ;___________________
    219	0067  ????		     io_rom_init dw  ?
    220	0069  ????		     io_rom_seg	dw   ?
    221	006B  ??		     last_val db     ?
    222
    223				     ;___________________
    224				     ;	Область данных таймера
    225				     ;___________________
    226	006C  ????		     timer_low dw    ?
    227	006E  ????		     timer_high	dw   ?
    228	0070  ??		     timer_ofl db    ?
    229				     ;___________________
    230				     ;	Область данных системы
    231				     ;___________________
    232	0071  ??		     bios_break	db   ?
    233	0072  ????		     reset_flag	dw   ?
    234	0074  ??		     diskw_status  db  ?
    235	0075  ??		     hf_num  db	  ?
    236	0076  ??		     control_byte  db  ?
    237	0077  ??		     port_off  db  ?
    238						     org     7ch
    239	007C			     stat_offset     label   byte ; смещение для хранения	       +
    240				     состояний	модема
    241
    242					     org     80h
    243	0080  ????		     buffer_start    dw	     ?
    244	0082  ????		     buffer_end	     dw	     ?
    245					     org     0090h
    246	0090  ????		     idnpol  dw	     ?
    247					     org     0e0h
    248	00E0			     tabl    label   word
    249
    250					     org     3ff0h
    251	3FF0			     tmp_tos label   word
    252				     ;
    253	3FF0			     data    ends
    254
    255				     ;___________________
    256				     ;	Область расширения данных
    257				     ;_________________________________
    258	0000			     xxdata segment  para
    259	0000  ??		     status_byte db  ?
    260	0001			     xxdata  ends
    261
    262				     ;_________________
    263				     ;	Буфер ЭЛИ
    264				     ;___________________
    265	0000			     video_ram segment para
    266	0000			     regen   label   byte
    267	0000			     regenw  label   word
    268	0000  4000*(??)			     db	     16384 dup(?)
    269
    270
    271
    272	4000			     video_ram ends
    273				     ;____________________
    274				     ;	Основной массив в ПЗУ	(сегмент	code)
    275				     ;____________________
    276
    277	0000			     code segment para
    278
    279						     org 0E000h
    280
    281	E000  35 37 30 30 30 35	31+  a5700051Copr_Ib db	'5700051 copr. ibm 1981'
    282	      20 63 6F 70 72 2E	20+
    283	      69 62 6D 20 31 39	38+
    284	      31
    285	E016  E0E5r		     c1		     dw	offset c11	     ; адрес    возврата
    286	E018  E1F1r		     caw	     dw	offset ca3
    287					     assume cs:code,ss:code,es:abs0,ds:data
    288
    289	E01A			     stgtst:
    290	E01A  B9 4000				     mov     cx,4000h
    291
    292	E01D			     stgtst_cnt	     proc    near
    293	E01D  D1 E9				     shr     cx,1	     ;rc words count is	2x less	than bytes
    294	E01F  FC				     cld
    295	E020  8E D9				     mov     ds, cx
    296	E022  B8 FFFF				     mov     ax, 0FFFFh
    297	E025  BA AA55				     mov     dx, 0AA55h
    298	E028  2B FF				     sub     di, di
    299	E02A  F3> AB				     repe stosw
    300
    301	E02C			     c2a:
    302	E02C  4F				     dec     di
    303	E02D  4F				     dec     di
    304	E02E  FD				     std
    305
    306	E02F			     c2b:
    307	E02F  8B F7				     mov     si, di
    308	E031  8C D9				     mov     cx, ds
    309				     ;---------------rc:
    310	E033  8A FC				     mov     bh, ah
    311	E035  8A DF				     mov     bl, bh	     ;rc now old pattern is in BX
    312
    313	E037			     c3:
    314	E037  26				     db	     26h	     ;rc ES segment prefix
    315	E038  AD				     lodsw
    316	E039  33 C3				     xor     ax, bx
    317	E03B  75 29				     jnz     c7x
    318	E03D  E4 62				     in	     al, 62h
    319	E03F  24 40				     and     al, 40h
    320	E041  B0 00				     mov     al, 0
    321	E043  75 21				     jnz     c7x
    322	E045  83 FB 00				     cmp     bx, 0
    323	E048  74 05				     jz	     c3a
    324	E04A  8A C2				     mov     al, dl
    325	E04C  8A E0				     mov     ah, al	     ;rc now new pattern is in AX
    326	E04E  AB				     stosw
    327
    328	E04F			     c3a:
    329	E04F  E2 E6				     loop    c3
    330	E051  83 FB 00				     cmp     bx, 0
    331	E054  74 10				     jz	     c7x
    332	E056  8B D8				     mov     bx, ax
    333	E058  86 F2				     xchg    dh, dl
    334	E05A  FC				     cld
    335	E05B  47				     inc     di
    336	E05C  47				     inc     di
    337	E05D  74 D0				     jz	     c2b
    338	E05F  4F				     dec     di
    339	E060  4F				     dec     di
    340	E061  BA 0001				     mov     dx, 1
    341	E064  EB C6				     jmp     short c2a
    342
    343	E066			     c7x:
    344	E066  C3				     retn
    345	E067			     stgtst_cnt	     endp
    346
    347
    348				     ;____________________
    349				     ;	Сброс системы - фаза 1
    350				     ;____________________
    351				     ;_____________________
    352				     ;	Проверка 16К памяти
    353				     ;_____________________
    354				     ;___________________
    355				     ;	ТЕСТ.01
    356				     ;	     Тест процессора 8086. Осуществляет	       +
    357				     проверку регистра
    358				     ;	     признаков, команд перехода и		       +
    359				     считывания-записи
    360				     ;	     общих	и сегментных	регистров.
    361				     ;_____________________________________
    362	E067			     reset   label   near
    363	E067  FA		     start:  cli		     ; сброс признака разрешения+
    364				     прерывания
    365	E068  B4 D5			     mov     ah,0d5h	     ;уст признаки SF,CF,ZF,AF
    366	E06A  9E			     sahf
    367	E06B  73 4E			     jnc     err01	     ;CF=0,в программу ошибок
    368	E06D  75 4C			     jnz     err01	     ;ZF=0,в программу ошибок
    369	E06F  7B 4A			     jnp     err01	     ;PF=0,в программу ошибок
    370	E071  79 48			     jns     err01	     ;SF=0,в программу ошибок
    371	E073  9F			     lahf		     ;загрузить признаки в AH
    372	E074  B1 05			     mov     cl,5	     ;загрузить счетчик
    373	E076  D2 EC			     shr     ah,cl	     ;выделить бит переноса
    374	E078  73 41			     jnc     err01	     ;признак AF=0
    375	E07A  B0 40			     mov     al,40h	     ;уст признак переполнения
    376	E07C  D0 E0			     shl     al,1	     ;уст для контроля
    377	E07E  71 3B			     jno     err01	     ;признак OF	не уст
    378	E080  32 E4			     xor     ah,ah	     ;уст AH=0
    379	E082  9E			     sahf		     ;уст в	исходное состояние SF,+
    380				     CF,ZF,PF
    381	E083  72 36			     jc	     err01	     ;признак CF=1
    382	E085  74 34			     jz	     err01	     ;признак ZF=1
    383	E087  78 32			     js	     err01	     ;признак SF=1
    384	E089  7A 30			     jp	     err01	     ;признак PF=1
    385	E08B  9F			     lahf		     ;загрузить признаки в AH
    386	E08C  B1 05			     mov     cl,5	     ;загрузить счетчик
    387	E08E  D2 EC			     shr     ah,cl	     ;выделить бит переноса
    388	E090  72 29			     jc	     err01	     ;признак IF=1
    389	E092  D0 E4			     shl     ah,1	     ;контроль,	что OF сброшен
    390	E094  70 25			     jo	     err01
    391	E096  B8 FFFF			     mov     ax,0ffffh	     ;уст эталона в AX
    392	E099  F9			     stc
    393	E09A  8E D8		     c8:     mov     ds,ax	     ;запись во	все регистры
    394	E09C  8C DB			     mov     bx,ds
    395	E09E  8E C3			     mov     es,bx
    396	E0A0  8C C1			     mov     cx,es
    397	E0A2  8E D1			     mov     ss,cx
    398	E0A4  8C D2			     mov     dx,ss
    399	E0A6  8B E2			     mov     sp,dx
    400	E0A8  8B EC			     mov     bp,sp
    401	E0AA  8B F5			     mov     si,bp
    402	E0AC  8B FE			     mov     di,si
    403	E0AE  73 07			     jnc     c9
    404	E0B0  33 C7			     xor     ax,di	     ;проверка всех	регистров
    405								     ;эталонами "FFFF", "0000"
    406	E0B2  75 07			     jnz     err01
    407	E0B4  F8			     clc
    408	E0B5  73 E3			     jnc     c8
    409	E0B7			     c9:
    410	E0B7  0B C7			     or	     ax,di	     ;нулевым шаблоном все	       +
    411				     регистры проверены ?
    412	E0B9  74 02			     jz	     c10	     ;ДА - переход к следующему    +
    413				     тесту
    414	E0BB  EB AA		     err01:  jmp   short  start
    415				     ;_______________________
    416				     ; ТЕСТ.02
    417				     ;_______________________
    418	E0BD			     c10:
    419	E0BD  B0 00			     mov     al,0	     ;запретить прерывaния NMI
    420	E0BF  E6 A0			     out     0a0h,al
    421	E0C1  E6 83			     out     83h,al	     ;инициализация регистрa       +
    422				     страниц ПДП
    423	E0C3  B0 99			     mov     al,99h	     ;уст A,C -ввод, B -	вывод
    424	E0C5  E6 63			    out	     cmd_port,al	     ;запись в регистр	       +
    425				     режима
    426									     ;трехканального порта
    427	E0C7  B0 FC			     mov     al,0fch		     ;блокировка контроля    +
    428				     по четности
    429	E0C9  E6 61			     out     port_b,al
    430	E0CB  2A C0			     sub     al,al
    431	E0CD  BA 03D8			     mov     dx,3d8h
    432	E0D0  EE			     out     dx,al	     ;блокировка цветного ЭЛИ
    433	E0D1  FE C0			     inc     al
    434	E0D3  BA 03B8			     mov     dx,3b8h
    435	E0D6  EE			     out     dx,al	     ;блокировка черно-белого     +
    436				     ЭЛИ
    437	E0D7  B8 F000			     mov     ax,cod	     ;уст сегментного регистра SS
    438	E0DA  8E D0			     mov     ss,ax
    439	E0DC  BB E000			     mov     bx,0e000h		     ;уст начального адреса +
    440				     памяти
    441	E0DF  BC E016r			     mov     sp,offset c1	     ;уст адреса возврата
    442	E0E2  EB 03			     jmp     short ros
    443	E0E4  90				     nop
    444	E0E5  75 D4		     c11:    jne     err01
    445				     ;------------------------
    446				     ;	ТЕСТ.03
    447				     ;	 Осуществляет проверку, инициализацию и      +
    448				     запуск ПДП и
    449				     ; таймера 1	для регенерации памяти
    450				     ;_________________________
    451				     ;	 Блокировка контроллера ПДП
    452
    453	E0E7  B0 04		     ros:    mov     al,04
    454	E0E9  E6 08			     out     dma08,al
    455
    456				     ;	 Проверка правильности функционирования
    457				     ;	 таймера	1
    458
    459	E0EB  B0 54			     mov     al,54h	     ;выбор таймера	1,LSB, режим 2
    460	E0ED  E6 43			     out     timer+3,al
    461	E0EF  2B C9			     sub     cx,cx
    462	E0F1  8A D9			     mov     bl,cl
    463	E0F3  8A C1			     mov     al,cl	     ;уст начального счетчика     +
    464				     таймера в 0
    465	E0F5  E6 41			     out     timer+1,al
    466	E0F7			     c12:
    467	E0F7  B0 40			     mov     al,40h
    468	E0F9  E6 43			     out     timer+3,al
    469	E0FB  E4 41			     in	     al,timer+1	     ;считывание счетчика	       +
    470				     таймера 1
    471	E0FD  0A D8			     or	     bl,al	     ;все биты таймера включены ?
    472	E0FF  80 FB FF			     cmp     bl,0ffh	     ;ДА - сравнение	с FF
    473	E102  74 04			     je	     c13	     ;биты таймера сброшены
    474	E104  E2 F1			     loop    c12	     ;биты таймера установлены
    475	E106  EB B3			     jmp     short err01     ;сбой таймера 1, останов	       +
    476				     системы
    477	E108			     c13:
    478	E108  8A C3			     mov     al,bl	     ;уст счетчика таймера 1
    479	E10A  2B C9			     sub     cx,cx
    480	E10C  E6 41			     out     timer+1,al
    481	E10E			     c14:	     ;цикл таймера
    482	E10E  B0 40			     mov     al,40h
    483	E110  E6 43			     out     timer+3,al
    484	E112  E4 41			     in	     al,timer+1		     ;считывание счетчика    +
    485				     таймера 1
    486	E114  22 D8			     and     bl,al
    487	E116  74 04			     jz	     c15
    488	E118  E2 F4			     loop    c14	     ;цикл таймера
    489	E11A  EB 9F			     jmp     short err01
    490
    491				     ;	 Инициализация таймера 1
    492
    493	E11C			     c15:
    494	E11C  B0 54			     mov     al,54h
    495	E11E  E6 43			     out     timer+3,al	     ;запись в регистр режима      +
    496				     таймера
    497	E120  B0 07			     mov     al,7    ;уст коэффициента деления для    +
    498				     регенерации
    499	E122  E6 41			     out     timer+1,al	     ;запись в счетчик таймера 1
    500	E124  E6 0D			     out     dma+0dh,al	     ;послать гашение ПДП
    501
    502				     ;	 Цикл проверки регистров ПДП
    503
    504	E126  B0 FF			     mov     al,0ffh	     ;запись шаблона FF во все       +
    505				     регистры
    506	E128  8A D8		     c16:    mov     bl,al	     ;сохранить шаблон для	       +
    507				     сравнения
    508	E12A  8A F8			     mov     bh,al
    509	E12C  B9 0008			     mov     cx,8	     ;уст цикла	счетчика
    510	E12F  BA 0000			     mov     dx,dma	     ;уст адреса регистра порта  +
    511				     ввода/вывода
    512	E132  EE		     c17:    out     dx,al	     ;запись  шаблона в регистр
    513	E133  EE			     out     dx,al	     ;старшие 16	бит регистра
    514	E134  B8 0101			     mov     ax,0101h	     ;изменение AX перед		       +
    515				     считыванием
    516	E137  EC			     in	     al,dx
    517	E138  8A E0			     mov     ah,al	     ;сохранить младшие	16 бит      +
    518				     регистра
    519	E13A  EC			     in	     al,dx
    520	E13B  3B D8			     cmp     bx,ax	     ;считан тот же шаблон ?
    521	E13D  74 03			     je	     c18	     ;ДА - проверка следующего     +
    522				     регистра
    523	E13F  E9 FF79			     jmp     err01	     ;НЕТ - ошибка
    524	E142			     c18:			     ;выбор следующего регистра +
    525				     ПДП
    526	E142  42			     inc     dx		     ;установка адреса		       +
    527				     следующего
    528								     ;регистра ПДП
    529	E143  E2 ED			     loop    c17	     ;запись шаблона для	       +
    530				     следующего регистра
    531	E145  F6 D0			     not     al		       ;уст шаблона в 0
    532	E147  74 DF			     jz	     c16
    533
    534				     ;	 Инициализация и запуск ПДП
    535
    536	E149  B0 FF			     mov     al,0ffh	     ;уст счетчика 64K для	       +
    537				     регенерации
    538	E14B  E6 01			     out     dma+1,al
    539	E14D  E6 01			     out     dma+1,al
    540	E14F  B0 58			     mov     al,058h	     ;уст режим	ПДП,	счетчик 0,      +
    541				     считывание
    542	E151  E6 0B			     out     dma+0bh,al	     ;запись в регистр режима ПДП
    543	E153  B0 00			     mov     al,0	     ;доступность контроллера    +
    544				     ПДП
    545	E155  E6 08			     out     dma+8,al	     ;уст регистр команд ПДП
    546	E157  E6 0A			     out     dma+10,al	     ;доступность канала 0 для     +
    547				     регенерации
    548	E159  B0 41			     mov     al,41h	     ;уст режим	дла канала 1
    549	E15B  E6 0B			     out     dma+0bh,al
    550	E15D  B0 42			     mov     al,42h	     ;уст режим	для канала 2
    551	E15F  E6 0B			     out     dma+0bh,al
    552	E161  B0 43			     mov     al,43h	     ;уст режим	для канала 3
    553	E163  E6 0B			     out     dma+0bh,al
    554				     ;======================================RCgoff begin
    555				     ;-----------------turn ES1841 memory on, if present
    556	E165  BA 02B0				     mov dx,2b0h
    557	E168  B0 0C				     mov al,0ch			     ;0b0000.1100 - turn RD,WR on, no  +
    558				     reconfig
    559	E16A  EE				     out dx,al
    560				     ;======================================RCgoff end
    561	E16B  B8 0040				     mov     ax, dat
    562	E16E  8E D8				     mov     ds, ax
    563
    564	E170  8B 1E 0072r			     mov     bx, ds:reset_flag
    565	E174  8B 36 0013r			     mov si, ds:memory_size	     ;keep memory size in SI after     +
    566				     reboot
    567	E178  2B C0				     sub     ax, ax
    568	E17A  8E C0				     mov     es, ax
    569	E17C  E4 62				     in	     al, port_c
    570	E17E  24 0F				     and     al, 0Fh
    571	E180  FE C0				     inc     al
    572	E182  02 C0				     add     al, al
    573	E184  BA 0000				     mov     dx, 0
    574	E187  8B E8				     mov     bp,ax			     ;BP will be segment count +
    575				     (and will be 0, i.e. no error, after finish)
    576	E189  33 C0				     xor     ax, ax			     ;write 0 to mem
    577	E18B  FC				     cld
    578
    579	E18C  2B FF				     sub     di, di			     ;not in loop because after+
    580				     writing 32768 words already will be DI=0
    581	E18E			     c19:
    582	E18E  B9 8000				     mov     cx, 32768
    583	E191  F3> AB				     rep stosw				     ;clear full segment (32768+
    584				     words=6536	bytes)
    585	E193  81 C2 1000			     add     dx, 4096			     ;next segment
    586	E197  8E C2				     mov     es, dx
    587	E199  4D				     dec     bp
    588	E19A  74 02				     jz	     c21
    589	E19C  EB F0				     jmp     short c19
    590				     ;____________________
    591				     ;	 Инициализация контроллера
    592				     ;	 прерываний 8259
    593				     ;____________________
    594	E19E			     c21:
    595	E19E  B0 13			     mov     al,13h	     ;ICW1 - EDGE, SNGL, ICW4
    596	E1A0  E6 20			     out     inta00,al
    597	E1A2  B0 08			     mov     al,8	     ;УСТ ICW2 - прерывание типа 8(8-F)
    598	E1A4  E6 21			     out     inta01,al
    599	E1A6  B0 09			     mov     al,9	     ;уст ICW4 - BUFFERD , режим 8086
    600	E1A8  E6 21			     out     inta01,al
    601	E1AA  2B C0				     sub     ax, ax
    602	E1AC  8E C0				     mov     es, ax
    603													     ;DS still +
    604				     points to BIOS data area
    605	E1AE  89 1E 0072r			     mov     ds:reset_flag, bx
    606	E1B2  89 36 0013r			     mov     ds:memory_size, si
    607	E1B6  81 3E 0072r 1234			     cmp     ds:reset_flag, 1234h
    608	E1BC  74 38				     jz	     c25
    609	E1BE  8E D8				     mov     ds, ax
    610	E1C0  BC 3FF0r				     mov     sp, offset	tmp_tos
    611	E1C3  8E D0				     mov     ss, ax
    612	E1C5  8B F8				     mov     di, ax
    613	E1C7  BB 0024				     mov     bx, 9*4	     ; int 9 (KBD)
    614	E1CA  C7 07 E299r			     mov     word ptr [bx], offset d11
    615	E1CE  43				     inc     bx
    616	E1CF  43				     inc     bx
    617	E1D0  8C 0F				     mov     [bx], cs
    618	E1D2  E8 03F6				     call    kbd_reset
    619	E1D5  80 FB 65				     cmp     bl, 65h	     ; Manufacturing test mode - viz document  +
    620				     in	BIOS root or http://www.vcfed.org/forum/archive/index.php/t-12377.html
    621	E1D8  75 0E				     jnz     c23
    622	E1DA  B2 FF				     mov     dl, 0FFh
    623
    624	E1DC			     c22:
    625	E1DC  E8 03F9				     call    sp_test
    626	E1DF  8A C3				     mov     al, bl
    627	E1E1  AA				     stosb
    628	E1E2  FE CA				     dec     dl
    629	E1E4  75 F6				     jnz     c22
    630	E1E6  CD 3E				     int     3Eh
    631
    632	E1E8			     c23:
    633	E1E8  0E				     push    cs
    634	E1E9  17				     pop     ss
    635						     assume ss:code
    636	E1EA  FA				     cli
    637	E1EB  BC E018r				     mov     sp, offset	caw  ; [caw] = offset ca3 (next	jmp -> indirect+
    638				     call)
    639	E1EE  E9 FE29				     jmp     stgtst
    640
    641	E1F1			     ca3:
    642	E1F1  74 03				     jz	     c25
    643	E1F3  E9 FEC5				     jmp     err01
    644
    645				     ;	 Установка сегмента стека	и SP
    646
    647	E1F6			     c25:
    648	E1F6  B8 0030			     mov     ax,sta	     ;получить величину	стека
    649	E1F9  8E D0			     mov     ss,ax	     ;уст стек
    650	E1FB  BC 0100r			     mov     sp,offset tos   ;стек готов
    651	E1FE  EB 1C			     jmp     short tst6	     ;переход к	следующему тесту
    652
    653				     ;ros_checksum proc	 near
    654				     ;	     mov     cx,8192	     ;число байт для сложения
    655				     ;	     xor     al,al
    656				     ;c26:   add     al,cs:[bx]
    657				     ;	     inc     bx		     ;указание следующего байта
    658				     ;	     loop    c26	     ;сложить все байты в модуле +
    659				     ROS
    660				     ;	     or	     al,al	     ;сумма = 0 ?
    661				     ;	     ret
    662				     ;ros_checksum endp
    663				     ;______________________
    664				     ;	 Начальный тест надежности
    665				     ;______________________
    666					     assume  cs:code,es:abs0
    667
    668	E200  70 61 72 69 74 79	20+  d1		     db	'parity	check 2'
    669	      63 68 65 63 6B 20	32
    670
    671
    672	      =000E		     d1l     equ     14
    673	E20E  70 61 72 69 74 79	20+  d2		     db	'parity	check 1'
    674	      63 68 65 63 6B 20	31
    675
    676
    677	      =000E		     d2l     equ     14
    678				     ;______________________
    679				     ;	 ТЕСТ.06
    680				     ;	      Тест контроллера прерываний
    681				     ;	      8259
    682				     ;_______________________
    683	E21C			     tst6:
    684				     ;	 Проверка регистра масок прерываний (IMR)
    685
    686	E21C  FA			     cli		     ;сброс признака разрешения +
    687				     прерываний
    688	E21D  B0 00			     mov     al,0	     ;уст IMR в 0
    689	E21F  E6 21			     out     inta01,al
    690	E221  E4 21			     in	     al,inta01	     ;считывание IMR
    691	E223  0A C0			     or	     al,al	     ;IMR=0 ?
    692	E225  75 39			     jnz     d6		     ;IMR не 0,в программу ошибок
    693	E227  B0 FF			     mov     al,0ffh	     ;недоступность прерываний
    694	E229  E6 21			     out     inta01,al	     ;запись в IMR
    695	E22B  E4 21			     in	     al,inta01	     ;считывание IMR
    696	E22D  04 01			     add     al,1	     ;все биты IMR установлены ?
    697	E22F  75 2F			     jnz     d6		     ;НЕТ - в программу ошибок
    698
    699	E231  2B C0			     sub     ax,ax	     ;уст регистра ES
    700	E233  8E C0			     mov     es,ax
    701
    702
    703				     ;	 Контроль ожидания прерывания
    704
    705	E235  FC			     cld		     ; уст признак направления
    706	E236  B9 0020			     mov     cx,20h	     ;rc все	прерывания 00..1F,	       +
    707				     относящиеся к BIOS
    708	E239  33 FF			     xor     di,di
    709	E23B			     d3:
    710	E23B  B8 E299r			     mov     ax,offset d11   ; установить адрес		       +
    711				     процедуры	прерываний
    712	E23E  AB			     stosw
    713	E23F  B8 F000			     mov     ax,cod  ; получить	адрес сегмента	       +
    714				     процедуры
    715	E242  AB			     stosw
    716	E243  E2 F6			     loop    d3
    717
    718				     ;	 Установка указателя вектора прерывания NMI
    719	E245  26: C7 06	0008r	  +	     mov     es:nmi_ptr,offset nmi_int
    720	      E2A6r
    721				     ;-----уст вектора прерываний 5
    722	E24C  26: C7 06	0014r	  +	     mov     es:int5_ptr,offset	print_screen   ; печать экрана
    723	      FF54r
    724
    725				     ;	 Прерывания замаскированы
    726
    727	E253  32 E4			     xor     ah,ah	     ;очистить регистр AH
    728	E255  FB			     sti		     ; установка признака	       +
    729				     разрешения прерывания
    730	E256  2B C9			     sub     cx,cx	     ; ожидание	1 сек любого	       +
    731				     прерывания,
    732	E258  E2 FE		     d4:     loop    d4		     ; которое может произойти
    733	E25A  E2 FE		     d5:     loop    d5
    734	E25C  0A E4			     or	     ah,ah	     ; прерывание возникло ?
    735	E25E  74 08			     jz	     d7		     ; нет -	к следующему	тесту
    736	E260  BA 0101		     d6:     mov     dx,101h	     ; уст длительности		       +
    737				     звукового	сигнала
    738	E263  E8 031A			     call    err_beep	     ; идти	в программу		       +
    739				     звукового	сигнала
    740	E266  FA			     cli
    741	E267  F4			     hlt		     ; останов системы
    742				     ;__________________
    743				     ;	 ТЕСТ.07
    744				     ;	      Проверка таймера 8253
    745				     ;___________________
    746	E268			     d7:
    747	E268  B4 00			     mov     ah,0	     ; сброс признака прерывания+
    748				     таймера
    749	E26A  32 ED			     xor     ch,ch	     ; очистить	регистр CH
    750	E26C  B0 FE			     mov     al,0feh   ; маскировать	все прерывания,   +
    751				     кроме	LVL 0
    752	E26E  E6 21			     out     inta01,al	     ; запись IMR
    753	E270  B0 10			     mov     al,00010000b    ; выбрать TIM 0, LSD, режим 0,	BINARY
    754	E272  E6 43			     out     tim_ctl,al	 ;записать регистр режима	       +
    755				     управления таймера
    756	E274  B1 16			     mov     cl,16h	     ; уст счетчик программного  +
    757				     цикла
    758	E276  8A C1			     mov     al,cl	     ; установить счетчик	       +
    759				     таймера 0
    760	E278  E6 40			     out     timero,al	     ; записать	счетчик таймера 0
    761	E27A  F6 C4 FF		     d8:     test    ah,0ffh	     ; прерывание таймера 0	       +
    762				     произошло	?
    763	E27D  75 04			     jnz     d9		     ; да - таймер считал	медленно
    764	E27F  E2 F9			     loop    d8		     ; ожидание	прерывания	       +
    765				     определенное время
    766	E281  EB DD			     jmp     short d6	;прерывание таймера 0 не	       +
    767				     произошло	- ошибка
    768	E283  B1 12		     d9:     mov     cl,18	     ; уст счетчик программного  +
    769				     цикла
    770	E285  B0 FF			     mov     al,0ffh	     ; записать	счетчик таймера 0
    771	E287  E6 40			     out     timero,al
    772	E289  B4 00			     mov     ah,0	     ; сброс признака,		       +
    773				     полученного прерывания
    774	E28B  B0 FE			     mov     al,0feh	     ; недоступность прерываний +
    775				     таймера 0
    776	E28D  E6 21			     out     inta01,al
    777	E28F  F6 C4 FF		     d10:    test    ah,0ffh	     ; прерывание таймера 0	       +
    778				     произошло	?
    779	E292  75 CC			     jnz     d6		     ; да - таймер считает быстро
    780	E294  E2 F9			     loop    d10	     ; ожидание	прерывания	       +
    781				     определенное время
    782	E296  EB 37			     jmp     short tst8		     ; переход к следующему  +
    783				     тесту
    784	E298  90			     nop
    785				     ;____________________
    786				     ;	 Программа обслуживания
    787				     ;	 временного прерывания
    788				     ;____________________
    789	E299			     d11     proc    near
    790	E299  B4 01			     mov     ah,1
    791	E29B  50			     push    ax		     ; хранить регистр AX
    792	E29C  B0 FF			     mov     al,0ffh	     ; размаскировать все	       +
    793				     прерывания
    794	E29E  E6 21			     out     inta01,al
    795	E2A0  B0 20			     mov     al,eoi
    796	E2A2  E6 20			     out     inta00,al
    797	E2A4  58			     pop     ax		     ; восстановить	регистр AX
    798	E2A5  CF			     iret
    799	E2A6			     d11     endp
    800
    801	E2A6			     nmi_int proc    near
    802	E2A6  50			     push    ax		     ; хранить регистр AX
    803	E2A7  E4 62			     in	     al,port_c
    804	E2A9  A8 40			     test    al,40h	     ; ошибка паритета при	       +
    805				     вводе/выводе ?
    806	E2AB  74 08			     jz	     d12	     ; да - признак сбрасывается  +
    807				     в	0
    808	E2AD  BE E200r			     mov     si,offset d1    ; адрес поля сообщения об     +
    809				     ошибке
    810	E2B0  B9 000E			     mov     cx,d1l	     ; длина поля сообщения об     +
    811				     ошибке
    812	E2B3  EB 0A			     jmp     short d13	     ; отобразить ошибку на	       +
    813				     дисплее
    814	E2B5			     d12:
    815	E2B5  A8 80			     test    al,80h
    816	E2B7  74 10			     jz	     d14
    817	E2B9  BE E20Er			     mov     si,offset d2    ; адрес поля сообщения об     +
    818				     ошибке
    819	E2BC  B9 000E			     mov     cx,d2l	     ; длина поля сообщения об     +
    820				     ошибке
    821	E2BF			     d13:
    822	E2BF  B8 0000			     mov     ax,0	     ; инициировать	и установить+
    823				     режим	ЭЛИ
    824	E2C2  CD 10			     int     10h	     ; вызвать процедуру VIDEO_IO
    825	E2C4  E8 032E			     call    p_msg	     ; распечатать ошибку
    826	E2C7  FA			     cli
    827	E2C8  F4			     hlt		     ; останов системы
    828	E2C9			     d14:
    829	E2C9  58			     pop     ax		     ; восстановить	AX
    830	E2CA  CF			     iret
    831	E2CB			     nmi_int endp
    832				     ;____________________
    833				     ;	 Начальный тест надежности
    834				     ;____________________
    835					     assume  cs:code,ds:data
    836
    837	E2CB  20 32 30 31	     e1	     db	     ' 201'
    838	      =0004		     e1l     equ     04h
    839
    840				     ;	 Выполнение программы БСУВВ,
    841				     ;	 генерирующей вектора прерываний
    842
    843	E2CF			     tst8:
    844	E2CF  FC			     cld		     ; установить признак	       +
    845				     направления вперед
    846	E2D0  BF 0040r			     mov     di,offset video_int   ; уст адреса области	       +
    847				     прерываний
    848	E2D3  0E			     push    cs
    849	E2D4  1F			     pop     ds		     ; уст адреса таблицы	       +
    850				     векторов
    851	E2D5  BE FF03r			     mov     si,offset vector_table+10h	 ; смещение VECTOR_TABLE+(2*8) +
    852				     (начало прогр прерыв)
    853	E2D8  B9 0010			     mov     cx,10h
    854	E2DB  A5		     e1a:    movsw	     ; передать	таблицу векторов	в     +
    855				     память
    856	E2DC  47			     inc     di
    857	E2DD  47			     inc     di
    858	E2DE  E2 FB			     loop    e1a
    859
    860				     ;	 Установка таймера 0 в	режим 3
    861
    862	E2E0  B0 FF			     mov     al,0ffh
    863	E2E2  E6 21			     out     inta01,al
    864	E2E4  B0 36			     mov     al,36h	     ; выбор счетчика 0,		       +
    865				     считывания-за-
    866				     ; писи	младшего,затем старшего байта		       +
    867				     счетчика,уст режима 3
    868	E2E6  E6 43			     out     timer+3,al	     ; запись режима таймера
    869	E2E8  B0 C7			     mov     al,0c7h
    870	E2EA  E6 40			     out     timer,al	     ; записать	младшую часть      +
    871				     счетчика
    872	E2EC  B0 DB			     mov     al,0dbh
    873	E2EE  E6 40			     out     timer,al	     ; записать	старшую часть      +
    874				     счетчика
    875
    876
    877					     assume  ds:data
    878	E2F0  B8 0040			     mov     ax,dat	     ; DS - сегмент данных
    879	E2F3  8E D8			     mov     ds,ax
    880	E2F5			     e3:
    881	E2F5  81 3E 0072r 1234		     cmp     reset_flag,1234h
    882	E2FB  74 03			     jz	     e3a
    883	E2FD  E8 1559			     call    bct     ;загрузка знакогенератора Ч/Б    +
    884				     ЭЛИ
    885				     ;_____________________
    886				     ;	 ТЕСТ.08
    887				     ;	      Инициализация и запуск
    888				     ;	      контроллера ЭЛИ
    889				     ;______________________
    890	E300  E4 60		     e3a:    in	     al,port_a	     ; считывание состояния	       +
    891				     переключателей
    892	E302  B4 00			     mov     ah,0
    893	E304  A3 0010r			     mov     equip_flag,ax   ; запомнить считанное	       +
    894				     состояние	пере-
    895								     ; ключателей
    896	E307  24 30			     and     al,30h	     ; выделить	переключатели     +
    897				     ЭЛИ
    898	E309  75 03			     jnz     e7		     ; переключатели ЭЛИ	       +
    899				     установлены в 0 ?
    900	E30B  E9 0098			     jmp     e19	     ; пропустить тест ЭЛИ
    901	E30E			     e7:
    902	E30E  86 E0			     xchg    ah,al
    903	E310  80 FC 30			     cmp     ah,30h	     ; адаптер ч/б ?
    904	E313  74 09			     je	     e8		     ; да - установить режим для   +
    905				     ч/б адаптера
    906	E315  FE C0			     inc     al	      ;	уст цветной режим для		       +
    907				     цветного адаптера
    908	E317  80 FC 20			     cmp     ah,20h	     ; режим 80х25 установлен ?
    909	E31A  75 02			     jne     e8		     ; нет -	уст режим для 40х25
    910	E31C  B0 03			     mov     al,3	     ; установить режим 80х25
    911	E31E			     e8:
    912	E31E  50			     push    ax		     ; хранить режим ЭЛИ	в стеке
    913	E31F  2A E4			     sub     ah,ah	     ;
    914	E321  CD 10			     int     10h
    915	E323  58			     pop     ax
    916	E324  50			     push    ax
    917	E325  BB B000			     mov     bx,0b000h
    918	E328  BA 03B8			     mov     dx,3b8h	     ; регистр режима для ч/б
    919	E32B  B9 1000			     mov     cx,4096	     ; счетчик байт для ч/б	       +
    920				     адаптера
    921	E32E  B0 01			     mov     al,1	     ; уст режим для	ч/б адаптера
    922	E330  80 FC 30			     cmp     ah,30h	     ; ч/б адаптер ЭЛИ подключен ?
    923	E333  74 0B			     je	     e9		     ; переход к проверке буфера +
    924				     ЭЛИ
    925	E335  BB B800			     mov     bx,0b800h
    926	E338  BA 03D8			     mov     dx,3d8h	     ; регистр режима для	       +
    927				     цветного адаптера
    928	E33B  B9 4000			     mov     cx,4000h
    929	E33E  FE C8			     dec     al		     ; уст режим в 0 для цветного  +
    930				     адаптера
    931				     ;
    932				     ;	     Проверка буфера ЭЛИ
    933				     ;
    934	E340			     e9:
    935	E340  EE			     out     dx,al	     ; блокировка ЭЛИ для	       +
    936				     цветного адаптера
    937	E341  8E C3			     mov     es,bx
    938	E343  B8 0040			     mov     ax,dat	     ; DS - сегмент данных
    939	E346  8E D8			     mov     ds,ax
    940	E348  81 3E 0072r 1234		     cmp     reset_flag,1234h
    941	E34E  74 0D			     je	     e10
    942	E350  8E DB			     mov     ds,bx	     ;
    943	E352  E8 FCC8			     call    stgtst_cnt	     ; переход к проверке памяти
    944	E355  74 06			     je	     e10
    945	E357  BA 0102			     mov     dx,102h
    946	E35A  E8 0223			     call    err_beep
    947
    948				     ;___________________________
    949				     ;
    950				     ;	 ТЕСТ.09
    951				     ;	      Осуществляет проверку	формирования       +
    952				     строк	в буфере	ЭЛИ
    953				     ;_________________________
    954	E35D			     e10:
    955	E35D  58			     pop     ax	  ; получить считанные			       +
    956				     переключатели	ЭЛИ в AH
    957	E35E  50			     push    ax		     ; сохранить их
    958	E35F  B4 00			     mov     ah,0
    959	E361  CD 10			     int     10h
    960	E363  B8 7020			     mov     ax,7020h	     ; запись пробелов в	режиме   +
    961				     реверса
    962	E366  2B FF			     sub     di,di	     ; установка начала области
    963	E368  B9 0028			     mov     cx,40	     ;
    964	E36B  FC			     cld	 ; установить	признак направления  +
    965				     для уменьшения
    966	E36C  F3> AB			     rep     stosw	     ; записать	в память
    967				     ;______________________
    968				     ;	  ТЕСТ.10
    969				     ;	       Осуществляет	проверку линий		       +
    970				     интерфейса ЭЛИ
    971				     ;______________________
    972	E36E  58			     pop     ax		     ; получить	считанные	       +
    973				     переключатели
    974	E36F  50			     push    ax		     ; сохранить их
    975	E370  80 FC 30			     cmp     ah,30h	     ; ч/б адаптер подключен ?
    976	E373  BA 03BA			     mov     dx,03bah	     ; уст адрес порта состояния +
    977				     ч/б дисплея
    978	E376  74 03			     je	     e11	     ; да - переход к	следующей     +
    979				     строке
    980	E378  BA 03DA			     mov     dx,03dah	     ; цветной адаптер подключен
    981				     ;
    982				     ;	     Тест строчной развертки
    983				     ;
    984	E37B			     e11:
    985	E37B  B4 08			     mov     ah,8
    986	E37D			     e12:
    987	E37D  2B C9			     sub     cx,cx
    988	E37F  EC		     e13:    in	     al,dx	 ;считывание порта состояния   +
    989				     контроллера СМ607
    990	E380  22 C4			     and     al,ah	     ; проверка	строки
    991	E382  75 04			     jnz     e14
    992	E384  E2 F9			     loop    e13
    993	E386  EB 13			     jmp     short e17	     ; переход к сообщению об       +
    994				     ошибке
    995	E388  2B C9		     e14:    sub     cx,cx
    996	E38A  EC		     e15:    in	     al,dx     ;считывание порта	состояния     +
    997				     контроллера СМ607
    998	E38B  22 C4			     and     al,ah
    999	E38D  74 04			     jz	     e16
   1000	E38F  E2 F9			     loop    e15
   1001	E391  EB 08			     jmp     short e17
   1002				     ;
   1003				     ;	     Следующий	строчный импульс
   1004				     ;
   1005	E393			     e16:
   1006	E393  B1 03			     mov     cl,3	     ; получить	следующий бит      +
   1007				     для контроля
   1008	E395  D2 EC			     shr     ah,cl
   1009	E397  75 E4			     jnz     e12
   1010	E399  EB 06			     jmp     short e18	     ; отобразить курсор на	       +
   1011				     экране
   1012				     ;
   1013				     ;	     Сообщение	об ошибке конттроллера СМ607
   1014				     ;
   1015	E39B			     e17:
   1016	E39B  BA 0103			     mov     dx,103h
   1017	E39E  E8 01DF			     call    err_beep
   1018				     ;
   1019				     ;	     Отображение курсора на	экране
   1020				     ;
   1021	E3A1			     e18:
   1022	E3A1  58			     pop     ax		     ; получить	считанные	       +
   1023				     переключатели	в AH
   1024	E3A2  B4 00			     mov     ah,0	     ; установить режим
   1025	E3A4  CD 10			     int     10h
   1026				     ;______________________
   1027				     ;	 ТЕСТ.11
   1028				     ;	      Дополнительный тест памяти
   1029				     ;______________________
   1030					     assume  ds:data
   1031	E3A6			     e19:
   1032	E3A6  B8 0040			     mov     ax,dat
   1033	E3A9  8E D8			     mov     ds,ax
   1034	E3AB  81 3E 0072r 1234			     cmp     reset_flag,1234h
   1035	E3B1  74 0D				     je	     skip_size_det
   1036	E3B3  E4 62				     in	     al, port_c
   1037	E3B5  24 0F				     and     al, 0Fh
   1038	E3B7  FE C0				     inc     al
   1039	E3B9  B4 80				     mov     ah, 80h
   1040	E3BB  F6 E4				     mul     ah
   1041	E3BD  A3 0013r				     mov     ds:memory_size, ax
   1042	E3C0			     skip_size_det:
   1043	E3C0  A1 0013r				     mov     ax,ds:memory_size		     ;restore if reboot	and no +
   1044				     damages if	power-on
   1045	E3C3  A3 0015r				     mov     ds:io_ram_size, ax
   1046
   1047
   1048
   1049				     ;	 Проверка любой действительной памяти
   1050				     ;	 на считывание и запись
   1051
   1052	E3C6  E9 024A			     jmp     e190
   1053
   1054				     ;	 Печать адреса и эталона, если
   1055				     ;	 произошла ошибка данных
   1056
   1057
   1058	E3C9			     osh:
   1059	E3C9  8A E8			     mov     ch,al	     ;
   1060	E3CB  8A C6			     mov     al,dh	     ; получить	измененный адрес
   1061	E3CD  B1 04			     mov     cl,4
   1062	E3CF  D2 E8			     shr     al,cl	     ;
   1063	E3D1  E8 0023			     call    xlat_print_cod  ; преобразование и печать    +
   1064				     кода
   1065	E3D4  8A C6			     mov     al,dh
   1066	E3D6  24 0F			     and     al,0fh
   1067	E3D8  E8 001C			     call    xlat_print_cod  ; преобразование и печать    +
   1068				     кода
   1069	E3DB  8A C5			     mov     al,ch	     ; получить	следующий шаблон
   1070	E3DD  B1 04			     mov     cl,4
   1071	E3DF  D2 E8			     shr     al,cl
   1072	E3E1  E8 0013			     call    xlat_print_cod  ; преобразование и печать    +
   1073				     кода
   1074	E3E4  8A C5			     mov     al,ch	     ;
   1075	E3E6  24 0F			     and     al,0fh	     ;
   1076	E3E8  E8 000C			     call    xlat_print_cod  ; преобразование и печать    +
   1077				     кода
   1078	E3EB  BE E2CBr			     mov     si,offset e1    ; установить адрес поля	       +
   1079				     сообщения
   1080								     ; об ошибке
   1081	E3EE  B9 0004			     mov     cx,e1l	     ; получить	счетчик поля	       +
   1082				     сообщения	об ошибке
   1083	E3F1  E8 0201			     call    p_msg	     ; печать ошибки
   1084	E3F4			     e22:
   1085	E3F4  EB 2C			     jmp     short tst12	     ; переход к следующему  +
   1086				     тесту
   1087	E3F6  90			     nop
   1088				     ;_____________________
   1089				     ;
   1090				     ;	 Процедура вывода на экран сообщения об       +
   1091				     ошибке в коде ASCII
   1092				     ;
   1093				     ;_______________________
   1094
   1095	E3F7			     xlat_print_cod proc near
   1096	E3F7  1E			     push    ds		     ; сохранить DS
   1097	E3F8  0E			     push    cs
   1098	E3F9  1F			     pop     ds
   1099	E3FA  BB E412r			     mov     bx,offset f4e   ; адрес таблицы кодов ASCII
   1100	E3FD  D7			     xlatb
   1101	E3FE  B4 0E			     mov     ah,14
   1102	E400  B7 00			     mov     bh,0
   1103	E402  CD 10			     int     10h
   1104	E404  1F			     pop     ds
   1105	E405  C3			     ret
   1106	E406			     xlat_print_cod endp
   1107				     ;______________________
   1108				     ;	 Сброс системы - фаза 4
   1109				     ;______________________
   1110				     ;
   1111				     ;	 Коды сообщений об ошибках
   1112				     ;_______________________
   1113
   1114					     assume  cs:code,ds:data
   1115	E406  20 33 30 31	     f1	     db	     ' 301'
   1116	      =0004		     f1l     equ     4h		     ; сообщение клавиатуры
   1117	E40A  31 33 31		     f2	     db	     '131'
   1118	      =0003		     f2l     equ     3h		     ; сообщение кассеты
   1119	E40D  36 30 31		     f3	     db	     '601'
   1120	      =0003		     f3l     equ     3h		     ; сообщение НГМД
   1121
   1122	E410			     f4	     label   word
   1123	E410  0378			     dw	     378h
   1124	E412			     f4e     label   word
   1125	E412  30 31 32 33 34 35	36+  ascii_tbl db    '0123456789abcdef'
   1126	      37 38 39 61 62 63	64+
   1127	      65 66
   1128
   1129
   1130				     ;______________________
   1131				     ;	 ТЕСТ.12
   1132				     ;	 Тест клавиатуры
   1133				     ;______________________
   1134	E422			     tst12:
   1135
   1136	E422  B8 0040			     mov     ax,dat
   1137	E425  8E D8			     mov     ds,ax
   1138	E427  E8 01A1			     call    kbd_reset	     ; Сброс клавиатуры
   1139	E42A  B0 4D			     mov     al,4dh	     ; доступность клавиатуры
   1140	E42C  E6 61			     out     port_b,al
   1141	E42E  E3 27			     jcxz    f6		     ; нет -	печать ошибки
   1142	E430  80 FB AA			     cmp     bl,0aah	     ; код сканирования 'AA' ?
   1143	E433  75 22			     jne     f6		     ; нет -	печать ошибки
   1144
   1145				     ;	 Поиск "залипших" клавиш
   1146
   1147	E435  B0 CC			     mov     al,0cch	   ; сброс	клавиатуры, уст	       +
   1148				     синхронизации
   1149	E437  E6 61			     out     port_b,al
   1150	E439  B0 4C			     mov     al,4ch	   ; доступность клавиатуры
   1151	E43B  E6 61			     out     port_b,al
   1152	E43D  2B C9			     sub     cx,cx
   1153				     ;
   1154				     ;	     Ожидание прерывания клавиатуры
   1155				     ;
   1156	E43F			     f5:
   1157	E43F  E2 FE			     loop    f5		     ; задержка
   1158	E441  E4 60			     in	     al,kbd_in	     ; получение кода		       +
   1159				     сканирования
   1160	E443  3C 00			     cmp     al,0	     ; код сканирования равен 0 ?
   1161	E445  74 19			     je	     f7		     ; да - продолжение		       +
   1162				     тестирования
   1163	E447  8A E8			     mov     ch,al	     ; сохранить код		       +
   1164				     сканирования
   1165	E449  B1 04			     mov     cl,4
   1166	E44B  D2 E8			     shr     al,cl
   1167	E44D  E8 FFA7			     call    xlat_print_cod  ; преобразование и печать
   1168	E450  8A C5			     mov     al,ch	     ; восстановить	код		       +
   1169				     сканирования
   1170	E452  24 0F			     and     al,0fh	     ; выделить	младший байт
   1171	E454  E8 FFA0			     call    xlat_print_cod  ; преобразование и печать
   1172	E457  BE E406r		     f6:     mov     si,offset f1    ; получить	адрес поля	       +
   1173				     сообщения	об
   1174								     ; ошибке
   1175	E45A  B9 0004			     mov     cx,f1l	      ;	длина поля сообщения об    +
   1176				     ошибке
   1177	E45D  E8 0195			     call    p_msg	      ;	вывод сообщения об ошибке+
   1178				     на экран
   1179
   1180				     ;	 Установка таблицы векторов прерываний
   1181
   1182	E460			     f7:
   1183	E460  2B C0			     sub     ax,ax
   1184	E462  8E C0			     mov     es,ax
   1185	E464  B9 0008			     mov     cx,8	     ; получить	счетчик векторов
   1186	E467  0E			     push    cs
   1187	E468  1F			     pop     ds
   1188	E469  BE FEF3r			     mov     si,offset vector_table   ;	адрес таблицы	       +
   1189				     векторов
   1190	E46C  BF 0020r			     mov     di,offset int_ptr
   1191	E46F  FC			     cld
   1192	E470  A5		     f7a:    movsw
   1193	E471  47			     inc     di
   1194	E472  47			     inc     di
   1195	E473  E2 FB			     loop    f7a
   1196	E475  EB 06			     jmp short tst14
   1197
   1198					     org     0e47dh	     ;rc для	устранения съезжания+
   1199				     при переделке загрузчика таблицы векторв      +
   1200				     прерываний
   1201
   1202				     ;______________________
   1203				     ;	 ТЕСТ.14
   1204				     ;	 Осуществляет проверку НГМД
   1205				     ;______________________
   1206	E47D  B8 0040		     tst14:  mov     ax,dat	     ; уст. регистр DS
   1207	E480  8E D8			     mov     ds,ax
   1208	E482  B0 FC			     mov     al,0fch  ;	доступность прерываний	       +
   1209				     таймера и клавиатуры
   1210	E484  E6 21			     out     inta01,al
   1211	E486  A0 0010r			     mov     al,byte ptr equip_flag  ; получить	состояние     +
   1212				     переклю-
   1213									     ; чателей
   1214	E489  A8 01			     test    al,01h	     ; первоначальная загрузка с+
   1215				     НГМД ?
   1216	E48B  75 03			     jnz     f10	     ; да - проверка управления    +
   1217				     НГМД
   1218	E48D  E9 00ED			     jmp     f23
   1219	E490			     f10:
   1220	E490  B0 BC			     mov     al,0bch	     ; доступность прерываний с  +
   1221				     НГМД,
   1222	E492  E6 21			     out     inta01,al	     ; клавиатуры и таймера
   1223	E494  B4 00			     mov     ah,0	     ; сброс контроллера НГМД
   1224	E496  CD 13			     int     13h	     ; переход к сбросу НГМД
   1225	E498  F6 C4 FF			     test    ah,0ffh	     ; состояние верно ?
   1226	E49B  75 20			     jnz     f13	     ; нет -	сбой устройства
   1227
   1228				     ;	 Включить мотор устройства 0
   1229
   1230	E49D  BA 03F2			     mov     dx,03f2h	     ; получить	адрес адаптера    +
   1231				     НГМД
   1232	E4A0  B0 1C			     mov     al,1ch	     ; включить	мотор
   1233	E4A2  EE			     out     dx,al
   1234	E4A3  2B C9			     sub     cx,cx
   1235
   1236				     ;	  Ожидание включения мотора НГМД
   1237
   1238	E4A5			     f11:
   1239	E4A5  E2 FE			     loop    f11
   1240	E4A7			     f12:			     ; ожидание	мотора 1
   1241	E4A7  E2 FE			     loop    f12
   1242	E4A9  33 D2			     xor     dx,dx
   1243	E4AB  B5 01			     mov     ch,1	     ; выбор первой дорожки
   1244	E4AD  88 16 003Er		     mov seek_status,dl
   1245	E4B1  E8 09B3			     call    seek	     ; переход к рекалибровке      +
   1246				     НГМД
   1247	E4B4  72 07			     jc	     f13	     ; перейти в программу ошибок
   1248	E4B6  B5 22			     mov     ch,34	     ; выбор 34 дорожки
   1249	E4B8  E8 09AC			     call    seek
   1250	E4BB  73 09			     jnc     f14	     ; выключить мотор
   1251
   1252				     ;	  Ошибки НГМД
   1253
   1254	E4BD			     f13:
   1255	E4BD  BE E40Dr			     mov     si,offset f3    ; получить	адрес поля	       +
   1256				     сообщения	об
   1257								     ; ошибке
   1258	E4C0  B9 0003			     mov     cx,f3l	     ; установить счетчик
   1259	E4C3  E8 012F			     call    p_msg	     ; идти	в программу ошибок
   1260
   1261				     ;	 Выключить мотор устройства 0
   1262
   1263	E4C6			     f14:
   1264	E4C6  B0 0C			     mov     al,0ch	     ; выключить мотор		       +
   1265				     устройства 0
   1266	E4C8  BA 03F2			     mov     dx,03f2h	     ; уст адрес порта		       +
   1267				     управления НГМД
   1268	E4CB  EE			     out     dx,al
   1269
   1270				     ;	 Установка печати и базового адреса
   1271				     ;	 адаптера стыка С2, если устройства		       +
   1272				     подключены
   1273
   1274	E4CC			     f15:
   1275	E4CC  83 FD 00			     cmp     bp,0000h
   1276	E4CF  74 18			     jz	     dal
   1277	E4D1  BA 0003			     mov     dx,3
   1278	E4D4  E8 00A9			     call    err_beep
   1279	E4D7  BE E6A6r			     mov     si,offset f39
   1280	E4DA  B9 0017				     mov     cx, 23
   1281	E4DD  E8 0115			     call    p_msg
   1282	E4E0			     err_wait:
   1283	E4E0  B4 00			     mov     ah,0
   1284	E4E2  CD 16			     int     16h
   1285	E4E4  80 FC 3B			     cmp     ah,3bh
   1286	E4E7  75 F7			     jnz     err_wait
   1287	E4E9  2A E4		     dal:    sub     ah,ah
   1288	E4EB  A0 0049r			     mov     al,crt_mode
   1289	E4EE  CD 10			     int     10h
   1290	E4F0  C7 06 001Ar 001Er			     mov     ds:buffer_head, offset kb_buffer ;	ERROR -	Must be	approx.+
   1291				     6 lines upper, before int 16h
   1292	E4F6  C7 06 001Cr 001Er			     mov     ds:buffer_tail, offset kb_buffer ;	ERROR -	Must be	approx.+
   1293				     6 lines upper, before int 16h
   1294	E4FC  BD E410r			     mov     bp,offset f4    ; таблица PRT_SRC
   1295	E4FF  BE 0000			     mov     si,0
   1296	E502			     f16:
   1297	E502  2E: 8B 56	00		     mov     dx,cs:[bp]	     ; получить	базовый адрес      +
   1298				     печати
   1299	E506  B0 AA			     mov     al,0aah	     ; записать	данные в	порт А
   1300	E508  EE			     out     dx,al
   1301	E509  2A C0			     sub     al,al
   1302	E50B  EC			     in	     al,dx	     ; считывание порта А
   1303	E50C  3C AA			     cmp     al,0aah	     ; шаблон данных тот	же
   1304	E50E  75 06			     jne     f17	 ; нет - проверка следующего      +
   1305				     устройства печати
   1306	E510  89 94 0008r		     mov     word ptr printer_base[si],dx  ;да-уст	базовый	       +
   1307				     адрес
   1308	E514  46			     inc     si		     ; вычисление следующего       +
   1309				     слова
   1310	E515  46			     inc     si
   1311	E516			     f17:
   1312	E516  45			     inc     bp		     ; указать следующий базовый+
   1313				     адрес
   1314	E517  45			     inc     bp
   1315	E518  81 FD E412r		     cmp     bp,offset f4e   ; все возможные адреса	       +
   1316				     проверены	?
   1317	E51C  75 E4			     jne     f16	     ; нет, к проверке следующего+
   1318				     адреса печати
   1319	E51E  BB 0000			     mov     bx,0
   1320	E521  BA 03FF			     mov     dx,3ffh	     ; проверка	подключения	       +
   1321				     адаптера 1	стыка С2
   1322	E524  B0 8A			     mov     al,8ah
   1323	E526  EE			     out     dx,al
   1324	E527  BA 02FF			     mov     dx,2ffh
   1325	E52A  EE			     out     dx,al
   1326	E52B  BA 03FC			     mov     dx,3fch
   1327	E52E  B0 AA			     mov     al,0aah
   1328	E530  EE			     out     dx,al
   1329	E531  42			     inc     dx
   1330	E532  33 C0				     xor     ax, ax
   1331	E534  EE				     out     dx, al
   1332	E535  EC			     in	     al,dx
   1333	E536  3C AA			     cmp     al,0aah
   1334	E538  75 08			     jnz     f18
   1335	E53A  C7 87 0000r 03F8		     mov  word ptr rs232_base[bx],3f8h	; уст адрес адаптера 1
   1336	E540  43			     inc     bx
   1337	E541  43			     inc     bx
   1338	E542  BA 02FC		     f18:    mov     dx,2fch	     ; проверка	подключения	       +
   1339				     адаптера 2	стыка С2
   1340	E545  B0 AA			     mov     al,0aah
   1341	E547  EE			     out     dx,al
   1342	E548  42			     inc     dx
   1343	E549  33 C0				     xor     ax, ax
   1344	E54B  EE				     out     dx, al
   1345	E54C  EC			     in	     al,dx
   1346	E54D  3C AA			     cmp     al,0aah
   1347	E54F  75 08			     jnz     f19
   1348	E551  C7 87 0000r 02F8		     mov  word ptr rs232_base[bx],2f8h	 ; уст адрес адаптера 2
   1349	E557  43			     inc     bx
   1350	E558  43			     inc     bx
   1351
   1352
   1353
   1354				     ;_____Установка EQUIP_FLAG для	инди-
   1355				     ;	   кации номера печати
   1356
   1357	E559			     f19:
   1358	E559  E9 1411				     jmp     f19a
   1359
   1360	E55C			     f19b:
   1361	E55C  D2 C8			     ror     al,cl
   1362	E55E  0A C3			     or	     al,bl
   1363	E560  A2 0011r			     mov     byte ptr equip_flag+1,al
   1364	E563  BA 0201			     mov     dx,201h
   1365	E566  EC			     in	     al,dx
   1366	E567  A8 0F			     test    al,0fh
   1367	E569  75 05			     jnz     f20			; проверка адаптера    +
   1368				     игр
   1369	E56B  80 0E 0011r 10		     or	     byte ptr equip_flag+1,16
   1370	E570			     f20:
   1371	E570  E9 140D				     jmp     f20a
   1372	E573  90				     nop
   1373
   1374	E574			     f20b:
   1375	E574  BA 0001				     mov     dx, 1
   1376	E577  E8 0006			     call    err_beep	     ; переход к подпрограмме      +
   1377				     звукового	сигнала
   1378	E57A			     f21:
   1379	E57A  E9 017A				     jmp     boot_strap
   1380
   1381	E57D			     f23:
   1382	E57D  E9 FF4C			     jmp     f15
   1383
   1384				     ;	  Установка длительности звукового сигнала
   1385
   1386					     assume  cs:code,ds:data
   1387	E580			     err_beep proc   near
   1388	E580  9C			     pushf		     ; сохранить признаки
   1389	E581  FA			     cli		     ; сброс признака разрешения+
   1390				     прерывания
   1391	E582  1E			     push    ds		     ; сохранить DS
   1392	E583  B8 0040			     mov     ax,dat	     ; DS - сегмент данных
   1393	E586  8E D8			     mov     ds,ax
   1394	E588  0A F6			     or	     dh,dh
   1395	E58A  74 0B			     jz	     g3
   1396	E58C			     g1:			      ;	длинный звуковой	сигнал
   1397	E58C  B3 06			     mov     bl,6	      ;	счетчик для звуковых	       +
   1398				     сигналов
   1399	E58E  E8 0018			     call    beep	      ;	выполнить звуковой сигнал
   1400	E591  E2 FE		     g2:     loop    g2		      ;	задержка между звуковыми +
   1401				     сигналами
   1402	E593  FE CE			     dec     dh
   1403	E595  75 F5			     jnz     g1
   1404	E597			     g3:			      ;	короткий звуковой сигнал
   1405	E597  B3 01			     mov     bl,1   ; счетчик для короткого		       +
   1406				     звукового	сигнала
   1407	E599  E8 000D			     call    beep	     ; выполнить звуковой сигнал
   1408	E59C  E2 FE		     g4:     loop    g4		     ; задержка	между звуковыми  +
   1409				     сигналами
   1410	E59E  FE CA			     dec     dl		     ;
   1411	E5A0  75 F5			     jnz     g3		     ; выполнить
   1412	E5A2  E2 FE		     g5:     loop    g5		     ; длинная задержка перед      +
   1413				     возвратом
   1414	E5A4  E2 FE		     g6:     loop    g6
   1415	E5A6  1F			     pop     ds		     ; восстановление DS
   1416	E5A7  9D			     popf		; восстановление			       +
   1417				     первоначальных признаков
   1418	E5A8  C3			     ret		     ; возврат к программе
   1419	E5A9			     err_beep	     endp
   1420
   1421				     ;	 Подпрограмма звукового сигнала
   1422
   1423	E5A9			     beep    proc    near
   1424	E5A9  B0 B6			     mov     al,10110110b    ; таймер 2,младший и	старший +
   1425				     счет-
   1426								     ; чики, двоичный счет
   1427	E5AB  E6 43			     out     timer+3,al	     ; записать	в регистр режима
   1428	E5AD  B8 045E			     mov     ax,45eh	     ; делитель
   1429	E5B0  E6 42			     out     timer+2,al	     ; записать	младший счетчик
   1430	E5B2  8A C4			     mov     al,ah
   1431	E5B4  E6 42			     out     timer+2,al	     ; записать	старший счетчик
   1432	E5B6  E4 61			     in	     al,port_b	     ; получить	текущее		       +
   1433				     состояние	порта
   1434	E5B8  8A E0			     mov     ah,al	     ; сохранить это состояние
   1435	E5BA  0C 03			     or	     al,03	     ; включить	звук
   1436	E5BC  E6 61			     out     port_b,al
   1437	E5BE  2B C9			     sub     cx,cx	     ; установить счетчик	       +
   1438				     ожидания
   1439	E5C0  E2 FE		     g7:     loop    g7		     ; задержка	перед		       +
   1440				     выключением
   1441	E5C2  FE CB			     dec     bl		     ; задержка	счетчика	       +
   1442				     закончена	?
   1443	E5C4  75 FA			     jnz     g7	     ; нет -	продолжение подачи	       +
   1444				     звукового	сигнала
   1445	E5C6  8A C4			     mov     al,ah	     ; восстановить	значение       +
   1446				     порта
   1447	E5C8  E6 61			     out     port_b,al
   1448	E5CA  C3			     ret		     ; возврат к программе
   1449	E5CB			     beep    endp
   1450				     ;_____________________
   1451				     ;	 Эта	процедура вызывает программный
   1452				     ;	 сброс клавиатуры
   1453				     ;_____________________
   1454	E5CB			     kbd_reset proc  near
   1455	E5CB  B0 0C			     mov     al,0ch	; установить низкий уровень     +
   1456				     синхронизации
   1457	E5CD  E6 61			     out     port_b,al	     ; записать	порт B
   1458	E5CF  B9 7530			     mov     cx,30000	     ; время длительности	       +
   1459				     низкого уровня
   1460	E5D2  E2 FE		     g8:     loop    g8
   1461	E5D4  B0 CC			     mov     al,0cch	     ; уст CLK
   1462	E5D6  E6 61			     out     port_b,al
   1463	E5D8			     sp_test:
   1464	E5D8  B0 4C			     mov     al,4ch	     ; уст высокий уровень	       +
   1465				     синхронизации
   1466	E5DA  E6 61			     out     port_b,al
   1467	E5DC  B0 FD			     mov     al,0fdh	     ; разрешить прерывания	       +
   1468				     клавиатуры
   1469	E5DE  E6 21			     out     inta01,al	     ; записать	регистр масок
   1470	E5E0  FB			     sti		     ; уст признака разрешения    +
   1471				     прерывания
   1472	E5E1  B4 00			     mov     ah,0
   1473	E5E3  2B C9			     sub     cx,cx	     ; уст счетчика ожидания	       +
   1474				     прерываний
   1475	E5E5  F6 C4 FF		     g9:     test    ah,0ffh	     ; прерывание клавиатуры       +
   1476				     возникло ?
   1477	E5E8  75 02			     jnz     g10   ;  да - считывание возвращенного   +
   1478				     кода сканирования
   1479	E5EA  E2 F9			     loop    g9		     ; нет -	цикл ожидания
   1480	E5EC  E4 60		     g10:    in	     al,port_a	 ; считать код сканирования      +
   1481				     клавиатуры
   1482	E5EE  8A D8			     mov     bl,al	     ; сохранить этот код
   1483	E5F0  B0 CC			     mov     al,0cch	     ; очистка клавиатуры
   1484	E5F2  E6 61			     out     port_b,al
   1485	E5F4  C3			     ret		     ; возврат к программе
   1486	E5F5			     kbd_reset	     endp
   1487				     ;_____________________
   1488				     ;	 Эта	программа выводит на экран дисплея
   1489				     ;	 сообщения об ошибках
   1490				     ;
   1491				     ;	   Необходимые условия:
   1492				     ;	 SI = адрес поля сообщения об ошибке
   1493				     ;	 CX = длина поля сообщения об ошибке
   1494				     ;	 Максимальный размер передаваемой
   1495				     ;	 информации -	36 знаков
   1496				     ;
   1497				     ;______________________
   1498	E5F5			     p_msg   proc    near
   1499	E5F5  B8 0040			     mov     ax,dat
   1500	E5F8  8E D8			     mov     ds,ax
   1501	E5FA  8B EE			     mov     bp,si
   1502	E5FC			     g12:
   1503	E5FC  2E: 8A 04			     mov     al,cs:[si]	     ; поместить знак в AL
   1504	E5FF  46			     inc     si		     ; указать следующий знак
   1505	E600  B7 00			     mov     bh,0	     ; установить страницу
   1506	E602  B4 0E			     mov     ah,14	     ; уст функцию записи знака
   1507	E604  CD 10			     int     10h	     ; и записать знак
   1508	E606  E2 F4			     loop    g12     ; продолжать до записи всего       +
   1509				     сообщения
   1510	E608  B8 0E0D			     mov     ax,0e0dh	; переместить курсор в начало  +
   1511				     строки
   1512	E60B  CD 10			     int     10h
   1513	E60D  B8 0E0A			     mov     ax,0e0ah  ; переместить	курсор на	       +
   1514				     следующую	строку
   1515	E610  CD 10			     int     10h
   1516	E612  C3			     ret
   1517	E613			     p_msg   endp
   1518
   1519
   1520	E613			     e190:
   1521	E613  1E				     push    ds
   1522	E614  B8 0010				     mov     ax, 16
   1523	E617  81 3E 0072r 1234			     cmp     ds:reset_flag, 1234h
   1524	E61D  75 03				     jnz     e20a
   1525	E61F  E9 FDD2				     jmp     e22
   1526
   1527	E622			     e20a:
   1528	E622  B8 0010				     mov     ax, 16
   1529	E625  EB 25				     jmp     short prt_siz
   1530
   1531	E627			     e20b:
   1532	E627  8B 1E 0013r			     mov     bx, ds:memory_size
   1533	E62B  83 EB 10				     sub     bx, 16
   1534	E62E  B1 04				     mov     cl, 4
   1535	E630  D3 EB				     shr     bx, cl
   1536	E632  8B CB				     mov     cx, bx
   1537	E634  BB 0400				     mov     bx, 400h
   1538
   1539	E637			     e20c:
   1540	E637  8E DB				     mov     ds, bx
   1541
   1542	E639  8E C3				     mov     es, bx
   1543	E63B  81 C3 0400			     add     bx, 400h
   1544	E63F  52				     push    dx
   1545	E640  51				     push    cx
   1546	E641  53				     push    bx
   1547	E642  50				     push    ax
   1548	E643  E8 F9D4				     call    stgtst
   1549	E646  75 41				     jnz     e21a
   1550	E648  58				     pop     ax
   1551	E649  05 0010				     add     ax, 16
   1552
   1553	E64C			     prt_siz:
   1554	E64C  50				     push    ax
   1555	E64D  BB 000A				     mov     bx, 10
   1556	E650  B9 0003				     mov     cx, 3
   1557
   1558	E653			     decimal_loop:
   1559	E653  33 D2				     xor     dx, dx
   1560	E655  F7 F3				     div     bx
   1561	E657  80 CA 30				     or	     dl, 30h
   1562	E65A  52				     push    dx
   1563	E65B  E2 F6				     loop    decimal_loop
   1564	E65D  B9 0003				     mov     cx, 3
   1565
   1566	E660			     prt_dec_loop:
   1567	E660  58				     pop     ax
   1568	E661  E8 0034				     call    prt_hex
   1569	E664  E2 FA				     loop    prt_dec_loop
   1570	E666  B9 0007				     mov     cx, 7
   1571	E669  BE E69Fr				     mov     si, offset	e300 ; " Kb OK\r"
   1572
   1573	E66C			     kb_ok:
   1574	E66C  2E: 8A 04				     mov     al, cs:[si]
   1575	E66F  46				     inc     si
   1576	E670  E8 0025				     call    prt_hex
   1577	E673  E2 F7				     loop    kb_ok
   1578	E675  58				     pop     ax
   1579	E676  3D 0010				     cmp     ax, 16
   1580	E679  74 AC				     jz	     e20b
   1581	E67B  5B				     pop     bx
   1582	E67C  59				     pop     cx
   1583	E67D  5A				     pop     dx
   1584	E67E  E2 B7				     loop    e20c
   1585	E680  B0 0A				     mov     al, 10
   1586	E682  E8 0013				     call    prt_hex
   1587	E685  1F				     pop     ds
   1588
   1589	E686  E9 FD6B				     jmp     e22
   1590
   1591	E689			     e21a:
   1592	E689  5B				     pop     bx
   1593	E68A  83 C4 06				     add     sp, 6
   1594	E68D  8C DA				     mov     dx, ds
   1595	E68F  1F				     pop     ds
   1596	E690  1E				     push    ds
   1597	E691  89 1E 0013r			     mov     ds:memory_size, bx
   1598	E695  E9 FD31				     jmp     osh
   1599
   1600	E698			     prt_hex	     proc near
   1601	E698  B4 0E				     mov     ah, 14
   1602	E69A  B7 00				     mov     bh, 0
   1603	E69C  CD 10				     int     10h
   1604	E69E  C3				     retn
   1605	E69F			     prt_hex	     endp
   1606
   1607	E69F  20 4B 62 20 4F 4B	0D   e300	     db	' Kb OK',0Dh
   1608	E6A6  45 52 52 4F 52 20	28+  f39	     db	'ERROR (RESUME="F1" KEY)'
   1609	      52 45 53 55 4D 45	3D+
   1610	      22 46 31 22 20 4B	45+
   1611	      59 29
   1612
   1613				     ;	 Таблица	кодов русских больших букв	       +
   1614				     (заглавных)
   1615
   1616	E6BD			     rust2   label   byte
   1617	E6BD  1B 21 40 23 24 25	5E+	     db	     1bh,'!@#$',37,05eh,'&*()_+'
   1618	      26 2A 28 29 5F 2B
   1619
   1620
   1621	E6CA  08 00			     db	     08h,0
   1622	E6CC  B9 C6 C3 BA B5 BD	B3+	     db	     0b9h,0c6h,0c3h,0bah,0b5h,0bdh,0b3h,0c8h
   1623	      C8
   1624
   1625	E6D4  C9 B7 B6 CD 0D FF	C4+	     db	     0c9h,0b7h,0b6h,0cdh,0dh,-1,0c4h,0cbh
   1626	      CB
   1627
   1628	E6DC  B2 B0 BF C0 BE BB	B4+	     db	     0b2h,0b0h,0bfh,0c0h,0beh,0bbh,0b4h,27h
   1629	      27
   1630
   1631	E6E4  22 B1 CE 7C CF C7	C1+	     db	     '"',0b1h,0ceh,7ch,0cfh,0c7h,0c1h,0bch,0b8h
   1632	      BC B8
   1633
   1634	E6ED  C2 CC 3C 3E 3F C5	00+	     db	     0c2h,0cch,'<>?',0c5h,000,-1,' ',0cah
   1635	      FF 20 CA
   1636
   1637
   1638
   1639
   1640				     ;___int 19_____________
   1641				     ;	 Программа загрузки системы с НГМД
   1642				     ;
   1643				     ; Программа считывает содержимое дорожки 0     +
   1644				     сектора 1 в
   1645				     ; ячейку boot_locn (адрес 7C00,сегмент 0)
   1646				     ;	 Если НГМД отсутствует или произошла	       +
   1647				     аппаратная ошибка,
   1648				     ; устанавливается прерывание типа INT	18H,	       +
   1649				     которое вызывает
   1650				     ; выполнение программ тестирования и	       +
   1651				     инициализации
   1652				     ; системы
   1653				     ;
   1654				     ;_________________________
   1655					     assume  cs:code,ds:data
   1656	E6F7			     boot_strap	proc near
   1657
   1658	E6F7  FB			     sti		   ; установить признак	       +
   1659				     разрешения прерывания
   1660	E6F8  B8 0040			     mov     ax,dat	   ; установить адресацию
   1661	E6FB  8E D8			     mov     ds,ax
   1662	E6FD  A1 0010r			     mov     ax,equip_flag ; получить состояние	       +
   1663				     переключателей
   1664	E700  A8 01			     test    al,1	   ; опрос	первоначальной	       +
   1665				     загрузки
   1666	E702  74 23			     jz	     h3
   1667
   1668				     ;	 Система	загружается с НГМД
   1669				     ;	 CX содержит счетчик повторений
   1670
   1671	E704  B9 0004			     mov     cx,4	     ; установить счетчик	       +
   1672				     повторений
   1673	E707			     h1:			     ; первоначальная загрузка
   1674	E707  51			     push    cx		     ; сохранить счетчик	       +
   1675				     повторений
   1676	E708  B4 00			     mov     ah,0	     ; сброс НГМД
   1677	E70A  CD 13			     int     13h
   1678	E70C  72 14			     jc	     h2		     ; если	ошибка,повторить
   1679	E70E  B4 02			     mov     ah,2	     ; считать сектор 1
   1680	E710  BB 0000			     mov     bx,0	     ;
   1681	E713  8E C3			     mov     es,bx
   1682	E715  BB 7C00r			     mov     bx,offset boot_locn
   1683	E718  BA 0000			     mov     dx,0	     ;
   1684	E71B  B9 0001			     mov     cx,1	     ; сектор 1 ,	дорожка 0
   1685	E71E  B0 01			     mov     al,1	     ; считывание первого	       +
   1686				     сектора
   1687	E720  CD 13			     int     13h
   1688	E722  59		     h2:     pop     cx		     ; восстановить	счетчик	       +
   1689				     повторений
   1690	E723  73 05			     jnc     h4		     ; уст CF при	безуспешном	       +
   1691				     считывании
   1692	E725  E2 E0			     loop    h1		     ; цикл	повторения
   1693
   1694				     ;	 Загрузка с НГМД недоступна
   1695
   1696	E727			     h3:			     ; кассета
   1697	E727  E9 F991			     jmp     err01   ; отсутствует дискет загрузки
   1698
   1699				     ;	 Загрузка завершилась успешно
   1700
   1701	E72A			     h4:				     ;
   1702	E72A  EA 00007C00sr			     jmp far ptr boot_locn   ; db 0EAh,	00h, 7Ch, 00h, 00h   ;	       +
   1703				     (0000:7C00)   ; ###Gleb###
   1704
   1705	E72F			     boot_strap	     endp
   1706				     ;--------------------
   1707				     ;	 Эта	программа посылает байт в	контроллер   +
   1708				     адаптера НГМД
   1709				     ; после проверки корректности управления и    +
   1710				     готовности
   1711				     ; контроллера.
   1712				     ;	 Программа ожидает байт состояния		       +
   1713				     определенное время
   1714				     ; и проверяет готовность НГМД к работе.
   1715				     ;
   1716				     ;	 ВВОД   (AH) - выводимый байт
   1717				     ;
   1718				     ;	 ВЫВОД  CY=0 - успешно,
   1719				     ;		CY=1 - не успешно.Состояние
   1720				     ;		НГМД анализируется.
   1721				     ;-----------------------
   1722	E72F			     nec_output	proc near
   1723	E72F  52			     push    dx		     ; сохранить регистры
   1724	E730  51			     push    cx
   1725	E731  BA 03F4			     mov     dx,03f4h	     ; состояние порта
   1726	E734  33 C9			     xor     cx,cx	     ; счетчик времени вывода
   1727	E736			     j23:
   1728	E736  EC			     in	     al,dx	     ; получить	состояние
   1729	E737  A8 40			     test    al,040h	     ; проверка	управляющих бит
   1730	E739  74 0C			     jz	     j25	     ; биты	управления		       +
   1731				     нормальные
   1732	E73B  E2 F9			     loop    j23
   1733	E73D			     j24:
   1734	E73D  80 0E 0041r 80		     or	     diskette_status,time_out
   1735	E742  59			     pop     cx
   1736	E743  5A			     pop     dx	     ; установить код ошибки	и	       +
   1737				     восстановить регистры
   1738	E744  58			     pop     ax		     ; адрес возврата
   1739	E745  F9			     stc		     ;
   1740	E746  C3			     ret
   1741
   1742	E747			     j25:
   1743	E747  33 C9			     xor     cx,cx	     ; обнуление счетчика
   1744	E749			     j26:
   1745	E749  EC			     in	     al,dx	     ; получить	состояние
   1746	E74A  A8 80			     test    al,080h	     ; проверка	готовности
   1747	E74C  75 04			     jnz     j27	     ; да - идти на выход
   1748	E74E  E2 F9			     loop    j26	     ; повторить
   1749	E750  EB EB			     jmp     short j24	     ; ошибка состояния
   1750	E752			     j27:			     ; выход
   1751	E752  8A C4			     mov     al,ah	     ; получить	байт
   1752	E754  BA 03F5			     mov     dx,03f5h	     ; переслать байт данных	в     +
   1753				     порт
   1754	E757  EE			     out     dx,al
   1755	E758  59			     pop     cx		     ; восстановить	регистры
   1756	E759  5A			     pop     dx
   1757	E75A  C3			     ret		     ;
   1758	E75B			     nec_output	     endp
   1759
   1760				     ;___int 16_________________
   1761				     ;
   1762				     ;	 Программа поддержки клавиатуры
   1763				     ;
   1764				     ;	 Эта	программа считывает в регистр
   1765				     ; AX код сканирования клавиши и код
   1766				     ; ASCII из буфера клавиатуры.
   1767				     ;
   1768				     ;	 Программа выполняет три функции, код
   1769				     ; которых задается в регистре AH:
   1770				     ;
   1771				     ;	  AH=0 - считать	следующий символ
   1772				     ;		  из буфера.При выходе	код
   1773				     ;		  сканирования в AH,код
   1774				     ;		  ASCII	в AL.
   1775				     ;	 AH=1 -	установить ZF, если код
   1776				     ;		  ASCII	прочитан:
   1777				     ;
   1778				     ;		  ZF=0 - буфер заполнен,
   1779				     ;		  ZF=1 - буфер пустой.
   1780				     ;	 При	выходе в	AX помещен адрес вершины	       +
   1781				     буфера клавиатуры.
   1782				     ;	 AH=2 -	возврат текущего	состояния в регистр AL
   1783				     ;		   из	постоянно распределенной	области +
   1784				     памяти с
   1785				     ;		адресом 00417H.
   1786				     ;
   1787				     ;	 При	выполнении программ клавиатуры	       +
   1788				     используются флажки,
   1789				     ; которые устанавливаются в	постоянно	       +
   1790				     распределенной области
   1791				     ; памяти по адресам	00417H и 00418H и имеют значение:
   1792				     ;	 00417H
   1793				     ;	       0 - правое	переключение регистра;
   1794				     ;	       1 - левое переключение регистра;
   1795				     ;		  2 - УПР;
   1796				     ;	       3 - ДОП;
   1797				     ;	       4 - ФСД;
   1798				     ;	       5 - ЦИФ;
   1799				     ;	       6 - ФПБ;
   1800				     ;	       7 - ВСТ;
   1801				     ;	 00418H
   1802				     ;	       0 - состояние клавиши ЛАТ между нажатием+
   1803				     и	отжатием;
   1804				     ;	       1 - ЛАТ;
   1805				     ;	       2 - Р/Л;
   1806				     ;	       3 - пауза;
   1807				     ;	       4 - ФСД;
   1808				     ;	       5 - ЦИФ;
   1809				     ;	       6 - ФПБ;
   1810				     ;	       7 - ВСТ.
   1811				     ;
   1812				     ;	 Флажки, соответствующие разрядам 4-7	       +
   1813				     постоянно	распределенной
   1814				     ; области памяти с адресом 00417H,			       +
   1815				     устанавливаются по нажатию
   1816				     ; клавиш ВСТ, ФПБ, ЦИФ, ФСД и сохраняют свои      +
   1817				     значения до сле-
   1818				     ; дующего нажатия соответствующей клавиши.
   1819				     ; Одноименные флажки, соответствующие	       +
   1820				     разрядам 4-7 постоянно
   1821				     ; распределенной области памяти	с адресом      +
   1822				     00418H, и	флажки
   1823				     ; ДОП, УПР, левое переключение регистра,	       +
   1824				     правое переключение
   1825				     ; регистра, Р/Л устанавливаются по нажатию      +
   1826				     клавиш и сбрасываются
   1827				     ; по отжатию.
   1828				     ;
   1829				     ;------------------------------
   1830					     assume  cs:code,ds:data
   1831
   1832
   1833	E75B			     k4	     proc    near
   1834	E75B  83 C3 02			     add     bx,2
   1835	E75E  81 FB 003Er		     cmp  bx, offset kb_buffer_end	      ;	конец буфера	?
   1836	E762  75 03			     jne     k5			      ;	нет - продолжить
   1837	E764  BB 001Er			     mov     bx, offset	kb_buffer     ;	да - уст начала буфера
   1838	E767			     k5:
   1839	E767  C3			     ret
   1840	E768			     k4	     endp
   1841
   1842	E768			     error_beep	proc near
   1843	E768  50			     push    ax
   1844	E769  53			     push    bx
   1845	E76A  51			     push    cx
   1846	E76B  BB 00C0			     mov     bx,0c0h
   1847	E76E  E4 61			     in	     al,kb_ctl
   1848	E770  50			     push    ax
   1849	E771			     k65:
   1850	E771  24 FC			     and     al,0fch
   1851	E773  E6 61			     out     kb_ctl,al
   1852	E775  B9 0048			     mov     cx,48h
   1853	E778  E2 FE		     k66:    loop    k66
   1854	E77A  0C 02			     or	     al,2
   1855	E77C  E6 61			     out     kb_ctl,al
   1856	E77E  B9 0048			     mov     cx,48h
   1857	E781  E2 FE		     k67:    loop    k67
   1858	E783  4B			     dec     bx
   1859	E784  75 EB			     jnz     k65
   1860	E786  58			     pop     ax
   1861	E787  E6 61			     out     kb_ctl,al
   1862	E789  59			     pop     cx
   1863	E78A  5B			     pop     bx
   1864	E78B  58			     pop     ax
   1865	E78C  C3			     ret
   1866	E78D			     error_beep	     endp
   1867
   1868				     ;---
   1869
   1870	E78D			     k54:
   1871	E78D  3C 3B			     cmp     al,59
   1872	E78F  72 05			     jb	     k55
   1873	E791  B0 00			     mov     al,0
   1874	E793  EB 0F				     jmp     short k57
   1875	E795  90				     nop
   1876
   1877	E796  BB E8DCr		     k55:    mov     bx,offset k10
   1878	E799  F6 06 0018r 02		     test    kb_flag_1,lat
   1879	E79E  74 57			     jz	     k99
   1880
   1881				     ;---
   1882
   1883	E7A0			     k56:
   1884	E7A0  FE C8			     dec     al
   1885	E7A2  2E: D7			     xlat    cs:k11
   1886
   1887				     ;---
   1888
   1889	E7A4			     k57:
   1890	E7A4  3C FF			     cmp     al,-1
   1891	E7A6  74 2A			     je	     k59
   1892	E7A8  80 FC FF			     cmp     ah,-1
   1893	E7AB  74 25			     je	     k59
   1894				     ;---
   1895
   1896	E7AD			     k58:
   1897	E7AD  F6 06 0017r 40		     test    kb_flag,caps_state
   1898	E7B2  74 2B			     jz	     k61
   1899
   1900				     ;---
   1901	E7B4  F6 06 0018r 02		     test    kb_flag_1,lat
   1902	E7B9  75 03			     jnz     k88
   1903	E7BB  E9 1175			     jmp     k89
   1904	E7BE			     k88:
   1905	E7BE  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
   1906	E7C3  74 10			     jz	     k60
   1907
   1908				     ;----------
   1909
   1910	E7C5  3C 41			     cmp     al,'A'
   1911	E7C7  72 16			     jb	     k61
   1912	E7C9  3C 5A			     cmp     al,'Z'
   1913	E7CB  77 12			     ja	     k61
   1914	E7CD  04 20			     add     al,'a'-'A'
   1915	E7CF  EB 0E				     jmp     short k61
   1916	E7D1  90				     nop
   1917
   1918	E7D2			     k59:
   1919	E7D2  E9 0316			     jmp     k26
   1920
   1921
   1922	E7D5			     k60:
   1923	E7D5  3C 61			     cmp     al,'a'
   1924	E7D7  72 06			     jb	     k61
   1925	E7D9  3C 7A			     cmp     al,'z'
   1926	E7DB  77 02			     ja	     k61
   1927	E7DD  2C 20			     sub     al,'a'-'A'
   1928
   1929	E7DF			     k61:
   1930	E7DF  8B 1E 001Cr		     mov     bx,buffer_tail
   1931	E7E3  8B F3			     mov     si,bx
   1932	E7E5  E8 FF73			     call   k4
   1933	E7E8  3B 1E 001Ar		     cmp     bx,buffer_head
   1934	E7EC  74 0E			     je	     k62
   1935	E7EE  89 04			     mov     word ptr [si],ax
   1936	E7F0  89 1E 001Cr		     mov     buffer_tail,bx
   1937	E7F4  E9 02F4			     jmp     k26
   1938	E7F7  BB F8CBr		     k99:    mov     bx,offset rust
   1939	E7FA  EB A4			     jmp k56
   1940
   1941				     ;---
   1942
   1943	E7FC			     k62:
   1944	E7FC  E8 FF69			     call    error_beep
   1945	E7FF  E9 02E9			     jmp     k26
   1946
   1947				     ;---
   1948
   1949	E802			     k63:
   1950	E802  2C 3B			     sub     al,59
   1951	E804			     k64:
   1952	E804  2E: D7			     xlat    cs:k9
   1953	E806  8A E0			     mov     ah,al
   1954	E808  B0 00			     mov     al,0
   1955	E80A  EB 98				     jmp     short k57
   1956	E80C  22*(00)				     db	34 dup(0)
   1957
   1958				     ;---
   1959
   1960	E82E			     keyboard_io proc	     far
   1961	E82E  FB			     sti		     ;
   1962	E82F  1E			     push    ds
   1963	E830  53			     push    bx
   1964	E831  BB 0040			     mov     bx,dat
   1965	E834  8E DB			     mov     ds,bx	     ; установить сегмент данных
   1966	E836  0A E4			     or	     ah,ah	     ; AH=0
   1967	E838  74 0B			     jz	     k1		  ; переход к считыванию	       +
   1968				     следующего символа
   1969	E83A  FE CC			     dec     ah		     ; AH=1
   1970	E83C  74 20			     jz	     k2		  ; переход к считыванию кода    +
   1971				     ASCII
   1972	E83E  FE CC			     dec     ah			  ; AH=2
   1973	E840  74 2D			     jz	     k3		  ; переход к получению байта    +
   1974				     состояния
   1975	E842  5B			     pop     bx			  ; восстановить регистр
   1976	E843  1F			     pop     ds
   1977	E844  CF			     iret
   1978
   1979				     ;	 Считывание кода сканирования	и кода ASCII из +
   1980				     буфера клавиатуры
   1981				     ;
   1982	E845			     k1:
   1983	E845  FB			     sti	     ; уст признака разрешения	       +
   1984				     прерывания
   1985	E846  90			     nop		     ; задержка
   1986	E847  FA			     cli	     ; сброс признака разрешения	       +
   1987				     прерывания
   1988	E848  8B 1E 001Ar		     mov     bx,buffer_head  ; уст вершину буфера по	       +
   1989				     чтению
   1990	E84C  3B 1E 001Cr		     cmp     bx,buffer_tail  ; сравнить	с вершиной	       +
   1991				     буфера по записи
   1992	E850  74 F3			     jz	     k1
   1993	E852  8B 07			     mov     ax,word ptr [bx] ;	получить код			       +
   1994				     сканирования и код	ASCII
   1995	E854  E8 FF04			     call    k4
   1996	E857  89 1E 001Ar		     mov     buffer_head,bx  ; запомнить вершину буфера  +
   1997				     по чтению
   1998	E85B  5B			     pop     bx		     ; восстановить	регистр
   1999	E85C  1F			     pop     ds		     ; восстановить	сегмент
   2000	E85D  CF			     iret		     ; возврат к программе
   2001
   2002				     ;	 Считать	код ASCII
   2003
   2004	E85E			     k2:
   2005	E85E  FA			     cli	     ; Сброс признака разрешения	       +
   2006				     прерывания
   2007	E85F  8B 1E 001Ar		     mov     bx,buffer_head  ; получить	указатель	       +
   2008				     вершины буфера
   2009								     ; по чтению
   2010	E863  3B 1E 001Cr		     cmp     bx,buffer_tail  ; сравнить	с вершиной	       +
   2011				     буфера по записи
   2012	E867  8B 07			     mov     ax,word ptr [bx]
   2013	E869  FB			     sti		     ; уст признак разрешения      +
   2014				     прерывания
   2015	E86A  5B			     pop     bx		     ; восстановить	регистр
   2016	E86B  1F			     pop     ds		     ; восстановить	сегмент
   2017	E86C  CA 0002			     ret     2
   2018
   2019				     ;	 Получение младшего байта	состояния	       +
   2020				     (флажков)
   2021
   2022	E86F			     k3:
   2023	E86F  A0 0017r			     mov     al,kb_flag	     ; получить	младший байт	       +
   2024				     состояния	    на
   2025	E872  5B			     pop     bx		     ; восстановить	регистр
   2026	E873  1F			     pop     ds		     ; восстановить	сегмент
   2027	E874  CF			     iret		     ; возврат к программе
   2028	E875			     keyboard_io     endp
   2029
   2030				     ;	 Таблица	кодов сканирования управляющих     +
   2031				     клавиш
   2032
   2033	E875			     k6	     label   byte
   2034	E875  52			     db	     ins_key
   2035	E876  56 45 46 38 1D		     db	     caps_key,num_key,scroll_key,alt_key,ctl_key
   2036	E87B  54 55			     db	     left_key,right_key
   2037	E87D  58			     db	     inv_key_l
   2038	E87E  5A 57 5B			     db	     inv_key_r,lat_key,rus_key
   2039	      =000C		     k6l     equ     0ch
   2040
   2041				     ;	 Таблица	масок нажатых управляющих клавиш
   2042
   2043	E881			     k7	     label   byte
   2044	E881  80			     db	     ins_shift
   2045	E882  40 20 10 08 04		     db	     caps_shift,num_shift,scroll_shift,alt_shift,ctl_shift
   2046	E887  02 01			     db	     left_shift,right_shift
   2047
   2048
   2049				     ;	 Таблица	кодов сканирования при нажатой      +
   2050				     клавише УПР для
   2051				     ; кодов сканирования клавиш	меньше 59
   2052
   2053	E889  1B FF 00 FF FF FF	1E+  k8	     db	     27,-1,0,-1,-1,-1,30,-1
   2054	      FF
   2055
   2056	E891  FF FF FF 1F FF 7F	FF+	     db	     -1,-1,-1,31,-1,127,-1,17
   2057	      11
   2058
   2059	E899  17 05 12 14 19 15	09+	     db	     23,5,18,20,25,21,9,15
   2060	      0F
   2061
   2062	E8A1  10 1B 1D 0A FF 01	13	     db	     16,27,29,10,-1,1,19
   2063
   2064	E8A8  04 06 07 08 0A 0B	0C+	     db	     4,6,7,8,10,11,12,-1,-1
   2065	      FF FF
   2066
   2067	E8B1  FF FF 1C 1A 18 03	16+	     db	     -1,-1,28,26,24,3,22,2
   2068	      02
   2069
   2070	E8B9  0E 0D FF FF FF FF	FF+	     db	     14,13,-1,-1,-1,-1,-1,-1
   2071	      FF
   2072
   2073	E8C1  20 FF			     db	     ' ',-1
   2074
   2075				     ;	 Таблица	кодов сканирования при нажатой      +
   2076				     клавише УПР для
   2077				     ; кодов сканирования клавиш	больше 59
   2078	E8C3			     k9	     label   byte
   2079	E8C3  5E 5F 60 61 62 63	64+	     db	     94,95,96,97,98,99,100,101
   2080	      65
   2081
   2082	E8CB  66 67 FF FF 77 FF	84+	     db	     102,103,-1,-1,119,-1,132,-1
   2083	      FF
   2084
   2085	E8D3  73 FF 74 FF 75 FF	76+	     db	     115,-1,116,-1,117,-1,118,-1
   2086	      FF
   2087
   2088	E8DB  FF			     db	     -1
   2089
   2090				     ;	 Таблица	кодов ASCII нижнего	регистра	       +
   2091				     клавиатуры
   2092
   2093	E8DC			     k10     label   byte
   2094	E8DC  1B 31 32 33 34 35	36+	     db	     27,'1234567890-='
   2095	      37 38 39 30 2D 3D
   2096
   2097
   2098	E8E9  08 09			     db	     08h,09h
   2099	E8EB  71 77 65 72 74 79	75+	     db	     'qwertyuiop[]',0dh,-1,'asdfghjkl;:',60h,7eh
   2100	      69 6F 70 5B 5D 0D	FF+
   2101	      61 73 64 66 67 68	6A+
   2102	      6B 6C 3B 3A 60 7E
   2103
   2104
   2105
   2106
   2107	E906  5C 7A 78 63 76 62	6E+	     db	     05ch,'zxcvbnm',',./{'
   2108	      6D 2C 2E 2F 7B
   2109
   2110	E912  2A FF 20 7D		     db	     '*',-1,' }'
   2111
   2112				     ;	 Таблица	кодов ASCII верхнего регистра	       +
   2113				     клавиатуры
   2114
   2115	E916			     k11     label   byte
   2116	E916  1B 21 40 23 24 25	5E+	     db	     27,'!@#$',37,05eh,'&*()_+'
   2117	      26 2A 28 29 5F 2B
   2118
   2119
   2120	E923  08 00			     db	     08h,0
   2121	E925  51 57 45 52 54 59	55+	     db	     'QWERTYUIOP',-1,-1,0dh,-1
   2122	      49 4F 50 FF FF 0D	FF
   2123
   2124
   2125	E933  41 53 44 46 47 48	4A+	     db	     'ASDFGHJKL'
   2126	      4B 4C
   2127
   2128	E93C  27 22 FF FF 7C		     db	     027h,'"',-1,-1,7ch
   2129	E941  5A 58 43 56 42 4E	4D	     db	     'ZXCVBNM'
   2130
   2131	E948  3C 3E 3F FF 00 FF	20+	     db	     '<>?',-1,0,-1,' ',-1
   2132	      FF
   2133
   2134
   2135				     ;	 Таблица	кодов сканирования клавиш Ф11 -	Ф20   +
   2136				     (на верхнем
   2137				     ; регистре	Ф1 - Ф10)
   2138
   2139	E950			     k12     label   byte
   2140	E950  54 55 56 57 58 59	5A	     db	     84,85,86,87,88,89,90
   2141
   2142	E957  5B 5C 5D			     db	     91,92,93
   2143
   2144				     ;	 Таблица	кодов сканирования одновременно   +
   2145				     нажатых клавиш
   2146				     ; ДОП и Ф1 - Ф10
   2147
   2148	E95A			     k13     label byte
   2149	E95A  68 69 6A 6B 6C		     db	     104,105,106,107,108
   2150	E95F  6D 6E 6F 70 71		     db	     109,110,111,112,113
   2151
   2152				     ;	 Таблица	кодов правого				       +
   2153				     пятнадцатиклавишного поля на верхнем
   2154				     ; регистре
   2155
   2156	E964			     k14     label   byte
   2157	E964  37 38 39 2D 34 35	36+	     db	     '789-456+1230.'
   2158	      2B 31 32 33 30 2E
   2159
   2160
   2161
   2162				     ;	 Таблица	кодов правого				       +
   2163				     пятнадцатиклавишного поля на нижнем
   2164				     ; регистре
   2165
   2166	E971			     k15     label byte
   2167	E971  47 48 49 FF 4B FF	4D	     db	     71,72,73,-1,75,-1,77
   2168
   2169	E978  FF 4F 50 51 52 53		     db	     -1,79,80,81,82,83
   2170
   2171	E97E  09*(00)				     db	9 dup(0)
   2172
   2173				     ;----INT 9--------------------------
   2174				     ;
   2175				     ;	  Программа обработки	прерывания		       +
   2176				     клавиатуры
   2177				     ;
   2178				     ; Программа считывает код сканирования	       +
   2179				     клавиши в регистр AL.
   2180				     ; Единичное состояние разряда 7 в коде	       +
   2181				     сканирования означает,
   2182				     ; что клавиша отжата.
   2183				     ;	 В результате выполнения программы в	       +
   2184				     регистре AX формируется
   2185				     ; слово, старший байт которого (AH) содержит      +
   2186				     код сканирования,
   2187				     ; а младший (AL) -	код ASCII. Эта информация	       +
   2188				     помещается в буфер
   2189				     ; клавиатуры. После	заполнения буфера	       +
   2190				     подается звуковой сигнал.
   2191				     ;
   2192				     ;-----------------------------------
   2193
   2194	E987			     kb_int proc far
   2195	E987  FB			     sti		; установка признака		       +
   2196				     разрешения прерывания
   2197	E988  50			     push    ax
   2198	E989  53			     push    bx
   2199	E98A  51			     push    cx
   2200	E98B  52			     push    dx
   2201	E98C  56			     push    si
   2202	E98D  57			     push    di
   2203	E98E  1E			     push    ds
   2204	E98F  06			     push    es
   2205	E990  FC			     cld		    ; установить признак	       +
   2206				     направления вперед
   2207	E991  B8 0040			     mov     ax,dat	    ; установить адресацию
   2208	E994  8E D8			     mov     ds,ax
   2209	E996  E4 60			     in	     al,kb_dat	    ; считать код сканирования
   2210	E998  50			     push    ax
   2211	E999  E4 61			     in	     al,kb_ctl	    ; считать значение порта 61
   2212	E99B  8A E0			     mov     ah,al	    ; сохранить считанное	       +
   2213				     значение
   2214	E99D  0C 80			     or	     al,80h	    ; установить бит 7 порта 61
   2215	E99F  E6 61			     out     kb_ctl,al	    ; для работы с клавиатурой
   2216	E9A1  86 E0			     xchg    ah,al	    ; восстановить значение	       +
   2217				     порта	61
   2218	E9A3  E6 61			     out     kb_ctl,al
   2219	E9A5  58			     pop     ax		    ; восстановить код		       +
   2220				     сканирования
   2221	E9A6  8A E0			     mov     ah,al	    ; и сохранить его в AH
   2222
   2223				     ;---
   2224
   2225	E9A8  3C FF			     cmp     al,0ffh  ;	сравнение с кодом заполнения  +
   2226				     буфера
   2227							      ;	клавиатуры
   2228	E9AA  75 03			     jnz     k16	     ; продолжить
   2229	E9AC  E9 FE4D			     jmp     k62     ; переход на звуковой сигнал по  +
   2230				     заполнению
   2231							     ; буфера клавиатуры
   2232
   2233	E9AF			     k16:
   2234	E9AF  24 7F			     and     al,07fh	     ; сброс бита отжатия клавиши
   2235	E9B1  0E			     push    cs
   2236	E9B2  07			     pop     es
   2237	E9B3  BF E875r			     mov     di,offset k6  ; установить адрес таблицы    +
   2238				     сканирования
   2239								   ; управляющих клавиш
   2240	E9B6  B9 000C			     mov     cx,k6l
   2241	E9B9  F2> AE			     repne scasb     ; сравнение полученного кода      +
   2242				     ска-
   2243							     ; нирования с содержимым таблицы
   2244	E9BB  8A C4			     mov     al,ah	     ; запомнить код		       +
   2245				     сканирования
   2246	E9BD  74 1A			     je	     k17	     ; переход по совпадению
   2247	E9BF  E9 010A			     jmp     k25	     ; переход по несовпадению
   2248	E9C2			     k406:
   2249	E9C2  F6 06 0018r 02		     test    kb_flag_1,lat
   2250	E9C7  75 7F			     jnz     k26a
   2251	E9C9  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
   2252	E9CE  B8 5CF1			     mov     ax,5cf1h
   2253	E9D1  74 03			     jz	     k407
   2254	E9D3  B8 5CF0			     mov     ax,5cf0h
   2255
   2256				     ;	 Получение маски нажатой управляющей	       +
   2257				     клавиши
   2258
   2259	E9D6			     k407:
   2260	E9D6  E9 FDCB			     jmp     k57
   2261
   2262	E9D9  81 EF E876r	     k17:    sub     di,offset k6+1
   2263	E9DD  83 FF 08			     cmp     di,8
   2264	E9E0  72 3B			     jb	     k300
   2265	E9E2  B4 06			     mov     ah,6
   2266	E9E4  83 FF 0A			     cmp     di,0ah
   2267	E9E7  72 39			     jb	     k301
   2268	E9E9  A8 80			     test    al,80h
   2269	E9EB  74 5B			     jz	     k26a
   2270	E9ED  80 26 0018r FC		     and     kb_flag_1,not lat+lat_shift
   2271	E9F2  83 FF 0B			     cmp     di,0bh
   2272	E9F5  74 17			     je	     k401
   2273	E9F7  F6 06 0018r 04		     test    kb_flag_1,inv_shift
   2274	E9FC  74 08			     jz	     k400
   2275	E9FE  80 0E 0018r 01		     or	     kb_flag_1,lat_shift
   2276	EA03  EB 43				     jmp     short k26a
   2277	EA05  90				     nop
   2278	EA06  80 0E 0018r 03	     k400:   or	     kb_flag_1,lat+lat_shift
   2279	EA0B  EB 3B				     jmp     short k26a
   2280	EA0D  90				     nop
   2281	EA0E  F6 06 0018r 04	     k401:   test    kb_flag_1,inv_shift
   2282	EA13  74 33			     jz	     k26a
   2283	EA15  80 0E 0018r 02		     or	     kb_flag_1,lat
   2284	EA1A  EB 2C				     jmp     short k26a
   2285	EA1C  90				     nop
   2286	EA1D  2E: 8A A5	E881r	     k300:   mov     ah,cs:k7[di]
   2287	EA22			     k301:
   2288	EA22  A8 80			     test    al,80h	     ; клавиша отжата ?
   2289	EA24  75 79			     jnz     k23     ; переход, если	клавиша отжата
   2290
   2291				     ;	 Управляющая	клавиша нажата
   2292
   2293	EA26  80 FC 10			     cmp     ah,scroll_shift ; нажата управляющая	       +
   2294				     клавиша с
   2295								     ;	запоминанием ?
   2296	EA29  73 20			     jae     k18	     ; переход, если	да
   2297
   2298				     ;---
   2299	EA2B  80 FC 06			     cmp     ah,6
   2300	EA2E  74 07			     je	     k302
   2301
   2302	EA30  08 26 0017r		     or	     kb_flag,ah	     ; установка масок		       +
   2303				     управляющих клавиш
   2304								     ; без запоминания
   2305	EA34  E9 00B4			     jmp     k26	     ; к выходу из прерывания
   2306	EA37  80 0E 0018r 06	     k302:   or	     kb_flag_1,inv_shift+lat
   2307	EA3C  F6 06 0018r 01		     test    kb_flag_1,lat_shift
   2308	EA41  74 05			     jz	     k26a
   2309	EA43  80 26 0018r FD		     and     kb_flag_1,not lat
   2310	EA48			     k26a:
   2311	EA48  E9 00A0			     jmp     k26
   2312
   2313				     ;	 Опрос нажатия клавиши с запоминанием
   2314
   2315	EA4B			     k18:
   2316	EA4B  F6 06 0017r 04		     test    kb_flag,ctl_shift	       ; опрос клавиши УПР
   2317	EA50  75 7A			     jnz     k25
   2318	EA52  3C 52			     cmp     al,ins_key		       ; опрос клавиши ВСТ
   2319	EA54  75 25			     jnz     k22
   2320	EA56  F6 06 0017r 08		     test    kb_flag,alt_shift	       ; опрос клавиши ДОП
   2321	EA5B  74 03			     jz	     k19
   2322	EA5D  EB 6D				     jmp     short k25
   2323	EA5F  90				     nop
   2324	EA60  F6 06 0017r 20	     k19:    test    kb_flag,num_state	; опрос клавиши ЦИФ
   2325	EA65  75 0D			     jnz     k21
   2326	EA67  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift ; опрос клавиш	       +
   2327				     левого
   2328								  ; и правого переключения	       +
   2329				     регистров
   2330	EA6C  74 0D			     jz	     k22
   2331
   2332	EA6E			     k20:
   2333	EA6E  B8 5230			     mov     ax,5230h
   2334	EA71  E9 FD30			     jmp     k57	   ; установка	кода нуля
   2335	EA74			     k21:
   2336	EA74  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
   2337	EA79  74 F3			     jz	     k20
   2338
   2339	EA7B			     k22:
   2340	EA7B  84 26 0018r		     test    ah,kb_flag_1
   2341	EA7F  75 6A			     jnz     k26
   2342	EA81  08 26 0018r		     or	     kb_flag_1,ah
   2343	EA85  30 26 0017r		     xor     kb_flag,ah
   2344	EA89  3C 52			     cmp     al,ins_key
   2345	EA8B  75 5E			     jne     k26
   2346	EA8D  B8 5200			     mov     ax,ins_key*256
   2347	EA90  E9 FD11			     jmp     k57
   2348
   2349	EA93			     k303:
   2350	EA93  80 26 0018r FB		     and     kb_flag_1,not inv_shift
   2351	EA98  80 36 0018r 02		     xor     kb_flag_1,lat
   2352	EA9D  EB 10			     jmp     short k304
   2353
   2354				     ;	 Управляющая	клавиша отжата
   2355
   2356	EA9F			     k23:
   2357
   2358	EA9F  80 FC 10			     cmp     ah,scroll_shift
   2359	EAA2  73 1F			     jae     k24
   2360	EAA4  F6 D4			     not     ah
   2361	EAA6  80 FC F9			     cmp     ah,0f9h
   2362	EAA9  74 E8			     je	     k303
   2363	EAAB  20 26 0017r		     and     kb_flag,ah
   2364	EAAF			     k304:
   2365	EAAF  3C B8			     cmp     al,alt_key+80h
   2366	EAB1  75 38			     jne     k26
   2367
   2368				     ;---
   2369
   2370	EAB3  A0 0019r			     mov     al,alt_input
   2371	EAB6  B4 00			     mov     ah,0
   2372	EAB8  88 26 0019r		     mov     alt_input,ah
   2373	EABC  3C 00			     cmp     al,0
   2374	EABE  74 2B			     je	     k26
   2375	EAC0  E9 FCEA			     jmp     k58
   2376
   2377	EAC3			     k24:
   2378	EAC3  F6 D4			     not     ah
   2379	EAC5  20 26 0018r		     and     kb_flag_1,ah
   2380	EAC9  EB 20				     jmp     short k26
   2381	EACB  90				     nop
   2382
   2383	EACC			     k25:
   2384	EACC  3C 80			     cmp     al,80h
   2385	EACE  73 1B			     jae     k26
   2386	EAD0  3C 59			     cmp     al,inf_key
   2387	EAD2  74 25			     je	     k307
   2388	EAD4  3C 5C			     cmp     al,92
   2389	EAD6  75 03			     jne     k406b
   2390	EAD8  E9 FEE7			     jmp     k406
   2391	EADB			     k406b:
   2392	EADB  F6 06 0018r 08		     test    kb_flag_1,hold_state
   2393	EAE0  74 1D			     jz	     k28
   2394	EAE2  3C 45			     cmp     al,num_key
   2395	EAE4  74 05			     je	     k26
   2396	EAE6  80 26 0018r F7		     and     kb_flag_1,not hold_state
   2397
   2398	EAEB			     k26:
   2399	EAEB  FA			     cli
   2400	EAEC  B0 20			     mov     al,eoi
   2401	EAEE  E6 20			     out     020h,al
   2402	EAF0			     k27:
   2403	EAF0  07			     pop     es
   2404	EAF1  1F			     pop     ds
   2405	EAF2  5F			     pop     di
   2406	EAF3  5E			     pop     si
   2407	EAF4  5A			     pop     dx
   2408	EAF5  59			     pop     cx
   2409	EAF6  5B			     pop     bx
   2410	EAF7  58			     pop     ax
   2411	EAF8  CF			     iret
   2412
   2413	EAF9  B8 A000		     k307:   mov     ax,0a000h
   2414	EAFC  E9 FCA5			     jmp     k57
   2415
   2416
   2417				     ;---
   2418
   2419	EAFF			     k28:
   2420	EAFF  F6 06 0017r 08		     test    kb_flag,alt_shift
   2421	EB04  75 03			     jnz     k29
   2422	EB06  EB 6D				     jmp     short k38
   2423	EB08  90				     nop
   2424
   2425				     ;---
   2426
   2427	EB09			     k29:
   2428	EB09  F6 06 0017r 04		     test    kb_flag,ctl_shift
   2429	EB0E  74 0F			     jz	     k31
   2430	EB10  3C 53			     cmp     al,del_key
   2431	EB12  75 0B			     jne     k31
   2432
   2433				     ;---
   2434
   2435	EB14  C7 06 0072r 1234		     mov     reset_flag,1234h
   2436	EB1A  EA			     db	     0eah		     ;	     db	     0eah,5bh,0e0h,00h,0f0h  ; +
   2437				     jmp far ptr start
   2438	EB1B  E067r F000		     dw	     offset start, cod	     ;	     ###Gleb###
   2439
   2440				     ;---
   2441
   2442
   2443
   2444
   2445	EB1F			     k31:
   2446	EB1F  3C 39			     cmp     al,57
   2447	EB21  75 05			     jne     k32
   2448	EB23  B0 20			     mov     al,' '
   2449	EB25  E9 FC7C			     jmp     k57
   2450
   2451				     ;---
   2452
   2453	EB28			     k32:
   2454	EB28  BF F905r			     mov     di,offset k30
   2455	EB2B  B9 000A			     mov     cx,10
   2456	EB2E  F2> AE				     repne scasb
   2457	EB30  75 12			     jne     k33
   2458	EB32  81 EF F906r		     sub     di,offset k30+1
   2459	EB36  A0 0019r			     mov     al,alt_input
   2460	EB39  B4 0A			     mov     ah,10
   2461	EB3B  F6 E4			     mul     ah
   2462	EB3D  03 C7			     add     ax,di
   2463	EB3F  A2 0019r			     mov     alt_input,al
   2464	EB42  EB A7				     jmp     short k26
   2465
   2466				     ;---
   2467
   2468	EB44			     k33:
   2469	EB44  C6 06 0019r 00		     mov     alt_input,00h
   2470	EB49  B9 001A			     mov     cx,0026
   2471	EB4C  F2> AE				     repne scasb
   2472	EB4E  75 05			     jne     k34
   2473	EB50  B0 00			     mov     al,0
   2474	EB52  E9 FC4F			     jmp     k57
   2475
   2476				     ;---
   2477
   2478	EB55			     k34:
   2479	EB55  3C 02			     cmp     al,2
   2480	EB57  72 0C			     jb	     k35
   2481	EB59  3C 0E			     cmp     al,14
   2482	EB5B  73 08			     jae     k35
   2483	EB5D  80 C4 76			     add     ah,118
   2484	EB60  B0 00			     mov     al,0
   2485	EB62  E9 FC3F			     jmp     k57
   2486
   2487				     ;---
   2488
   2489	EB65			     k35:
   2490	EB65  3C 3B			     cmp     al,59
   2491	EB67  73 02			     jae     k37
   2492	EB69			     k36:
   2493	EB69  EB 80				     jmp     short k26
   2494	EB6B			     k37:
   2495	EB6B  3C 47			     cmp     al,71
   2496	EB6D  73 FA			     jae     k36
   2497	EB6F  BB E95Ar			     mov     bx,offset k13
   2498	EB72  E9 FC8D			     jmp     k63
   2499
   2500				     ;---
   2501
   2502	EB75			     k38:
   2503	EB75  F6 06 0017r 04		     test    kb_flag,ctl_shift
   2504	EB7A  74 5B			     jz	     k44
   2505
   2506				     ;---
   2507				     ;---
   2508
   2509	EB7C  3C 46			     cmp     al,scroll_key
   2510	EB7E  75 18			     jne     k39
   2511	EB80  BB 001Er			     mov     bx,offset kb_buffer
   2512	EB83  89 1E 001Ar		     mov     buffer_head,bx
   2513	EB87  89 1E 001Cr		     mov     buffer_tail,bx
   2514	EB8B  C6 06 0071r 80		     mov     bios_break,80h
   2515	EB90  CD 1B			     int     1bh
   2516	EB92  B8 0000			     mov     ax,0
   2517	EB95  E9 FC0C			     jmp     k57
   2518
   2519	EB98			     k39:
   2520	EB98  3C 45			     cmp     al,num_key
   2521	EB9A  75 21			     jne     k41
   2522	EB9C  80 0E 0018r 08		     or	     kb_flag_1,hold_state
   2523	EBA1  B0 20			     mov     al,eoi
   2524	EBA3  E6 20			     out     020h,al
   2525
   2526				     ;---
   2527
   2528	EBA5  80 3E 0049r 07		     cmp     crt_mode,7
   2529	EBAA  74 07			     je	     k40
   2530	EBAC  BA 03D8			     mov     dx,03d8h
   2531	EBAF  A0 0065r			     mov     al,crt_mode_set
   2532	EBB2  EE			     out     dx,al
   2533	EBB3			     k40:
   2534	EBB3  F6 06 0018r 08		     test    kb_flag_1,hold_state
   2535	EBB8  75 F9			     jnz     k40
   2536	EBBA  E9 FF33			     jmp     k27
   2537	EBBD			     k41:
   2538
   2539				     ;---
   2540
   2541	EBBD  3C 37			     cmp     al,55
   2542	EBBF  75 06			     jne     k42
   2543	EBC1  B8 7200			     mov     ax,114*256
   2544	EBC4  E9 FBDD			     jmp     k57
   2545
   2546				     ;---
   2547
   2548	EBC7			     k42:
   2549	EBC7  BB E889r			     mov     bx,offset k8
   2550	EBCA  3C 3B			     cmp     al,59
   2551	EBCC  73 03			     jae     k43
   2552	EBCE  E9 FBCF			     jmp     k56
   2553	EBD1			     k43:
   2554	EBD1  BB E8C3r			     mov     bx,offset k9
   2555	EBD4  E9 FC2B			     jmp     k63
   2556
   2557				     ;---
   2558
   2559	EBD7			     k44:
   2560
   2561	EBD7  3C 47			     cmp     al,71
   2562	EBD9  73 3E			     jae     k48
   2563	EBDB  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
   2564	EBE0  74 0A			     jz	     k54a
   2565
   2566				     ;---
   2567
   2568	EBE2  3C 0F			     cmp     al,15
   2569	EBE4  75 09			     jne     k45
   2570	EBE6  B8 0F00			     mov     ax,15*256
   2571	EBE9  E9 FBB8			     jmp     k57
   2572
   2573	EBEC			     k54a:
   2574	EBEC  E9 FB9E			     jmp k54
   2575
   2576	EBEF			     k45:
   2577	EBEF  3C 37			     cmp     al,55
   2578	EBF1  75 09			     jne     k46
   2579
   2580				     ;---
   2581
   2582	EBF3  B0 20			     mov     al,eoi
   2583	EBF5  E6 20			     out     020h,al
   2584	EBF7  CD 05			     int     5h
   2585	EBF9  E9 FEF4			     jmp     k27
   2586
   2587	EBFC			     k46:
   2588	EBFC  3C 3B			     cmp     al,59
   2589	EBFE  72 06			     jb	     k47
   2590	EC00  BB E950r			     mov     bx,offset k12
   2591	EC03  E9 FBFC			     jmp     k63
   2592
   2593	EC06			     k47:
   2594	EC06  F6 06 0018r 02		     test    kb_flag_1,lat
   2595	EC0B  74 06			     jz	     k98
   2596	EC0D  BB E916r			     mov     bx,offset k11
   2597	EC10  E9 FB8D			     jmp      k56
   2598	EC13  BB E6BDr		     k98:    mov     bx,offset rust2
   2599	EC16  E9 FB87			     jmp     k56
   2600
   2601				     ;---
   2602
   2603	EC19			     k48:
   2604	EC19  F6 06 0017r 20		     test    kb_flag,num_state
   2605	EC1E  75 23			     jnz     k52
   2606	EC20  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
   2607	EC25  75 23			     jnz     k53
   2608
   2609				     ;---
   2610
   2611	EC27			     k49:
   2612
   2613	EC27  3C 4A			     cmp     al,74
   2614	EC29  74 0C			     je	     k50
   2615	EC2B  3C 4E			     cmp     al,78
   2616	EC2D  74 0E			     je	     k51
   2617	EC2F  2C 47			     sub     al,71
   2618	EC31  BB E971r			     mov     bx,offset k15
   2619	EC34  E9 FBCD			     jmp       k64
   2620
   2621	EC37  B8 4A2D		     k50:    mov     ax,74*256+'-'
   2622	EC3A  E9 FB67			     jmp      k57
   2623
   2624	EC3D  B8 4E2B		     k51:    mov     ax,78*256+'+'
   2625	EC40  E9 FB61			     jmp      k57
   2626
   2627				     ;---
   2628
   2629	EC43			     k52:
   2630	EC43  F6 06 0017r 03		     test    kb_flag,left_shift+right_shift
   2631	EC48  75 DD			     jnz     k49
   2632
   2633	EC4A			     k53:
   2634	EC4A  2C 46			     sub     al,70
   2635	EC4C  BB E964r			     mov     bx,offset k14
   2636	EC4F  E9 FB4E			     jmp      k56
   2637	EC52			     kb_int  endp
   2638
   2639	EC52  07*(00)				     db	7 dup(0)
   2640
   2641				     ;--- int 13H---------
   2642				     ;	 Программа обслуживания накопителя на	       +
   2643				     гибком магнитном
   2644				     ; диске выполняет шесть	функций,	код которых  +
   2645				     задается
   2646				     ; в регистре AH:
   2647				     ;	 AH=0 -	сбросить  НГМД;
   2648				     ;	 AH=1 -	считать байт	состояния НГМД. Состояние+
   2649				     соответствует
   2650				     ; последней выполняемой операции и		       +
   2651				     передается в регистр AL из
   2652				     ; постоянно распределенной области		       +
   2653				     оперативной памяти с адресом
   2654				     ; 00441H;
   2655				     ;	  AH=2H	- считать указанный сектор в память;
   2656				     ;	  AH=3H	- записать указанный сектор из	памяти;
   2657				     ;	  AH=4H	- верификация;
   2658				     ;	  AH=5H	- форматизация.
   2659				     ;	  Для выполнения функций записи,		       +
   2660				     считывания, верификации,
   2661				     ; форматизации	в регистрах задается		       +
   2662				     следующая	информация:
   2663				     ;	  DL - номер устройства (0-3, контролируемое      +
   2664				     значение);
   2665				     ;	  DH - номер головки (0-1, неконтролируемое	       +
   2666				     значение);
   2667				     ;	  CH - номер дорожки (0-39,	неконтролируемое       +
   2668				     значение);
   2669				     ;	  CL - номер сектора (1-8, неконтролируемое	       +
   2670				     значение);
   2671				     ;	  AL - количество секторов (1-8,			       +
   2672				     неконтролируемое значение).
   2673				     ;
   2674				     ;	  Для выполнения форматизации необходимо    +
   2675				     сформировать в
   2676				     ; памяти четырехбайтную таблицу	для каждого  +
   2677				     сектора, содержащую
   2678				     ; следующую информацию:
   2679				     ;	  номер дорожки;
   2680				     ;	  номер головки;
   2681				     ;	  номер сектора;
   2682				     ;	  количество байт	в секторе (00 -	128 байт, 01 - 256 +
   2683				     байт,
   2684				     ; 02 - 512	байт, 03 - 1024 байта).
   2685				     ;	  Адрес таблицы задается в	регистрах ES:BX.
   2686				     ;
   2687				     ;	  После выполнения программы в	регистре AH    +
   2688				     находится
   2689				     ; байт	состояния НГМД.
   2690				     ;
   2691				     ;	  Байт состояния НГМД имеет следующее	       +
   2692				     значение:
   2693				     ;	  80 - тайм-аут;
   2694				     ;	  40 - сбой	позиционирования;
   2695				     ;	  20 - сбой	контроллера;
   2696				     ;	  10 - ошибка кода циклического контроля при  +
   2697				     считывании;
   2698				     ;	  09 - переход адреса через сегмент (64К байт);
   2699				     ;	  08 - переполнение;
   2700				     ;	  04 - сектор не найден;
   2701				     ;	  03 - защита записи;
   2702				     ;	  02 - не обнаружен маркер идентификатора       +
   2703				     сектора;
   2704				     ;	  01 - команда отвергнута.
   2705				     ;	  При успешном завершении программы	       +
   2706				     признак CF=0,  в про-
   2707				     ; тивном случае - признак CF=1 (регистр AH	       +
   2708				     содержит код ошибки).
   2709				     ;	  Регистр AL содержит количество реально       +
   2710				     считанных	секторов.
   2711				     ;	  Адрес программы	обслуживания накопителя  +
   2712				     на гибком магнитном
   2713				     ; диске записывается в вектор 40H в процедуре   +
   2714				     сброса по включению
   2715				     ; питания.
   2716				     ;-------------------------
   2717					     assume  cs:code,ds:data,es:data
   2718	EC59			     diskette_io proc	     far
   2719	EC59  FB			     sti		     ; установить признак	       +
   2720				     прерывания
   2721	EC5A  53			     push    bx		     ; сохранить адрес
   2722	EC5B  51			     push    cx
   2723	EC5C  1E			     push    ds		; сохранить сегментное	       +
   2724				     значение регистра
   2725	EC5D  56			     push    si		; сохранить все регистры во      +
   2726				     время	операции
   2727	EC5E  57			     push    di
   2728	EC5F  55			     push    bp
   2729	EC60  52			     push    dx
   2730	EC61  8B EC			     mov     bp,sp	; установить указатель	       +
   2731				     вершины стека
   2732	EC63  BE 0040			     mov     si,dat
   2733	EC66  8E DE			     mov     ds,si	     ; установить область данных
   2734	EC68  E8 001C			     call    j1		     ;
   2735	EC6B  BB 0004			     mov     bx,4	     ; получить	параметры	       +
   2736				     ожидания мотора
   2737	EC6E  E8 01E0			     call    get_parm
   2738	EC71  88 26 0040r		     mov     motor_count,ah  ; уст время отсчета	для	       +
   2739				     мотора
   2740	EC75  8A 26 0041r		     mov     ah,diskette_status	 ; получить состояние	       +
   2741				     операции
   2742	EC79  80 FC 01			     cmp     ah,1	     ; уст признак CF	для		       +
   2743				     индикации
   2744	EC7C  F5			     cmc		     ; успешной	операции
   2745	EC7D  5A			     pop     dx		     ; восстановить	все регистры
   2746	EC7E  5D			     pop     bp
   2747	EC7F  5F			     pop     di
   2748	EC80  5E			     pop     si
   2749	EC81  1F			     pop     ds
   2750	EC82  59			     pop     cx
   2751	EC83  5B			     pop     bx
   2752	EC84  CA 0002			     ret     2
   2753	EC87			     diskette_io     endp
   2754	EC87			     j1	     proc    near
   2755	EC87  8A F0			     mov     dh,al	     ; сохранить количество	       +
   2756				     секторов
   2757	EC89  80 26 003Fr 7F		     and     motor_status,07fh	 ; указать операцию	       +
   2758				     считывания
   2759	EC8E  0A E4			     or	     ah,ah	     ; AH=0
   2760	EC90  74 27			     jz	     disk_reset
   2761	EC92  FE CC			     dec     ah		     ; AH=1
   2762	EC94  74 74			     jz	     disk_status
   2763	EC96  C6 06 0041r 00		     mov     diskette_status,0	 ; сброс состояния
   2764	EC9B  80 FA 04			     cmp     dl,4	     ; проверка	количества	       +
   2765				     устройств
   2766	EC9E  73 13			     jae     j3		     ; переход по ошибке
   2767	ECA0  FE CC			     dec     ah		     ; AH=2
   2768	ECA2  74 6A			     jz	     disk_read
   2769	ECA4  FE CC			     dec     ah		     ; AH=3
   2770	ECA6  75 03			     jnz     j2
   2771	ECA8  E9 0096			     jmp     disk_write
   2772	ECAB			     j2:
   2773	ECAB  FE CC			     dec     ah		     ; AH=4
   2774	ECAD  74 68			     jz	     disk_verf
   2775	ECAF  FE CC			     dec     ah		     ; AH=5
   2776	ECB1  74 68			     jz	     disk_format
   2777	ECB3			     j3:
   2778	ECB3  C6 06 0041r 01		     mov     diskette_status,bad_cmd   ; неверная команда
   2779
   2780	ECB8  C3			     ret		     ; операция	не определена
   2781	ECB9			     j1	     endp
   2782
   2783				     ;	 Сбросить НГМД
   2784
   2785	ECB9			     disk_reset	proc near
   2786	ECB9  BA 03F2			     mov     dx,03f2h
   2787	ECBC  FA			     cli		     ; сброс признака разрешения+
   2788				     прерывания
   2789	ECBD  A0 003Fr			     mov     al,motor_status  ;	какой мотор включен
   2790	ECC0  B1 04			     mov     cl,4	     ; счетчик сдвига
   2791	ECC2  D2 E0			     sal     al,cl
   2792	ECC4  A8 20			     test    al,20h	     ; выбрать соответствующее   +
   2793				     устройство
   2794	ECC6  75 0C			     jnz     j5		     ; переход, если	включен	       +
   2795				     мотор	первого
   2796								     ; устройства
   2797	ECC8  A8 40			     test    al,40h
   2798	ECCA  75 06			     jnz     j4		     ; переход, если	включен	       +
   2799				     мотор	второго
   2800								     ; устройства
   2801	ECCC  A8 80			     test    al,80h
   2802	ECCE  74 06			     jz	     j6		     ; переход, если	включен	       +
   2803				     мотор	нулевого
   2804								     ; устройства
   2805	ECD0  FE C0			     inc     al
   2806	ECD2  FE C0		     j4:     inc     al
   2807	ECD4  FE C0		     j5:     inc     al
   2808	ECD6  0C 08		     j6:     or	     al,8	     ; включить	доступность	       +
   2809				     прерывания
   2810	ECD8  EE			     out     dx,al	     ; сброс адаптера
   2811	ECD9  C6 06 003Er 00		     mov     seek_status,0
   2812	ECDE  C6 06 0041r 00		     mov     diskette_status,0	; уст нормальное		       +
   2813				     состояние	НГМД
   2814	ECE3  0C 04			     or	     al,4	     ; выключить сброс
   2815	ECE5  EE			     out     dx,al
   2816	ECE6  FB			     sti		     ; установить бит разрешения+
   2817				     прерывания
   2818	ECE7  E8 0225			     call    chk_stat_2	     ; выполнить прерывание	       +
   2819				     после	сброса
   2820	ECEA  A0 0042r			     mov     al,nec_status
   2821	ECED  3C C0			     cmp     al,0c0h	; проверка готовности		       +
   2822				     устройства для передачи
   2823	ECEF  74 07			     jz	     j7		     ; устройство готово
   2824	ECF1  80 0E 0041r 20		     or	     diskette_status,bad_nec  ;	уст код ошибки
   2825	ECF6  EB 11			     jmp     short j8
   2826
   2827				     ;	 Послать	команду в контроллер
   2828
   2829	ECF8			     j7:
   2830	ECF8  B4 03			     mov     ah,03h	     ; установить команду
   2831	ECFA  E8 FA32			     call    nec_output	     ; передать	команду
   2832	ECFD  BB 0001			     mov     bx,1	     ; передача	первого байта      +
   2833				     параметров
   2834	ED00  E8 014E			     call    get_parm	     ; в контроллер
   2835	ED03  BB 0003			     mov     bx,3	     ; передача	второго байта      +
   2836				     параметров
   2837	ED06  E8 0148			     call    get_parm	     ; в контроллер
   2838	ED09			     j8:
   2839	ED09  C3			     ret		     ; возврат к прерванной	       +
   2840				     программе
   2841	ED0A			     disk_reset	     endp
   2842
   2843				     ;
   2844				     ; Считать байт состояния НГМД (AH=1)
   2845				     ;
   2846
   2847	ED0A			     disk_status proc near
   2848	ED0A  A0 0041r			     mov     al,diskette_status
   2849	ED0D  C3			     ret
   2850	ED0E			     disk_status     endp
   2851
   2852				     ;	 Считать	указанный сектор	в память	(AH=2)
   2853
   2854	ED0E			     disk_read proc near
   2855	ED0E  B0 46			     mov     al,046h	     ; установить команду
   2856	ED10			     j9:
   2857	ED10  E8 01B6			     call    dma_setup	     ; установить ПДП
   2858	ED13  B4 E6			     mov     ah,0e6h	 ; уст команду считывания	       +
   2859				     контроллера
   2860	ED15  EB 36			     jmp     short rw_opn    ; переход к выполнению	       +
   2861				     операции
   2862	ED17			     disk_read	     endp
   2863
   2864				     ;	 Верификация	(AH=4)
   2865
   2866	ED17			     disk_verf proc near
   2867	ED17  B0 42			     mov     al,042h	     ; установить команду
   2868	ED19  EB F5			     jmp     short j9
   2869	ED1B			     disk_verf	     endp
   2870
   2871				     ;	 Форматизация (AH=5)
   2872
   2873	ED1B			     disk_format proc near
   2874	ED1B  80 0E 003Fr 80		     or	     motor_status,80h  ; индикация операции	       +
   2875				     записи
   2876	ED20  B0 4A			     mov     al,04ah	       ; установить команду
   2877	ED22  E8 01A4			     call    dma_setup	       ; установить ПДП
   2878	ED25  B4 4D			     mov     ah,04dh	       ; установить команду
   2879	ED27  EB 24			     jmp     short rw_opn
   2880	ED29			     j10:
   2881	ED29  BB 0007			     mov     bx,7	       ; получить значение	       +
   2882				     сектора
   2883	ED2C  E8 0122			     call    get_parm
   2884	ED2F  BB 0009			     mov     bx,9	     ; получить	значение дорожки+
   2885				     на секторе
   2886	ED32  E8 011C			     call    get_parm
   2887	ED35  BB 000F			     mov     bx,15	     ; получить	значение длины    +
   2888				     интервала
   2889	ED38  E8 0116			     call    get_parm	     ; для контроллера
   2890	ED3B  BB 0011			     mov     bx,17	     ; получить	полный байт
   2891	ED3E  E9 00B8			     jmp     j16
   2892	ED41			     disk_format     endp
   2893
   2894				     ;	 Записать указанный сектор из памяти (AH=3)
   2895
   2896	ED41			     disk_write	proc near
   2897	ED41  80 0E 003Fr 80		     or	     motor_status,80h	     ; индикация операции     +
   2898				     записи
   2899	ED46  B0 4A			     mov     al,04ah		     ; уст код операции	       +
   2900				     записи
   2901	ED48  E8 017E			     call    dma_setup
   2902	ED4B  B4 C5			     mov     ah,0c5h		     ; команда записи на	НГМД
   2903	ED4D			     disk_write	     endp
   2904
   2905				     ;______________________
   2906				     ; rw_opn
   2907				     ;	 Программа выполнения операций
   2908				     ;	 считывания, записи, верификации
   2909				     ;----------------------
   2910	ED4D			     rw_opn  proc    near
   2911	ED4D  73 08			     jnc     j11	     ; проверка	ошибки ПДП
   2912	ED4F  C6 06 0041r 09		     mov     diskette_status,dma_boundary   ; установить ошибку
   2913	ED54  B0 00			     mov     al,0	     ;
   2914	ED56  C3			     ret		     ; возврат к основной	       +
   2915				     программе
   2916	ED57			     j11:
   2917	ED57  50			     push    ax		     ; сохранить команду
   2918
   2919				     ;	 Включить мотор и	выбрать устройство
   2920
   2921	ED58  51			     push    cx
   2922	ED59  8A CA			     mov     cl,dl	     ; уст номер устройства, как  +
   2923				     счетчик сдвига
   2924	ED5B  B0 01			     mov     al,1	     ; маска для определения	       +
   2925				     мотора устройства
   2926	ED5D  D2 E0			     sal     al,cl	     ; сдвиг
   2927	ED5F  FA			     cli		     ; сбросить	бит разрешения    +
   2928				     прерывания
   2929	ED60  C6 06 0040r FF		     mov     motor_count,0ffh  ; установить счетчик
   2930	ED65  84 06 003Fr		     test    al,motor_status
   2931	ED69  75 3F			     jnz     j14
   2932	ED6B  80 26 003Fr F0		     and     motor_status,0f0h	; выключить все биты	       +
   2933				     мотора
   2934	ED70  08 06 003Fr		     or	     motor_status,al	; включить мотор
   2935	ED74  FB			     sti		     ; установить бит разрешения+
   2936				     прерывания
   2937	ED75  B0 10			     mov     al,10h	     ; бит маски
   2938	ED77  D2 E0			     sal     al,cl	     ; уст бит маски	для		       +
   2939				     доступности мотора
   2940	ED79  0A C2			     or	     al,dl	     ; включить	бит выбора	       +
   2941				     устройства
   2942	ED7B  0C 0C			     or	     al,0ch	     ; нет сброса, доступность     +
   2943				     прерывания ПДП
   2944	ED7D  52			     push    dx
   2945	ED7E  BA 03F2			     mov     dx,03f2h	     ; установить адрес порта
   2946	ED81  EE			     out     dx,al
   2947	ED82  5A			     pop     dx		     ; восстановить	регистры
   2948	ED83  51			     push    cx		     ;задержка для включения       +
   2949				     мотора устройства
   2950	ED84  B9 0003			     mov     cx,3
   2951	ED87  51		     x2:     push    cx
   2952	ED88  B9 0000			     mov     cx,0
   2953	ED8B  E2 FE		     x1:     loop    x1
   2954	ED8D  59			     pop     cx
   2955	ED8E  E2 F7			     loop    x2
   2956	ED90  59			     pop     cx
   2957
   2958				     ;	 Ожидание включения мотора для операции      +
   2959				     записи
   2960
   2961	ED91  F6 06 003Fr 80		     test    motor_status,80h  ; запись ?
   2962	ED96  74 12			     jz	     j14     ; нет -	продолжать без ожидания
   2963	ED98  BB 0014			     mov     bx,20	     ; установить ожидание	       +
   2964				     включения	мотора
   2965	ED9B  E8 00B3			     call    get_parm	     ; получить	параметры
   2966	ED9E  0A E4			     or	     ah,ah
   2967	EDA0			     j12:
   2968	EDA0  74 08			     jz	     j14	     ; выход по окончании	       +
   2969				     времени ожидания
   2970	EDA2  2B C9			     sub     cx,cx	     ; установить счетчик
   2971	EDA4  E2 FE		     j13:    loop    j13	     ; ожидать требуемое время
   2972	EDA6  FE CC			     dec     ah		     ; уменьшеть значение	       +
   2973				     времени
   2974	EDA8  EB F6			     jmp     short j12	     ; повторить цикл
   2975
   2976	EDAA			     j14:
   2977	EDAA  FB			     sti		     ; уст признак разрешения      +
   2978				     прерывания
   2979	EDAB  59			     pop     cx
   2980
   2981				     ;	 Выполнить операцию поиска
   2982
   2983	EDAC  E8 00B8			     call    seek	     ; установить дорожку
   2984	EDAF  58			     pop     ax		     ; восстановить	команду
   2985	EDB0  8A FC			     mov     bh,ah	     ; сохранить команду в BH
   2986	EDB2  B6 00			     mov     dh,0	     ; уст 0	сектор в	случае	       +
   2987				     ошибки
   2988	EDB4  72 4A			     jc	     j17	     ; выход, если ошибка
   2989	EDB6  BE EE00r			     mov     si,offset j17
   2990
   2991	EDB9  56			     push    si
   2992
   2993				     ;	 Послать	параметры в контроллер
   2994
   2995	EDBA  E8 F972			     call    nec_output	     ; передача	команды
   2996	EDBD  8A 66 01			     mov     ah,byte ptr [bp+1]	 ; уст номер головки
   2997	EDC0  D0 E4			     sal     ah,1	     ; сдвиг на 2
   2998	EDC2  D0 E4			     sal     ah,1
   2999	EDC4  80 E4 04			     and     ah,4	     ; выделить	бит
   3000	EDC7  0A E2			     or	     ah,dl	     ; операция	OR с номером	       +
   3001				     устройства
   3002	EDC9  E8 F963			     call    nec_output
   3003
   3004				     ;	 Проверка операции форматизации
   3005
   3006	EDCC  80 FF 4D			     cmp     bh,04dh	     ; форматизация	?
   3007	EDCF  75 03			     jne     j15    ; нет - продолжать			       +
   3008				     запись/считывание/верификацию
   3009	EDD1  E9 FF55			     jmp     j10
   3010
   3011	EDD4  8A E5		     j15:    mov     ah,ch	     ; номер цилиндра
   3012	EDD6  E8 F956			     call    nec_output
   3013	EDD9  8A 66 01			     mov     ah,byte ptr [bp+1]	 ; номер головки
   3014	EDDC  E8 F950			     call    nec_output
   3015	EDDF  8A E1			     mov     ah,cl	     ; номер сектора
   3016	EDE1  E8 F94B			     call    nec_output
   3017	EDE4  BB 0007			     mov     bx,7
   3018	EDE7  E8 0067			     call    get_parm
   3019	EDEA  BB 0009			     mov     bx,9
   3020	EDED  E8 0061			     call    get_parm
   3021	EDF0  BB 000B			     mov     bx,11
   3022	EDF3  E8 005B			     call    get_parm
   3023	EDF6  BB 000D			     mov     bx,13
   3024	EDF9			     j16:
   3025	EDF9  E8 0055			     call    get_parm
   3026	EDFC  5E			     pop     si
   3027
   3028				     ;	 Операция запущена
   3029
   3030	EDFD  E8 0130			     call    wait_int	     ; ожидание	прерывания
   3031	EE00			     j17:
   3032	EE00  72 45			     jc	     j21	     ; поиск ошибки
   3033	EE02  E8 0166			     call    results	     ; получить	состояние	       +
   3034				     контроллера
   3035	EE05  72 3F			     jc	     j20	     ; поиск ошибки
   3036
   3037				     ;	 Проверка  состояния, полученного из	       +
   3038				     контроллера
   3039
   3040	EE07  FC			     cld		     ; установить направление     +
   3041				     коррекции
   3042	EE08  BE 0042r			     mov     si,offset nec_status
   3043	EE0B  AC			     lods    nec_status
   3044	EE0C  24 C0			     and     al,0c0h	     ; проверить нормальное	       +
   3045				     окончание
   3046	EE0E  74 3B			     jz	     j22
   3047	EE10  3C 40			     cmp     al,040h	     ; проверить неверное	       +
   3048				     окончание
   3049	EE12  75 29			     jnz     j18
   3050
   3051				     ;	 Обнаруженно	неверное окончание
   3052
   3053	EE14  AC			     lods    nec_status
   3054	EE15  D0 E0			     sal     al,1
   3055	EE17  B4 04			     mov     ah,record_not_fnd
   3056	EE19  72 24			     jc	     j19
   3057	EE1B  D0 E0			     sal     al,1
   3058	EE1D  D0 E0			     sal     al,1
   3059	EE1F  B4 10			     mov     ah,bad_crc
   3060	EE21  72 1C			     jc	     j19
   3061	EE23  D0 E0			     sal     al,1
   3062	EE25  B4 08			     mov     ah,bad_dma
   3063	EE27  72 16			     jc	     j19
   3064	EE29  D0 E0			     sal     al,1
   3065	EE2B  D0 E0			     sal     al,1
   3066	EE2D  B4 04			     mov     ah,record_not_fnd
   3067	EE2F  72 0E			     jc	     j19
   3068	EE31  D0 E0			     sal     al,1
   3069	EE33  B4 03			     mov     ah,write_protect  ; проверка защиты записи
   3070	EE35  72 08			     jc	     j19
   3071	EE37  D0 E0			     sal     al,1
   3072	EE39  B4 02			     mov     ah,bad_addr_mark
   3073	EE3B  72 02			     jc	     j19
   3074
   3075				     ;	 Контроллер вышел из строя
   3076
   3077	EE3D			     j18:
   3078	EE3D  B4 20			     mov     ah,bad_nec
   3079	EE3F			     j19:
   3080	EE3F  08 26 0041r		     or	     diskette_status,ah
   3081	EE43  E8 016A			     call    num_trans
   3082	EE46			     j20:
   3083	EE46  C3			     ret	     ; возврат к программе, вызвавшей+
   3084				     прерывание
   3085
   3086	EE47			     j21:
   3087	EE47  E8 0121			     call    results	     ; вызов результатов в буфер
   3088	EE4A  C3			     ret
   3089
   3090				     ;	 Операция была успешной
   3091
   3092	EE4B			     j22:
   3093	EE4B  E8 0162			     call    num_trans
   3094	EE4E  32 E4			     xor     ah,ah	     ; нет ошибок
   3095	EE50  C3			     ret
   3096	EE51			     rw_opn  endp
   3097				     ;------------------------
   3098				     ;get_parm
   3099				     ;
   3100				     ;	 ВХОД   BX - индекс байта,деленный
   3101				     ;		     на 2,который будет
   3102				     ;		     выбран,если младший
   3103				     ;		     бит BX установлен,то
   3104				     ;		     байт немедленно пере-
   3105				     ;		     дается контроллеру.
   3106				     ;
   3107				     ;	 ВЫХОД  AH	- байт из	блока.
   3108				     ;-------------------------
   3109	EE51			     get_parm proc   near
   3110	EE51  1E			     push    ds		     ; сохранить сегмент
   3111	EE52  2B C0			     sub     ax,ax	     ; AX=0
   3112	EE54  8E D8			     mov     ds,ax
   3113					     assume  ds:abs0
   3114	EE56  C5 36 0078r		     lds     si,disk_pointer
   3115	EE5A  D1 EB			     shr     bx,1	     ; делить BX на 2, уст флаг для  +
   3116				     выхода
   3117	EE5C  8A A0 0000r		     mov     ah,zb[si+bx]    ; получить	слово
   3118	EE60  1F			     pop     ds		     ; восстановить	сегмент
   3119					     assume  ds:data
   3120	EE61  72 01			     jc	     nec_op	      ;если	флаг установлен,	       +
   3121				     выход
   3122	EE63  C3			     ret	     ; возврат к программе, вызвавшей+
   3123				     прерывание
   3124	EE64  E9 F8C8		     nec_op: jmp     nec_output
   3125	EE67			     get_parm endp
   3126				     ;----------------------------
   3127				     ;	 Позиционирование
   3128				     ;
   3129				     ;	 Эта	программа позиционирует голов-
   3130				     ; ку обозначенного устройства на нуж-
   3131				     ; ную дорожку. Если устройство не
   3132				     ; было	выбрано до тех пор, пока не
   3133				     ; была	сброшена команда,то устройство
   3134				     ; будет рекалибровано.
   3135				     ;
   3136				     ;	 ВВОД
   3137				     ;	     (DL) - номер усройства для
   3138				     ;		    позиционирования,
   3139				     ;	     (CH) - номер дорожки.
   3140				     ;
   3141				     ;	 ВЫВОД
   3142				     ;	      CY=0 - успешно,
   3143				     ;	      CY=1 - сбой (состояние НГМД установить
   3144				     ;		     согласно  AX).
   3145				     ;----------------------------
   3146	EE67			     seek    proc    near
   3147	EE67  B0 01			     mov     al,1	     ; уст маску
   3148	EE69  51			     push    cx
   3149	EE6A  8A CA			     mov     cl,dl	     ; установить номер		       +
   3150				     устройства
   3151	EE6C  D2 C0			     rol     al,cl	     ; циклический сдвиг влево
   3152	EE6E  59			     pop     cx
   3153	EE6F  84 06 003Er		     test    al,seek_status
   3154	EE73  75 20			     jnz     j28
   3155	EE75  08 06 003Er		     or	     seek_status,al
   3156	EE79  B4 07			     mov     ah,07h
   3157	EE7B  E8 F8B1			     call    nec_output
   3158	EE7E  8A E2			     mov     ah,dl
   3159	EE80  E8 F8AC			     call    nec_output
   3160	EE83  E8 0089			     call    chk_stat_2	  ; получить и	обработать	       +
   3161				     прерывание
   3162	EE86  B4 07			     mov     ah,07h	     ; команда рекалибровки
   3163	EE88  E8 F8A4			     call    nec_output
   3164	EE8B  8A E2			     mov     ah,dl
   3165	EE8D  E8 F89F			     call    nec_output
   3166	EE90  E8 007C			     call    chk_stat_2
   3167	EE93  72 33			     jc	     j32	     ; сбой	позиционирования
   3168
   3169
   3170	EE95			     j28:
   3171	EE95  B4 0F			     mov     ah,0fh
   3172	EE97  E8 F895			     call    nec_output
   3173	EE9A  8A E2			     mov     ah,dl	     ; номер устройства
   3174	EE9C  E8 F890			     call    nec_output
   3175	EE9F  8A E5			     mov     ah,ch	     ; номер дорожки
   3176	EEA1  90				     nop
   3177	EEA2  F6 06 0010r 04		     test    byte ptr equip_flag,4
   3178	EEA7  75 02			     jnz     j300
   3179	EEA9  02 E4			     add     ah,ah	     ; удвоение	номера дорожки
   3180	EEAB			     j300:
   3181	EEAB  E8 F881			     call    nec_output
   3182	EEAE  E8 005E			     call    chk_stat_2	     ; получить	конечное	       +
   3183				     прерывание и
   3184								     ; считать состояние
   3185
   3186
   3187	EEB1  9C			     pushf		     ; сохранить значение	       +
   3188				     флажков
   3189	EEB2  BB 0012			     mov     bx,18
   3190	EEB5  E8 FF99			     call    get_parm
   3191	EEB8  51			     push    cx		     ; сохранить регистр
   3192	EEB9			     j29:
   3193	EEB9  B9 0226			     mov     cx,550	     ; организовать	цикл = 1 ms
   3194	EEBC  0A E4			     or	     ah,ah	     ; проверка	окончания	       +
   3195				     времени
   3196	EEBE  74 06			     jz	     j31
   3197	EEC0  E2 FE		     j30:    loop    j30	     ; задержка	1ms
   3198	EEC2  FE CC			     dec     ah		     ; вычитание из счетчика
   3199	EEC4  EB F3			     jmp     short j29	     ; возврат к началу цикла
   3200	EEC6			     j31:
   3201	EEC6  59			     pop     cx		     ; восстановить	состояние
   3202	EEC7  9D			     popf
   3203	EEC8			     j32:			     ; ошибка позиционирования
   3204	EEC8  C3			     ret	     ; возврат к программе, вызвавшей+
   3205				     прерывание
   3206	EEC9			     seek    endp
   3207				     ;-----------------------
   3208				     ; dma_setup
   3209				     ;	 Программа установки ПДП для операций	       +
   3210				     записи,считывания,верифи-
   3211				     ; кации.
   3212				     ;
   3213				     ;	 ВВОД
   3214				     ;
   3215				     ;	     (AL) - байт режима для ПДП,
   3216				     ;	     (ES:BX) - адрес считывания/записи		       +
   3217				     информации.
   3218				     ;
   3219				     ;------------------------
   3220	EEC9			     dma_setup proc  near
   3221	EEC9  51			     push    cx		     ; сохранить регистр
   3222	EECA  E6 0C			     out     dma+12,al
   3223	EECC  E6 0B			     out     dma+11,al	     ; вывод байта состояния
   3224	EECE  8C C0			     mov     ax,es	     ; получить	значение ES
   3225	EED0  B1 04			     mov     cl,4	     ; счетчик для сдвига
   3226	EED2  D3 C0			     rol ax,cl		     ; циклический сдвиг влево
   3227	EED4  8A E8			     mov     ch,al	     ;
   3228	EED6  24 F0			     and     al,0f0h	     ;
   3229	EED8  03 C3			     add     ax,bx
   3230	EEDA  73 02			     jnc     j33
   3231	EEDC  FE C5			     inc     ch		     ; перенос означает,	что	       +
   3232				     старшие 4 бита
   3233								     ; должны быть прибавлены
   3234	EEDE			     j33:
   3235	EEDE  50			     push    ax		     ; сохранить начальный адрес
   3236	EEDF  E6 04			     out     dma+4,al	     ; вывод младшей половины      +
   3237				     адреса
   3238	EEE1  8A C4			     mov     al,ah
   3239	EEE3  E6 04			     out     dma+4,al	     ; вывод старшей половины      +
   3240				     адреса
   3241	EEE5  8A C5			     mov     al,ch	     ; получить	4 старших бита
   3242	EEE7  24 0F			     and     al,0fh
   3243	EEE9  E6 81			     out     081h,al   ; вывод 4 старших бит на регистр+
   3244				     страниц
   3245
   3246				     ;	 Определение	счетчика
   3247
   3248	EEEB  8A E6			     mov     ah,dh	     ; номер сектора
   3249	EEED  2A C0			     sub     al,al	     ;
   3250	EEEF  D1 E8			     shr     ax,1	     ;
   3251	EEF1  50			     push    ax
   3252	EEF2  BB 0006			     mov     bx,6	     ; получить	параметры	       +
   3253				     байт/сектор
   3254	EEF5  E8 FF59			     call    get_parm
   3255	EEF8  8A CC			     mov     cl,ah	     ; счетчик сдига (0=128, 1=256 и т.д)
   3256	EEFA  58			     pop     ax
   3257	EEFB  D3 E0			     shl     ax,cl	     ; сдвиг
   3258	EEFD  48			     dec     ax		     ; -1
   3259	EEFE  50			     push    ax		     ; сохранить значение	       +
   3260				     счетчика
   3261	EEFF  E6 05			     out     dma+5,al	     ; вывести младший байт	       +
   3262				     счетчика
   3263	EF01  8A C4			     mov     al,ah
   3264	EF03  E6 05			     out     dma+5,al	     ; вывести старший байт	       +
   3265				     счетчика
   3266	EF05  59			     pop     cx		     ; восстановить	значение       +
   3267				     счетчика
   3268	EF06  58			     pop     ax		     ; восстановить	значение       +
   3269				     адреса
   3270	EF07  03 C1			     add     ax,cx	     ; проверка	заполнения 64K
   3271	EF09  59			     pop     cx		     ; восстановить	регистр
   3272	EF0A  B0 02			     mov     al,2	     ; режим для 8237
   3273	EF0C  E6 0A			     out     dma+10,al	     ; инициализация канала НГМД
   3274	EF0E  C3			     ret	     ; возврат к программе, вызвавшей+
   3275				     прерывание
   3276	EF0F			     dma_setup	     endp
   3277				     ;-----------------------
   3278				     ;chk_stat_2
   3279				     ;	 Эта	программа обрабатывает прерывания ,     +
   3280				     полученные после
   3281				     ; рекалибровки, позиционирования или сброса  +
   3282				     адаптера. Прерывание
   3283				     ; ожидается, принимается, обрабатывается	и     +
   3284				     результат	выдается программе,
   3285				     ; вызвавшей прерывание.
   3286				     ;
   3287				     ;	 ВЫВОД
   3288				     ;	       CY=0 - успешно,
   3289				     ;	       CY=1 - сбой (ошибка в	состоянии НГМД),
   3290				     ;--------------------------
   3291	EF0F			     chk_stat_2	proc near
   3292	EF0F  E8 001E			     call    wait_int	     ; ожидание	прерывания
   3293	EF12  72 14			     jc	     j34	     ; если	ошибка, то возврат
   3294	EF14  B4 08			     mov     ah,08h	     ; команда получения	       +
   3295				     состояния
   3296	EF16  E8 F816			     call    nec_output
   3297	EF19  E8 004F			     call    results	     ; считать результаты
   3298	EF1C  72 0A			     jc	     j34
   3299	EF1E  A0 0042r			     mov     al,nec_status   ; получить	первый байт	       +
   3300				     состояния
   3301	EF21  24 60			     and     al,060h	     ; выделить	биты
   3302	EF23  3C 60			     cmp     al,060h	     ; проверка
   3303	EF25  74 02			     jz	     j35	; если ошибка, то идти на метку
   3304	EF27  F8			     clc		     ; возврат
   3305	EF28			     j34:
   3306	EF28  C3			     ret	     ; возврат к программе, вызвавшей+
   3307				     прерывание
   3308	EF29			     j35:
   3309	EF29  80 0E 0041r 40		     or	     diskette_status,bad_seek
   3310	EF2E  F9			     stc		     ; ошибка в возвращенном	коде
   3311	EF2F  C3			     ret
   3312	EF30			     chk_stat_2	     endp
   3313				     ;---------------------------------
   3314				     ; wait_int
   3315				     ;	 Эта	программа ожидает прерывание,	которое +
   3316				     возникает	во время
   3317				     ; программы вывода.	Если устройство не	       +
   3318				     готово, ошибка	может быть
   3319				     ; возвращена.
   3320				     ;
   3321				     ;
   3322				     ;	 ВЫВОД
   3323				     ;		   CY=0	- успешно,
   3324				     ;		   CY=1	- сбой(состояние НГМД			       +
   3325				     устанавливается),
   3326				     ;-----------------------------------
   3327	EF30			     wait_int proc   near
   3328	EF30  FB			     sti		     ; установить признак	       +
   3329				     разрешения прерывания
   3330	EF31  53			     push    bx
   3331	EF32  51			     push    cx		     ; сохранить регистр
   3332	EF33  B3 02			     mov     bl,2	     ; количество циклов
   3333	EF35  33 C9			     xor     cx,cx	     ; длителность одного цикла  +
   3334				     ожидания
   3335	EF37			     j36:
   3336	EF37  F6 06 003Er 80		     test    seek_status,int_flag  ; опрос	наличия		       +
   3337				     прерывания
   3338	EF3C  75 0C			     jnz     j37
   3339	EF3E  E2 F7			     loop    j36	     ; возврат к началу цикла
   3340	EF40  FE CB			     dec     bl
   3341	EF42  75 F3			     jnz     j36
   3342	EF44  80 0E 0041r 80		     or	     diskette_status,time_out
   3343	EF49  F9			     stc		     ; возврат при ошибке
   3344	EF4A			     j37:
   3345	EF4A  9C			     pushf		     ; сохранить текущие	       +
   3346				     признаки
   3347	EF4B  80 26 003Er 7F		     and     seek_status,not int_flag
   3348	EF50  9D			     popf		     ; восстановить	признаки
   3349	EF51  59			     pop     cx
   3350	EF52  5B			     pop     bx		     ; восстановить	регистр
   3351	EF53  C3			     ret	     ; возврат к программе, вызвавшей+
   3352				     прерывание
   3353	EF54			     wait_int	     endp
   3354
   3355	EF54  03*(00)				     db	3 dup(0)
   3356
   3357				     ;---------------------------
   3358				     ;disk_int
   3359				     ;	 Эта	программа обрабатывает прерывания       +
   3360				     НГМД
   3361				     ;
   3362				     ;	 ВЫВОД  - признак прерывания			       +
   3363				     устанавливается в SEEK_STATUS.
   3364				     ;---------------------------
   3365	EF57			     disk_int proc   far
   3366	EF57  FB			     sti		     ; установить признак	       +
   3367				     разрешения прерывания
   3368	EF58  1E			     push    ds
   3369	EF59  50			     push    ax
   3370	EF5A  B8 0040			     mov     ax,dat
   3371	EF5D  8E D8			     mov     ds,ax
   3372	EF5F  80 0E 003Er 80		     or	     seek_status,int_flag
   3373	EF64  B0 20			     mov     al,20h	     ; установить конец		       +
   3374				     прерывания
   3375	EF66  E6 20			     out     20h,al	     ; послать конец прерывания  +
   3376				     в	порт
   3377	EF68  58			     pop     ax
   3378	EF69  1F			     pop     ds
   3379	EF6A  CF			     iret		     ; возврат из прерывания
   3380	EF6B			     disk_int	     endp
   3381				     ;----------------------------
   3382				     ;
   3383				     ;	 Эта	программа считывет все, что контроллер+
   3384				     адаптера НГМД указывает
   3385				     ; программе, следующей за прерыванием.
   3386				     ;
   3387				     ;
   3388				     ;	 ВЫВОД
   3389				     ;		CF=0 - успешно,
   3390				     ;		CF=1 - сбой
   3391				     ;----------------------------
   3392	EF6B			     results proc    near
   3393	EF6B  FC			     cld
   3394	EF6C  BF 0042r			     mov     di,offset nec_status
   3395	EF6F  51			     push    cx		     ; сохранить счетчик
   3396	EF70  52			     push    dx
   3397	EF71  53			     push    bx
   3398	EF72  B3 07			     mov     bl,7	     ; установить длину области  +
   3399				     состояния
   3400
   3401
   3402	EF74			     j38:
   3403	EF74  33 C9			     xor     cx,cx	     ; длительность	одного цикла
   3404	EF76  BA 03F4			     mov     dx,03f4h	     ; адрес порта
   3405	EF79			     j39:
   3406	EF79  EC			     in	     al,dx	     ; получить	состояние
   3407	EF7A  A8 80			     test    al,080h	     ; готово ?
   3408	EF7C  75 0C			     jnz     j40a
   3409	EF7E  E2 F9			     loop    j39
   3410	EF80  80 0E 0041r 80		     or	     diskette_status,time_out
   3411	EF85			     j40:			     ; ошибка
   3412	EF85  F9			     stc		     ; возврат по ошибке
   3413	EF86  5B			     pop     bx
   3414	EF87  5A			     pop     dx
   3415	EF88  59			     pop     cx
   3416	EF89  C3			     ret
   3417
   3418				     ;	 Проверка признака направления
   3419
   3420	EF8A  EC		     j40a:   in	     al,dx	     ; получить	регистр		       +
   3421				     состояния
   3422	EF8B  A8 40			     test    al,040h	     ; сбой	позиционирования
   3423	EF8D  75 07			     jnz     j42     ; если	все нормально, считать      +
   3424				     состояние
   3425	EF8F			     j41:
   3426	EF8F  80 0E 0041r 20		     or	     diskette_status,bad_nec
   3427	EF94  EB EF			     jmp     short j40	     ; ошибка
   3428
   3429				     ;	 Считывание состояния
   3430
   3431	EF96			     j42:
   3432	EF96  42			     inc     dx		     ; указать порт
   3433	EF97  EC			     in	     al,dx	     ; ввести данные
   3434	EF98  88 05			     mov    byte ptr [di],al  ;	сохранить байт
   3435	EF9A  47			     inc     di		     ; увеличить адрес
   3436	EF9B  B9 000A			     mov     cx,000ah	     ; счетчик
   3437	EF9E  E2 FE		     j43:    loop    j43
   3438	EFA0  4A			     dec     dx
   3439	EFA1  EC			     in	     al,dx	     ; получить	состояние
   3440	EFA2  A8 10			     test    al,010h
   3441	EFA4  74 06			     jz	     j44
   3442	EFA6  FE CB			     dec     bl		     ; -1 из количества циклов
   3443	EFA8  75 CA			     jnz     j38
   3444	EFAA  EB E3			     jmp     short j41	     ; сигнал неверен
   3445
   3446	EFAC			     j44:
   3447	EFAC  5B			     pop     bx		     ; восстановить	регистры
   3448	EFAD  5A			     pop     dx
   3449	EFAE  59			     pop     cx
   3450	EFAF  C3			     ret		     ; возврат из прерывания
   3451	EFB0			     results endp
   3452				     ;-----------------------------
   3453				     ; num_trans
   3454				     ;	 Эта	программа вычисляет количество	       +
   3455				     секторов, которое действительно
   3456				     ; было	записано или	считано с НГМД
   3457				     ;
   3458				     ;	 ВВОД
   3459				     ;	      (CH) - цилиндр,
   3460				     ;	      (CL) - сектор.
   3461				     ;
   3462				     ;	 ВЫВОД
   3463				     ;	      (AL) - количество действительно		       +
   3464				     переданных секторов.
   3465				     ;
   3466				     ;------------------------------
   3467	EFB0			     num_trans proc  near
   3468	EFB0  A0 0045r			     mov     al,nec_status+3  ;	получить последний	       +
   3469				     цилиндр
   3470	EFB3  3A C5			     cmp     al,ch	     ; сравнить	со стартовым
   3471	EFB5  A0 0047r			     mov     al,nec_status+5  ;	получить последний сектор
   3472	EFB8  74 0A			     jz	     j45
   3473	EFBA  BB 0008			     mov     bx,8
   3474	EFBD  E8 FE91			     call    get_parm	     ; получить	значение EOT
   3475	EFC0  8A C4			     mov     al,ah	     ; AH в AL
   3476	EFC2  FE C0			     inc     al		     ; EOT+1
   3477	EFC4  2A C1		     j45:    sub     al,cl	 ; вычисление	стартового	       +
   3478				     номера из конечного
   3479	EFC6  C3			     ret
   3480	EFC7			     num_trans endp
   3481
   3482				     ;-------------------------------
   3483				     ; disk_base
   3484				     ;	 Эта	программа устанавливает параметры,      +
   3485				     требуемые	для операций
   3486				     ; НГМД.
   3487				     ;--------------------------------
   3488
   3489	EFC7			     disk_base label byte
   3490	EFC7  CF			     db	     11001111b	     ;
   3491	EFC8  02			     db	     2		     ;
   3492	EFC9  25			     db	     motor_wait	     ;
   3493	EFCA  02			     db	     2		     ;
   3494	EFCB  08			     db	     8		     ;
   3495	EFCC  2A			     db	     02ah	     ;
   3496	EFCD  FF			     db	     0ffh	     ;
   3497	EFCE  50			     db	     050h	     ;
   3498	EFCF  F6			     db	     0f6h	     ;
   3499	EFD0  19			     db	     25		     ;
   3500	EFD1  04			     db	     4		     ;
   3501				     ;--- int 17-------------------
   3502				     ;	 Программа связи с печатающим устройством
   3503				     ;
   3504				     ;	 Эта	программа выполняет три функции, код    +
   3505				     которых задается
   3506				     ; в регистре AH:
   3507				     ;	 AH=0 -	печать знака, заданного в регистре	AL.    +
   3508				     Если в
   3509				     ; результате выполнения функции	знак не	       +
   3510				     напечатается, то в регистре
   3511				     ; AL устанавливается "1" (тайм-аут);
   3512				     ;	 AH=1 -	инициализация порта печати. После	       +
   3513				     выполнения функции
   3514				     ; в регистре AH находится байт состояния	       +
   3515				     печатающего устройства;
   3516				     ;	 AH=2H - считывание байта состояния		       +
   3517				     печатающего устройства.
   3518				     ;	 В регистре DX	необходимо задать ноль.
   3519				     ;	 Значение разрядов байта состояния	       +
   3520				     печатающего устройства:
   3521				     ;	 0 - тайм-аут;
   3522				     ;	 3 - ошибка ввода-вывода;
   3523				     ;	 4 - выбран (SLCT);
   3524				     ;	 5 - конец	бумаги (PE);
   3525				     ;	 6 - подтверждение;
   3526				     ;	 7 - занято.
   3527				     ;------------------------------
   3528
   3529					     assume  cs:code,ds:data
   3530	EFD2			     printer_io	proc far
   3531	EFD2  FB			     sti		     ; установить признак	       +
   3532				     разрешения прерывания
   3533	EFD3  1E			     push    ds		     ; сохранить сегмент
   3534	EFD4  52			     push    dx
   3535	EFD5  56			     push    si
   3536	EFD6  51			     push    cx
   3537	EFD7  53			     push    bx
   3538	EFD8  BE 0040			     mov     si,dat
   3539	EFDB  8E DE			     mov     ds,si	     ; установить сегмент
   3540	EFDD  8B F2			     mov     si,dx
   3541	EFDF  D1 E6			     shl     si,1
   3542	EFE1  8B 94 0008r		     mov     dx,printer_base[si]  ; получить базовый адрес
   3543									  ; печатающего устройства
   3544	EFE5  0B D2			     or	     dx,dx		; печать подключена ?
   3545	EFE7  74 0C			     jz	     b1			; нет, возврат
   3546	EFE9  0A E4			     or	     ah,ah		; AH=0 ?
   3547	EFEB  74 0E			     jz	     b2			; да,	переход к печати	       +
   3548				     знака
   3549	EFED  FE CC			     dec     ah			; AH=1 ?
   3550	EFEF  74 42			     jz	     b8			; да,	переход к		       +
   3551				     инициализации
   3552	EFF1  FE CC			     dec     ah			; AH=2 ?
   3553	EFF3  74 2A			     jz	     b5		; да,	переход к считыванию	       +
   3554				     байта	состояния
   3555
   3556				     ;	  Выход из программы
   3557
   3558	EFF5			     b1:
   3559	EFF5  5B			     pop     bx		     ; восстановить	регистры
   3560	EFF6  59			     pop     cx
   3561	EFF7  5E			     pop     si
   3562	EFF8  5A			     pop     dx
   3563	EFF9  1F			     pop     ds
   3564	EFFA  CF			     iret
   3565
   3566				     ;	 Печать знака, заданного в	AL
   3567
   3568	EFFB			     b2:
   3569	EFFB  50			     push    ax
   3570	EFFC  B3 0A			     mov     bl,10	     ; количество циклов	       +
   3571				     ожидания
   3572	EFFE  33 C9			     xor     cx,cx	     ; длительность	одного цикла
   3573	F000  EE			     out     dx,al	     ; вывести символ в порт
   3574	F001  42			     inc     dx		     ; -1 из адреса порта
   3575	F002			     b3:			     ; ожидание	BUSY
   3576	F002  EC			     in	     al,dx	     ; получить	состояние
   3577	F003  8A E0			     mov     ah,al	     ; переслать состояние в	AH
   3578	F005  A8 80			     test    al,80h	     ; печать занята ?
   3579	F007  75 0E			     jnz     b4		     ; переход, если	да
   3580	F009  E2 F7			     loop    b3		     ; цикл	ожидания закончился ?
   3581	F00B  FE CB			     dec     bl		     ; да, -1	из количества циклов
   3582	F00D  75 F3			     jnz     b3		     ; время ожидания истекло ?
   3583	F00F  80 CC 01			     or	     ah,1	     ; да, уст бит "тайм-аут"
   3584	F012  80 E4 F9			     and     ah,0f9h	     ;
   3585	F015  EB 14			     jmp     short b7
   3586	F017			     b4:			     ; OUT_STROBE
   3587	F017  B0 0D			     mov     al,0dh	     ; установить высокий строб
   3588	F019  42			     inc     dx	     ; стробирование битом 0 порта C    +
   3589				     для 8255
   3590	F01A  EE			     out     dx,al
   3591	F01B  B0 0C			     mov     al,0ch	     ; установить низкий строб
   3592	F01D  EE			     out     dx,al
   3593	F01E  58			     pop     ax		     ;
   3594
   3595				     ;	 Считывание байта состояния печатающего     +
   3596				     устройства
   3597
   3598	F01F			     b5:
   3599	F01F  50			     push    ax		     ; сохранить регистр
   3600	F020			     b6:
   3601	F020  8B 94 0008r		     mov     dx,printer_base[si]  ; получить адрес	печати
   3602	F024  42			     inc     dx
   3603	F025  EC			     in	     al,dx	     ; получить	состояние печати
   3604	F026  8A E0			     mov     ah,al
   3605	F028  80 E4 F8			     and     ah,0f8h
   3606	F02B			     b7:
   3607	F02B  5A			     pop     dx
   3608	F02C  8A C2			     mov     al,dl
   3609	F02E  80 F4 48			     xor     ah,48h
   3610	F031  EB C2			     jmp     short b1	     ; к выходу из программы
   3611
   3612				     ;	 Инициализация порта печатающего		       +
   3613				     устройства
   3614
   3615	F033			     b8:
   3616	F033  50			     push    ax
   3617	F034  83 C2 02			     add     dx,2	     ; указать порт
   3618	F037  B0 08			     mov     al,8
   3619	F039  EE			     out     dx,al
   3620	F03A  B8 03E8			     mov     ax,1000	      ;	время задержки
   3621	F03D			     b9:
   3622	F03D  48			     dec     ax		      ;	цикл задержки
   3623	F03E  75 FD			     jnz     b9
   3624	F040  B0 0C			     mov     al,0ch
   3625	F042  EE			     out     dx,al
   3626	F043  EB DB			     jmp     short b6	 ; переход к считыванию байта   +
   3627				     состояния
   3628	F045			     printer_io	     endp
   3629				     ;--- int 10------------------
   3630				     ;
   3631				     ;	 Программа обработки прерывания ЭЛИ
   3632				     ;
   3633				     ;	 Эта	программа обеспечивает выполнение       +
   3634				     функций обслуживания
   3635				     ; адаптера	ЭЛИ,	код которых задается в	       +
   3636				     регистре AH:
   3637				     ;
   3638				     ;	  AH=0	 - установить	режим работы	адаптера       +
   3639				     ЭЛИ. В	результате
   3640				     ; выполнения функции в регистре AL могут	       +
   3641				     устанавливаться следу-
   3642				     ; ющие	режимы:
   3643				     ;	  0 - 40х25, черно-белый, алфавитно-цифровой;
   3644				     ;	  1 - 40х25, цветной, алфавитно-цифровой;
   3645				     ;	  2 - 80х25, черно-белый, алфавитно-цифровой;
   3646				     ;	  3 - 80х25, цветной, алфавитно-цифровой;
   3647				     ;	  4 - 320х200,	цветной,	графический;
   3648				     ;	  5 - 320х200,	черно-белый, графический;
   3649				     ;	  6 - 640х200,	черно-белый, графический;
   3650				     ;	  7 - 80х25, черно-белый, алфавитно-цифровой.
   3651				     ;	  Режимы 0 - 6 используются для ЭМ адаптера     +
   3652				     ЭЛИ, режим	7
   3653				     ; используется	для монохромного	черно-белого+
   3654				     80х25 адаптера.
   3655				     ;
   3656				     ;	  AH=1	 - установить	размер курсора. Функция    +
   3657				     задает размер кур-
   3658				     ; сора	и управление	им.
   3659				     ;	 Разряды	0 - 4 регистра CL определяют конечную+
   3660				     границу курсора,
   3661				     ; разряды 0	- 4 регистра CH	- начальную границу    +
   3662				     курсора.
   3663				     ;	  Разряды 6 и 5	задают управление курсором:
   3664				     ;	  00 - курсор мерцает с частотой,	задаваемой   +
   3665				     аппаратурно;
   3666				     ;	  01 - курсор отсутствует.
   3667				     ;	  Аппаратурно всегда вызывается мерцание    +
   3668				     курсора с частотой,
   3669				     ; равной 1/16 частоты	кадровой развертки.
   3670				     ;
   3671				     ;	  AH=2	 - установить	текущую позицию курсора.  +
   3672				     Для выполнения
   3673				     ; функции необходимо задать	следующие	       +
   3674				     координаты курсора:
   3675				     ;	  BH - страница;
   3676				     ;	  DX - строка и колонка.
   3677				     ; При графическом режиме регистр BH=0.
   3678				     ;
   3679				     ;	  AH=3	 - считать текущее положение курсора.    +
   3680				     Функция вос-
   3681				     ; станавливает	текущее положение курсора.      +
   3682				     Перед	выполнением
   3683				     ; функции в регистре BH необходимо задать	       +
   3684				     страницу.
   3685				     ;	  После выполнения программы регистры	       +
   3686				     содержат следующую
   3687				     ; информацию:
   3688				     ;	  DH - строка;
   3689				     ;	  DL - колонка;
   3690				     ;	  CX - размер курсора и управление им.
   3691				     ;
   3692				     ;	  AH=5	- установить активную	страницу буфера  +
   3693				     адаптера.
   3694				     ; Функция используется только в			       +
   3695				     алфавитно-цифровом режиме.
   3696				     ; Для ее выполнения	необходимо в	регистре AL    +
   3697				     задать страницу:
   3698				     ;	  0-7 -	для режимов 0	и 1;
   3699				     ;	  0-3 -	для режимов 2	и 3.
   3700				     ;	  Значения режимов те же, что и для функции   +
   3701				     AH=0.
   3702				     ;
   3703				     ;	  AH=6	 - переместить блок символов вверх по    +
   3704				     экрану.
   3705				     ; Функция перемещает символы в пределах	       +
   3706				     заданной области вверх
   3707				     ; по экрану, заполняя нижние	строки пробелами+
   3708				     с	заданным атрибу-
   3709				     ; том.
   3710				     ;	  Для выполнения функции необходимо задать +
   3711				     следующие	пара-
   3712				     ; метры;
   3713				     ;	  AL - количество перемещаемых строк. Для	       +
   3714				     очистки блока AL=0;
   3715				     ;	  CX - координаты левого верхнего угла блока  +
   3716				     (строка,колонка);
   3717				     ;	  DX - координаты правого нижнего угла блока;
   3718				     ;	  BH - атрибут символа пробела.
   3719				     ;
   3720				     ;	  AH=7	 - переместить блок символов вниз.	       +
   3721				     Функция перемещает
   3722				     ; символы в пределах заданной области вниз по+
   3723				     экрану, заполняя
   3724				     ; верхние строки пробелами с заданным	       +
   3725				     атрибутом.
   3726				     ;	  Для выполнения функции необходимо задать +
   3727				     те же параметры,
   3728				     ; что и для	функции AH=6H.
   3729				     ;
   3730				     ;	  AH=8	 - считать атрибут и код символа,	       +
   3731				     находящегося в теку-
   3732				     ; щей позиции курсора. Функция считывает	       +
   3733				     атрибут и код символа
   3734				     ; и помещает их	в регистр AX (AL - код символа, AH - +
   3735				     атрибут
   3736				     ; символа).
   3737				     ;	  Для выполнения функции необходимо в	       +
   3738				     регистре BH задать
   3739				     ; страницу	(только для алфавитно-цифрового     +
   3740				     режима).
   3741				     ;
   3742				     ;	  AH=9	 - записать атрибут и код символа в	       +
   3743				     текущую позицию
   3744				     ; курсора. Функция помещает код символа и	его +
   3745				     атрибут в текущую
   3746				     ; позицию курсора.
   3747				     ;	  Для выполнения функции необходимо задать +
   3748				     следующие	параметры:
   3749				     ;	  BH - отображаемая	страница (только для	       +
   3750				     алфавитно-цифрового
   3751				     ; режима;
   3752				     ;	  CX - количество записываемых символов;
   3753				     ;	  AL - код символа;
   3754				     ;	  BL - атрибут символа для				       +
   3755				     алфавитно-цифрового режима	или
   3756				     ; цвет	знака для графики. При записи точки       +
   3757				     разряд 7 регистра BL=1.    =1
   3758				     ;
   3759				     ;	  AH=10	- записать символ	в текущую позицию       +
   3760				     курсора. Атрибут
   3761				     ; не изменяется.
   3762				     ;	  Для выполнения функции необходимо задать +
   3763				     следующие	параметры:
   3764				     ;	  BH - отображаемая	страница (только для	       +
   3765				     алфавитно-цифрового
   3766				     ; режима);
   3767				     ;	  CX - количество повторений символа;
   3768				     ;	  AL - код записываемого символа.		       +
   3769				     ся
   3770				     ;									   -
   3771				     ;	  AH=11	- установить цветовую	палитру.		       +
   3772				     ь
   3773				     ;	  При выполнении функции используются два   +
   3774				     варианта.
   3775				     ;	  Для первого	варианта в регистре BH		       +
   3776				     задается ноль,а в регистре
   3777				     ; BL - значения пяти младших разрядов,		       +
   3778				     используемых для выбора
   3779				     ; цветовой	палитры (цвет заднего	плана для      +
   3780				     цветного графического
   3781				     ; режима 320х200 или цвет каймы	для цветного	       +
   3782				     графического режима
   3783				     ; 40х25).
   3784				     ;	  Для второго	варианта в регистре BH		       +
   3785				     задается "1", а в регистре
   3786				     ; BL - номер цветовой	палитры (0 или 1).
   3787				     ;	  Палитра 0 состоит из зеленого	(1), красного  +
   3788				     (2) и желтого (3)
   3789				     ; цветов, палитра 1 -	из голубого (1),		       +
   3790				     фиолетового (2)	и белого	(3).
   3791				     ; При работе с видеомонитором цвета палитры   +
   3792				     заменяются соответству-
   3793				     ; ющими градациями цвета.
   3794				     ;	  Результатом выполнения функции является  +
   3795				     установка	цветовой       )
   3796				     ; палитры в регистре выбора цвета (3D9).
   3797				     ;
   3798				     ;	  AH=12	 - записать точку.	Функция определяет    +
   3799				     относительный
   3800				     ; адрес байта внутри буфера ЭЛИ, по которому   +
   3801				     должна быть записана
   3802				     ; точка с заданными	координатами.
   3803				     ;	  Для выполнения функции необходимо задать +
   3804				     следующие	параметры:    ,
   3805				     ;	  DX - строка;
   3806				     ;	  CX - колонка;
   3807				     ;	  AL - цвет	выводимой точки. Если	разряд 7	       +
   3808				     регистра AL уста-	 3)
   3809				     ; новлен в "1", то выполняется	операция XOR над    +
   3810				     значением	точки
   3811				     ; из буфера и значением точки из регистра	AL.
   3812				     ;
   3813				     ;	  AH=13	- считать точку. Функция определяет       +
   3814				     относительный
   3815				     ; адрес байта внутри буфера ЭЛИ, по которому   +
   3816				     должна быть считана
   3817				     ; точка с заданными	координатами.
   3818				     ;	  Перед выполнением программы в регистрах   +
   3819				     задаются те же	парамет-
   3820				     ; ры, что и для функции AH=12.
   3821				     ;	 После выполнения программы в регистре	AL     +
   3822				     находится	значение
   3823				     ; считанной точки.
   3824				     ;
   3825				     ;	  AH=14	- записать телетайп. Функция выводит     +
   3826				     символ в буфер
   3827				     ; ЭЛИ с одновременной установкой позиции	       +
   3828				     курсора и передвижением
   3829				     ; курсора на экране.
   3830				     ;	  После записи символа в последнюю позицию  +
   3831				     строки выполняется
   3832				     ; автоматический переход на	новую строку.       +
   3833				     Если страница экрана
   3834				     ; заполнена, выполняется перемещение на одну +
   3835				     строку вверх. Осво-
   3836				     ; бодившаяся строка заполняется	значением     +
   3837				     атрибута символа для
   3838				     ; алфавитно-цифрового режима или нулями -	для +
   3839				     графики.
   3840				     ;	  После записи очередного символа курсор     +
   3841				     устанавливается
   3842				     ; в следующую позицию.
   3843				     ;	  Для выполнения программы необходимо	       +
   3844				     задать следующие параметры:
   3845				     ;	  AL - код выводимого символа;
   3846				     ;	  BL - цвет	переднего плана (для графического +
   3847				     режима).
   3848				     ;	  Программа обрабатывает следующие	       +
   3849				     служебные	символы:
   3850				     ;	  0BH -	сдвиг курсора на одну	позицию (без	       +
   3851				     очистки);
   3852				     ;	  0DH -	перемещение курсора в начало строки;
   3853				     ;	  0AH -	перемещение курсора на следующую	       +
   3854				     строку;
   3855				     ;	  07H -	звуковой сигнал.
   3856				     ;
   3857				     ;	  AH=15	- получить текущее состояние ЭЛИ.	       +
   3858				     Функция считывает
   3859				     ; текущее состояние ЭЛИ	из памяти и размещает+
   3860				     его в следующих
   3861				     ; регистрах;
   3862				     ;	  AH - количество колонок (40 или 80);
   3863				     ;	  AL - текущий режим (0-7).	Значения режимов	те   +
   3864				     же, что и для
   3865				     ; функции AH=0;
   3866				     ;	  BH - номер активной страницы.
   3867				     ;
   3868				     ;	 AH=17 - загрузить знакогенератор		       +
   3869				     пользователя. Функция дает
   3870				     ; возможность пользователю загружать	       +
   3871				     знакогенератор любым, необ-
   3872				     ; ходимым ему алфавитом.
   3873				     ;	  Для выполнения программы необходимо	       +
   3874				     задать следующие параметры:
   3875				     ;	  ES:BP	- адрес таблицы, сформированной	       +
   3876				     пользователем;
   3877				     ;	  CX	- количество передаваемых	символов;
   3878				     ;	  BL	- код символа, начиная	с которого	       +
   3879				     загружается таблица
   3880				     ; пользователя;
   3881				     ;	  BH - количество байт на знакоместо;
   3882				     ;	  DL - идентификатор таблицы пользователя;
   3883				     ;	  AL - режим:
   3884				     ;		       AL=0   -	 загрузить знакогенератор
   3885				     ;		       AL=1   -	 выдать идентификатор таблицы
   3886				     ;		       AL=3   -	 загрузить вторую половину      +
   3887				     знакогенератора:
   3888				     ;				 BL=0 -	загрузить вторую		       +
   3889				     половину знакогене
   3890				     ;				 ратора из ПЗУ кодовой таблицы+
   3891				     с	русским
   3892				     ;				 алфавитом,
   3893				     ;				 BL=1 -	загрузить вторую		       +
   3894				     половину знакогене
   3895				     ;				 ратора из ПЗУ стандартной       +
   3896				     кодовой таблицей
   3897				     ;				 ASCII (USA)
   3898				     ;	 На выходе:
   3899				     ;	     AH	  -  количество байт на	знакоместо
   3900				     ;	     AL	  -  идентификатор	таблицы пользователя
   3901				     ;	     CF=1   -	операция завершена успешно
   3902				     ;
   3903				     ;	  AH=19	- переслать цепочку символов. Функция   +
   3904				     позволяет	пере-
   3905				     ; сылать символы четырьмя способами,	тип	       +
   3906				     которых задается в
   3907				     ; регистре	AL:
   3908				     ;	  AL=0 - символ, символ, символ, ...
   3909				     ; В регистре BL задается атрибут, курсор не       +
   3910				     движется;
   3911				     ;	  AL=1 - символ, символ, символ, ...
   3912				     ; В регистре BL задается атрибут, курсор	       +
   3913				     движется;
   3914				     ;	  AL=2H	- символ,	атрибут,	символ, атрибут, ...
   3915				     ; Курсор не движется;
   3916				     ;	  AL=3H	- символ,	атрибут,	символ, атрибут, ...
   3917				     ; Курсор движется.
   3918				     ;	   Кроме того необходимо задать в регистрах:
   3919				     ;	  ES:BP	- начальный адрес	цепочки символов;
   3920				     ;	  CX	- количество символов;
   3921				     ;	  DH,DL	- строку и колонку для	начала записи;
   3922				     ;	  BH	- номер страницы.
   3923				     ;-----------------------------------------------------------
   3924
   3925					     assume cs:code,ds:data,es:video_ram
   3926
   3927	F045			     m1	     label   word	     ; таблица функций адаптера  +
   3928				     ЭЛИ
   3929	F045  F0FCr			     dw	     offset  set_mode
   3930	F047  F1CFr			     dw	     offset  set_ctype
   3931	F049  F1F0r			     dw	     offset  set_cpos
   3932	F04B  F21Ar			     dw	     offset  read_cursor
   3933	F04D  F7A9r			     dw	     offset  read_lpen
   3934	F04F  F230r			     dw	     offset  act_disp_page
   3935	F051  F29Cr			     dw	     offset  scroll_up
   3936	F053  F341r			     dw	     offset  scroll_down
   3937	F055  F37Dr			     dw	     offset  read_ac_current
   3938	F057  F3C3r			     dw	     offset  write_ac_current
   3939	F059  F3F6r			     dw	     offset  write_c_current
   3940	F05B  F254r			     dw	     offset  set_color
   3941	F05D  F438r			     dw	     offset  write_dot
   3942	F05F  F427r			     dw	     offset  read_dot
   3943	F061  F966r			     dw	     offset  write_tty2
   3944	F063  F27Ar			     dw	     offset  video_state
   3945	      =0020		     m1l     equ     20h
   3946
   3947	F065			     video_io proc   near
   3948	F065  FB			     sti		 ; установить	признак		       +
   3949				     разрешения прерывания
   3950	F066  FC			     cld
   3951	F067  06			     push    es
   3952	F068  1E			     push    ds
   3953	F069  52			     push    dx
   3954	F06A  51			     push    cx
   3955	F06B  53			     push    bx
   3956	F06C  56			     push    si
   3957	F06D  57			     push    di
   3958	F06E  50			     push    ax		     ; сохранить значение AX
   3959	F06F  8A C4			     mov     al,ah	     ; переслать AH в	AL
   3960	F071  32 E4			     xor     ah,ah	     ; обнулить	старший байт
   3961	F073  D1 E0			     sal     ax,1	     ; умножить	на 2
   3962	F075  8B F0			     mov     si,ax	     ; поместить в SI
   3963	F077  3D 0020			     cmp     ax,m1l	     ; проверка	длины таблицы      +
   3964				     функций
   3965	F07A  72 04			     jb	     m2		     ; адаптера	ЭЛИ
   3966	F07C  58			     pop     ax		     ; восстановить	AX
   3967	F07D  E9 0147			     jmp     video_return    ; выход, если AX неверно
   3968	F080  B8 0040		     m2:     mov     ax,dat
   3969	F083  8E D8			     mov     ds,ax
   3970	F085  B8 B800			     mov     ax,0b800h	     ; сегмент для цветного	       +
   3971				     адаптера
   3972	F088  8B 3E 0010r		     mov     di,equip_flag   ; получить	тип адаптера
   3973	F08C  81 E7 0030		     and     di,30h	     ; выделить	биты режима ;	db 81h,+
   3974				     0E7h,30h,00h  ; ###Gleb###
   3975	F090  83 FF 30			     cmp     di,30h	     ; есть	установка ч/б	       +
   3976				     адаптера ?
   3977	F093  75 03			     jne     m3
   3978	F095  B8 B000			     mov     ax,0b000h	     ; уст адреса буфера	для ч/б   +
   3979				     адаптера
   3980	F098  8E C0		     m3:     mov     es,ax
   3981	F09A  58			     pop     ax		     ; восстановить	значение
   3982	F09B  8A 26 0049r		     mov     ah,crt_mode     ; получить	текущий режим в AH
   3983	F09F  2E: FF A4	F045r		     jmp   cs:m1[si]
   3984	F0A4			     video_io	     endp
   3985				     ;-------------------------
   3986				     ; set mode
   3987
   3988				     ;	 Эта	программа устанавливает режим работы  +
   3989				     адаптера ЭЛИ
   3990				     ;
   3991				     ;	 ВХОД
   3992				     ;		(AL) - содержит	значение режима.
   3993				     ;
   3994				     ;--------------------------
   3995
   3996				     ;	 Таблицы	параметров ЭЛИ
   3997
   3998	F0A4			     video_parms label	     byte
   3999
   4000				     ;	 Таблица	инициализации
   4001
   4002	F0A4  38 28 2D 0A 1F 06	19	     db	     38h,28h,2dh,0ah,1fh,6,19h	 ; уст для 40х25
   4003
   4004	F0AB  1C 02 07 06 07		     db	     1ch,2,7,6,7
   4005	F0B0  00 00 00 00		     db	     0,0,0,0
   4006	      =0010		     m4	     equ     10h
   4007
   4008	F0B4  71 50 5A 0A 1F 06	19	     db	     71h,50h,5ah,0ah,1fh,6,19h	 ; уст для 80х25
   4009
   4010	F0BB  1C 02 07 06 07		     db	     1ch,2,7,6,7
   4011	F0C0  00 00 00 00		     db	     0,0,0,0
   4012
   4013	F0C4  38 28 2D 0A 7F 06	64	     db	     38h,28h,2dh,0ah,7fh,6,64h	 ; уст для графики
   4014
   4015	F0CB  70 02 01 06 07		     db	     70h,2,1,6,7
   4016	F0D0  00 00 00 00		     db	     0,0,0,0
   4017
   4018	F0D4  62 50 50 0F 19 06	19	     db	     62h,50h,50h,0fh,19h,6,19h	 ; уст для 80х25	ч/б	       +
   4019				     адаптера
   4020
   4021	F0DB  19 02 0D 0B 0C		     db	     19h,2,0dh,0bh,0ch
   4022	F0E0  00 00 00 00		     db	     0,0,0,0
   4023
   4024	F0E4			     m5	     label   word	     ; таблица для			       +
   4025				     восстановления длины
   4026	F0E4  0800			     dw	     2048
   4027	F0E6  1000			     dw	     4096
   4028	F0E8  4000			     dw	     16384
   4029	F0EA  4000			     dw	     16384
   4030
   4031				     ;	 Колонки
   4032	F0EC			     m6	     label   byte
   4033	F0EC  28 28 50 50 28 28	50+	     db	     40,40,80,80,40,40,80,80
   4034	      50
   4035
   4036
   4037				     ;--- c_reg_tab
   4038	F0F4			     m7	     label   byte	     ; таблица установки режима
   4039	F0F4  2C 28 2D 29 2A 2E	1E+	     db	     2ch,28h,2dh,29h,2ah,2eh,1eh,29h
   4040	      29
   4041
   4042
   4043	F0FC			     set_mode proc   near
   4044	F0FC  BA 03D4			     mov     dx,03d4h	     ; адрес цветного адаптера
   4045	F0FF  B3 00			     mov     bl,0     ;	уст значение	для цветного	       +
   4046				     адаптера
   4047	F101  83 FF 30			     cmp     di,30h	     ; установлен ч/б адаптер ?
   4048	F104  75 07			     jne     m8		     ; переход, если	указан	       +
   4049				     цветной
   4050	F106  B0 07			     mov     al,7	     ; указать ч/б режим
   4051	F108  BA 03B4			     mov     dx,03b4h	     ; адрес для ч/б адаптера
   4052	F10B  FE C3			     inc     bl		     ; установить режим для ч/б    +
   4053				     адаптера
   4054	F10D  8A E0		     m8:     mov     ah,al	     ; сохранить режим в	AH
   4055	F10F  A2 0049r			     mov     crt_mode,al
   4056	F112  89 16 0063r		     mov     addr_6845,dx    ; сохранить адрес		       +
   4057				     управляющего порта
   4058								     ; для активного дисплея
   4059	F116  1E			     push    ds
   4060	F117  50			     push    ax		     ; сохранить режим
   4061	F118  52			     push    dx		     ; сохранить значение порта  +
   4062				     вывода
   4063	F119  83 C2 04			     add     dx,4	     ; указать адрес регистра      +
   4064				     управления
   4065	F11C  8A C3			     mov     al,bl	     ; получить	режим для	       +
   4066				     адаптера
   4067	F11E  EE			     out     dx,al	     ; сброс экрана
   4068	F11F  5A			     pop     dx		     ; восстановить	DX
   4069	F120  2B C0			     sub     ax,ax
   4070	F122  8E D8			     mov     ds,ax	     ; установить адрес таблицы  +
   4071				     векторов
   4072					     assume  ds:abs0
   4073	F124  C5 1E 0074r		     lds     bx,parm_ptr ; получить значение		       +
   4074				     параметров адаптера ЭЛИ
   4075	F128  58			     pop     ax		     ; восстановить	AX
   4076					     assume  ds:code
   4077	F129  B9 0010			     mov     cx,m4	; установить длину таблицы       +
   4078				     параметров
   4079	F12C  80 FC 02			     cmp     ah,2	     ; определение режима
   4080	F12F  72 10			     jc	     m9		     ; режим 0 или 1 ?
   4081	F131  03 D9			     add     bx,cx	     ; уст начало таблицы	       +
   4082				     параметров
   4083	F133  80 FC 04			     cmp     ah,4
   4084	F136  72 09			     jc	     m9		     ; режим 2 или 3
   4085	F138  03 D9			     add     bx,cx	     ; начало таблицы для графики
   4086	F13A  80 FC 07			     cmp     ah,7
   4087	F13D  72 02			     jc	     m9		     ; режимы 4, 5 или	6 ?
   4088	F13F  03 D9			     add     bx,cx	     ; уст начало таблицы для ч/б +
   4089				     адаптера
   4090
   4091				     ;	 BX указывает на строку таблицы			       +
   4092				     инициализации
   4093
   4094	F141			     m9:			     ; OUT_INIT
   4095	F141  50			     push    ax		     ; сохранить режим в	AH
   4096	F142  32 E4			     xor     ah,ah	     ;
   4097
   4098				     ;	 Цикл таблицы, устанавливающий адреса	       +
   4099				     регистров	и выводящий значения
   4100				     ; из таблицы
   4101
   4102	F144			     m10:
   4103	F144  8A C4			     mov     al,ah	     ;
   4104	F146  EE			     out     dx,al
   4105	F147  42			     inc     dx		     ; указать адрес порта
   4106	F148  FE C4			     inc     ah		     ;
   4107	F14A  8A 07			     mov     al,byte ptr [bx]	; получить значение	       +
   4108				     таблицы
   4109	F14C  EE			     out     dx,al	     ; послать строку из	таблицы +
   4110				     в	порт
   4111	F14D  43			     inc     bx		     ; +1 к адресу таблицы
   4112	F14E  4A			     dec     dx		     ; -1 из адреса порта
   4113	F14F  E2 F3			     loop    m10	     ; передана	вся таблица ?
   4114	F151  58			     pop     ax		     ; вернуть режимы
   4115	F152  1F			     pop     ds		     ; вернуть сегмент
   4116					     assume  ds:data
   4117
   4118				     ;	 Инициализация буфера дисплея
   4119
   4120	F153  33 FF			     xor     di,di	     ; DI=0
   4121	F155  89 3E 004Er		     mov     crt_start,di    ; сохранить начальный адрес
   4122	F159  C6 06 0062r 00		     mov     active_page,0   ; установить активную	       +
   4123				     страницу
   4124	F15E  B9 2000			     mov     cx,8192	     ; количество слов в	цветном +
   4125				     адаптере
   4126	F161  80 FC 04			     cmp     ah,4	     ; опрос графики
   4127	F164  72 0C			     jc	     m12	     ; нет инициализации графики
   4128	F166  80 FC 07			     cmp     ah,7	     ; опрос ч/б	адаптера
   4129	F169  74 04			     je	     m11	     ; инициализация ч/б	адаптера
   4130	F16B  33 C0			     xor     ax,ax	     ; для графического режима
   4131	F16D  EB 06			     jmp     short m13	     ; очистить	буфер
   4132	F16F			     m11:			     ; инициализация ч/б	адаптера
   4133	F16F  B9 0800			     mov     cx,2048	     ; об'ем буфера ч/б адаптера
   4134	F172			     m12:
   4135	F172  B8 0720			     mov     ax,' '+7*256    ; заполнить характеристики +
   4136				     для альфа
   4137	F175			     m13:			     ; очистить	буфер
   4138	F175  F3> AB			     rep     stosw	     ; заполнить область буфера  +
   4139				     пробелами
   4140
   4141				     ;	 Формирование порта управления режимом
   4142
   4143	F177  C7 06 0060r 0067		     mov     cursor_mode,67h   ; установить режим	       +
   4144				     текущего курсора (ERROR - MUS BE 607h)
   4145	F17D  A0 0049r			     mov     al,crt_mode     ; получить	режим в регистре +
   4146				     AX
   4147	F180  32 E4			     xor     ah,ah
   4148	F182  8B F0			     mov     si,ax	     ; таблица указателей режима
   4149	F184  8B 16 0063r		     mov     dx,addr_6845    ; подготовить адрес порта    +
   4150				     для вывода
   4151	F188  83 C2 04			     add     dx,4
   4152	F18B  2E: 8A 84	F0F4r		     mov al,cs:m7[si]
   4153	F190  EE			     out     dx,al
   4154	F191  A2 0065r			     mov     crt_mode_set,al
   4155
   4156				     ;	 Форморование количества колонок
   4157
   4158	F194  2E: 8A 84	F0ECr		     mov al,cs:m6[si]
   4159	F199  32 E4			     xor     ah,ah
   4160	F19B  A3 004Ar			     mov     crt_cols,ax     ; коичество колонок на	       +
   4161				     экране
   4162
   4163				     ;	 Установить позицию курсора
   4164
   4165	F19E  81 E6 000E		     and     si,0eh	     ; db 81h,0E6h,0Eh,00h   ; ###Gleb###
   4166	F1A2  2E: 8B 8C	F0E4r		     mov cx,cs:m5[si]  ; длина для очистки
   4167	F1A7  89 0E 004Cr		     mov     crt_len,cx
   4168	F1AB  B9 0008			     mov     cx,8	     ; очистить	все позиции	       +
   4169				     курсора
   4170	F1AE  BF 0050r			     mov     di,offset cursor_posn
   4171	F1B1  1E			     push    ds		     ; восстановить	сегмент
   4172	F1B2  07			     pop     es
   4173	F1B3  33 C0			     xor     ax,ax
   4174	F1B5  F3> AB			     rep     stosw	     ; заполнить нулями
   4175
   4176				     ;	 Установка регистра сканирования
   4177
   4178	F1B7  42			     inc     dx		     ; уст порт сканирования	по   +
   4179				     умолчанию
   4180	F1B8  B0 30			     mov     al,30h	     ; значение	30H для всех	       +
   4181				     режимов,
   4182								     ; исключая	640х200
   4183	F1BA  80 3E 0049r 06		     cmp     crt_mode,6	     ; режим ч/б	640х200
   4184	F1BF  75 02			     jnz     m14	     ; если	не 640х200
   4185	F1C1  B0 3F			     mov     al,3fh	     ; если	640х200, то поместить в 3FH
   4186	F1C3  EE		     m14:    out     dx,al	     ; вывод правильного	       +
   4187				     значения в порт 3D9
   4188	F1C4  A2 0066r			     mov     crt_pallette,al   ; сохранить значение для    +
   4189				     использования
   4190
   4191				     ;	 Нормальный возврат
   4192
   4193	F1C7			     video_return:
   4194	F1C7  5F			     pop     di
   4195	F1C8  5E			     pop     si
   4196	F1C9  5B			     pop     bx
   4197	F1CA			     m15:
   4198	F1CA  59			     pop     cx		     ; восстановление регистров
   4199	F1CB  5A			     pop     dx
   4200	F1CC  1F			     pop     ds
   4201	F1CD  07			     pop     es
   4202	F1CE  CF			     iret		     ; возврат из прерывания
   4203	F1CF			     set_mode	     endp
   4204				     ;--------------------
   4205				     ; set_ctype
   4206				     ;
   4207				     ;	 Эта	программа устанавливает размер	       +
   4208				     курсора и управление им
   4209				     ;
   4210				     ;	 ВХОД
   4211				     ;		(CX) - содержит	размер курсора. (CH -	       +
   4212				     начальная	граница,
   4213				     ;		       CL - конечная граница)
   4214				     ;
   4215				     ;--------------------
   4216	F1CF			     set_ctype proc  near
   4217	F1CF  B4 0A			     mov     ah,10	     ; установить регистр 6845	для +
   4218				     курсора
   4219	F1D1  89 0E 0060r		     mov     cursor_mode,cx   ;	сохранить в области	       +
   4220				     данных
   4221	F1D5  E8 0002			     call    m16	     ; вывод регистра CX
   4222	F1D8  EB ED			     jmp     short video_return
   4223
   4224	F1DA			     m16:
   4225	F1DA  8B 16 0063r		     mov     dx,addr_6845    ; адрес регистра
   4226	F1DE  8A C4			     mov     al,ah	     ; получить	значение
   4227	F1E0  EE			     out     dx,al	     ; установить регистр
   4228	F1E1  42			     inc     dx		     ; регистр данных
   4229	F1E2  8A C5			     mov     al,ch	     ; данные
   4230	F1E4  EE			     out     dx,al
   4231	F1E5  4A			     dec     dx
   4232	F1E6  8A C4			     mov     al,ah
   4233	F1E8  FE C0			     inc     al		     ; указать другой регистр      +
   4234				     данных
   4235	F1EA  EE			     out     dx,al	     ; установить второй регистр
   4236	F1EB  42			     inc     dx
   4237	F1EC  8A C1			     mov     al,cl	     ; второе значение данных
   4238	F1EE  EE			     out     dx,al
   4239	F1EF  C3			     ret		     ; возврат
   4240	F1F0			     set_ctype	     endp
   4241				     ;----------------------------
   4242				     ; set_cpos
   4243				     ;
   4244				     ;	 Установить текущую позицию курсора
   4245				     ;
   4246				     ;	 ВХОД
   4247				     ;		DX - строка, колонка,
   4248				     ;		BH - номер	страницы.
   4249				     ;
   4250				     ;-----------------------------
   4251	F1F0			     set_cpos proc   near
   4252	F1F0  8A CF			     mov     cl,bh
   4253	F1F2  32 ED			     xor     ch,ch	     ; установить счетчик
   4254	F1F4  D1 E1			     sal     cx,1	     ; сдвиг слова
   4255	F1F6  8B F1			     mov     si,cx
   4256	F1F8  89 94 0050r		     mov word ptr [si +	offset cursor_posn],dx	;сохранить	       +
   4257				     указатель
   4258	F1FC  38 3E 0062r		     cmp     active_page,bh
   4259	F200  75 05			     jnz     m17
   4260	F202  8B C2			     mov     ax,dx	     ; получить	строку/колонку в +
   4261				     AX
   4262	F204  E8 0002			     call    m18	     ; установить курсор
   4263	F207			     m17:
   4264	F207  EB BE			     jmp     short video_return	 ; возврат
   4265	F209			     set_cpos	     endp
   4266
   4267				     ;	 Установить позицию курсора, AX	содержит       +
   4268				     строку/колонку
   4269
   4270	F209			     m18     proc    near
   4271	F209  E8 007F			     call    position
   4272	F20C  8B C8			     mov     cx,ax
   4273	F20E  03 0E 004Er		     add     cx,crt_start    ; сложить с начальным	       +
   4274				     адресом страницы
   4275	F212  D1 F9			     sar     cx,1	     ; делить на 2
   4276	F214  B4 0E			     mov     ah,14
   4277	F216  E8 FFC1			     call    m16
   4278	F219  C3			     ret
   4279	F21A			     m18     endp
   4280				     ;---------------------------
   4281				     ; read_cursor
   4282				     ;
   4283				     ;	 Считать	текущее положение курсора
   4284				     ;
   4285				     ;	 Эта	программа восстанавливает текущее       +
   4286				     положение	курсора
   4287				     ;
   4288				     ;	 ВХОД
   4289				     ;		BH - номер	страницы
   4290				     ;
   4291				     ;	 ВЫХОД
   4292				     ;		DX - строка/колонка текущей	позиции	       +
   4293				     курсора,
   4294				     ;		CX - размер курсора и управление им
   4295				     ;
   4296				     ;---------------------------
   4297	F21A			     read_cursor proc near
   4298	F21A  8A DF			     mov     bl,bh
   4299	F21C  32 FF			     xor     bh,bh
   4300	F21E  D1 E3			     sal     bx,1
   4301	F220  8B 97 0050r		     mov dx,word ptr [bx+offset	cursor_posn]
   4302	F224  8B 0E 0060r		     mov     cx,cursor_mode
   4303	F228  5F			     pop     di		     ; восстановить	регистры
   4304	F229  5E			     pop     si
   4305	F22A  5B			     pop     bx
   4306	F22B  58			     pop     ax
   4307	F22C  58			     pop     ax
   4308	F22D  1F			     pop     ds
   4309	F22E  07			     pop     es
   4310	F22F  CF			     iret
   4311	F230			     read_cursor     endp
   4312				     ;-----------------------------
   4313				     ; act_disp_page
   4314				     ;
   4315				     ;	  Эта программа устанавливает активную	       +
   4316				     страницу буфера адаптера ЭЛИ
   4317				     ;
   4318				     ;	 ВХОД
   4319				     ;		AL - страница.
   4320				     ;
   4321				     ;	 ВЫХОД
   4322				     ;		Выполняется сброс контроллера для	       +
   4323				     установки	новой страницы.
   4324				     ;
   4325				     ;-----------------------------
   4326	F230			     act_disp_page proc	     near
   4327	F230  A2 0062r			     mov     active_page,al  ; сохранить значение	       +
   4328				     активной страницы
   4329	F233  8B 0E 004Cr		     mov     cx,crt_len	     ; получить	длину области      +
   4330				     буфера
   4331	F237  98			     cbw		     ; преобразовать AL
   4332	F238  50			     push    ax		     ; сохранить значение	       +
   4333				     страницы
   4334	F239  F7 E1			     mul     cx
   4335	F23B  A3 004Er			     mov     crt_start,ax    ; сохранить начальный адрес
   4336								     ; для следующего требования
   4337	F23E  8B C8			     mov     cx,ax	     ; переслать начальный адрес+
   4338				     в	CX
   4339	F240  D1 F9			     sar     cx,1	     ; делить на 2
   4340	F242  B4 0C			     mov     ah,12
   4341	F244  E8 FF93			     call    m16
   4342	F247  5B			     pop     bx		     ; восстановить	значение       +
   4343				     страницы
   4344	F248  D1 E3			     sal     bx,1
   4345	F24A  8B 87 0050r		     mov ax,word ptr [bx+offset	cursor_posn]   ; получить курсор
   4346	F24E  E8 FFB8			     call    m18	     ; установить позицию	       +
   4347				     курсора
   4348	F251  E9 FF73			     jmp     video_return
   4349	F254			     act_disp_page   endp
   4350				     ;------------------------------
   4351				     ; set color
   4352				     ;
   4353				     ;	 Эта	программа устанавливает цветовую	       +
   4354				     палитру.
   4355				     ;
   4356				     ;	 ВХОД
   4357				     ;		BH=0
   4358				     ;		     BL	- значение пяти младших бит,	       +
   4359				     используемых для выбора
   4360				     ;			  цветовой палитры (цвет заднего     +
   4361				     плана	для цветной
   4362				     ;			  графики 320х200 или цвет каймы для    +
   4363				     цветного 40х25)
   4364				     ;		BH=1
   4365				     ;		     BL	- номер цветовой палитры
   4366				     ;			  BL=0 - зеленый(1), красный(2), желтый(3),
   4367				     ;			  BL=1 - голубой(1), фиолетовый(2), белый+
   4368				     (3)
   4369				     ;
   4370				     ;	 ВЫХОД
   4371				     ;		Установленная цветовая палитра в	       +
   4372				     порту	3D9.
   4373				     ;------------------------------
   4374	F254			     set_color proc  near
   4375	F254  8B 16 0063r		     mov     dx,addr_6845    ; порт	для палитры
   4376	F258  83 C2 05			     add     dx,5	     ; установить порт
   4377	F25B  A0 0066r			     mov     al,crt_pallette   ; получить текущее	       +
   4378				     значение палитры
   4379	F25E  0A FF			     or	     bh,bh	     ; цвет	0 ?
   4380	F260  75 0E			     jnz     m20	     ; вывод цвета 1
   4381
   4382				     ;	 Обработка цветовой палитры 0
   4383
   4384	F262  24 E0			     and     al,0e0h	     ; сбросить	5 младших бит
   4385	F264  80 E3 1F			     and     bl,01fh	     ; сбросить	3 старших бита
   4386	F267  0A C3			     or	     al,bl
   4387	F269			     m19:
   4388	F269  EE			     out     dx,al	      ;	вывод выбранного	цвета в  +
   4389				     порт 3D9
   4390	F26A  A2 0066r			     mov     crt_pallette,al  ;	сохранить значение цвета
   4391	F26D  E9 FF57			     jmp     video_return
   4392
   4393				     ;	 Обработка цветовой палитры 1
   4394
   4395	F270			     m20:
   4396	F270  24 DF			     and     al,0dfh	     ;
   4397	F272  D0 EB			     shr     bl,1	     ; проверить младший бит	BL
   4398	F274  73 F3			     jnc     m19
   4399	F276  0C 20			     or	     al,20h	     ;
   4400	F278  EB EF			     jmp     short m19	     ; переход
   4401	F27A			     set_color	     endp
   4402				     ;--------------------------
   4403				     ; video state
   4404				     ;
   4405				     ;	 Эта	программа получает текущее состояние  +
   4406				     ЭЛИ в AX.
   4407				     ;
   4408				     ;		AH - количество колонок,
   4409				     ;		AL - текущий режим,
   4410				     ;		BH - номер	активной страницы.
   4411				     ;
   4412				     ;---------------------------
   4413	F27A			     video_state proc	     near
   4414	F27A  8A 26 004Ar		     mov     ah,byte ptr crt_cols   ; получить количество    +
   4415				     колонок
   4416	F27E  A0 0049r			     mov     al,crt_mode	     ; текущий режим
   4417	F281  8A 3E 0062r		     mov     bh,active_page  ; получить	текущую активную+
   4418				     страницу
   4419	F285  5F			     pop     di		     ; восстановить	регистры
   4420	F286  5E			     pop     si
   4421	F287  59			     pop     cx
   4422	F288  E9 FF3F			     jmp     m15	     ; возврат к программе
   4423	F28B			     video_state     endp
   4424				     ;---------------------------
   4425				     ; position
   4426				     ;
   4427				     ;	 Эта	программа вычисляет адрес буфера	       +
   4428				     символа в режиме альфа.
   4429				     ;
   4430				     ;	 ВХОД
   4431				     ;		AX - номер	строки, номер колонки,
   4432				     ;
   4433				     ;	 ВЫХОД
   4434				     ;		AX - смещение символа с	координатами (AH,  +
   4435				     AL) относительно
   4436				     ;		     начала страницы. Смещение		       +
   4437				     измеряется в байтах.
   4438				     ;
   4439				     ;----------------------------
   4440	F28B			     position proc   near
   4441	F28B  53			     push    bx		     ; сохранить регистр
   4442	F28C  8B D8			     mov     bx,ax
   4443	F28E  8A C4			     mov     al,ah	     ; строки в AL
   4444	F290  F6 26 004Ar		     mul     byte ptr crt_cols
   4445	F294  32 FF			     xor     bh,bh
   4446	F296  03 C3			     add     ax,bx	     ; добавить	к значению	       +
   4447				     колонки
   4448	F298  D1 E0			     sal     ax,1	     ; * 2 для байтов атрибута
   4449	F29A  5B			     pop     bx
   4450	F29B  C3			     ret
   4451	F29C			     position	     endp
   4452				     ;-------------------------------
   4453				     ;scroll up
   4454				     ;
   4455				     ;	 Эта	программа перемещает	блок символов      +
   4456				     вверх	по экрану.
   4457				     ;
   4458				     ;	 ВХОД
   4459				     ;		AH - текуший режим,
   4460				     ;		AL - количество перемещаемых строк
   4461				     ;		CX - координаты левого верхнего	угла       +
   4462				     блока
   4463				     ;		     (строка, колонка),
   4464				     ;		DX - координаты правого нижнего	угла
   4465				     ;		BH - атрибут символа пробела (для	       +
   4466				     опробеливания	освобожда-
   4467				     ;		     емых строк),
   4468				     ;
   4469				     ;	 ВЫХОД
   4470				     ;		Модифицированный буфер дисплея.
   4471				     ;
   4472				     ;-----------------------------------
   4473					     assume cs:code,ds:data,es:data
   4474	F29C			     scroll_up proc  near
   4475	F29C  8A D8			     mov     bl,al	 ; сохранить количество	       +
   4476				     перемещаемых строк
   4477	F29E  80 FC 04			     cmp     ah,4	     ; проверка	графического       +
   4478				     режима
   4479	F2A1  72 08			     jc	     n1
   4480	F2A3  80 FC 07			     cmp     ah,7	     ; проверка	ч/б адаптера
   4481	F2A6  74 03			     je	     n1
   4482	F2A8  E9 01F3			     jmp     graphics_up
   4483	F2AB			     n1:
   4484	F2AB  53			     push    bx		     ; сохранить полный атрибут  +
   4485				     в	BH
   4486	F2AC  8B C1			     mov     ax,cx	     ; координаты левого	       +
   4487				     верхнего угла
   4488	F2AE  E8 0039			     call    scroll_position
   4489	F2B1  74 33			     jz	     n7
   4490	F2B3  03 F0			     add     si,ax
   4491	F2B5  8A E6			     mov     ah,dh	     ; строка
   4492	F2B7  2A E3			     sub     ah,bl
   4493	F2B9			     n2:
   4494	F2B9  E8 0075			     call    n10	     ; сдвинуть	одну строку
   4495	F2BC  03 F5			     add     si,bp
   4496	F2BE  03 FD			     add     di,bp	     ; указать на следующую	       +
   4497				     строку в блоке
   4498	F2C0  FE CC			     dec     ah		     ; счетчик строк для	сдвига
   4499	F2C2  75 F5			     jnz     n2		     ; цикл	строки
   4500	F2C4			     n3:			     ; очистка входа
   4501	F2C4  58			     pop     ax		     ; восстановить	атрибут в AH
   4502	F2C5  B0 20			     mov     al,' '	     ; заполнить пробелами
   4503	F2C7			     n4:			     ; очистка счетчика
   4504	F2C7  E8 0070			     call    n11	     ; очистка строки
   4505	F2CA  03 FD			     add     di,bp	     ; указать следующую строку
   4506	F2CC  FE CB			     dec     bl		     ; счетчик строк для	сдвига
   4507	F2CE  75 F7			     jnz     n4		     ; очистка счетчика
   4508	F2D0			     n5:			     ; конец сдвига
   4509	F2D0  B8 0040			     mov     ax,dat
   4510	F2D3  8E D8			     mov     ds,ax
   4511	F2D5  80 3E 0049r 07		     cmp     crt_mode,7	     ; ч/б адаптер ?
   4512	F2DA  74 07			     je	     n6		     ; если	да - пропуск режима     +
   4513				     сброса
   4514	F2DC  A0 0065r			     mov     al,crt_mode_set
   4515	F2DF  BA 03D8			     mov     dx,03d8h	     ; установить порт цветного  +
   4516				     адаптера
   4517	F2E2  EE			     out     dx,al
   4518	F2E3			     n6:
   4519	F2E3  E9 FEE1			     jmp     video_return
   4520	F2E6			     n7:
   4521	F2E6  8A DE			     mov     bl,dh
   4522	F2E8  EB DA			     jmp     short n3	     ; очистить
   4523	F2EA			     scroll_up	     endp
   4524
   4525				     ;	 Обработка сдвига
   4526
   4527	F2EA			     scroll_position proc    near
   4528	F2EA  80 3E 0049r 02		     cmp     crt_mode,2
   4529	F2EF  72 19			     jb	     n9		     ; обработать 80х25 отдельно
   4530	F2F1  80 3E 0049r 03		     cmp     crt_mode,3
   4531	F2F6  77 12			     ja	     n9
   4532
   4533				     ;	 Сдиг для цветного адаптера в режиме 80х25
   4534
   4535	F2F8  52			     push    dx
   4536	F2F9  BA 03DA			     mov     dx,3dah	     ; обработка цветного	       +
   4537				     адаптера
   4538	F2FC  50			     push    ax
   4539	F2FD			     n8:			     ; ожидание	доступности	       +
   4540				     дисплея
   4541	F2FD  EC			     in	     al,dx
   4542	F2FE  A8 08			     test    al,8
   4543	F300  74 FB			     jz	     n8		     ; ожидание	доступности	       +
   4544				     дисплея
   4545	F302  B0 25			     mov     al,25h
   4546	F304  BA 03D8			     mov     dx,03d8h
   4547	F307  EE			     out     dx,al	     ; выключить ЭЛИ
   4548	F308  58			     pop     ax
   4549	F309  5A			     pop     dx
   4550	F30A  E8 FF7E		     n9:     call    position
   4551	F30D  03 06 004Er		     add     ax,crt_start    ; смещение	активной	       +
   4552				     страницы
   4553	F311  8B F8			     mov     di,ax	     ; для адреса сдвига
   4554	F313  8B F0			     mov     si,ax
   4555	F315  2B D1			     sub     dx,cx	     ; DX=строка
   4556	F317  FE C6			     inc     dh
   4557	F319  FE C2			     inc     dl		     ; прибавление к началу
   4558	F31B  32 ED			     xor     ch,ch	     ; установить старший байт    +
   4559				     счетчика в 0
   4560	F31D  8B 2E 004Ar		     mov     bp,crt_cols     ; получить	число колонок      +
   4561				     дисплея
   4562	F321  03 ED			     add     bp,bp	     ; увеличить на 2 байт	       +
   4563				     атрибута
   4564	F323  8A C3			     mov     al,bl	     ; получить	счетчик строки
   4565	F325  F6 26 004Ar		     mul     byte ptr crt_cols	 ; определить	смещение из  +
   4566				     адреса,
   4567	F329  03 C0			     add     ax,ax     ; умноженного	на 2,	для байта      +
   4568				     атрибута
   4569	F32B  06			     push    es	     ; установить адресацию для	       +
   4570				     области буфера
   4571	F32C  1F			     pop     ds
   4572	F32D  80 FB 00			     cmp     bl,0	     ; 0 означает очистку блока
   4573	F330  C3			     ret		     ; возврат с установкой	       +
   4574				     флажков
   4575	F331			     scroll_position endp
   4576
   4577				     ;	 Перемещение	строки
   4578
   4579	F331			     n10     proc    near
   4580	F331  8A CA			     mov     cl,dl	     ; получить	колонки для	       +
   4581				     передачи
   4582	F333  56			     push    si
   4583	F334  57			     push    di		     ; сохранить начальный адрес
   4584	F335  F3> A5			     rep     movsw	     ; передать	эту строку на       +
   4585				     экран
   4586	F337  5F			     pop     di
   4587	F338  5E			     pop     si		     ; восстановить	адресацию
   4588	F339  C3			     ret
   4589	F33A			     n10     endp
   4590
   4591				     ;	 очистка	строки
   4592
   4593	F33A			     n11     proc    near
   4594	F33A  8A CA			     mov     cl,dl	     ; получить	колонки для	       +
   4595				     очистки
   4596	F33C  57			     push    di
   4597	F33D  F3> AB			     rep     stosw	     ; запомнить полный знак
   4598	F33F  5F			     pop     di
   4599	F340  C3			     ret
   4600	F341			     n11     endp
   4601				     ;------------------------
   4602				     ; scroll_down
   4603				     ;
   4604				     ;	 Эта	программа перемещает	блок символов      +
   4605				     вниз по
   4606				     ; экрану, заполняя верхние строки пробелом с  +
   4607				     заданным атрибутом
   4608				     ;
   4609				     ;	 ВХОД
   4610				     ;		AH - текущий режим,
   4611				     ;		AL - количество строк,
   4612				     ;		CX - верхний левый угол	блока,
   4613				     ;		DX - правый нижний угол	блока,
   4614				     ;		BH - атрибут символа-заполнителя	       +
   4615				     (пробела),
   4616				     ;
   4617				     ;-------------------------
   4618	F341			     scroll_down proc near
   4619	F341  FD			     std		     ; уст направление сдвига      +
   4620				     вниз
   4621	F342  8A D8			     mov     bl,al	     ; количество строк в BL
   4622	F344  80 FC 04			     cmp     ah,4	     ; проверка	графики
   4623	F347  72 08			     jc	     n12
   4624	F349  80 FC 07			     cmp     ah,7	     ; проверка	ч/б адаптера
   4625	F34C  74 03			     je	     n12
   4626	F34E  E9 01A6			     jmp     graphics_down
   4627	F351			     n12:
   4628	F351  53			     push    bx		     ; сохранить атрибут в BH
   4629	F352  8B C2			     mov     ax,dx	     ; нижний правый угол
   4630	F354  E8 FF93			     call    scroll_position
   4631	F357  74 20			     jz	     n16
   4632	F359  2B F0			     sub     si,ax	     ; SI для адресации
   4633	F35B  8A E6			     mov     ah,dh
   4634	F35D  2A E3			     sub     ah,bl	     ; передать	количество строк
   4635	F35F			     n13:
   4636	F35F  E8 FFCF			     call    n10	     ; передать	одну строку
   4637	F362  2B F5			     sub     si,bp
   4638	F364  2B FD			     sub     di,bp
   4639	F366  FE CC			     dec     ah
   4640	F368  75 F5			     jnz     n13
   4641	F36A			     n14:
   4642	F36A  58			     pop     ax		     ; восстановить	атрибут в AH
   4643	F36B  B0 20			     mov     al,' '
   4644	F36D			     n15:
   4645	F36D  E8 FFCA			     call    n11	     ; очистка одной строки
   4646	F370  2B FD			     sub     di,bp	     ; перейти к следующей строке
   4647	F372  FE CB			     dec     bl
   4648	F374  75 F7			     jnz     n15
   4649	F376  E9 FF57			     jmp     n5		     ; конец сдвига
   4650	F379			     n16:
   4651	F379  8A DE			     mov     bl,dh
   4652	F37B  EB ED			     jmp     short n14
   4653	F37D			     scroll_down  endp
   4654				     ;--------------------
   4655				     ; read_ac_current
   4656				     ;
   4657				     ;	 Эта	программа считывает атрибут и	код	       +
   4658				     символа, находящегося в теку-
   4659				     ; щем положении курсора
   4660				     ;
   4661				     ;	 ВХОД
   4662				     ;		AH - текущий режим,
   4663				     ;		BH - номер	страницы (только для режима     +
   4664				     альфа),
   4665				     ;
   4666				     ;	 ВЫХОД
   4667				     ;		AL - код символа,
   4668				     ;		AH - атрибут символа.
   4669				     ;
   4670				     ;---------------------
   4671					     assume cs:code,ds:data,es:data
   4672	F37D			     read_ac_current proc near
   4673	F37D  80 FC 04			     cmp     ah,4	     ; это графика ?
   4674	F380  72 08			     jc	     p1
   4675	F382  80 FC 07			     cmp     ah,7	     ; ч/б адаптер ?
   4676	F385  74 03			     je	     p1
   4677	F387  E9 02A9			     jmp     graphics_read
   4678	F38A			     p1:			     ;
   4679	F38A  E8 001A			     call    find_position
   4680	F38D  8B F3			     mov     si,bx	     ; установить адресацию в SI
   4681
   4682
   4683	F38F  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес
   4684	F393  83 C2 06			     add     dx,6	     ; порт	состояния
   4685	F396  06			     push    es
   4686	F397  1F			     pop     ds		     ; получить	сегмент
   4687	F398			     p2:
   4688	F398  EC			     in	     al,dx	     ; получить	состояние
   4689	F399  A8 01			     test    al,1
   4690	F39B  75 FB			     jnz     p2		     ; ожидание
   4691	F39D  FA			     cli		; сброс признака разрешения     +
   4692				     прерывания
   4693	F39E			     p3:
   4694	F39E  EC			     in	     al,dx	     ; получить	состояние
   4695	F39F  A8 01			     test    al,1
   4696	F3A1  74 FB			     jz	     p3		     ; ожидание
   4697	F3A3  AD			     lodsw		     ; получить	символ/атрибут
   4698	F3A4  E9 FE20			     jmp     video_return
   4699	F3A7			     read_ac_current endp
   4700
   4701	F3A7			     find_position proc	near
   4702	F3A7  8A CF			     mov     cl,bh	     ; поместить страницу в CX
   4703	F3A9  32 ED			     xor     ch,ch
   4704	F3AB  8B F1			     mov     si,cx	     ; передать	в SI индекс,	       +
   4705				     умноженный на 2
   4706	F3AD  D1 E6			     sal     si,1	     ; для слова смещения
   4707	F3AF  8B 84 0050r		     mov ax,word ptr [si+offset	cursor_posn]   ; получить	       +
   4708				     строку/ко-
   4709								     ; лонку этой страницы
   4710	F3B3  33 DB			     xor     bx,bx	     ; установить начальный	       +
   4711				     адрес	в 0
   4712	F3B5  E3 06			     jcxz    p5
   4713	F3B7			     p4:
   4714	F3B7  03 1E 004Cr		     add     bx,crt_len	     ; длина буфера
   4715	F3BB  E2 FA			     loop    p4
   4716	F3BD			     p5:
   4717	F3BD  E8 FECB			     call    position
   4718	F3C0  03 D8			     add     bx,ax
   4719	F3C2  C3			     ret
   4720	F3C3			     find_position   endp
   4721				     ;---------------------
   4722				     ;write_ac_current
   4723				     ;
   4724				     ;	 Эта	программа записывает	атрибут и код       +
   4725				     символа в текущую позицию
   4726				     ; курсора
   4727				     ;
   4728				     ;	 ВХОД
   4729				     ;		AH - текущий режим,
   4730				     ;		BH - номер	страницы,
   4731				     ;		CX - счетчик (количество повторений	       +
   4732				     символов),
   4733				     ;		AL - код символа,
   4734				     ;		BL - атрибут символа (для режимов альфа)  +
   4735				     или цвет символа
   4736				     ;		     для графики.
   4737				     ;
   4738				     ;----------------------
   4739	F3C3			     write_ac_current proc near
   4740	F3C3  80 FC 04			     cmp     ah,4	     ; это графика ?
   4741	F3C6  72 08			     jc	     p6
   4742	F3C8  80 FC 07			     cmp     ah,7	     ; это ч/б адаптер ?
   4743	F3CB  74 03			     je	     p6
   4744	F3CD  E9 01B1			     jmp     graphics_write
   4745	F3D0			     p6:
   4746	F3D0  8A E3			     mov     ah,bl	     ; получить	атрибут в AH
   4747	F3D2  50			     push    ax		     ; хранить
   4748	F3D3  51			     push    cx		     ; хранить счетчик
   4749	F3D4  E8 FFD0			     call    find_position
   4750	F3D7  8B FB			     mov     di,bx	     ; адрес в DI
   4751	F3D9  59			     pop     cx		     ; вернуть счетчик
   4752	F3DA  5B			     pop     bx		     ; и символ
   4753	F3DB			     p7:			     ; цикл	записи
   4754
   4755
   4756	F3DB  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес
   4757	F3DF  83 C2 06			     add     dx,6	     ; указать порт состояния
   4758	F3E2			     p8:
   4759	F3E2  EC			     in	     al,dx	     ; получить	состояние
   4760	F3E3  A8 01			     test    al,1
   4761	F3E5  75 FB			     jnz     p8		     ; ожидать
   4762	F3E7  FA			     cli		  ; сброс признака	разрешения   +
   4763				     прерывания
   4764	F3E8			     p9:
   4765	F3E8  EC			     in	     al,dx	     ; получить	состояние
   4766	F3E9  A8 01			     test    al,1
   4767	F3EB  74 FB			     jz	     p9		     ; ожидать
   4768	F3ED  8B C3			     mov     ax,bx
   4769	F3EF  AB			     stosw		     ; записать	символ и	атрибут
   4770	F3F0  FB			     sti		     ; уст признак разрешения      +
   4771				     прерывания
   4772	F3F1  E2 E8			     loop    p7
   4773	F3F3  E9 FDD1			     jmp     video_return
   4774	F3F6			     write_ac_current  endp
   4775				     ;---------------------
   4776				     ;write_c_current
   4777				     ;
   4778				     ;	 Эта	программа записывает	символ в	текущую +
   4779				     позицию курсора.
   4780				     ;
   4781				     ;	 ВХОД
   4782				     ;		BH - номер	страницы (только для альфа       +
   4783				     режимов),
   4784				     ;		CX - счетчик (количество повторений	       +
   4785				     символа),
   4786				     ;		AL - код символа,
   4787				     ;
   4788				     ;-----------------------
   4789	F3F6			     write_c_current proc near
   4790	F3F6  80 FC 04			     cmp     ah,4	     ; это графика ?
   4791	F3F9  72 08			     jc	     p10
   4792	F3FB  80 FC 07			     cmp     ah,7	     ; это ч/б адаптер ?
   4793	F3FE  74 03			     je	     p10
   4794	F400  E9 017E			     jmp     graphics_write
   4795	F403			     p10:
   4796	F403  50			     push    ax		     ; сохранить в стеке
   4797	F404  51			     push    cx		     ; сохранить количество	       +
   4798				     повторений
   4799	F405  E8 FF9F			     call    find_position
   4800	F408  8B FB			     mov     di,bx	     ; адрес в DI
   4801	F40A  59			     pop     cx		     ; вернуть количество	       +
   4802				     повторений
   4803	F40B  5B			     pop     bx		     ; BL - код символа
   4804	F40C			     p11:
   4805
   4806
   4807	F40C  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес
   4808	F410  83 C2 06			     add     dx,6	     ; указать порт состояния
   4809	F413			     p12:
   4810	F413  EC			     in	     al,dx	     ; получить	состояние
   4811	F414  A8 01			     test    al,1
   4812	F416  75 FB			     jnz     p12	     ; ожидать
   4813	F418  FA			     cli		     ; сброс признака разрешения+
   4814				     прерывания
   4815	F419			     p13:
   4816	F419  EC			     in	     al,dx	     ; получить	состояние
   4817	F41A  A8 01			     test    al,1
   4818	F41C  74 FB			     jz	     p13	     ; ожидание
   4819	F41E  8A C3			     mov     al,bl	     ; восстановить	символ
   4820	F420  AA			     stosb		     ; записать	символ
   4821	F421  47			     inc     di
   4822	F422  E2 E8			     loop    p11	     ; цикл
   4823	F424  E9 FDA0			     jmp     video_return
   4824	F427			     write_c_current endp
   4825				     ;---------------------
   4826				     ; read dot	- write	dot
   4827				     ;
   4828				     ;	 Эта	программа считывает/записывает точку.
   4829				     ;
   4830				     ;	 ВХОД
   4831				     ;		DX - строка (0-199),
   4832				     ;		CX - колонка (0-639),
   4833				     ;		AL - цвет выводимой точки.
   4834				     ;		     Если бит 7=1, то выполняется операция
   4835				     ;		     XOR над	значением точки из буфера	       +
   4836				     дисплея и значением
   4837				     ;		     точки	из регистра AL (при записи	       +
   4838				     точки).
   4839				     ;
   4840				     ;	 ВЫХОД
   4841				     ;		AL - значение считанной точки
   4842				     ;
   4843				     ;----------------------
   4844					     assume cs:code,ds:data,es:data
   4845	F427			     read_dot proc   near
   4846	F427  E8 0031			     call    r3		     ; определить положение	       +
   4847				     точки
   4848	F42A  26: 8A 04			     mov     al,es:[si]	     ; получить	байт
   4849	F42D  22 C4			     and     al,ah	     ; размаскировать другие       +
   4850				     биты в байте
   4851	F42F  D2 E0			     shl     al,cl	     ;
   4852	F431  8A CE			     mov     cl,dh	     ; получить	число бит	       +
   4853				     результата
   4854	F433  D2 C0			     rol     al,cl
   4855	F435  E9 FD8F			     jmp     video_return    ; выход из прерывания
   4856	F438			     read_dot	     endp
   4857
   4858	F438			     write_dot proc  near
   4859	F438  50			     push    ax		     ; сохранить значение точки
   4860	F439  50			     push    ax		     ; еще раз
   4861	F43A  E8 001E			     call    r3		     ; определить положение	       +
   4862				     точки
   4863	F43D  D2 E8			     shr     al,cl	     ; сдвиг для установки бит     +
   4864				     при выводе
   4865	F43F  22 C4			     and     al,ah	     ; сбросить	другие биты
   4866	F441  26: 8A 0C			     mov     cl,es:[si]	     ; получить	текущий байт
   4867	F444  5B			     pop     bx
   4868	F445  F6 C3 80			     test    bl,80h
   4869	F448  75 0D			     jnz     r2
   4870	F44A  F6 D4			     not     ah	       ; установить маску для		       +
   4871				     передачи указанных бит
   4872	F44C  22 CC			     and     cl,ah
   4873	F44E  0A C1			     or	     al,cl
   4874	F450			     r1:
   4875	F450  26: 88 04			     mov es:[si],al	     ; восстановить	байт в памяти
   4876	F453  58			     pop     ax
   4877	F454  E9 FD70			     jmp     video_return    ; к выходу из программы
   4878	F457			     r2:
   4879	F457  32 C1			     xor     al,cl	     ; исключающее ИЛИ над	       +
   4880				     значениями точки
   4881	F459  EB F5			     jmp     short r1	     ; конец записи
   4882	F45B			     write_dot	     endp
   4883
   4884				     ;-------------------------------------
   4885				     ;
   4886				     ;	 Эта	программа определяет	относительный     +
   4887				     адрес	байта (внутри буфера
   4888				     ; дисплея),	из которого должна быть		       +
   4889				     считана/записана точка,с заданными
   4890				     ; координатами.
   4891				     ;
   4892				     ;	 ВХОД
   4893				     ;		DX - строка (0-199),
   4894				     ;		CX - колонка (0-639).
   4895				     ;
   4896				     ;	 ВЫХОД
   4897				     ;		SI - относительный	адрес байта,		       +
   4898				     содержащего точку внутри
   4899				     ;		     буфера дисплея,
   4900				     ;		AH - маска	для выделения значения	       +
   4901				     заданной точки внутри байта
   4902				     ;		CL - константа	сдвига маски	в AH в крайнюю+
   4903				     левую	позицию,
   4904				     ;		DH - число	бит,	определяющих значение      +
   4905				     точки.
   4906				     ;
   4907				     ;--------------------------------------
   4908
   4909	F45B			     r3	     proc    near
   4910	F45B  53			     push    bx		     ; сохранить BX
   4911	F45C  50			     push    ax		     ; сохранить AL
   4912
   4913				     ;	 Вычисление первого байта	указанной строки+
   4914				     умножением на 40.
   4915				     ; Наименьший бит строки	определяет		       +
   4916				     четно/нечетную 80-байтовую строку.
   4917
   4918	F45D  B0 28			     mov     al,40
   4919	F45F  52			     push    dx		     ; сохранить значение строки
   4920	F460  80 E2 FE			     and     dl,0feh	     ; сброс четно/нечетного	бита
   4921	F463  F6 E2			     mul     dl	  ; AX содержит	адрес первого байта   +
   4922				     указанной	строки
   4923	F465  5A			     pop     dx		     ; восстановить	его
   4924	F466  F6 C2 01			     test    dl,1	     ; проверить			       +
   4925				     четность/нечетность
   4926	F469  74 03			     jz	     r4		     ; переход,если строка четная
   4927	F46B  05 2000			     add     ax,2000h	     ; смещение	для нахождения    +
   4928				     нечетных строк
   4929	F46E			     r4:			     ; четная строка
   4930	F46E  8B F0			     mov     si,ax	     ; передать	указатель в SI
   4931	F470  58			     pop     ax		     ; восстановить	значение AL
   4932	F471  8B D1			     mov     dx,cx	     ; значение	колонки в DX
   4933
   4934				     ;	 Определение	действительных графических    +
   4935				     режимов
   4936				     ;
   4937				     ;	 Установка регистров согласно	режимaм
   4938				     ;
   4939				     ;	       BH - количество бит, определяющее точку,
   4940				     ;	       BL - константа выделения точки из левых   +
   4941				     бит байта,
   4942				     ;	       CH - константа для выделения из номера     +
   4943				     колонки номера позиции
   4944				     ;		    первого бита, определяющего	точку в  +
   4945				     байте, т.е.	получение
   4946				     ;		    остатка от	деления номера на 8 (для     +
   4947				     режима 640х200) или
   4948				     ;		    номера на 4	(для	режима 320х200),
   4949				     ;	       CL - константа сдвига (для выполнения       +
   4950				     деления на 8 или на 4).
   4951
   4952	F473  BB 02C0			     mov     bx,2c0h
   4953	F476  B9 0302			     mov     cx,302h	     ; установка параметров
   4954	F479  80 3E 0049r 06		     cmp     crt_mode,6
   4955	F47E  72 06			     jc	     r5		     ;
   4956	F480  BB 0180			     mov     bx,180h
   4957	F483  B9 0703			     mov     cx,703h	     ; уст параметры для		       +
   4958				     старшего регистра
   4959
   4960				     ;	 Определение	бита смещения в байте	по маске
   4961	F486			     r5:
   4962	F486  22 EA			     and     ch,dl	     ;
   4963
   4964				     ;	 Определение	байта смещения в колонке
   4965
   4966	F488  D3 EA			     shr     dx,cl	     ; сдвиг для коррекции
   4967	F48A  03 F2			     add     si,dx	     ; получить	указатель
   4968	F48C  8A F7			     mov     dh,bh   ; получить	указатель битов	       +
   4969				     результата в DH
   4970
   4971				     ;	 Умножение BH (количество бит в байте) на	CH     +
   4972				     (бит смещения)
   4973
   4974	F48E  2A C9			     sub     cl,cl
   4975	F490			     r6:
   4976	F490  D0 C8			     ror     al,1    ; левое крайнее значение в AL	для +
   4977				     записи
   4978	F492  02 CD			     add     cl,ch	     ; прибавить значение бита    +
   4979				     смещения
   4980	F494  FE CF			     dec     bh		     ; счетчик контроля
   4981	F496  75 F8			     jnz     r6	     ; на выходе CL содержит счетчик    +
   4982				     сдвига для
   4983								     ; восстановления
   4984	F498  8A E3			     mov     ah,bl	     ; получить	маску в AH
   4985	F49A  D2 EC			     shr     ah,cl	     ; передать	маску в ячейку
   4986	F49C  5B			     pop     bx		     ; восстановить	регистр
   4987	F49D  C3			     ret		     ; возврат с восстановлением
   4988	F49E			     r3	     endp
   4989
   4990				     ;----------------------------------------
   4991				     ;
   4992				     ;
   4993				     ;	  Программа перемещает блок символов вверх +
   4994				     в	режиме графики
   4995				     ;
   4996				     ;-----------------------------------------
   4997
   4998	F49E			     graphics_up proc near
   4999	F49E  8A D8			     mov     bl,al	     ; сохранить количество	       +
   5000				     символов
   5001	F4A0  8B C1			     mov     ax,cx	     ; получить	верхний левый      +
   5002				     угол в AX
   5003
   5004
   5005	F4A2  E8 026A			     call    graph_posn
   5006	F4A5  8B F8			     mov     di,ax	     ; сохранить результат
   5007
   5008				     ;	 Определить размеры блока
   5009
   5010	F4A7  2B D1			     sub     dx,cx
   5011	F4A9  81 C2 0101		     add     dx,101h
   5012	F4AD  D0 E6			     sal     dh,1
   5013	F4AF  D0 E6			     sal     dh,1
   5014
   5015	F4B1  80 3E 0049r 06		     cmp     crt_mode,6
   5016	F4B6  73 04			     jnc     r7
   5017
   5018	F4B8  D0 E2			     sal     dl,1
   5019	F4BA  D1 E7			     sal     di,1	     ;
   5020
   5021				     ;	 Определение	адреса источника	в буфере
   5022	F4BC			     r7:
   5023	F4BC  06			     push    es
   5024	F4BD  1F			     pop     ds
   5025	F4BE  2A ED			     sub     ch,ch	     ; обнулить	старший байт	       +
   5026				     счетчика
   5027	F4C0  D0 E3			     sal     bl,1	     ; умножение числа строк	на 4
   5028	F4C2  D0 E3			     sal     bl,1
   5029	F4C4  74 2D			     jz	     r11	     ; если	0, занести пробелы
   5030	F4C6  8A C3			     mov     al,bl	     ; получить	число строк в AL
   5031	F4C8  B4 50			     mov     ah,80	     ; 80 байт/строк
   5032	F4CA  F6 E4			     mul     ah		     ; определить смещение	       +
   5033				     источника
   5034	F4CC  8B F7			     mov     si,di	     ; установить источник
   5035	F4CE  03 F0			     add     si,ax	     ; сложить источник с ним
   5036	F4D0  8A E6			     mov     ah,dh	     ; количество строк
   5037	F4D2  2A E3			     sub     ah,bl	     ; определить число		       +
   5038				     перемещений
   5039
   5040	F4D4			     r8:
   5041	F4D4  E8 0080			     call    r17	     ; перемещение одной строки
   5042	F4D7  81 EE 1FB0		     sub     si,2000h-80     ; перемещение в следующую    +
   5043				     строку
   5044	F4DB  81 EF 1FB0		     sub     di,2000h-80
   5045	F4DF  FE CC			     dec     ah		     ; количество строк для	       +
   5046				     перемещения
   5047	F4E1  75 F1			     jnz     r8	     ; продолжать, пока все строки не +
   5048				     переместятся
   5049
   5050				     ;	 Заполнение освобожденных строк
   5051	F4E3			     r9:
   5052	F4E3  8A C7			     mov     al,bh
   5053	F4E5			     r10:
   5054	F4E5  E8 0088			     call    r18	     ; очистить	эту строку
   5055	F4E8  81 EF 1FB0		     sub     di,2000h-80     ; указать на следующую
   5056	F4EC  FE CB			     dec     bl		     ; количество строк для	       +
   5057				     заполнения
   5058	F4EE  75 F5			     jnz     r10	     ; цикл	очистки
   5059	F4F0  E9 FCD4			     jmp     video_return    ; к выходу из программы
   5060
   5061	F4F3			     r11:
   5062	F4F3  8A DE			     mov     bl,dh	     ; установить количество       +
   5063				     пробелов
   5064	F4F5  EB EC			     jmp     short r9	     ; очистить
   5065	F4F7			     graphics_up     endp
   5066
   5067				     ;---------------------------------
   5068				     ;
   5069				     ;	 Программа перемещает блок символов вниз в +
   5070				     режиме графики
   5071				     ;
   5072				     ;----------------------------------
   5073
   5074	F4F7			     graphics_down proc	     near
   5075	F4F7  FD			     std		     ; установить направление
   5076	F4F8  8A D8			     mov     bl,al	     ; сохранить количество	       +
   5077				     строк
   5078	F4FA  8B C2			     mov     ax,dx	     ; получить	нижнюю правую      +
   5079				     позицию в AX
   5080
   5081
   5082	F4FC  E8 0210			     call    graph_posn
   5083	F4FF  8B F8			     mov     di,ax	     ; сохранить результат
   5084
   5085				     ;	 Определение	размера блока
   5086
   5087	F501  2B D1			     sub     dx,cx
   5088	F503  81 C2 0101		     add     dx,101h
   5089	F507  D0 E6			     sal     dh,1
   5090	F509  D0 E6			     sal     dh,1
   5091
   5092
   5093	F50B  80 3E 0049r 06		     cmp     crt_mode,6
   5094	F510  73 05			     jnc     r12
   5095
   5096	F512  D0 E2			     sal     dl,1
   5097	F514  D1 E7			     sal     di,1
   5098	F516  47			     inc     di
   5099
   5100				     ;	 Определение	адреса источника	в буфере
   5101	F517			     r12:
   5102	F517  06			     push    es
   5103	F518  1F			     pop     ds
   5104	F519  2A ED			     sub     ch,ch	     ; обнулить	старший байт	       +
   5105				     счетчика
   5106	F51B  81 C7 00F0		     add     di,240	     ; указать последнюю строку
   5107	F51F  D0 E3			     sal     bl,1	     ; умножить	количество строк+
   5108				     на 4
   5109	F521  D0 E3			     sal     bl,1
   5110	F523  74 2E			     jz	     r16	     ; если	0, заполнить пробелом
   5111	F525  8A C3			     mov     al,bl	     ; получить	количество строк+
   5112				     в	AL
   5113	F527  B4 50			     mov     ah,80	     ; 80 байт/строк
   5114	F529  F6 E4			     mul     ah		     ; определить смещение	       +
   5115				     источника
   5116	F52B  8B F7			     mov     si,di	     ; установить источник
   5117	F52D  2B F0			     sub     si,ax	     ; вычесть смещение
   5118	F52F  8A E6			     mov     ah,dh	     ; количество строк
   5119	F531  2A E3			     sub     ah,bl	     ; определить число для	       +
   5120				     перемещения
   5121
   5122	F533			     r13:
   5123	F533  E8 0021			     call    r17	     ; переместить одну строку
   5124	F536  81 EE 2050		     sub     si,2000h+80     ; установить следующую	       +
   5125				     строку
   5126	F53A  81 EF 2050		     sub     di,2000h+80
   5127	F53E  FE CC			     dec     ah		     ; количество строк для	       +
   5128				     перемещения
   5129	F540  75 F1			     jnz     r13	     ; продолжать, пока все не      +
   5130				     переместятся
   5131
   5132				     ;	 Заполнение освобожденных строк
   5133	F542			     r14:
   5134	F542  8A C7			     mov     al,bh	     ; атрибут заполнения
   5135	F544			     r15:
   5136	F544  E8 0029			     call    r18	     ; очистить	строку
   5137	F547  81 EF 2050		     sub     di,2000h+80     ; указать следующую строку
   5138	F54B  FE CB			     dec     bl		     ; число строк для заполнения
   5139	F54D  75 F5			     jnz     r15
   5140	F54F  FC			     cld		     ; сброс признака		       +
   5141				     направления
   5142	F550  E9 FC74			     jmp     video_return    ; к выходу из программы
   5143
   5144	F553			     r16:
   5145	F553  8A DE			     mov     bl,dh
   5146	F555  EB EB			     jmp     short r14	     ; очистить
   5147	F557			     graphics_down endp
   5148
   5149				     ;	 Программа перемещения одной строки
   5150
   5151	F557			     r17     proc    near
   5152	F557  8A CA			     mov     cl,dl	     ; число байт в строке
   5153	F559  56			     push    si
   5154	F55A  57			     push    di		     ; хранить указатели
   5155	F55B  F3> A4			     rep     movsb	     ; переместить четное поле
   5156	F55D  5F			     pop     di
   5157	F55E  5E			     pop     si
   5158	F55F  81 C6 2000		     add     si,2000h
   5159	F563  81 C7 2000		     add     di,2000h	     ; указать нечетное поле
   5160	F567  56			     push    si
   5161	F568  57			     push    di		     ; сохранить указатели
   5162	F569  8A CA			     mov     cl,dl	     ; возврат счвтчика
   5163	F56B  F3> A4			     rep     movsb	     ; передать	нечетное поле
   5164	F56D  5F			     pop     di
   5165	F56E  5E			     pop     si		     ; возврат указателей
   5166	F56F  C3			     ret		     ; возврат к программе
   5167	F570			     r17     endp
   5168
   5169				     ;	 Заполнение пробелами строки
   5170
   5171	F570			     r18     proc    near
   5172	F570  8A CA			     mov     cl,dl	     ; число байт в поле
   5173	F572  57			     push    di		     ; хранить указатель
   5174	F573  F3> AA			     rep     stosb	     ; запомнить новое значение
   5175	F575  5F			     pop     di		     ; вернуть указатель
   5176	F576  81 C7 2000		     add     di,2000h	     ; указать нечетное поле
   5177	F57A  57			     push    di
   5178	F57B  8A CA			     mov     cl,dl
   5179	F57D  F3> AA			     rep     stosb	     ; заполнить нечетное поле
   5180	F57F  5F			     pop     di
   5181	F580  C3			     ret		     ; возврат к программе
   5182	F581			     r18     endp
   5183
   5184				     ;--------------------------------------
   5185				     ;
   5186				     ;	graphics_write
   5187				     ;
   5188				     ;	 Эта	программа записывает	символ в	режиме   +
   5189				     графики
   5190				     ;
   5191				     ;	 ВХОД
   5192				     ;		AL - код символа,
   5193				     ;		BL - атрибут цвета,	который используется+
   5194				     в	качестве цвета
   5195				     ;		     переднего	плана (цвет символа). Если +
   5196				     бит 7 BL=1, то
   5197				     ;		     выполняется операция XOR над	байтом в+
   5198				     буфере и байтом
   5199				     ;		     в	генераторе символов,
   5200				     ;		CX - счетчик повторений символа
   5201				     ;
   5202				     ;----------------------------------------
   5203
   5204					     assume cs:code,ds:data,es:data
   5205	F581			     graphics_write proc near
   5206	F581  B4 00			     mov     ah,0	     ; AH=0
   5207	F583  50			     push    ax		     ; сохранить значение кода    +
   5208				     символа
   5209
   5210				     ;	 Определение	позиции в области буфера	       +
   5211				     засылкой туда кода	точек
   5212
   5213	F584  E8 0185			     call    s26	     ; найти ячейку в области       +
   5214				     буфера
   5215	F587  8B F8			     mov     di,ax	     ; указатель области в DI
   5216
   5217				     ;	 Определение	области для получения кода      +
   5218				     точки
   5219
   5220	F589  58			     pop     ax		     ; восстановить	код точки
   5221	F58A  3C 80			     cmp     al,80h	     ; во второй половине ?
   5222	F58C  73 06			     jae     s1		     ; да
   5223
   5224				     ;	 Изображение	есть в первой половине памяти
   5225
   5226	F58E  BE FA6Er			     mov     si, offset	crt_char_gen  ;	смещение изображения
   5227	F591  0E			     push    cs		     ; хранить сегмент в	стеке
   5228	F592  EB 0F			     jmp     short s2	     ; определить режим
   5229
   5230				     ;	 Изображение	есть во второй части памяти
   5231
   5232	F594			     s1:
   5233	F594  2C 80			     sub     al,80h	     ; 0 во вторую половину
   5234	F596  1E			     push    ds		     ; хранить указатель данных
   5235	F597  2B F6			     sub     si,si
   5236	F599  8E DE			     mov     ds,si	     ; установить адресацию
   5237					     assume  ds:abs0
   5238	F59B  C5 36 007Cr		     lds     si,ext_ptr	     ; получить	смещение
   5239	F59F  8C DA			     mov     dx,ds	     ; получить	сегмент
   5240					     assume  ds:data
   5241	F5A1  1F			     pop     ds		     ; восстановить	сегмент	       +
   5242				     данных
   5243	F5A2  52			     push    dx		     ; хранить сегмент в	стеке
   5244
   5245				     ;	 Опеделение графического режима операции
   5246
   5247	F5A3			     s2:			     ; определение режима
   5248	F5A3  D1 E0			     sal     ax,1	     ; умножить	указатель кода    +
   5249				     на 8
   5250	F5A5  D1 E0			     sal     ax,1
   5251	F5A7  D1 E0			     sal     ax,1
   5252	F5A9  03 F0			     add     si,ax	     ; SI содержит смещение
   5253	F5AB  80 3E 0049r 06		     cmp     crt_mode,6
   5254	F5B0  1F			     pop     ds		     ; восстановить	указатель     +
   5255				     таблицы
   5256	F5B1  72 2C			     jc	     s7	     ; проверка	для средней		       +
   5257				     разрешающей способности
   5258
   5259				     ;	 Высокая	разрешающая способность
   5260	F5B3			     s3:
   5261	F5B3  57			     push    di		     ; сохранить указатель	       +
   5262				     области
   5263	F5B4  56			     push    si		     ; сохранить указатель кода
   5264	F5B5  B6 04			     mov     dh,4	     ; количество циклов
   5265	F5B7			     s4:
   5266	F5B7  AC			     lodsb		     ; выборка четного байта
   5267	F5B8  F6 C3 80			     test    bl,80h
   5268	F5BB  75 16			     jnz     s6
   5269	F5BD  AA			     stosb
   5270	F5BE  AC			     lodsb
   5271	F5BF			     s5:
   5272	F5BF  26: 88 85	1FFF		     mov es:[di+1fffh],al    ; запомнить во второй части
   5273	F5C4  83 C7 4F			     add     di,79	     ; передать	следующую строку
   5274	F5C7  FE CE			     dec     dh		     ; выполнить цикл
   5275	F5C9  75 EC			     jnz     s4
   5276	F5CB  5E			     pop     si
   5277	F5CC  5F			     pop     di		     ; восстановить	указатель     +
   5278				     области
   5279	F5CD  47			     inc     di	     ; указать на следующую позицию   +
   5280				     символа
   5281	F5CE  E2 E3			     loop    s3		     ; записать	последующие	       +
   5282				     символы
   5283	F5D0  E9 FBF4			     jmp     video_return
   5284
   5285	F5D3			     s6:
   5286	F5D3  26: 32 05			     xor al,es:[di]
   5287	F5D6  AA			     stosb		     ; запомнить код
   5288	F5D7  AC			     lodsb		     ; выборка нечетного символа
   5289	F5D8  26: 32 85	1FFF		     xor  al,es:[di+1fffh]
   5290	F5DD  EB E0			     jmp     s5		     ; повторить
   5291
   5292				     ;	 Средняя	разрешающая способность записи
   5293	F5DF			     s7:
   5294	F5DF  8A D3			     mov     dl,bl	     ; сохранить старший бит	       +
   5295				     цвета
   5296	F5E1  D1 E7			     sal     di,1    ; умножить	на 2,	т.к. два		       +
   5297				     байта/символа
   5298	F5E3  E8 00D1			     call    s19	     ; расширение BL до полного     +
   5299				     слова	цвета
   5300	F5E6			     s8:
   5301	F5E6  57			     push    di
   5302	F5E7  56			     push    si
   5303	F5E8  B6 04			     mov     dh,4	     ; число циклов
   5304	F5EA			     s9:
   5305	F5EA  AC			     lodsb		     ; получить	код точки
   5306	F5EB  E8 00DE			     call    s21	     ; продублировать
   5307	F5EE  23 C3			     and     ax,bx	     ; окрашивание в заданный      +
   5308				     цвет
   5309	F5F0  F6 C2 80			     test    dl,80h
   5310	F5F3  74 07			     jz	     s10
   5311	F5F5  26: 32 25			     xor     ah,es:[di]	     ; выполнить функцию XOR со      +
   5312				     "старым"
   5313	F5F8  26: 32 45	01		     xor     al,es:[di+1]    ; и "новым" цветами
   5314	F5FC  26: 88 25		     s10:    mov  es:[di],ah	     ; запомнить первый байт
   5315	F5FF  26: 88 45	01		     mov es:[di+1],al	     ; запомнить второй байт
   5316	F603  AC			     lodsb		     ; получить	код точки
   5317	F604  E8 00C5			     call    s21
   5318	F607  23 C3			     and     ax,bx	     ; окрашивание нечетного       +
   5319				     байта
   5320	F609  F6 C2 80			     test    dl,80h
   5321	F60C  74 0A			     jz	 s11
   5322	F60E  26: 32 A5	2000		     xor     ah,es:[di+2000h]	; из первой половины
   5323	F613  26: 32 85	2001		     xor     al,es:[di+2001h]	; и из второй половины
   5324	F618  26: 88 A5	2000	     s11:    mov     es:[di+2000h],ah
   5325	F61D  26: 88 85	2001		     mov     es:[di+2001h],al	; запомнить вторую часть   +
   5326				     буфера
   5327	F622  83 C7 50			     add     di,80	     ; указать следующую ячейку
   5328	F625  FE CE			     dec     dh
   5329	F627  75 C1			     jnz     s9		     ; повторить
   5330	F629  5E			     pop     si
   5331	F62A  5F			     pop     di
   5332	F62B  83 C7 02			     add     di,2	     ; переход к следующему	       +
   5333				     символу
   5334	F62E  E2 B6			     loop    s8		     ; режим записи
   5335	F630  E9 FB94			     jmp     video_return
   5336	F633			     graphics_write  endp
   5337				     ;-------------------------------------
   5338				     ;graphics_read
   5339				     ;
   5340				     ;	 Программа считывает символ в режиме	       +
   5341				     графики
   5342				     ;
   5343				     ;-------------------------------------
   5344	F633			     graphics_read   proc    near
   5345	F633  E8 00D6			     call    s26
   5346	F636  8B F0			     mov     si,ax	     ; сохранить в SI
   5347	F638  83 EC 08			     sub     sp,8	     ; зарезервировать в стеке 8  +
   5348				     байт для
   5349								     ; записи символа из	буфера   +
   5350				     дисплея
   5351	F63B  8B EC			     mov     bp,sp	     ; указатель для хранения      +
   5352				     области
   5353
   5354				     ;	 Определение	режима графики
   5355
   5356	F63D  80 3E 0049r 06		     cmp     crt_mode,6
   5357	F642  06			     push    es
   5358	F643  1F			     pop     ds		     ; указать сегмент
   5359	F644  72 1A			     jc	     s13	     ; средняя разрешающая	       +
   5360				     способность
   5361
   5362				     ;	Высокая разрешающая способность для	       +
   5363				     считавания
   5364
   5365	F646  B6 04			     mov     dh,4
   5366	F648			     s12:
   5367	F648  8A 04			     mov     al,byte ptr [si]	; получить первый	байт
   5368	F64A  88 46 00			     mov byte ptr [bp],al	; запомнить в	памяти
   5369	F64D  45			     inc     bp
   5370	F64E  8A 84 2000		     mov al,byte ptr [si+2000h]	  ; получить младший байт
   5371	F652  88 46 00			     mov byte ptr [bp],al
   5372	F655  45			     inc     bp
   5373	F656  83 C6 50			     add     si,80	     ; переход на следующую	       +
   5374				     четную строку
   5375	F659  FE CE			     dec     dh
   5376	F65B  75 EB			     jnz     s12	     ; повторить
   5377	F65D  EB 17			     jmp     short s15	     ; переход к хранению кодов   +
   5378				     точек
   5379	F65F  90			     nop
   5380
   5381				     ;	 Средняя	разрешающая способность для	       +
   5382				     считывания
   5383	F660			     s13:
   5384	F660  D1 E6			     sal     si,1      ; смещение умножить на	2, т.к. 2    +
   5385				     байта/символа
   5386	F662  B6 04			     mov     dh,4
   5387	F664			     s14:
   5388	F664  E8 0088			     call    s23
   5389	F667  81 C6 2000		     add     si,2000h
   5390	F66B  E8 0081			     call    s23
   5391	F66E  81 EE 1FB0		     sub     si,2000h-80
   5392	F672  FE CE			     dec     dh
   5393	F674  75 EE			     jnz     s14	     ; повторить
   5394
   5395				     ;	 Сохранить
   5396	F676			     s15:
   5397	F676  BF FA6Er			     mov     di,offset crt_char_gen   ;	смещение
   5398	F679  0E			     push    cs
   5399	F67A  07			     pop     es
   5400	F67B  83 ED 08			     sub     bp,8	     ; восстановить	начальный     +
   5401				     адрес
   5402	F67E  8B F5			     mov     si,bp
   5403	F680  FC			     cld		     ; установить направление
   5404	F681  B0 00			     mov     al,0
   5405	F683			     s16:
   5406	F683  16			     push    ss
   5407	F684  1F			     pop     ds
   5408	F685  BA 0080			     mov     dx,128	     ; количество символов
   5409	F688			     s17:
   5410	F688  56			     push    si
   5411	F689  57			     push    di
   5412	F68A  B9 0008			     mov     cx,8	     ; количество байт в	символе
   5413	F68D  F3> A6			     repe    cmpsb	     ; сравнить
   5414	F68F  5F			     pop     di
   5415	F690  5E			     pop     si
   5416	F691  74 1E			     jz	     s18	     ; если	признак = 0,символы      +
   5417				     сравнились
   5418	F693  FE C0			     inc     al		     ; не сравнились
   5419	F695  83 C7 08			     add     di,8	     ; следующий код точки
   5420	F698  4A			     dec     dx		     ; - 1 из	счетчика
   5421	F699  75 ED			     jnz     s17	     ; повторить
   5422
   5423
   5424	F69B  3C 00			     cmp     al,0
   5425	F69D  74 12			     je	     s18    ; переход, если все сканировано,  +
   5426				     но символ
   5427							    ; не найден
   5428	F69F  2B C0			     sub     ax,ax
   5429	F6A1  8E D8			     mov     ds,ax	     ; установить адресацию	       +
   5430				     вектора
   5431					     assume  ds:abs0
   5432	F6A3  C4 3E 007Cr		     les     di,ext_ptr
   5433	F6A7  8C C0			     mov     ax,es
   5434	F6A9  0B C7			     or	     ax,di
   5435	F6AB  74 04			     jz	     s18
   5436	F6AD  B0 80			     mov     al,128	     ; начало второй части
   5437	F6AF  EB D2			     jmp     short s16	     ; вернуться и повторить
   5438					     assume  ds:data
   5439
   5440	F6B1			     s18:
   5441	F6B1  83 C4 08			     add     sp,8
   5442	F6B4  E9 FB10			     jmp     video_return
   5443	F6B7			     graphics_read   endp
   5444
   5445				     ;---------------------------------
   5446				     ;
   5447				     ;	 Эта	программа заполняет регистр BX	двумя     +
   5448				     младшими битами
   5449				     ; регистра	BL.
   5450				     ;
   5451				     ;	 ВХОД
   5452				     ;		BL - используемый цвет (младшие два бита).
   5453				     ;
   5454				     ;	 ВЫХОД
   5455				     ;		BX - используемый цвет (восемь		       +
   5456				     повторений двух битов цвета).
   5457				     ;
   5458				     ;---------------------------------
   5459	F6B7			     s19     proc    near
   5460	F6B7  80 E3 03			     and     bl,3	     ; выделить	биты цвета
   5461	F6BA  8A C3			     mov     al,bl	     ; переписать в AL
   5462	F6BC  51			     push    cx		     ; сохранить регистр
   5463	F6BD  B9 0003			     mov     cx,3	     ; количество повторений
   5464	F6C0			     s20:
   5465	F6C0  D0 E0			     sal     al,1
   5466	F6C2  D0 E0			     sal     al,1	     ; сдвиг влево на 2
   5467	F6C4  0A D8			     or	     bl,al	     ; в BL накапливается		       +
   5468				     результат
   5469	F6C6  E2 F8			     loop    s20	     ; цикл
   5470	F6C8  8A FB			     mov     bh,bl	     ; заполнить
   5471	F6CA  59			     pop     cx
   5472	F6CB  C3			     ret		     ; все выполнено
   5473	F6CC			     s19     endp
   5474				     ;--------------------------------------
   5475				     ;
   5476				     ;	 Эта	программа берет байт в AL и	удваивает     +
   5477				     все биты, превращая
   5478				     ; 8 бит	в 16 бит. Результат помещается в AX.
   5479				     ;--------------------------------------
   5480	F6CC			     s21     proc    near
   5481	F6CC  52			     push    dx		     ; сохранить регистры
   5482	F6CD  51			     push    cx
   5483	F6CE  53			     push    bx
   5484	F6CF  BA 0000			     mov     dx,0	     ; результат удвоения
   5485	F6D2  B9 0001			     mov     cx,1	     ; маска
   5486	F6D5			     s22:
   5487	F6D5  8B D8			     mov     bx,ax
   5488	F6D7  23 D9			     and     bx,cx	     ; выделение бита
   5489	F6D9  0B D3			     or	     dx,bx	     ; накапливание	результата
   5490	F6DB  D1 E0			     shl     ax,1
   5491	F6DD  D1 E1			     shl     cx,1	     ; сдвинуть	базу и маску на 1
   5492	F6DF  8B D8			     mov     bx,ax
   5493	F6E1  23 D9			     and     bx,cx
   5494	F6E3  0B D3			     or	     dx,bx
   5495	F6E5  D1 E1			     shl     cx,1    ; сдиг	маски, для выделения	       +
   5496				     следующего бита
   5497	F6E7  73 EC			     jnc     s22
   5498	F6E9  8B C2			     mov     ax,dx
   5499	F6EB  5B			     pop     bx		     ; восстановить	регистры
   5500	F6EC  59			     pop     cx
   5501	F6ED  5A			     pop     dx
   5502	F6EE  C3			     ret		     ; к выходу из прерывания
   5503	F6EF			     s21     endp
   5504
   5505				     ;----------------------------------
   5506				     ;
   5507				     ;	 Эта	программа преобразовывает		       +
   5508				     двух-битовое представление	точки
   5509				     ; (C1,C0) в однобитовое
   5510				     ; (C1,C0) к однобитовому.
   5511				     ;
   5512				     ;----------------------------------
   5513	F6EF			     s23     proc    near
   5514	F6EF  8A 24			     mov     ah,byte ptr [si]	; получить первый	байт
   5515	F6F1  8A 44 01			     mov     al,byte ptr [si+1]	  ; получить второй байт
   5516	F6F4  B9 C000			     mov     cx,0c000h	     ; 2 бита маски
   5517	F6F7  B2 00			     mov     dl,0	     ; регистр результата
   5518	F6F9			     s24:
   5519	F6F9  85 C1			     test    ax,cx	     ; проверка	2 младших бит	AX на+
   5520				     0
   5521	F6FB  F8			     clc		     ; сбросить	признак переноса+
   5522				     CF
   5523	F6FC  74 01			     jz	     s25	     ; переход если 0
   5524	F6FE  F9			     stc		     ; нет -	установить CF
   5525	F6FF  D0 D2		     s25:    rcl     dl,1	     ; циклический сдвиг
   5526	F701  D1 E9			     shr     cx,1
   5527	F703  D1 E9			     shr     cx,1
   5528	F705  73 F2			     jnc     s24	     ; повторить, если CF=1
   5529	F707  88 56 00			     mov byte ptr [bp],dl    ; запомнить результат
   5530	F70A  45			     inc     bp
   5531	F70B  C3			     ret		     ; к выходу из прерывания
   5532	F70C			     s23     endp
   5533
   5534				     ;---------------------------------------
   5535				     ;
   5536				     ;	 Эта	программа определает	положение	       +
   5537				     курсора относительно	мяти и
   5538				     ; начала буфера в режиме графики			       +
   5539				     /символ
   5540				     ;
   5541				     ;	 ВЫХОД
   5542				     ;		AX  содержит смещение курсора
   5543				     ;
   5544				     ;-----------------------------------------
   5545	F70C			     s26     proc    near
   5546	F70C  A1 0050r			     mov     ax,cursor_posn  ; получить	текущее		       +
   5547				     положение	курсора
   5548	F70F			     graph_posn	     label   near
   5549	F70F  53			     push    bx		     ; сохранить регистр
   5550	F710  8B D8			     mov     bx,ax	     ; сохранить текущее	       +
   5551				     положение	курсора
   5552	F712  8A C4			     mov     al,ah	     ; строка
   5553	F714  F6 26 004Ar		     mul     byte ptr crt_cols	 ; умножить на байт/колонку
   5554	F718  D1 E0			     shl     ax,1	     ; умножить	на 4
   5555	F71A  D1 E0			     shl     ax,1
   5556	F71C  2A FF			     sub     bh,bh	     ; выделить	значение колонки
   5557	F71E  03 C3			     add     ax,bx	     ; определить смещение
   5558	F720  5B			     pop     bx
   5559	F721  C3			     ret		     ; к выходу из прерывания
   5560	F722			     s26     endp
   5561
   5562				     ;----------------------------------------
   5563				     ;
   5564				     ;	 Записать телетайп (INT	10H, AH=14)
   5565				     ;
   5566				     ;	 Эта	программа выводит символ в буфер ЭЛИ с +
   5567				     одновременной	уста-
   5568				     ; новкой позиции курсора и передвижением	       +
   5569				     курсора на экране.
   5570				     ;	 После записи символа	в последнюю позицию   +
   5571				     строки выполняется ав-
   5572				     ; томатический	переход на новую строку. Если  +
   5573				     страница экрана за-
   5574				     ; полнена (позиция курсора 24,79/39),	выполняется +
   5575				     перемещение экрана
   5576				     ; на одну строку вверх. Освободившаяся строка+
   5577				     заполняется значением
   5578				     ; атрибута	символа (для алфавитно-цифрового   +
   5579				     режима). Для графики цвет=00
   5580				     ; После записи очередного символа курсор	       +
   5581				     установлен в следующую	позицию.
   5582				     ;
   5583				     ;	 ВХОД
   5584				     ;		AL - код выводимого символа,
   5585				     ;		BL - цвет переднего плана для графики.
   5586				     ;
   5587				     ;----------------------------------------
   5588
   5589					     assume  cs:code,ds:data
   5590	F722			     write_tty	     proc    near
   5591	F722  50			     push    ax		     ; сохранить регистры
   5592	F723  50			     push    ax
   5593	F724  B4 03			     mov     ah,3
   5594	F726  CD 10			     int     10h	     ; считать положение	       +
   5595				     текущего курсора
   5596	F728  58			     pop     ax		     ; восстановить	символ
   5597
   5598				     ;	 DX содержит текущую позицию курсора
   5599
   5600	F729  3C 08			     cmp     al,8	     ; есть	возврат на одну	       +
   5601				     позицию ?
   5602	F72B  74 59			     je	     u8		     ; возврат на одну позицию
   5603	F72D  3C 0D			     cmp     al,0dh	     ; есть	возврат каретки ?
   5604	F72F  74 5E			     je	     u9		     ; возврат каретки
   5605	F731  3C 0A			     cmp     al,0ah	     ; есть	граница поля	?
   5606	F733  74 5E			     je	     u10	     ; граница поля
   5607	F735  3C 07			     cmp     al,07h	     ; звуковой	сигнал ?
   5608	F737  74 61			     je	     u11	     ; звуковой	сигнал
   5609
   5610				     ;	 Запись символа на экран
   5611
   5612	F739  8A 3E 0062r		     mov     bh,active_page
   5613	F73D  B4 0A			     mov     ah,10	     ; запись символа без	       +
   5614				     атрибута
   5615	F73F  B9 0001			     mov     cx,1
   5616	F742  CD 10			     int     10h
   5617
   5618				     ;	 Положение курсора для следующего символа
   5619
   5620	F744  FE C2			     inc     dl
   5621	F746  3A 16 004Ar		     cmp     dl,byte ptr crt_cols
   5622	F74A  75 36			     jnz     u7		     ; переход к установке	       +
   5623				     курсора
   5624	F74C  B2 00			     mov     dl,0
   5625	F74E  80 FE 18			     cmp     dh,24	     ; проверка	граничной строки
   5626	F751  75 2D			     jnz     u6		     ; установить курсор
   5627
   5628				     ;	 Сдвиг экрана
   5629	F753			     u1:
   5630
   5631	F753  B4 02			     mov     ah,2
   5632	F755  B7 00			     mov     bh,0
   5633	F757  CD 10			     int     10h	     ; установить курсор
   5634
   5635
   5636	F759  A0 0049r			     mov     al,crt_mode     ; получить	текущий режим
   5637	F75C  3C 04			     cmp     al,4
   5638	F75E  72 06			     jc	     u2		     ; считывание курсора
   5639	F760  3C 07			     cmp     al,7
   5640	F762  B7 00			     mov     bh,0	     ; цвет	заднего плана
   5641	F764  75 06			     jne     u3
   5642
   5643	F766			     u2:			     ; считывание курсора
   5644	F766  B4 08			     mov     ah,8
   5645	F768  CD 10			     int     10h	; считать символ/атрибут	       +
   5646				     текущего курсора
   5647	F76A  8A FC			     mov     bh,ah	     ; запомнить в BH
   5648
   5649				     ;	 Перемещение	экрана на одну строку	вверх
   5650
   5651	F76C			     u3:
   5652	F76C  B8 0601			     mov     ax,601h
   5653	F76F  B9 0000			     mov     cx,0	     ; верхний левый угол
   5654	F772  B6 18			     mov     dh,24	     ; координаты нижнего	       +
   5655				     правого
   5656	F774  8A 16 004Ar		     mov     dl,byte ptr crt_cols    ; угла
   5657	F778  FE CA			     dec     dl
   5658	F77A			     u4:
   5659	F77A  CD 10			     int     10h
   5660
   5661				     ;	 Выход из прерывания
   5662
   5663	F77C			     u5:
   5664	F77C  58			     pop     ax		     ; восстановить	символ
   5665	F77D  E9 FA47			     jmp     video_return    ; возврат к программе
   5666
   5667	F780			     u6:			     ; установить курсор
   5668	F780  FE C6			     inc     dh		     ; следующая строка
   5669	F782			     u7:			     ; установить курсор
   5670	F782  B4 02			     mov     ah,2
   5671	F784  EB F4			     jmp     short u4	     ; установить новый курсор
   5672
   5673				     ;	 Сдвиг курсора на	одну позицию	влево
   5674
   5675	F786			     u8:
   5676	F786  80 FA 00			     cmp     dl,0
   5677	F789  74 F7			     je	     u7		     ; установить курсор
   5678	F78B  FE CA			     dec     dl		     ; нет -	снова его передать
   5679	F78D  EB F3			     jmp     short u7
   5680
   5681				     ;	 Перемещение	курсора в начало строки
   5682
   5683	F78F			     u9:
   5684	F78F  B2 00			     mov     dl,0
   5685	F791  EB EF			     jmp     short u7	     ; установить курсор
   5686
   5687				     ;	 Перемещение	курсора на следующую строку
   5688
   5689	F793			     u10:
   5690	F793  80 FE 18			     cmp     dh,24	     ; последняя строка экрана
   5691	F796  75 E8			     jne     u6		     ; да - сдвиг экрана
   5692	F798  EB B9			     jmp     short u1	     ; нет -	снова установить	       +
   5693				     курсор
   5694
   5695				     ;	 Звуковой сигнал
   5696
   5697	F79A			     u11:
   5698	F79A  B3 02			     mov     bl,2	     ; уст длительность		       +
   5699				     звукового	сигнала
   5700	F79C  E8 EE0A			     call    beep	     ; звук
   5701	F79F  EB DB			     jmp     short u5	     ; возврат
   5702	F7A1			     write_tty	     endp
   5703
   5704				     ;
   5705				     ;----------------------------------------
   5706				     ;
   5707				     ;	 Эта	программа считывает положение	       +
   5708				     светового	пера.
   5709				     ; Проверяется переключатель и триггер	       +
   5710				     светового	пера. Если бит 1 ре-
   5711				     ; гистра состояния (порт 3DA)=1, то триггер	       +
   5712				     установлен. Если бит 2 порта
   5713				     ; 3DA=0, то установлен	переключатель.
   5714				     ;	 Порты 3BD	и 3DC используются	для установки и   +
   5715				     сброса триггера и пере-
   5716				     ; ключателя светового пера.
   5717				     ;	 В регистрах R16 и R17 контроллера содержится  +
   5718				     адрес	координат пера
   5719				     ; относительно	начала буфера дисплея.
   5720				     ;	 Если триггер и переключатель установлены, +
   5721				     то программа определяет
   5722				     ; положение светового пера, в противном	       +
   5723				     случае, возврат без выдачи
   5724				     ; информации.
   5725				     ;
   5726				     ;	 В ППЭВМ ЕС1841	функция не поддерживается
   5727				     ;-------------------------------------------------
   5728
   5729
   5730
   5731
   5732					     assume  cs:code,ds:data
   5733
   5734				     ;	 Таблица	поправок для	получения		       +
   5735				     фактических координат светового пера
   5736
   5737	F7A1			     v1	     label   byte
   5738	F7A1  03 03 05 05 03 03	03+	     db	     3,3,5,5,3,3,3,4
   5739	      04
   5740
   5741	F7A9			     read_lpen	     proc    near
   5742
   5743
   5744	F7A9  B4 00			     mov     ah,0	     ; код возврата,	если перо не +
   5745				     включено
   5746	F7AB  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес 6845
   5747	F7AF  83 C2 06			     add     dx,6	     ; указать регистр состояния
   5748	F7B2  EC			     in	     al,dx	     ; получить	регистр		       +
   5749				     состояния
   5750	F7B3  A8 04			     test    al,4	     ; проверить переключатель   +
   5751				     светового	пера
   5752	F7B5  75 78			     jnz     v6		     ; не установлено, возврат
   5753
   5754				     ;	 Проверка триггера светового пера
   5755
   5756	F7B7  A8 02			     test    al,2	     ; проверить триггер	       +
   5757				     светового	пера
   5758	F7B9  74 7E			     jz	     v7		     ; возврат без сброса	       +
   5759				     триггера
   5760
   5761				     ;	 Триггер	был установлен, считать значение в+
   5762				     AH
   5763
   5764	F7BB  B4 10			     mov     ah,16	     ; уст регистры светового      +
   5765				     пера 6845
   5766
   5767				     ;	 Ввод регистров, указанных AH и			       +
   5768				     преобразование в строки колонки в DX
   5769
   5770	F7BD  8B 16 0063r		     mov     dx,addr_6845
   5771	F7C1  8A C4			     mov     al,ah
   5772	F7C3  EE			     out     dx,al	     ; вывести в порт
   5773	F7C4  42			     inc     dx
   5774	F7C5  EC			     in	     al,dx	     ; получить	значение из порта
   5775	F7C6  8A E8			     mov     ch,al	     ; сохранить его в CX
   5776	F7C8  4A			     dec     dx		     ; регистр адреса
   5777	F7C9  FE C4			     inc     ah
   5778	F7CB  8A C4			     mov     al,ah	     ; второй регистр данных
   5779	F7CD  EE			     out     dx,al
   5780	F7CE  42			     inc     dx
   5781	F7CF  EC			     in	     al,dx	     ; получить	второе значение  +
   5782				     данных
   5783	F7D0  8A E5			     mov     ah,ch	     ; AX содержит координаты	       +
   5784				     светового	пера
   5785
   5786
   5787	F7D2  8A 1E 0049r		     mov     bl,crt_mode
   5788	F7D6  2A FF			     sub     bh,bh	     ; выделить	значение режима  +
   5789				     в	BX
   5790	F7D8  2E: 8A 9F	F7A1r		     mov     bl,cs:v1[bx]    ; значение	поправки
   5791	F7DD  2B C3			     sub     ax,bx
   5792	F7DF  2B 06 004Er		     sub     ax,crt_start
   5793
   5794	F7E3  79 03			     jns     v2
   5795	F7E5  B8 0000			     mov     ax,0	     ; поместить 0
   5796
   5797				     ;	 Определить режим
   5798
   5799	F7E8			     v2:
   5800	F7E8  B1 03			     mov     cl,3	     ; установить счетчик
   5801	F7EA  80 3E 0049r 04		     cmp     crt_mode,4	     ; определить, режим	графики +
   5802				     или
   5803								     ; альфа
   5804	F7EF  72 2A			     jb	     v4		     ; альфа-перо
   5805	F7F1  80 3E 0049r 07		     cmp     crt_mode,7
   5806	F7F6  74 23			     je	     v4		     ; альфа-перо
   5807
   5808				     ;	 Графический	режим
   5809
   5810	F7F8  B2 28			     mov     dl,40	     ; делитель	для графики
   5811	F7FA  F6 F2			     div     dl	     ; определение строки (AL)	и	       +
   5812				     колонки (AH)
   5813								     ; пределы AL 0-99, AH 0-39
   5814
   5815				     ;	 Определение	положения строки	для графики
   5816
   5817	F7FC  8A E8			     mov     ch,al	     ; сохранить значение строки+
   5818				     в	CH
   5819	F7FE  02 ED			     add     ch,ch	     ; умножить	на 2			       +
   5820				     четно/нечетное поле
   5821	F800  8A DC			     mov     bl,ah	     ; значение	колонки в BX
   5822	F802  2A FF			     sub     bh,bh	     ; умножить	на 8 для среднего +
   5823				     результата
   5824	F804  80 3E 0049r 06		     cmp     crt_mode,6	     ; определить среднюю или      +
   5825				     наивысшую
   5826								     ; разрешающую способность
   5827	F809  75 04			     jne     v3		     ; не наивысшая разрешающая  +
   5828				     способность
   5829	F80B  B1 04			     mov     cl,4     ;	сдвинуть значение наивысшей   +
   5830				     разрешающей
   5831							      ;	способности
   5832	F80D  D0 E4			     sal     ah,1    ; сдвиг на 1 разряд влево	       +
   5833				     значения колонки
   5834	F80F			     v3:			     ; не наивысшая разрешающая  +
   5835				     способность
   5836	F80F  D3 E3			     shl     bx,cl   ; умножить	на 16	для наивысшей      +
   5837				     разрешающей
   5838							     ; способности
   5839
   5840				     ;	 Определение	положения символа для альфа
   5841
   5842	F811  8A D4			     mov     dl,ah	     ; значение	колонки для	       +
   5843				     возврата
   5844	F813  8A F0			     mov     dh,al	     ; значение	строки
   5845	F815  D0 EE			     shr     dh,1	     ; делить на 4
   5846	F817  D0 EE			     shr     dh,1	     ; для значения в пределах 0-24
   5847	F819  EB 12			     jmp     short v5	     ; возврат светового пера
   5848
   5849				     ;	 Режим альфа светового пера
   5850
   5851	F81B			     v4:			     ; альфа светового пера
   5852	F81B  F6 36 004Ar		     div     byte ptr crt_cols	; строка,	колонка
   5853	F81F  8A F0			     mov     dh,al	     ; строка в DH
   5854	F821  8A D4			     mov     dl,ah	     ; колонка в DL
   5855	F823  D2 E0			     sal     al,cl	     ; умножение строк на 8
   5856	F825  8A E8			     mov     ch,al
   5857	F827  8A DC			     mov     bl,ah
   5858	F829  32 FF			     xor     bh,bh
   5859	F82B  D3 E3			     sal     bx,cl
   5860	F82D			     v5:
   5861	F82D  B4 01			     mov     ah,1	     ; указать, что все		       +
   5862				     установлено
   5863	F82F			     v6:
   5864	F82F  52			     push    dx		     ; сохранить значение	       +
   5865				     возврата
   5866	F830  8B 16 0063r		     mov     dx,addr_6845    ; получить	базовый адрес
   5867	F834  83 C2 07			     add     dx,7
   5868	F837  EE			     out     dx,al	     ; вывод
   5869	F838  5A			     pop     dx		     ; восстановить	значение
   5870	F839			     v7:
   5871	F839  5F			     pop     di		      ;	восстановить регистры
   5872	F83A  5E			     pop     si
   5873	F83B  1F			     pop     ds
   5874	F83C  1F			     pop     ds
   5875	F83D  1F			     pop     ds
   5876	F83E  1F			     pop     ds
   5877	F83F  07			     pop     es
   5878	F840  CF			     iret
   5879	F841			     read_lpen	     endp
   5880
   5881				     ;--- int 12 ------------------------------------
   5882				     ;
   5883				     ;	  Программа определения размера памяти.
   5884				     ;
   5885				     ;	  Эта программа передает в	регистр AX об'ем    +
   5886				     памяти в Кбайтах.
   5887				     ;
   5888				     ;-----------------------------------------
   5889
   5890					     assume  cs:code,ds:data
   5891	F841			     memory_size_determine   proc    far
   5892	F841  FB			     sti		     ; установить бит разрешения+
   5893				     прерывания
   5894	F842  1E			     push    ds		     ; сохранить сегмент
   5895	F843  B8 0040			     mov     ax,dat	     ; установить адресацию
   5896	F846  8E D8			     mov     ds,ax
   5897	F848  A1 0013r			     mov     ax,memory_size  ; получить	значение размера+
   5898				     памяти
   5899	F84B  1F			     pop     ds		     ; восстановить	сегмент
   5900	F84C  CF			     iret		     ; возврат из прерывания
   5901	F84D			     memory_size_determine   endp
   5902
   5903				     ;--- int 11-------------------------------
   5904				     ;
   5905				     ;	  Программа определения состава		       +
   5906				     оборудования.
   5907				     ;
   5908				     ;	 Эта	программа передает в регистр AX	       +
   5909				     конфигурацию системы.
   5910				     ;
   5911				     ;	 Разряды	регистра AX имеют следующее	       +
   5912				     значение:
   5913				     ;	 0	 - загрузка системы с НГМД;
   5914				     ;	 5,4	 - тип подключенного ЭЛИ и режим его       +
   5915				     работы:
   5916				     ;		   00 -	не используется;
   5917				     ;		   01 -	40х25,	черно-белый режим цветного      +
   5918				     графического
   5919				     ;			ЭЛИ;
   5920				     ;		   10 -	80х25,	черно-белый режим цветного      +
   5921				     графического
   5922				     ;			ЭЛИ;
   5923				     ;		   11 -	80х25,	черно-белый режим		       +
   5924				     монохромного ЭЛИ.
   5925				     ;	 7,6	 - количество	НГМД;
   5926				     ;	 11,10,9 - количество	адаптеров стыка С2;
   5927				     ;	 12	 - адаптер игр;
   5928				     ;	 15,14	 - количество	печатающих устройств.
   5929				     ;	 Разряды	6 и 7 устанавливаются только в том   +
   5930				     случае, если
   5931				     ; разряд 0 установлен в "1".
   5932				     ;
   5933				     ;----------------------------------------------
   5934
   5935					     assume  cs:code,ds:data
   5936	F84D			     equipment	     proc    far
   5937	F84D  FB			     sti		     ; установить признак	       +
   5938				     разрешения прерывания
   5939	F84E  1E			     push    ds		     ; сохранить сегмент
   5940	F84F  B8 0040			     mov     ax,dat	     ; установить адресацию
   5941	F852  8E D8			     mov     ds,ax
   5942	F854  A1 0010r			     mov     ax,equip_flag   ; получить	конфигурацию       +
   5943				     системы
   5944	F857  1F			     pop     ds		     ; восстановить	сегмент
   5945	F858  CF			     iret		     ; возврат из прерывания
   5946	F859			     equipment	     endp
   5947
   5948				     ;****************************************
   5949				     ;
   5950				     ;	 Загрузка знакогенератора
   5951				     ;
   5952				     ;****************************************
   5953
   5954	F859			     bct     proc    near
   5955	F859  B8 DC00			     mov     ax,0dc00h
   5956	F85C  8E C0			     mov     es,ax
   5957	F85E  B9 1400			     mov     cx,1400h
   5958	F861  BA 03B8			     mov     dx,3b8h
   5959	F864  33 C0			     xor     ax,ax
   5960	F866  EE			     out     dx,al
   5961	F867  33 FF			     xor     di,di
   5962	F869  FC			     cld
   5963	F86A  F3> AB			     rep     stosw
   5964	F86C  BE FA6Er		     bct3:   mov     si,offset crt_char_gen
   5965	F86F  33 FF			     xor     di,di
   5966	F871  33 C0			     xor     ax,ax
   5967	F873  B1 80			     mov     cl,128
   5968	F875			     bct1:
   5969	F875  B3 08			     mov     bl,8
   5970	F877  2E: 8A 04		     bct2:   mov     al,cs:[si]
   5971	F87A  46			     inc     si
   5972	F87B  26: 89 05			     mov     word ptr es:[di],ax
   5973	F87E  47			     inc     di
   5974	F87F  47			     inc     di
   5975	F880  FE CB			     dec     bl
   5976	F882  75 F3			     jnz     bct2
   5977	F884  83 C7 10			     add     di,10h
   5978	F887  FE C9			     dec     cl
   5979	F889  75 EA				     jnz     bct1
   5980	F88B  B0 01				     mov     al, 1
   5981	F88D  EE				     out     dx, al
   5982	F88E  B8 B800				     mov     ax, 0B800h
   5983	F891  8E C0				     mov     es, ax
   5984	F893  B0 01				     mov     al, 1
   5985	F895  BA 03DF				     mov     dx, 3DFh
   5986	F898  EE				     out     dx, al
   5987	F899  BA 03D8				     mov     dx, 3D8h
   5988	F89C  EC				     in	     al, dx
   5989	F89D  8A D8				     mov     bl, al
   5990	F89F  B0 00				     mov     al, 0
   5991	F8A1  EE				     out     dx, al
   5992	F8A2  33 FF				     xor     di, di
   5993	F8A4  B9 0400				     mov     cx, 1024
   5994	F8A7  33 C0				     xor     ax, ax
   5995	F8A9  FC				     cld
   5996	F8AA  F3> AB				     repe stosw
   5997	F8AC  BE FA6Er				     mov     si, offset	crt_char_gen
   5998	F8AF  B9 0400				     mov     cx, 1024
   5999	F8B2  33 FF				     xor     di, di
   6000
   6001	F8B4			     bct4:
   6002	F8B4  2E: 8A 04				     mov     al, cs:[si]
   6003	F8B7  26: 88 05				     mov     es:[di], al
   6004	F8BA  46				     inc     si
   6005	F8BB  47				     inc     di
   6006	F8BC  E2 F6				     loop    bct4
   6007	F8BE  B0 00				     mov     al, 0
   6008	F8C0  BA 03DF				     mov     dx, 3DFh
   6009	F8C3  EE				     out     dx, al
   6010	F8C4  BA 03D8				     mov     dx, 3D8h
   6011	F8C7  8A C3				     mov     al, bl
   6012	F8C9  EE				     out     dx, al
   6013	F8CA  C3				     ret
   6014	F8CB			     bct     endp
   6015
   6016				     ;
   6017				     ;	 Таблица	кодов русских маленьких букв	       +
   6018				     (строчных)
   6019				     ;
   6020	F8CB			     rust    label   byte
   6021	F8CB  1B 31 32 33 34 35	36+	     db	     1bh,'1234567890-='
   6022	      37 38 39 30 2D 3D
   6023
   6024
   6025	F8D8  08 09			     db	     08h,09h
   6026	F8DA  D9 E6 E3 DA D5 DD	D3+	     db	     0d9h,0e6h,0e3h,0dah,0d5h,0ddh,0d3h,0e8h
   6027	      E8
   6028
   6029	F8E2  E9 D7 D6 ED 0D FF	E4+	     db	     0e9h,0d7h,0d6h,0edh,0dh,-1,0e4h,0ebh
   6030	      EB
   6031
   6032	F8EA  D2 D0 DF E0 DE DB	D4+	     db	     0d2h,0d0h,0dfh,0e0h,0deh,0dbh,0d4h,';:'
   6033	      3B 3A
   6034
   6035	F8F3  D1 EE 5C EF E7 E1	DC+	     db	     0d1h,0eeh,5ch,0efh,0e7h,0e1h,0dch,0d8h
   6036	      D8
   6037
   6038	F8FB  E2 EC 2C 2E 2F E5	2A	     db	     0e2h,0ech,',./',0e5h,'*'
   6039
   6040	F902  FF 20 EA			     db	     -1,' ',0eah
   6041
   6042
   6043	F905			     k30     label   byte
   6044	F905  52 4F 50 51 4B 4C	4D	     db	     82,79,80,81,75,76,77
   6045
   6046	F90C  47 48 49			     db	     71,72,73
   6047				     ;---
   6048	F90F  10 11 12 13 14 15	16+	     db	     16,17,18,19,20,21,22,23
   6049	      17
   6050
   6051	F917  18 19 1E 1F 20 21	22+	     db	     24,25,30,31,32,33,34,35
   6052	      23
   6053
   6054	F91F  24 25 26 2C 2D 2E	2F+	     db	     36,37,38,44,45,46,47,48
   6055	      30
   6056
   6057	F927  31 32			     db	     49,50
   6058
   6059				     ;	     Временный	обработчик прерываний стыка С2
   6060
   6061	F929			     rs232_io:
   6062	F929  B8 61F0				     mov     ax, 61F0h
   6063	F92C  CF				     iret
   6064
   6065	F92D			     int15h:
   6066	F92D  F9				     stc
   6067	F92E  B4 86				     mov     ah, 86h
   6068	F930  CA 0002				     retf    2
   6069
   6070				     ;---
   6071	F933  F6 06 0017r 03	     k89:    test    kb_flag,left_shift+right_shift
   6072	F938  74 11			     jz	     k80
   6073	F93A  3C F0			     cmp     al,0f0h
   6074	F93C  74 23			     je	     k89a
   6075	F93E  3C B0			     cmp     al,0b0h
   6076	F940  72 06			     jb	     k81
   6077	F942  3C CF			     cmp     al,0cfh
   6078	F944  77 02			     ja	     k81
   6079	F946  04 20			     add     al,20h
   6080	F948  E9 EE94		     k81:    jmp     k61
   6081	F94B  3C F1		     k80:    cmp     al,0f1h
   6082	F94D  74 0D			     je	     k89b
   6083	F94F  3C D0			     cmp     al,0d0h
   6084	F951  72 F5			     jb	     k81
   6085	F953  3C FE			     cmp     al,0feh
   6086	F955  77 F1			     ja	     k81
   6087	F957  2C 20			     sub     al,20h
   6088	F959  E9 EE83			     jmp     k61
   6089	F95C  2C 01		     k89b:   sub     al,01h
   6090	F95E  E9 EE7E			     jmp     k61
   6091	F961  04 01		     k89a:   add     al,01h
   6092	F963  E9 EE79			     jmp     k61
   6093
   6094	F966			     write_tty2:
   6095	F966  8A 3E 0062r			     mov     bh, ds:active_page
   6096	F96A  E9 FDB5				     jmp     write_tty
   6097
   6098	F96D			     f19a:
   6099	F96D  42				     inc     dx
   6100	F96E  B0 08				     mov     al, 8
   6101	F970  EE				     out     dx, al
   6102	F971  BA 03FE				     mov     dx, 3FEh
   6103	F974  EE				     out     dx, al
   6104	F975  B0 A4				     mov     al, 0A4h
   6105	F977  E6 21				     out     inta01, al
   6106	F979  8B C6				     mov     ax, si
   6107	F97B  B1 03				     mov     cl, 3
   6108	F97D  E9 EBDC				     jmp     f19b
   6109
   6110	F980			     f20a:
   6111	F980  B0 80				     mov     al, 80h
   6112	F982  E6 A0				     out     0A0h, al
   6113	F984  B0 BC				     mov     al, 0BCh
   6114	F986  E6 21				     out     21h, al
   6115	F988  E9 EBE9				     jmp     f20b
   6116				     ;
   6117	F98B  50		     dummm_return:   push    ax
   6118	F98C  B0 20				     mov     al,20h
   6119	F98E  E6 20				     out     20h,al
   6120	F990  58				     pop     ax
   6121	F991  CF				     iret
   6122
   6123	F992  DC*(00)				     db	220 dup(0)
   6124
   6125				     ;**************************************
   6126				     ;
   6127				     ;	 Знакогенератор графический 320х200 и 640х200
   6128				     ;
   6129				     ;***************************************
   6130
   6131
   6132
   6133	FA6E			     crt_char_gen  label  byte
   6134	FA6E  00 00 00 00 00 00	00+	     db	     000h,000h,000h,000h,000h,000h,000h,000h ;d_00
   6135	      00
   6136
   6137	FA76  7E 81 A5 81 BD 99	81+	     db	     07eh,081h,0a5h,081h,0bdh,099h,081h,07eh ;d_01
   6138	      7E
   6139
   6140	FA7E  7E FF DB FF C3 E7	FF+	     db	     07eh,0ffh,0dbh,0ffh,0c3h,0e7h,0ffh,07eh ;d_02
   6141	      7E
   6142
   6143	FA86  6C FE FE FE 7C 38	10+	     db	     06ch,0feh,0feh,0feh,07ch,038h,010h,000h ;d_03
   6144	      00
   6145
   6146	FA8E  10 38 7C FE 7C 38	10+	     db	     010h,038h,07ch,0feh,07ch,038h,010h,000h ;d_04
   6147	      00
   6148
   6149	FA96  38 7C 38 FE FE 7C	38+	     db	     038h,07ch,038h,0feh,0feh,07ch,038h,07ch ;d_05
   6150	      7C
   6151
   6152	FA9E  10 10 38 7C FE 7C	38+	     db	     010h,010h,038h,07ch,0feh,07ch,038h,07ch ;d_06
   6153	      7C
   6154
   6155	FAA6  00 00 18 3C 3C 18	00+	     db	     000h,000h,018h,03ch,03ch,018h,000h,000h ;d_07
   6156	      00
   6157
   6158	FAAE  FF FF E7 C3 C3 E7	FF+	     db	     0ffh,0ffh,0e7h,0c3h,0c3h,0e7h,0ffh,0ffh ;d_08
   6159	      FF
   6160
   6161	FAB6  00 3C 66 42 42 66	3C+	     db	     000h,03ch,066h,042h,042h,066h,03ch,000h ;d_09
   6162	      00
   6163
   6164	FABE  FF C3 99 BD BD 99	C3+	     db	     0ffh,0c3h,099h,0bdh,0bdh,099h,0c3h,0ffh ;d_0a
   6165	      FF
   6166
   6167	FAC6  0F 07 0F 7D CC CC	CC+	     db	     00fh,007h,00fh,07dh,0cch,0cch,0cch,078h ;d_0b
   6168	      78
   6169
   6170	FACE  3C 66 66 66 3C 18	7E+	     db	     03ch,066h,066h,066h,03ch,018h,07eh,018h ;d_0c
   6171	      18
   6172
   6173	FAD6  3F 33 3F 30 30 70	F0+	     db	     03fh,033h,03fh,030h,030h,070h,0f0h,0e0h ;d_0d
   6174	      E0
   6175
   6176	FADE  7F 63 7F 63 63 67	E6+	     db	     07fh,063h,07fh,063h,063h,067h,0e6h,0c0h ;d_0e
   6177	      C0
   6178
   6179	FAE6  99 5A 3C E7 E7 3C	5A+	     db	     099h,05ah,03ch,0e7h,0e7h,03ch,05ah,099h ;d_0f
   6180	      99
   6181
   6182
   6183	FAEE  80 E0 F8 FE F8 E0	80+	     db	     080h,0e0h,0f8h,0feh,0f8h,0e0h,080h,000h ;d_10
   6184	      00
   6185
   6186	FAF6  02 0E 3E FE 3E 0E	02+	     db	     002h,00eh,03eh,0feh,03eh,00eh,002h,000h ;d_11
   6187	      00
   6188
   6189	FAFE  18 3C 7E 18 18 7E	3C+	     db	     018h,03ch,07eh,018h,018h,07eh,03ch,018h ;d_12
   6190	      18
   6191
   6192	FB06  66 66 66 66 66 00	66+	     db	     066h,066h,066h,066h,066h,000h,066h,000h ;d_13
   6193	      00
   6194
   6195	FB0E  7F DB DB 7B 1B 1B	1B+	     db	     07fh,0dbh,0dbh,07bh,01bh,01bh,01bh,000h ;d_14
   6196	      00
   6197
   6198	FB16  3E 63 38 6C 6C 38	CC+	     db	     03eh,063h,038h,06ch,06ch,038h,0cch,078h ;d_15
   6199	      78
   6200
   6201	FB1E  00 00 00 00 7E 7E	7E+	     db	     000h,000h,000h,000h,07eh,07eh,07eh,000h ;d_16
   6202	      00
   6203
   6204	FB26  18 3C 7E 18 7E 3C	18+	     db	     018h,03ch,07eh,018h,07eh,03ch,018h,0ffh ;d_17
   6205	      FF
   6206
   6207	FB2E  18 3C 7E 18 18 18	18+	     db	     018h,03ch,07eh,018h,018h,018h,018h,000h ;d_18
   6208	      00
   6209
   6210	FB36  18 18 18 18 7E 3C	18+	     db	     018h,018h,018h,018h,07eh,03ch,018h,000h ;d_19
   6211	      00
   6212
   6213	FB3E  00 18 0C FE 0C 18	00+	     db	     000h,018h,00ch,0feh,00ch,018h,000h,000h ;d_1a
   6214	      00
   6215
   6216	FB46  00 30 60 FE 60 30	00+	     db	     000h,030h,060h,0feh,060h,030h,000h,000h ;d_1b
   6217	      00
   6218
   6219	FB4E  00 00 C0 C0 C0 FE	00+	     db	     000h,000h,0c0h,0c0h,0c0h,0feh,000h,000h ;d_1c
   6220	      00
   6221
   6222	FB56  00 24 66 FF 66 24	00+	     db	     000h,024h,066h,0ffh,066h,024h,000h,000h ;d_1d
   6223	      00
   6224
   6225	FB5E  00 18 3C 7E FF FF	00+	     db	     000h,018h,03ch,07eh,0ffh,0ffh,000h,000h ;d_1e
   6226	      00
   6227
   6228	FB66  00 FF FF 7E 3C 18	00+	     db	     000h,0ffh,0ffh,07eh,03ch,018h,000h,000h ;d_1f
   6229	      00
   6230
   6231
   6232	FB6E  00 00 00 00 00 00	00+	     db	     000h,000h,000h,000h,000h,000h,000h,000h ;sp d_20
   6233	      00
   6234
   6235	FB76  30 78 78 30 30 00	30+	     db	     030h,078h,078h,030h,030h,000h,030h,000h ;!	d_21
   6236	      00
   6237
   6238	FB7E  6C 6C 6C 00 00 00	00+	     db	     06ch,06ch,06ch,000h,000h,000h,000h,000h ;"d_22
   6239	      00
   6240
   6241	FB86  6C 6C FE 6C FE 6C	6C+	     db	     06ch,06ch,0feh,06ch,0feh,06ch,06ch,000h ;#	d_23
   6242	      00
   6243
   6244	FB8E  30 7C C0 78 0C F8	30+	     db	     030h,07ch,0c0h,078h,00ch,0f8h,030h,000h ;$	d_24
   6245	      00
   6246
   6247	FB96  00 C6 CC 18 30 66	C6+	     db	     000h,0c6h,0cch,018h,030h,066h,0c6h,000h ;per cent d_25
   6248	      00
   6249
   6250	FB9E  38 6C 38 76 DC CC	76+	     db	     038h,06ch,038h,076h,0dch,0cch,076h,000h ;&	d_26
   6251	      00
   6252
   6253	FBA6  60 60 C0 00 00 00	00+	     db	     060h,060h,0c0h,000h,000h,000h,000h,000h ;'	d_27
   6254	      00
   6255
   6256	FBAE  18 30 60 60 60 30	18+	     db	     018h,030h,060h,060h,060h,030h,018h,000h ;(	d_28
   6257	      00
   6258
   6259	FBB6  60 30 18 18 18 30	60+	     db	     060h,030h,018h,018h,018h,030h,060h,000h ;)	d_29
   6260	      00
   6261
   6262	FBBE  00 66 3C FF 3C 66	00+	     db	     000h,066h,03ch,0ffh,03ch,066h,000h,000h ;*	d_2a
   6263	      00
   6264
   6265	FBC6  00 30 30 FC 30 30	00+	     db	     000h,030h,030h,0fch,030h,030h,000h,000h ;+	d_2b
   6266	      00
   6267
   6268	FBCE  00 00 00 00 00 30	30+	     db	     000h,000h,000h,000h,000h,030h,030h,060h ;,	d_2c
   6269	      60
   6270
   6271	FBD6  00 00 00 FC 00 00	00+	     db	     000h,000h,000h,0fch,000h,000h,000h,000h ;-	d_2d
   6272	      00
   6273
   6274	FBDE  00 00 00 00 00 30	30+	     db	     000h,000h,000h,000h,000h,030h,030h,000h ;.	d_2e
   6275	      00
   6276
   6277	FBE6  06 0C 18 30 60 C0	80+	     db	     006h,00ch,018h,030h,060h,0c0h,080h,000h ;/	d_2f
   6278	      00
   6279
   6280
   6281	FBEE  7C C6 CE DE F6 E6	7C+	     db	     07ch,0c6h,0ceh,0deh,0f6h,0e6h,07ch,000h ;0	d_30
   6282	      00
   6283
   6284	FBF6  30 70 30 30 30 30	FC+	     db	     030h,070h,030h,030h,030h,030h,0fch,000h ;1	d_31
   6285	      00
   6286
   6287	FBFE  78 CC 0C 38 60 CC	FC+	     db	     078h,0cch,00ch,038h,060h,0cch,0fch,000h ;2	d_32
   6288	      00
   6289
   6290	FC06  78 CC 0C 38 0C CC	78+	     db	     078h,0cch,00ch,038h,00ch,0cch,078h,000h ;3	d_33
   6291	      00
   6292
   6293	FC0E  1C 3C 6C CC FE 0C	1E+	     db	     01ch,03ch,06ch,0cch,0feh,00ch,01eh,000h ;4	d_34
   6294	      00
   6295
   6296	FC16  FC C0 F8 0C 0C CC	78+	     db	     0fch,0c0h,0f8h,00ch,00ch,0cch,078h,000h ;5	d_35
   6297	      00
   6298
   6299	FC1E  38 60 C0 F8 CC CC	78+	     db	     038h,060h,0c0h,0f8h,0cch,0cch,078h,000h ;6	d_36
   6300	      00
   6301
   6302	FC26  FC CC 0C 18 30 30	30+	     db	     0fch,0cch,00ch,018h,030h,030h,030h,000h ;7	d_37
   6303	      00
   6304
   6305	FC2E  78 CC CC 78 CC CC	78+	     db	     078h,0cch,0cch,078h,0cch,0cch,078h,000h ;8	d_38
   6306	      00
   6307
   6308	FC36  78 CC CC 7C 0C 18	70+	     db	     078h,0cch,0cch,07ch,00ch,018h,070h,000h ;9	d_39
   6309	      00
   6310
   6311	FC3E  00 30 30 00 00 30	30+	     db	     000h,030h,030h,000h,000h,030h,030h,000h ;:	d_3a
   6312	      00
   6313
   6314	FC46  00 30 30 00 00 30	30+	     db	     000h,030h,030h,000h,000h,030h,030h,060h ;;	d_3b
   6315	      60
   6316
   6317	FC4E  18 30 60 C0 60 30	18+	     db	     018h,030h,060h,0c0h,060h,030h,018h,000h ;<	d_3c
   6318	      00
   6319
   6320	FC56  00 00 FC 00 00 FC	00+	     db	     000h,000h,0fch,000h,000h,0fch,000h,000h ;=	d_3d
   6321	      00
   6322
   6323	FC5E  60 30 18 0C 18 30	60+	     db	     060h,030h,018h,00ch,018h,030h,060h,000h ;>	d_3e
   6324	      00
   6325
   6326	FC66  78 CC 0C 18 30 00	30+	     db	     078h,0cch,00ch,018h,030h,000h,030h,000h ;?	d_3f
   6327	      00
   6328
   6329
   6330	FC6E  7C C6 DE DE DE C0	78+	     db	     07ch,0c6h,0deh,0deh,0deh,0c0h,078h,000h ;@	d_40
   6331	      00
   6332
   6333	FC76  30 78 CC CC FC CC	CC+	     db	     030h,078h,0cch,0cch,0fch,0cch,0cch,000h ;A	d_41
   6334	      00
   6335
   6336	FC7E  FC 66 66 7C 66 66	FC+	     db	     0fch,066h,066h,07ch,066h,066h,0fch,000h ;B	d_42
   6337	      00
   6338
   6339	FC86  3C 66 C0 C0 C0 66	3C+	     db	     03ch,066h,0c0h,0c0h,0c0h,066h,03ch,000h ;C	d_43
   6340	      00
   6341
   6342	FC8E  F8 6C 66 66 66 6C	F8+	     db	     0f8h,06ch,066h,066h,066h,06ch,0f8h,000h ;D	d_44
   6343	      00
   6344
   6345	FC96  FE 62 68 78 68 62	FE+	     db	     0feh,062h,068h,078h,068h,062h,0feh,000h ;E	d_45
   6346	      00
   6347
   6348	FC9E  FE 62 68 78 68 60	F0+	     db	     0feh,062h,068h,078h,068h,060h,0f0h,000h ;F	d_46
   6349	      00
   6350
   6351	FCA6  3C 66 C0 C0 CE 66	3E+	     db	     03ch,066h,0c0h,0c0h,0ceh,066h,03eh,000h ;G	d_47
   6352	      00
   6353
   6354	FCAE  CC CC CC FC CC CC	CC+	     db	     0cch,0cch,0cch,0fch,0cch,0cch,0cch,000h ;H	d_48
   6355	      00
   6356
   6357	FCB6  78 30 30 30 30 30	78+	     db	     078h,030h,030h,030h,030h,030h,078h,000h ;I	d_49
   6358	      00
   6359
   6360	FCBE  1E 0C 0C 0C CC CC	78+	     db	     01eh,00ch,00ch,00ch,0cch,0cch,078h,000h ;J	d_4a
   6361	      00
   6362
   6363	FCC6  E6 66 6C 78 6C 66	E6+	     db	     0e6h,066h,06ch,078h,06ch,066h,0e6h,000h ;K	d_4b
   6364	      00
   6365
   6366	FCCE  F0 60 60 60 62 66	FE+	     db	     0f0h,060h,060h,060h,062h,066h,0feh,000h ;L	d_4c
   6367	      00
   6368
   6369	FCD6  C6 EE FE FE D6 C6	C6+	     db	     0c6h,0eeh,0feh,0feh,0d6h,0c6h,0c6h,000h ;M	d_4d
   6370	      00
   6371
   6372	FCDE  C6 E6 F6 DE CE C6	C6+	     db	     0c6h,0e6h,0f6h,0deh,0ceh,0c6h,0c6h,000h ;N	d_4e
   6373	      00
   6374
   6375	FCE6  38 6C C6 C6 C6 6C	38+	     db	     038h,06ch,0c6h,0c6h,0c6h,06ch,038h,000h ;O	d_4f
   6376	      00
   6377
   6378
   6379	FCEE  FC 66 66 7C 60 60	F0+	     db	     0fch,066h,066h,07ch,060h,060h,0f0h,000h ;P	d_50
   6380	      00
   6381
   6382	FCF6  78 CC CC CC DC 78	1C+	     db	     078h,0cch,0cch,0cch,0dch,078h,01ch,000h ;Q	d_51
   6383	      00
   6384
   6385	FCFE  FC 66 66 7C 6C 66	E6+	     db	     0fch,066h,066h,07ch,06ch,066h,0e6h,000h ;R	d_52
   6386	      00
   6387
   6388	FD06  78 CC E0 70 1C CC	78+	     db	     078h,0cch,0e0h,070h,01ch,0cch,078h,000h ;S	d_53
   6389	      00
   6390
   6391	FD0E  FC B4 30 30 30 30	78+	     db	     0fch,0b4h,030h,030h,030h,030h,078h,000h ;T	d_54
   6392	      00
   6393
   6394	FD16  CC CC CC CC CC CC	FC+	     db	     0cch,0cch,0cch,0cch,0cch,0cch,0fch,000h ;U	d_55
   6395	      00
   6396
   6397	FD1E  CC CC CC CC CC 78	30+	     db	     0cch,0cch,0cch,0cch,0cch,078h,030h,000h ;V	d_56
   6398	      00
   6399
   6400	FD26  C6 C6 C6 D6 FE EE	C6+	     db	     0c6h,0c6h,0c6h,0d6h,0feh,0eeh,0c6h,000h ;W	d_57
   6401	      00
   6402
   6403	FD2E  C6 C6 6C 38 38 6C	C6+	     db	     0c6h,0c6h,06ch,038h,038h,06ch,0c6h,000h ;X	d_58
   6404	      00
   6405
   6406	FD36  CC CC CC 78 30 30	78+	     db	     0cch,0cch,0cch,078h,030h,030h,078h,000h ;Y	d_59
   6407	      00
   6408
   6409	FD3E  FE C6 8C 18 32 66	FE+	     db	     0feh,0c6h,08ch,018h,032h,066h,0feh,000h ;Z	d_5a
   6410	      00
   6411
   6412	FD46  78 60 60 60 60 60	78+	     db	     078h,060h,060h,060h,060h,060h,078h,000h ;(	d_5b
   6413	      00
   6414
   6415	FD4E  C0 60 30 18 0C 06	02+	     db	     0c0h,060h,030h,018h,00ch,006h,002h,000h ;backslash
   6416	      00
   6417
   6418	FD56  78 18 18 18 18 18	78+	     db	     078h,018h,018h,018h,018h,018h,078h,000h ;)	d_5d
   6419	      00
   6420
   6421	FD5E  10 38 6C C6 00 00	00+	     db	     010h,038h,06ch,0c6h,000h,000h,000h,000h ;cimpqumflex
   6422	      00
   6423
   6424	FD66  00 00 00 00 00 00	00+	     db	     000h,000h,000h,000h,000h,000h,000h,0ffh ;_	d_5f
   6425	      FF
   6426
   6427
   6428	FD6E  30 30 18 00 00 00	00+	     db	     030h,030h,018h,000h,000h,000h,000h,000h ;	d_60
   6429	      00
   6430
   6431	FD76  00 00 78 0C 7C CC	76+	     db	     000h,000h,078h,00ch,07ch,0cch,076h,000h ;lower case a
   6432	      00
   6433
   6434	FD7E  E0 60 60 7C 66 66	DC+	     db	     0e0h,060h,060h,07ch,066h,066h,0dch,000h ;b	d_62
   6435	      00
   6436
   6437	FD86  00 00 78 CC C0 CC	78+	     db	     000h,000h,078h,0cch,0c0h,0cch,078h,000h ;c	d_63
   6438	      00
   6439
   6440	FD8E  1C 0C 0C 7C CC CC	76+	     db	     01ch,00ch,00ch,07ch,0cch,0cch,076h,000h ;d	d_64
   6441	      00
   6442
   6443	FD96  00 00 78 CC FC C0	78+	     db	     000h,000h,078h,0cch,0fch,0c0h,078h,000h ;e	d_65
   6444	      00
   6445
   6446	FD9E  38 6C 60 F0 60 60	F0+	     db	     038h,06ch,060h,0f0h,060h,060h,0f0h,000h ;f	d_66
   6447	      00
   6448
   6449	FDA6  00 00 76 CC CC 7C	0C+	     db	     000h,000h,076h,0cch,0cch,07ch,00ch,0f8h ;g	d_67
   6450	      F8
   6451
   6452	FDAE  E0 60 6C 76 66 66	E6+	     db	     0e0h,060h,06ch,076h,066h,066h,0e6h,000h ;h	d_68
   6453	      00
   6454
   6455	FDB6  30 00 70 30 30 30	78+	     db	     030h,000h,070h,030h,030h,030h,078h,000h ;i	d_69
   6456	      00
   6457
   6458	FDBE  0C 00 0C 0C 0C CC	CC+	     db	     00ch,000h,00ch,00ch,00ch,0cch,0cch,078h ;j	d_6a
   6459	      78
   6460
   6461	FDC6  E0 60 66 6C 78 6C	E6+	     db	     0e0h,060h,066h,06ch,078h,06ch,0e6h,000h ;k	d_6b
   6462	      00
   6463
   6464	FDCE  70 30 30 30 30 30	78+	     db	     070h,030h,030h,030h,030h,030h,078h,000h ;l	d_6c
   6465	      00
   6466
   6467	FDD6  00 00 CC FE FE D6	C6+	     db	     000h,000h,0cch,0feh,0feh,0d6h,0c6h,000h ;m	d_6d
   6468	      00
   6469
   6470	FDDE  00 00 F8 CC CC CC	CC+	     db	     000h,000h,0f8h,0cch,0cch,0cch,0cch,000h ;n	d_6e
   6471	      00
   6472
   6473	FDE6  00 00 78 CC CC CC	78+	     db	     000h,000h,078h,0cch,0cch,0cch,078h,000h ;o	d_6f
   6474	      00
   6475
   6476
   6477	FDEE  00 00 DC 66 66 7C	60+	     db	     000h,000h,0dch,066h,066h,07ch,060h,0f0h ;p	d_70
   6478	      F0
   6479
   6480	FDF6  00 00 76 CC CC 7C	0C+	     db	     000h,000h,076h,0cch,0cch,07ch,00ch,01eh ;q	d_71
   6481	      1E
   6482
   6483	FDFE  00 00 DC 76 66 60	F0+	     db	     000h,000h,0dch,076h,066h,060h,0f0h,000h ;r	d_72
   6484	      00
   6485
   6486	FE06  00 00 7C C0 78 0C	F8+	     db	     000h,000h,07ch,0c0h,078h,00ch,0f8h,000h ;s	d_73
   6487	      00
   6488
   6489	FE0E  10 30 7C 30 30 34	18+	     db	     010h,030h,07ch,030h,030h,034h,018h,000h ;t	d_74
   6490	      00
   6491
   6492	FE16  00 00 CC CC CC CC	76+	     db	     000h,000h,0cch,0cch,0cch,0cch,076h,000h ;u	d_75
   6493	      00
   6494
   6495	FE1E  00 00 CC CC CC 78	30+	     db	     000h,000h,0cch,0cch,0cch,078h,030h,000h ;v	d_76
   6496	      00
   6497
   6498	FE26  00 00 C6 D6 FE FE	6C+	     db	     000h,000h,0c6h,0d6h,0feh,0feh,06ch,000h ;w	d_77
   6499	      00
   6500
   6501	FE2E  00 00 C6 6C 38 6C	C6+	     db	     000h,000h,0c6h,06ch,038h,06ch,0c6h,000h ;x	d_78
   6502	      00
   6503
   6504	FE36  00 00 CC CC CC 7C	0C+	     db	     000h,000h,0cch,0cch,0cch,07ch,00ch,0f8h ;y	d_79
   6505	      F8
   6506
   6507	FE3E  00 00 FC 98 30 64	FC+	     db	     000h,000h,0fch,098h,030h,064h,0fch,000h ;z	d_7a
   6508	      00
   6509
   6510	FE46  1C 30 30 E0 30 30	1C+	     db	     01ch,030h,030h,0e0h,030h,030h,01ch,000h ;	d_7b
   6511	      00
   6512
   6513	FE4E  18 18 18 00 18 18	18+	     db	     018h,018h,018h,000h,018h,018h,018h,000h ;	d_7c
   6514	      00
   6515
   6516	FE56  E0 30 30 1C 30 30	E0+	     db	     0e0h,030h,030h,01ch,030h,030h,0e0h,000h ;	d_7d
   6517	      00
   6518
   6519	FE5E  76 DC 00 00 00 00	00+	     db	     076h,0dch,000h,000h,000h,000h,000h,000h ;	d_7e
   6520	      00
   6521
   6522	FE66  00 10 38 6C C6 C6	FE+	     db	     000h,010h,038h,06ch,0c6h,0c6h,0feh,000h ;delta d_7f
   6523	      00
   6524
   6525
   6526				     ;---int 1a-------------------------------
   6527				     ;
   6528				     ;	 Программа установки-считывания времени     +
   6529				     суток
   6530				     ;
   6531				     ;	 Эта	программа обеспечивает выполнение       +
   6532				     двух функций, код которых
   6533				     ; задается	в регистре AH:
   6534				     ;	 AH=0 -	считать текущее состояние часов. После+
   6535				     выполнения коман-
   6536				     ; ды регистры CX	и DX содержат старшую и младшую+
   6537				     части	счетчика.
   6538				     ;	 Если регистр AL содержит "0", то счет	идет в    +
   6539				     течение одних
   6540				     ; суток, при любом другом значении счет	       +
   6541				     переходит	на следующие
   6542				     ; сутки;
   6543				     ;
   6544				     ;	 AH=1 -	записать текущее	состояние часов.	       +
   6545				     Регистры CX и DX
   6546				     ; содержат	старшую и младшую части счетчика.
   6547				     ;
   6548				     ;------------------------------------------
   6549					     assume  cs:code,ds:data
   6550	FE6E			     time_of_day     proc    far
   6551	FE6E  FB			     sti	     ; уст признак разрешения	       +
   6552				     прерывания
   6553	FE6F  1E			     push    ds	     ; сохранить сегмент
   6554	FE70  50			     push    ax	     ; сохранить параметры
   6555	FE71  B8 0040			     mov     ax,dat
   6556	FE74  8E D8			     mov     ds,ax
   6557	FE76  58			     pop     ax
   6558	FE77  0A E4			     or	     ah,ah   ; AH=0 ?
   6559	FE79  74 07			     jz	     t2	 ; да, переход	к считыванию		       +
   6560				     текущего состояния
   6561	FE7B  FE CC			     dec     ah	     ; AH=1 ?
   6562	FE7D  74 16			     jz	     t3	 ; да, переход	к установке текущего +
   6563				     состояния
   6564
   6565	FE7F			     t1:     ; Возврат из программы
   6566
   6567	FE7F  FB			     sti	     ; уст признак разрешения	       +
   6568				     прерывания
   6569	FE80  1F			     pop     ds	     ; возврат сегмента
   6570	FE81  CF			     iret	     ; возврат к программе,вызвавшей +
   6571				     процедуру
   6572
   6573	FE82			     t2:     ; Считать текущее состояния	часов
   6574
   6575	FE82  FA			     cli	     ; сбросить	признак разрешения    +
   6576				     прерывания
   6577	FE83  A0 0070r			     mov     al,timer_ofl  ; считать в AL флажок перехода+
   6578				     на сле-
   6579	FE86  C6 06 0070r 00		     mov     timer_ofl,0   ; дующие сутки и	сбросить его+
   6580				     в	памяти
   6581	FE8B  8B 0E 006Er		     mov     cx,timer_high	     ; установить старшую и  +
   6582				     младшую
   6583	FE8F  8B 16 006Cr		     mov     dx,timer_low	     ; части счетчика
   6584	FE93  EB EA			     jmp     short t1
   6585
   6586	FE95			     t3:     ; Установить текущее состояние часов
   6587
   6588	FE95  FA			     cli	     ; сброс признака разрешения	       +
   6589				     прерывания
   6590	FE96  89 16 006Cr		     mov     timer_low,dx	     ; установить младшую и  +
   6591				     старшую
   6592	FE9A  89 0E 006Er		     mov     timer_high,cx	     ; части счетчика
   6593	FE9E  C6 06 0070r 00		     mov     timer_ofl,0     ; сброс флажка перехода	       +
   6594				     через	сутки
   6595	FEA3  EB DA			     jmp     short t1	     ; возврат из программы	       +
   6596				     отсчета времени
   6597	FEA5			     time_of_day     endp
   6598
   6599				     ;-------int 08-------------------
   6600				     ;
   6601				     ;	 Программа обработки прерывания таймера     +
   6602				     КР580ВИ53 (INT	8H) об-
   6603				     ; рабатывает прерывания, аппаратурно	       +
   6604				     возникающие от нулевого канала
   6605				     ; таймера, на вход которого подаются сигналы  +
   6606				     с	частотой 1,228 МГц,
   6607				     ; делящиеся на 56263 для обеспечения 18,2		       +
   6608				     прерываний в секунду.
   6609				     ;	 При	обработке прерывания	корректируется   +
   6610				     программный счетчик,
   6611				     ; хранящийся в памяти по адресу 0046CH (младшая   +
   6612				     часть	счетчика) и
   6613				     ; адресу 0047EH (старшая часть счетчика)	и	       +
   6614				     используемый для уста-
   6615				     ; новки времени суток.
   6616				     ;	 В функции программы входит коррекция	       +
   6617				     счетчика, управляющего
   6618				     ; двигателем НГМД. После обнуления счетчика   +
   6619				     двигатель	выключается.
   6620				     ;	 Вектор 1CH дает возможность пользователю     +
   6621				     входить в заданную
   6622				     ; программу с частотой прерывания таймера (18.2+
   6623				     прерываний в секун-
   6624				     ; ду). Для этого	в таблице векторов прерываний+
   6625				     по адресу 007CH
   6626				     ; необходимо задать адрес пользовательской   +
   6627				     программы.
   6628				     ;
   6629				     ;---------------------------------------------------
   6630
   6631	FEA5			     timer_int	     proc    far
   6632	FEA5  FB			     sti	     ; уст признак разрешения	       +
   6633				     прерывания
   6634	FEA6  1E			     push    ds
   6635	FEA7  50			     push    ax
   6636	FEA8  52			     push    dx
   6637	FEA9  B8 0040			     mov     ax,dat
   6638	FEAC  8E D8			     mov     ds,ax
   6639	FEAE  FF 06 006Cr		     inc     timer_low	  ; +1 к старшей части счетчика
   6640	FEB2  75 04			     jnz     t4
   6641	FEB4  FF 06 006Er		     inc     timer_high	  ; +1 к старшей части счетчика
   6642
   6643	FEB8			     t4:     ; Опрос счетчика = 24	часам
   6644
   6645	FEB8  83 3E 006Er 18		     cmp     timer_high,018h
   6646	FEBD  75 19			     jnz     t5
   6647	FEBF  81 3E 006Cr 00B0		     cmp     timer_low,0b0h
   6648	FEC5  75 11			     jnz     t5
   6649
   6650				     ;	 Таймер исчерпал 24 часа
   6651
   6652	FEC7  C7 06 006Er 0000		     mov     timer_high,0   ; сброс старшей	и младшей      +
   6653				     частей
   6654	FECD  C7 06 006Cr 0000		     mov     timer_low,0    ; счетчика и установка	       +
   6655				     флажка пере-
   6656	FED3  C6 06 0070r 01		     mov     timer_ofl,1    ; хода счета на следующие      +
   6657				     сутки
   6658
   6659				     ;	 Выключение мотора НГМД, если счетчик	       +
   6660				     управления мотором
   6661				     ; исчерпан
   6662
   6663	FED8			     t5:
   6664	FED8  FE 0E 0040r		     dec     motor_count
   6665	FEDC  75 0B			     jnz     t6		     ; переход, если	счетчик не    +
   6666				     установлен
   6667	FEDE  80 26 003Fr F0		     and     motor_status,0f0h
   6668	FEE3  B0 0C			     mov     al,0ch
   6669	FEE5  BA 03F2			     mov     dx,03f2h
   6670	FEE8  EE			     out     dx,al	     ; выключить мотор
   6671
   6672	FEE9			     t6:
   6673	FEE9  CD 1C			     int     1ch     ; передача	управления программе+
   6674				     пользователя
   6675	FEEB  B0 20			     mov     al,eoi
   6676	FEED  E6 20			     out     020h,al	    ; конец прерывания
   6677	FEEF  5A			     pop     dx
   6678	FEF0  58			     pop     ax
   6679	FEF1  1F			     pop     ds
   6680	FEF2  CF			     iret		     ; возврат из прерывания
   6681	FEF3			     timer_int	     endp
   6682				     ;---------------------------------
   6683				     ;
   6684				     ;	 Эти	вектора передаются в область		       +
   6685				     прерывания 8086 во время
   6686				     ; включения питания.
   6687				     ;
   6688				     ;---------------------------------
   6689	FEF3			     vector_table    label   word    ; таблица векторов		       +
   6690				     прерываний
   6691
   6692	FEF3  FEA5r			     dw	     offset timer_int	     ; прерывание 8
   6693	FEF5  E987r			     dw	     offset kb_int	     ; прерывание 9
   6694	FEF7  FF53r			     dw	     offset dummy_return     ; прерывание А
   6695	FEF9  F98Br			     dw	     offset dummm_return     ; прерывание B
   6696	FEFB  F98Br			     dw	     offset dummm_return     ; прерывание C
   6697	FEFD  FF53r			     dw	     offset dummy_return     ; прерывание D
   6698	FEFF  EF57r			     dw	     offset disk_int	     ; прерывание E
   6699	FF01  FF53r			     dw	     offset dummy_return     ; прерывание F
   6700	FF03  F065r			     dw	     offset video_io	     ; прерывание 10H
   6701	FF05  F84Dr			     dw	     offset equipment	     ; прерывание 11H
   6702	FF07  F841r			     dw	     offset memory_size_determine    ; прерывание 12H
   6703	FF09  EC59r			     dw	     offset diskette_io	     ; прерывание 13H
   6704	FF0B  F929r			     dw	     offset rs232_io	     ; прерывание  14H
   6705	FF0D  F92Dr			     dw	     offset int15h	     ; int 15h (rc заглушка)
   6706	FF0F  E82Er			     dw	     offset keyboard_io	     ; прерывание 16H
   6707	FF11  EFD2r			     dw	     offset printer_io	     ; прерывание 17H
   6708	FF13  E067r			     dw	     offset start	     ; rc перывание 18h,	       +
   6709				     поставил как в	1841 перезагрузку
   6710	FF15  E6F7r			     dw	     offset boot_strap	     ; прерывание 19H
   6711	FF17  FE6Er			     dw	     time_of_day     ; прерывание 1АH - время суток
   6712	FF19  FF53r			     dw	     dummy_return    ; прерывание 1BH	- прерывание +
   6713				     клавиатуры
   6714	FF1B  FF53r			     dw	     dummy_return    ; прерывание 1C - прерывание  +
   6715				     таймера
   6716	FF1D  F0A4r			     dw	     video_parms     ; прерывание 1D - параметры    +
   6717				     видео
   6718	FF1F  EFC7r			     dw	     offset  disk_base	 ;прерывание 1EH - параметры+
   6719				     НГМД
   6720	FF21  0000			     dw	     0		     ; 1FH - адрес	таблицы пользов. +
   6721				     знакогенер. (не инициализируется)
   6722
   6723					     org     0ff53h	     ;rc для	того, чтобы не	       +
   6724				     съехало при сокращении	таблицы векторов
   6725	FF53			     dummy_return:
   6726	FF53  CF			     iret
   6727
   6728				     ;---int 5----------------------
   6729				     ;
   6730				     ;	 Программа вывода на печать содержимого      +
   6731				     буфера ЭЛИ вызывается
   6732				     ; одновременным нажатием клавиши ПЕЧ и	       +
   6733				     клавиши переключения регист-
   6734				     ; ров. Позиция курсора сохраняется до	       +
   6735				     завершения процедуры обработки
   6736				     ; прерывания. Повторное	нажатие названных      +
   6737				     клавиш во время обработки
   6738				     ; прерывания игнорируется.
   6739				     ;	 При	выполнении программы	в постоянно	       +
   6740				     распределенной рабочей
   6741				     ; области памяти по	адресу 0500H			       +
   6742				     устанавливается следующая
   6743				     ; информация:
   6744				     ;	 0    -	содержимое буфера ЭЛИ еще	не выведено  +
   6745				     на печать,	либо
   6746				     ; вывод уже завершен;
   6747				     ;	 1    -	в процессе вывода содержимого	буфера   +
   6748				     ЭЛИ на печать;
   6749				     ;	 255  -	при печати обнаружена ошибка.
   6750				     ;-----------------------------------------------------
   6751
   6752					     assume  cs:code,ds:xxdata
   6753
   6754	FF54			     print_screen    proc    far
   6755	FF54  FB			     sti		  ; уст признак разрешения	       +
   6756				     прерывания
   6757	FF55  1E			     push    ds
   6758	FF56  50			     push    ax
   6759	FF57  53			     push    bx
   6760	FF58  51			     push    cx	  ; будет использоваться заглавная +
   6761				     буква	для курсора
   6762	FF59  52			     push    dx	  ; будет содержать текущее	       +
   6763				     положение	курсора
   6764	FF5A  B8 0050			     mov     ax,xxdat	     ; адрес 50
   6765	FF5D  8E D8			     mov     ds,ax
   6766	FF5F  80 3E 0000r 01		     cmp     status_byte,1   ; печать готова ?
   6767	FF64  74 5F			     jz	     exit	     ; переход, если	печать	       +
   6768				     готова
   6769	FF66  C6 06 0000r 01		     mov     status_byte,1   ;
   6770	FF6B  B4 0F			     mov     ah,15	     ; требуется текущий режим    +
   6771				     экрана
   6772	FF6D  CD 10			     int     10h	     ; AL - режим,	AH - число		       +
   6773				     строк/колонок
   6774								     ; BH - страница,выведенная на +
   6775				     экран
   6776
   6777
   6778				     ;*************************************8
   6779				     ;
   6780				     ;	 В этом месте:
   6781				     ;			 AX - колонка, строка,
   6782				     ;			 BH - номер отображаемой страницы.
   6783				     ;
   6784				     ;	 Стек содержит DS, AX, BX, CX, DX.
   6785				     ;
   6786				     ;			 AL - режим
   6787				     ;
   6788				     ;**************************************
   6789
   6790	FF6F  8A CC			     mov     cl,ah
   6791	FF71  B5 19			     mov     ch,25
   6792	FF73  E8 0055			     call    crlf
   6793	FF76  51			     push    cx
   6794	FF77  B4 03			     mov     ah,3
   6795	FF79  CD 10			     int     10h
   6796	FF7B  59			     pop     cx
   6797	FF7C  52			     push    dx
   6798	FF7D  33 D2			     xor     dx,dx
   6799
   6800				     ;**************************************
   6801				     ;
   6802				     ;	  Считывание знака, находящегося в текущей  +
   6803				     позиции курсора
   6804				     ; и вывод на печать
   6805				     ;
   6806				     ;**************************************
   6807
   6808	FF7F  B4 02		     pri10:  mov     ah,2
   6809	FF81  CD 10			     int     10h
   6810	FF83  B4 08			     mov     ah,8
   6811	FF85  CD 10			     int     10h
   6812	FF87  0A C0			     or	     al,al
   6813	FF89  75 02			     jnz     pri15
   6814	FF8B  B0 20			     mov     al,' '
   6815	FF8D			     pri15:
   6816	FF8D  52			     push    dx
   6817	FF8E  33 D2			     xor     dx,dx
   6818	FF90  32 E4			     xor     ah,ah
   6819	FF92  CD 17			     int     17h
   6820	FF94  5A			     pop     dx
   6821	FF95  F6 C4 25			     test    ah,25h
   6822	FF98  75 21			     jnz     err10
   6823	FF9A  FE C2			     inc     dl
   6824	FF9C  3A CA			     cmp     cl,dl
   6825	FF9E  75 DF			     jnz     pri10
   6826	FFA0  32 D2			     xor     dl,dl
   6827	FFA2  8A E2			     mov     ah,dl
   6828	FFA4  52			     push    dx
   6829	FFA5  E8 0023			     call    crlf
   6830	FFA8  5A			     pop     dx
   6831	FFA9  FE C6			     inc     dh
   6832	FFAB  3A EE			     cmp     ch,dh
   6833	FFAD  75 D0			     jnz     pri10
   6834	FFAF  5A			     pop     dx
   6835	FFB0  B4 02			     mov     ah,2
   6836	FFB2  CD 10			     int     10h
   6837	FFB4  C6 06 0000r 00		     mov     status_byte,0
   6838	FFB9  EB 0A			     jmp     short exit
   6839	FFBB  5A		     err10:  pop     dx
   6840	FFBC  B4 02			     mov     ah,2
   6841	FFBE  CD 10			     int     10h
   6842	FFC0  C6 06 0000r FF		     mov     status_byte,0ffh
   6843
   6844	FFC5  5A		     exit:   pop     dx
   6845	FFC6  59			     pop     cx
   6846	FFC7  5B			     pop     bx
   6847	FFC8  58			     pop     ax
   6848	FFC9  1F			     pop     ds
   6849	FFCA  CF			     iret
   6850	FFCB			     print_screen    endp
   6851
   6852				     ;	 Возврат	каретки
   6853
   6854	FFCB			     crlf    proc    near
   6855	FFCB  33 D2			     xor     dx,dx
   6856	FFCD  32 E4			     xor     ah,ah
   6857	FFCF  B0 0A			     mov     al,12q
   6858	FFD1  CD 17			     int     17h
   6859	FFD3  32 E4			     xor     ah,ah
   6860	FFD5  B0 0D			     mov     al,15q
   6861	FFD7  CD 17			     int     17h
   6862	FFD9  C3			     ret
   6863	FFDA			     crlf    endp
   6864
   6865	FFDA  16*(00)				     db	22 dup(0)
   6866
   6867				     ;--------------------------------------
   6868				     ;
   6869				     ;	 Включение питания
   6870				     ;
   6871				     ;--------------------------------------
   6872
   6873				     ;vector segment at	0ffffh
   6874
   6875				     ;	 Переход	по включению	питания
   6876
   6877	FFF0  EA		     POST:	     db	     0eah	     ; db    0eah,5bh,0e0h,00h,0f0h  ; jmp reset
   6878	FFF1  E067r F000			     dw	     offset reset, cod	     ; ###Gleb###
   6879
   6880	FFF5  30 34 2F 32 34 2F	38+		     db	'04/24/81'
   6881	      31
   6882
   6883	FFFD  00 00				     db	   0, 0
   6884
   6885	FFFF  00				     db	   0 ;
   6886				     ;vector ends
   6887
   6888
   6889
   6890
   6891
   6892
   6893	0000			     code    ends
   6894					     end     POST

Symbol Name			  Type	 Value

??DATE				  Text	 "10-30-21"
??FILENAME			  Text	 "1840v4  "
??TIME				  Text	 "21:08:12"
??VERSION			  Number 0500
@CPU				  Text	 0101H
@CURSEG				  Text	 CODE
@FILENAME			  Text	 1840V4
@WORDSIZE			  Text	 2
A5700051COPR_IB			  Byte	 CODE:E000
ACTIVE_PAGE			  Byte	 DATA:0062
ACT_DISP_PAGE			  Near16 CODE:F230
ADDR_6845			  Word	 DATA:0063
ALT_INPUT			  Byte	 DATA:0019
ALT_KEY				  Number 0038
ALT_SHIFT			  Number 0008
ASCII_TBL			  Byte	 CODE:E412
B1				  Near16 CODE:EFF5
B2				  Near16 CODE:EFFB
B3				  Near16 CODE:F002
B4				  Near16 CODE:F017
B5				  Near16 CODE:F01F
B6				  Near16 CODE:F020
B7				  Near16 CODE:F02B
B8				  Near16 CODE:F033
B9				  Near16 CODE:F03D
BAD_ADDR_MARK			  Number 0002
BAD_CMD				  Number 0001
BAD_CRC				  Number 0010
BAD_DMA				  Number 0008
BAD_NEC				  Number 0020
BAD_SEEK			  Number 0040
BCT				  Near16 CODE:F859
BCT1				  Near16 CODE:F875
BCT2				  Near16 CODE:F877
BCT3				  Near16 CODE:F86C
BCT4				  Near16 CODE:F8B4
BEEP				  Near16 CODE:E5A9
BIOS_BREAK			  Byte	 DATA:0071
BOOT_LOCN			  Far16	 ABS0:7C00
BOOT_STRAP			  Near16 CODE:E6F7
BOOT_VEC			  Dword	 ABS0:0064
BUFFER_END			  Word	 DATA:0082
BUFFER_HEAD			  Word	 DATA:001A
BUFFER_START			  Word	 DATA:0080
BUFFER_TAIL			  Word	 DATA:001C
C1				  Word	 CODE:E016
C10				  Near16 CODE:E0BD
C11				  Near16 CODE:E0E5
C12				  Near16 CODE:E0F7
C13				  Near16 CODE:E108
C14				  Near16 CODE:E10E
C15				  Near16 CODE:E11C
C16				  Near16 CODE:E128
C17				  Near16 CODE:E132
C18				  Near16 CODE:E142
C19				  Near16 CODE:E18E
C21				  Near16 CODE:E19E
C22				  Near16 CODE:E1DC
C23				  Near16 CODE:E1E8
C25				  Near16 CODE:E1F6
C2A				  Near16 CODE:E02C
C2B				  Near16 CODE:E02F
C3				  Near16 CODE:E037
C3A				  Near16 CODE:E04F
C7X				  Near16 CODE:E066
C8				  Near16 CODE:E09A
C9				  Near16 CODE:E0B7
CA3				  Near16 CODE:E1F1
CAPS_KEY			  Number 0056
CAPS_SHIFT			  Number 0040
CAPS_STATE			  Number 0040
CAW				  Word	 CODE:E018
CHK_STAT_2			  Near16 CODE:EF0F
CMD_BLOCK			  Byte	 DATA:0042
CMD_PORT			  Number 0063
COD				  Number F000
CONTROL_BYTE			  Byte	 DATA:0076
CRLF				  Near16 CODE:FFCB
CRT_CHAR_GEN			  Byte	 CODE:FA6E
CRT_COLS			  Word	 DATA:004A
CRT_LEN				  Word	 DATA:004C
CRT_MODE			  Byte	 DATA:0049
CRT_MODE_SET			  Byte	 DATA:0065
CRT_PALLETTE			  Byte	 DATA:0066
CRT_START			  Word	 DATA:004E
CSI				  Word	 ABS0:04D0
CTL_KEY				  Number 001D
CTL_SHIFT			  Number 0004
CURSOR_MODE			  Word	 DATA:0060
CURSOR_POSN			  Word	 DATA:0050
D1				  Byte	 CODE:E200
D10				  Near16 CODE:E28F
D11				  Near16 CODE:E299
D12				  Near16 CODE:E2B5
D13				  Near16 CODE:E2BF
D14				  Near16 CODE:E2C9
D1L				  Number 000E
D2				  Byte	 CODE:E20E
D2L				  Number 000E
D3				  Near16 CODE:E23B
D4				  Near16 CODE:E258
D5				  Near16 CODE:E25A
D6				  Near16 CODE:E260
D7				  Near16 CODE:E268
D8				  Near16 CODE:E27A
D9				  Near16 CODE:E283
DAL				  Near16 CODE:E4E9
DAT				  Number 0040
DECIMAL_LOOP			  Near16 CODE:E653
DEL_KEY				  Number 0053
DISKETTE_IO			  Far16	 CODE:EC59
DISKETTE_PARM			  Dword	 ABS0:0078
DISKETTE_STATUS			  Byte	 DATA:0041
DISKW_STATUS			  Byte	 DATA:0074
DISK_BASE			  Byte	 CODE:EFC7
DISK_FORMAT			  Near16 CODE:ED1B
DISK_INT			  Far16	 CODE:EF57
DISK_POINTER			  Dword	 ABS0:0078
DISK_READ			  Near16 CODE:ED0E
DISK_RESET			  Near16 CODE:ECB9
DISK_STATUS			  Near16 CODE:ED0A
DISK_VECTOR			  Dword	 ABS0:0100
DISK_VERF			  Near16 CODE:ED17
DISK_WRITE			  Near16 CODE:ED41
DMA				  Number 0000
DMA08				  Number 0008
DMA_BOUNDARY			  Number 0009
DMA_SETUP			  Near16 CODE:EEC9
DUMMM_RETURN			  Near16 CODE:F98B
DUMMY_RETURN			  Near16 CODE:FF53
E1				  Byte	 CODE:E2CB
E10				  Near16 CODE:E35D
E11				  Near16 CODE:E37B
E12				  Near16 CODE:E37D
E13				  Near16 CODE:E37F
E14				  Near16 CODE:E388
E15				  Near16 CODE:E38A
E16				  Near16 CODE:E393
E17				  Near16 CODE:E39B
E18				  Near16 CODE:E3A1
E19				  Near16 CODE:E3A6
E190				  Near16 CODE:E613
E1A				  Near16 CODE:E2DB
E1L				  Number 0004
E20A				  Near16 CODE:E622
E20B				  Near16 CODE:E627
E20C				  Near16 CODE:E637
E21A				  Near16 CODE:E689
E22				  Near16 CODE:E3F4
E3				  Near16 CODE:E2F5
E300				  Byte	 CODE:E69F
E3A				  Near16 CODE:E300
E7				  Near16 CODE:E30E
E8				  Near16 CODE:E31E
E9				  Near16 CODE:E340
EOI				  Number 0020
EQUIPMENT			  Far16	 CODE:F84D
EQUIP_FLAG			  Word	 DATA:0010
EQ_FL				  Byte	 ABS0:0410
ERR01				  Near16 CODE:E0BB
ERR10				  Near16 CODE:FFBB
ERROR_BEEP			  Near16 CODE:E768
ERR_BEEP			  Near16 CODE:E580
ERR_WAIT			  Near16 CODE:E4E0
EXIT				  Near16 CODE:FFC5
EXT_PTR				  Dword	 ABS0:007C
F1				  Byte	 CODE:E406
F10				  Near16 CODE:E490
F11				  Near16 CODE:E4A5
F12				  Near16 CODE:E4A7
F13				  Near16 CODE:E4BD
F14				  Near16 CODE:E4C6
F15				  Near16 CODE:E4CC
F16				  Near16 CODE:E502
F17				  Near16 CODE:E516
F18				  Near16 CODE:E542
F19				  Near16 CODE:E559
F19A				  Near16 CODE:F96D
F19B				  Near16 CODE:E55C
F1L				  Number 0004
F2				  Byte	 CODE:E40A
F20				  Near16 CODE:E570
F20A				  Near16 CODE:F980
F20B				  Near16 CODE:E574
F21				  Near16 CODE:E57A
F23				  Near16 CODE:E57D
F2L				  Number 0003
F3				  Byte	 CODE:E40D
F39				  Byte	 CODE:E6A6
F3L				  Number 0003
F4				  Word	 CODE:E410
F4E				  Word	 CODE:E412
F5				  Near16 CODE:E43F
F6				  Near16 CODE:E457
F7				  Near16 CODE:E460
F7A				  Near16 CODE:E470
FIND_POSITION			  Near16 CODE:F3A7
G1				  Near16 CODE:E58C
G10				  Near16 CODE:E5EC
G12				  Near16 CODE:E5FC
G2				  Near16 CODE:E591
G3				  Near16 CODE:E597
G4				  Near16 CODE:E59C
G5				  Near16 CODE:E5A2
G6				  Near16 CODE:E5A4
G7				  Near16 CODE:E5C0
G8				  Near16 CODE:E5D2
G9				  Near16 CODE:E5E5
GET_PARM			  Near16 CODE:EE51
GRAPHICS_DOWN			  Near16 CODE:F4F7
GRAPHICS_READ			  Near16 CODE:F633
GRAPHICS_UP			  Near16 CODE:F49E
GRAPHICS_WRITE			  Near16 CODE:F581
GRAPH_POSN			  Near16 CODE:F70F
H1				  Near16 CODE:E707
H2				  Near16 CODE:E722
H3				  Near16 CODE:E727
H4				  Near16 CODE:E72A
HDISK_INT			  Dword	 ABS0:0034
HD_ERROR			  Byte	 DATA:0042
HF_NUM				  Byte	 DATA:0075
HF_TBL_VEC			  Dword	 ABS0:0104
HOLD_STATE			  Number 0008
IDNPOL				  Word	 DATA:0090
INF_KEY				  Number 0059
INS_KEY				  Number 0052
INS_SHIFT			  Number 0080
INS_STATE			  Number 0080
INT15H				  Near16 CODE:F92D
INT5_PTR			  Word	 ABS0:0014
INTA00				  Number 0020
INTA01				  Number 0021
INT_ADDR			  Word	 ABS0:0020
INT_FLAG			  Number 0080
INT_PTR				  Dword	 ABS0:0020
INV_KEY_L			  Number 0058
INV_KEY_R			  Number 005A
INV_SHIFT			  Number 0004
IO_RAM_SIZE			  Word	 DATA:0015
IO_ROM_INIT			  Word	 DATA:0067
IO_ROM_SEG			  Word	 DATA:0069
J1				  Near16 CODE:EC87
J10				  Near16 CODE:ED29
J11				  Near16 CODE:ED57
J12				  Near16 CODE:EDA0
J13				  Near16 CODE:EDA4
J14				  Near16 CODE:EDAA
J15				  Near16 CODE:EDD4
J16				  Near16 CODE:EDF9
J17				  Near16 CODE:EE00
J18				  Near16 CODE:EE3D
J19				  Near16 CODE:EE3F
J2				  Near16 CODE:ECAB
J20				  Near16 CODE:EE46
J21				  Near16 CODE:EE47
J22				  Near16 CODE:EE4B
J23				  Near16 CODE:E736
J24				  Near16 CODE:E73D
J25				  Near16 CODE:E747
J26				  Near16 CODE:E749
J27				  Near16 CODE:E752
J28				  Near16 CODE:EE95
J29				  Near16 CODE:EEB9
J3				  Near16 CODE:ECB3
J30				  Near16 CODE:EEC0
J300				  Near16 CODE:EEAB
J31				  Near16 CODE:EEC6
J32				  Near16 CODE:EEC8
J33				  Near16 CODE:EEDE
J34				  Near16 CODE:EF28
J35				  Near16 CODE:EF29
J36				  Near16 CODE:EF37
J37				  Near16 CODE:EF4A
J38				  Near16 CODE:EF74
J39				  Near16 CODE:EF79
J4				  Near16 CODE:ECD2
J40				  Near16 CODE:EF85
J40A				  Near16 CODE:EF8A
J41				  Near16 CODE:EF8F
J42				  Near16 CODE:EF96
J43				  Near16 CODE:EF9E
J44				  Near16 CODE:EFAC
J45				  Near16 CODE:EFC4
J5				  Near16 CODE:ECD4
J6				  Near16 CODE:ECD6
J7				  Near16 CODE:ECF8
J8				  Near16 CODE:ED09
J9				  Near16 CODE:ED10
K1				  Near16 CODE:E845
K10				  Byte	 CODE:E8DC
K11				  Byte	 CODE:E916
K12				  Byte	 CODE:E950
K13				  Byte	 CODE:E95A
K14				  Byte	 CODE:E964
K15				  Byte	 CODE:E971
K16				  Near16 CODE:E9AF
K17				  Near16 CODE:E9D9
K18				  Near16 CODE:EA4B
K19				  Near16 CODE:EA60
K2				  Near16 CODE:E85E
K20				  Near16 CODE:EA6E
K21				  Near16 CODE:EA74
K22				  Near16 CODE:EA7B
K23				  Near16 CODE:EA9F
K24				  Near16 CODE:EAC3
K25				  Near16 CODE:EACC
K26				  Near16 CODE:EAEB
K26A				  Near16 CODE:EA48
K27				  Near16 CODE:EAF0
K28				  Near16 CODE:EAFF
K29				  Near16 CODE:EB09
K3				  Near16 CODE:E86F
K30				  Byte	 CODE:F905
K300				  Near16 CODE:EA1D
K301				  Near16 CODE:EA22
K302				  Near16 CODE:EA37
K303				  Near16 CODE:EA93
K304				  Near16 CODE:EAAF
K307				  Near16 CODE:EAF9
K31				  Near16 CODE:EB1F
K32				  Near16 CODE:EB28
K33				  Near16 CODE:EB44
K34				  Near16 CODE:EB55
K35				  Near16 CODE:EB65
K36				  Near16 CODE:EB69
K37				  Near16 CODE:EB6B
K38				  Near16 CODE:EB75
K39				  Near16 CODE:EB98
K4				  Near16 CODE:E75B
K40				  Near16 CODE:EBB3
K400				  Near16 CODE:EA06
K401				  Near16 CODE:EA0E
K406				  Near16 CODE:E9C2
K406B				  Near16 CODE:EADB
K407				  Near16 CODE:E9D6
K41				  Near16 CODE:EBBD
K42				  Near16 CODE:EBC7
K43				  Near16 CODE:EBD1
K44				  Near16 CODE:EBD7
K45				  Near16 CODE:EBEF
K46				  Near16 CODE:EBFC
K47				  Near16 CODE:EC06
K48				  Near16 CODE:EC19
K49				  Near16 CODE:EC27
K5				  Near16 CODE:E767
K50				  Near16 CODE:EC37
K51				  Near16 CODE:EC3D
K52				  Near16 CODE:EC43
K53				  Near16 CODE:EC4A
K54				  Near16 CODE:E78D
K54A				  Near16 CODE:EBEC
K55				  Near16 CODE:E796
K56				  Near16 CODE:E7A0
K57				  Near16 CODE:E7A4
K58				  Near16 CODE:E7AD
K59				  Near16 CODE:E7D2
K6				  Byte	 CODE:E875
K60				  Near16 CODE:E7D5
K61				  Near16 CODE:E7DF
K62				  Near16 CODE:E7FC
K63				  Near16 CODE:E802
K64				  Near16 CODE:E804
K65				  Near16 CODE:E771
K66				  Near16 CODE:E778
K67				  Near16 CODE:E781
K6L				  Number 000C
K7				  Byte	 CODE:E881
K8				  Byte	 CODE:E889
K80				  Near16 CODE:F94B
K81				  Near16 CODE:F948
K88				  Near16 CODE:E7BE
K89				  Near16 CODE:F933
K89A				  Near16 CODE:F961
K89B				  Near16 CODE:F95C
K9				  Byte	 CODE:E8C3
K98				  Near16 CODE:EC13
K99				  Near16 CODE:E7F7
KBDINT				  Number 0002
KBD_IN				  Number 0060
KBD_RESET			  Near16 CODE:E5CB
KB_BUFFER			  Word	 DATA:001E
KB_BUFFER_END			  Word	 DATA:003E
KB_CTL				  Number 0061
KB_DAT				  Number 0060
KB_FLAG				  Byte	 DATA:0017
KB_FLAG_1			  Byte	 DATA:0018
KB_INT				  Far16	 CODE:E987
KB_OK				  Near16 CODE:E66C
KEYBOARD_IO			  Far16	 CODE:E82E
LAST_VAL			  Byte	 DATA:006B
LAT				  Number 0002
LAT_KEY				  Number 0057
LAT_SHIFT			  Number 0001
LEFT_KEY			  Number 0054
LEFT_SHIFT			  Number 0002
M1				  Word	 CODE:F045
M10				  Near16 CODE:F144
M11				  Near16 CODE:F16F
M12				  Near16 CODE:F172
M13				  Near16 CODE:F175
M14				  Near16 CODE:F1C3
M15				  Near16 CODE:F1CA
M16				  Near16 CODE:F1DA
M17				  Near16 CODE:F207
M18				  Near16 CODE:F209
M19				  Near16 CODE:F269
M1L				  Number 0020
M2				  Near16 CODE:F080
M20				  Near16 CODE:F270
M3				  Near16 CODE:F098
M4				  Number 0010
M5				  Word	 CODE:F0E4
M6				  Byte	 CODE:F0EC
M7				  Byte	 CODE:F0F4
M8				  Near16 CODE:F10D
M9				  Near16 CODE:F141
MAX_PERIOD			  Number 0540
MEMORY_SIZE			  Word	 DATA:0013
MEMORY_SIZE_DETERMINE		  Far16	 CODE:F841
MEM_SIZ				  Word	 ABS0:0413
MFG_TST				  Byte	 DATA:0012
MIN_PERIOD			  Number 0410
MOTOR_COUNT			  Byte	 DATA:0040
MOTOR_STATUS			  Byte	 DATA:003F
MOTOR_WAIT			  Number 0025
N1				  Near16 CODE:F2AB
N10				  Near16 CODE:F331
N11				  Near16 CODE:F33A
N12				  Near16 CODE:F351
N13				  Near16 CODE:F35F
N14				  Near16 CODE:F36A
N15				  Near16 CODE:F36D
N16				  Near16 CODE:F379
N2				  Near16 CODE:F2B9
N3				  Near16 CODE:F2C4
N4				  Near16 CODE:F2C7
N5				  Near16 CODE:F2D0
N6				  Near16 CODE:F2E3
N7				  Near16 CODE:F2E6
N8				  Near16 CODE:F2FD
N9				  Near16 CODE:F30A
NEC_OP				  Near16 CODE:EE64
NEC_OUTPUT			  Near16 CODE:E72F
NEC_STATUS			  Byte	 DATA:0042
NMI_INT				  Near16 CODE:E2A6
NMI_PTR				  Word	 ABS0:0008
NUM_KEY				  Number 0045
NUM_SHIFT			  Number 0020
NUM_STATE			  Number 0020
NUM_TRANS			  Near16 CODE:EFB0
ORG_VECTOR			  Dword	 ABS0:004C
OSH				  Near16 CODE:E3C9
P1				  Near16 CODE:F38A
P10				  Near16 CODE:F403
P11				  Near16 CODE:F40C
P12				  Near16 CODE:F413
P13				  Near16 CODE:F419
P2				  Near16 CODE:F398
P3				  Near16 CODE:F39E
P4				  Near16 CODE:F3B7
P5				  Near16 CODE:F3BD
P6				  Near16 CODE:F3D0
P7				  Near16 CODE:F3DB
P8				  Near16 CODE:F3E2
P9				  Near16 CODE:F3E8
PARM_PTR			  Dword	 ABS0:0074
PORT_A				  Number 0060
PORT_B				  Number 0061
PORT_C				  Number 0062
PORT_OFF			  Byte	 DATA:0077
POSITION			  Near16 CODE:F28B
POST				  Near16 CODE:FFF0
PRI10				  Near16 CODE:FF7F
PRI15				  Near16 CODE:FF8D
PRINTER_BASE			  Word	 DATA:0008
PRINTER_IO			  Far16	 CODE:EFD2
PRINT_SCREEN			  Far16	 CODE:FF54
PRT_DEC_LOOP			  Near16 CODE:E660
PRT_HEX				  Near16 CODE:E698
PRT_SIZ				  Near16 CODE:E64C
P_MSG				  Near16 CODE:E5F5
R1				  Near16 CODE:F450
R10				  Near16 CODE:F4E5
R11				  Near16 CODE:F4F3
R12				  Near16 CODE:F517
R13				  Near16 CODE:F533
R14				  Near16 CODE:F542
R15				  Near16 CODE:F544
R16				  Near16 CODE:F553
R17				  Near16 CODE:F557
R18				  Near16 CODE:F570
R2				  Near16 CODE:F457
R3				  Near16 CODE:F45B
R4				  Near16 CODE:F46E
R5				  Near16 CODE:F486
R6				  Near16 CODE:F490
R7				  Near16 CODE:F4BC
R8				  Near16 CODE:F4D4
R9				  Near16 CODE:F4E3
READ_AC_CURRENT			  Near16 CODE:F37D
READ_CURSOR			  Near16 CODE:F21A
READ_DOT			  Near16 CODE:F427
READ_LPEN			  Near16 CODE:F7A9
RECORD_NOT_FND			  Number 0004
REGEN				  Byte	 VIDEO_RAM:0000
REGENW				  Word	 VIDEO_RAM:0000
RESET				  Near16 CODE:E067
RESET_FLAG			  Word	 DATA:0072
RESULTS				  Near16 CODE:EF6B
RES_FL				  Word	 ABS0:0472
RIGHT_KEY			  Number 0055
RIGHT_SHIFT			  Number 0001
ROS				  Near16 CODE:E0E7
RS232_BASE			  Word	 DATA:0000
RS232_IO			  Near16 CODE:F929
RUST				  Byte	 CODE:F8CB
RUST2				  Byte	 CODE:E6BD
RUS_KEY				  Number 005B
RW_OPN				  Near16 CODE:ED4D
S1				  Near16 CODE:F594
S10				  Near16 CODE:F5FC
S11				  Near16 CODE:F618
S12				  Near16 CODE:F648
S13				  Near16 CODE:F660
S14				  Near16 CODE:F664
S15				  Near16 CODE:F676
S16				  Near16 CODE:F683
S17				  Near16 CODE:F688
S18				  Near16 CODE:F6B1
S19				  Near16 CODE:F6B7
S2				  Near16 CODE:F5A3
S20				  Near16 CODE:F6C0
S21				  Near16 CODE:F6CC
S22				  Near16 CODE:F6D5
S23				  Near16 CODE:F6EF
S24				  Near16 CODE:F6F9
S25				  Near16 CODE:F6FF
S26				  Near16 CODE:F70C
S3				  Near16 CODE:F5B3
S4				  Near16 CODE:F5B7
S5				  Near16 CODE:F5BF
S6				  Near16 CODE:F5D3
S7				  Near16 CODE:F5DF
S8				  Near16 CODE:F5E6
S9				  Near16 CODE:F5EA
SCROLL_DOWN			  Near16 CODE:F341
SCROLL_KEY			  Number 0046
SCROLL_POSITION			  Near16 CODE:F2EA
SCROLL_SHIFT			  Number 0010
SCROLL_STATE			  Number 0010
SCROLL_UP			  Near16 CODE:F29C
SEEK				  Near16 CODE:EE67
SEEK_STATUS			  Byte	 DATA:003E
SET_COLOR			  Near16 CODE:F254
SET_CPOS			  Near16 CODE:F1F0
SET_CTYPE			  Near16 CODE:F1CF
SET_MODE			  Near16 CODE:F0FC
SKIP_SIZE_DET			  Near16 CODE:E3C0
SP_TEST				  Near16 CODE:E5D8
STA				  Number 0030
START				  Near16 CODE:E067
STATUS_BYTE			  Byte	 XXDATA:0000
STAT_OFFSET			  Byte	 DATA:007C
STGTST				  Near16 CODE:E01A
STGTST_CNT			  Near16 CODE:E01D
STG_LOC0			  Byte	 ABS0:0000
T1				  Near16 CODE:FE7F
T2				  Near16 CODE:FE82
T3				  Near16 CODE:FE95
T4				  Near16 CODE:FEB8
T5				  Near16 CODE:FED8
T6				  Near16 CODE:FEE9
TABL				  Word	 DATA:00E0
TABL1				  Word	 ABS0:04E0
TIMER				  Number 0040
TIMERO				  Number 0040
TIMER_HIGH			  Word	 DATA:006E
TIMER_INT			  Far16	 CODE:FEA5
TIMER_LOW			  Word	 DATA:006C
TIMER_OFL			  Byte	 DATA:0070
TIME_OF_DAY			  Far16	 CODE:FE6E
TIME_OUT			  Number 0080
TIM_CTL				  Number 0043
TMINT				  Number 0001
TMP_TOS				  Word	 DATA:3FF0
TOS				  Word	 STAC:0100
TST12				  Near16 CODE:E422
TST14				  Near16 CODE:E47D
TST6				  Near16 CODE:E21C
TST8				  Near16 CODE:E2CF
U1				  Near16 CODE:F753
U10				  Near16 CODE:F793
U11				  Near16 CODE:F79A
U2				  Near16 CODE:F766
U3				  Near16 CODE:F76C
U4				  Near16 CODE:F77A
U5				  Near16 CODE:F77C
U6				  Near16 CODE:F780
U7				  Near16 CODE:F782
U8				  Near16 CODE:F786
U9				  Near16 CODE:F78F
V1				  Byte	 CODE:F7A1
V2				  Near16 CODE:F7E8
V3				  Near16 CODE:F80F
V4				  Near16 CODE:F81B
V5				  Near16 CODE:F82D
V6				  Near16 CODE:F82F
V7				  Near16 CODE:F839
VECTOR_TABLE			  Word	 CODE:FEF3
VIDEO_INT			  Word	 ABS0:0040
VIDEO_IO			  Near16 CODE:F065
VIDEO_PARMS			  Byte	 CODE:F0A4
VIDEO_RA			  Number B800
VIDEO_RETURN			  Near16 CODE:F1C7
VIDEO_STATE			  Near16 CODE:F27A
WAIT_INT			  Near16 CODE:EF30
WRITE_AC_CURRENT		  Near16 CODE:F3C3
WRITE_C_CURRENT			  Near16 CODE:F3F6
WRITE_DOT			  Near16 CODE:F438
WRITE_PROTECT			  Number 0003
WRITE_TTY			  Near16 CODE:F722
WRITE_TTY2			  Near16 CODE:F966
X1				  Near16 CODE:ED8B
X2				  Near16 CODE:ED87
XLAT_PRINT_COD			  Near16 CODE:E3F7
XXDAT				  Number 0050
ZB				  Byte	 ABS0:0000
ZW				  Word	 ABS0:0000

Groups & Segments		  Bit Size Align  Combine Class

ABS0				  16  7C00 Para	  none
CODE				  16  00010000 Para   none
DATA				  16  3FF0 Para	  none
STAC				  16  0100 Para	  Stack
VIDEO_RAM			  16  4000 Para	  none
XXDATA				  16  0001 Para	  none

